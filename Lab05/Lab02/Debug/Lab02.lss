
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003114  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20000000  00403114  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000224  2000044c  00403560  0002044c  2**2
                  ALLOC
  3 .stack        00003000  20000670  00403784  0002044c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001781e  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000338c  00000000  00000000  00037cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007428  00000000  00000000  0003b07d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000870  00000000  00000000  000424a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a90  00000000  00000000  00042d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018f90  00000000  00000000  000437a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b97d  00000000  00000000  0005c735  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006bb27  00000000  00000000  000680b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016f4  00000000  00000000  000d3bdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 36 00 20 a5 24 40 00 a1 24 40 00 a1 24 40 00     p6. .$@..$@..$@.
  400010:	a1 24 40 00 a1 24 40 00 a1 24 40 00 00 00 00 00     .$@..$@..$@.....
	...
  40002c:	c1 02 40 00 a1 24 40 00 00 00 00 00 61 03 40 00     ..@..$@.....a.@.
  40003c:	c5 03 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     ..@..$@..$@..$@.
  40004c:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  40005c:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  40006c:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  40007c:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  40008c:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  40009c:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  4000ac:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  4000bc:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  4000cc:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  4000dc:	a1 24 40 00 a1 24 40 00 a1 24 40 00 a1 24 40 00     .$@..$@..$@..$@.
  4000ec:	a1 24 40 00 a1 24 40 00 a1 24 40 00                 .$@..$@..$@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000044c 	.word	0x2000044c
  400114:	00000000 	.word	0x00000000
  400118:	00403114 	.word	0x00403114

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00403114 	.word	0x00403114
  400158:	20000450 	.word	0x20000450
  40015c:	00403114 	.word	0x00403114
  400160:	00000000 	.word	0x00000000

00400164 <readButton>:
	// 0 == button NOT pressed
	// 1 == button pressed
	uint8_t butState;
	
	// capturing the inverted pin level (buttons are pulled-up)
	butState = !ioport_get_pin_level(decSW[uiButNum]);
  400164:	4b09      	ldr	r3, [pc, #36]	; (40018c <readButton+0x28>)
  400166:	5c1a      	ldrb	r2, [r3, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400168:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40016a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40016e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400172:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400174:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400176:	f002 021f 	and.w	r2, r2, #31
  40017a:	2301      	movs	r3, #1
  40017c:	fa03 f202 	lsl.w	r2, r3, r2
  400180:	420a      	tst	r2, r1

	return butState;
}
  400182:	bf0c      	ite	eq
  400184:	4618      	moveq	r0, r3
  400186:	2000      	movne	r0, #0
  400188:	4770      	bx	lr
  40018a:	bf00      	nop
  40018c:	20000000 	.word	0x20000000

00400190 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400190:	f100 0308 	add.w	r3, r0, #8
  400194:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
  400196:	f04f 32ff 	mov.w	r2, #4294967295
  40019a:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40019c:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40019e:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4001a0:	2300      	movs	r3, #0
  4001a2:	6003      	str	r3, [r0, #0]
  4001a4:	4770      	bx	lr

004001a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
  4001a6:	2300      	movs	r3, #0
  4001a8:	6103      	str	r3, [r0, #16]
  4001aa:	4770      	bx	lr

004001ac <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
  4001ac:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4001ae:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
  4001b0:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001b4:	d002      	beq.n	4001bc <vListInsert+0x10>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001b6:	f100 0208 	add.w	r2, r0, #8
  4001ba:	e002      	b.n	4001c2 <vListInsert+0x16>
        pxIterator = pxList->xListEnd.pxPrevious;
  4001bc:	6902      	ldr	r2, [r0, #16]
  4001be:	e004      	b.n	4001ca <vListInsert+0x1e>
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001c0:	461a      	mov	r2, r3
  4001c2:	6853      	ldr	r3, [r2, #4]
  4001c4:	681c      	ldr	r4, [r3, #0]
  4001c6:	42a5      	cmp	r5, r4
  4001c8:	d2fa      	bcs.n	4001c0 <vListInsert+0x14>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
  4001ca:	6853      	ldr	r3, [r2, #4]
  4001cc:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4001ce:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
  4001d0:	608a      	str	r2, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
  4001d2:	6051      	str	r1, [r2, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
  4001d4:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  4001d6:	6803      	ldr	r3, [r0, #0]
  4001d8:	3301      	adds	r3, #1
  4001da:	6003      	str	r3, [r0, #0]
}
  4001dc:	bc30      	pop	{r4, r5}
  4001de:	4770      	bx	lr

004001e0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
  4001e0:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4001e2:	6842      	ldr	r2, [r0, #4]
  4001e4:	6881      	ldr	r1, [r0, #8]
  4001e6:	6091      	str	r1, [r2, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4001e8:	6882      	ldr	r2, [r0, #8]
  4001ea:	6841      	ldr	r1, [r0, #4]
  4001ec:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
  4001ee:	685a      	ldr	r2, [r3, #4]
  4001f0:	4290      	cmp	r0, r2
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
  4001f2:	bf04      	itt	eq
  4001f4:	6882      	ldreq	r2, [r0, #8]
  4001f6:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
  4001f8:	2200      	movs	r2, #0
  4001fa:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
  4001fc:	681a      	ldr	r2, [r3, #0]
  4001fe:	3a01      	subs	r2, #1
  400200:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
  400202:	6818      	ldr	r0, [r3, #0]
}
  400204:	4770      	bx	lr
	...

00400208 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
  400208:	4808      	ldr	r0, [pc, #32]	; (40022c <prvPortStartFirstTask+0x24>)
  40020a:	6800      	ldr	r0, [r0, #0]
  40020c:	6800      	ldr	r0, [r0, #0]
  40020e:	f380 8808 	msr	MSP, r0
  400212:	f04f 0000 	mov.w	r0, #0
  400216:	f380 8814 	msr	CONTROL, r0
  40021a:	b662      	cpsie	i
  40021c:	b661      	cpsie	f
  40021e:	f3bf 8f4f 	dsb	sy
  400222:	f3bf 8f6f 	isb	sy
  400226:	df00      	svc	0
  400228:	bf00      	nop
  40022a:	0000      	.short	0x0000
  40022c:	e000ed08 	.word	0xe000ed08

00400230 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
  400230:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400240 <vPortEnableVFP+0x10>
  400234:	6801      	ldr	r1, [r0, #0]
  400236:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40023a:	6001      	str	r1, [r0, #0]
  40023c:	4770      	bx	lr
  40023e:	0000      	.short	0x0000
  400240:	e000ed88 	.word	0xe000ed88

00400244 <prvTaskExitError>:
{
  400244:	b500      	push	{lr}
  400246:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0;
  400248:	2300      	movs	r3, #0
  40024a:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
  40024c:	4b0b      	ldr	r3, [pc, #44]	; (40027c <prvTaskExitError+0x38>)
  40024e:	681b      	ldr	r3, [r3, #0]
  400250:	f1b3 3fff 	cmp.w	r3, #4294967295
  400254:	d003      	beq.n	40025e <prvTaskExitError+0x1a>
  400256:	21e7      	movs	r1, #231	; 0xe7
  400258:	4809      	ldr	r0, [pc, #36]	; (400280 <prvTaskExitError+0x3c>)
  40025a:	4b0a      	ldr	r3, [pc, #40]	; (400284 <prvTaskExitError+0x40>)
  40025c:	4798      	blx	r3

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
  40025e:	f04f 0350 	mov.w	r3, #80	; 0x50
  400262:	f383 8811 	msr	BASEPRI, r3
  400266:	f3bf 8f6f 	isb	sy
  40026a:	f3bf 8f4f 	dsb	sy
    while( ulDummy == 0 )
  40026e:	9b01      	ldr	r3, [sp, #4]
  400270:	2b00      	cmp	r3, #0
  400272:	d0fc      	beq.n	40026e <prvTaskExitError+0x2a>
}
  400274:	b003      	add	sp, #12
  400276:	f85d fb04 	ldr.w	pc, [sp], #4
  40027a:	bf00      	nop
  40027c:	20000004 	.word	0x20000004
  400280:	00402dbc 	.word	0x00402dbc
  400284:	0040288d 	.word	0x0040288d

00400288 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
  400288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40028c:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
  400290:	f021 0101 	bic.w	r1, r1, #1
  400294:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
  400298:	4b05      	ldr	r3, [pc, #20]	; (4002b0 <pxPortInitialiseStack+0x28>)
  40029a:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
  40029e:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
  4002a2:	f06f 0302 	mvn.w	r3, #2
  4002a6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4002aa:	3844      	subs	r0, #68	; 0x44
  4002ac:	4770      	bx	lr
  4002ae:	bf00      	nop
  4002b0:	00400245 	.word	0x00400245
	...

004002c0 <SVC_Handler>:
    __asm volatile (
  4002c0:	4b07      	ldr	r3, [pc, #28]	; (4002e0 <pxCurrentTCBConst2>)
  4002c2:	6819      	ldr	r1, [r3, #0]
  4002c4:	6808      	ldr	r0, [r1, #0]
  4002c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002ca:	f380 8809 	msr	PSP, r0
  4002ce:	f3bf 8f6f 	isb	sy
  4002d2:	f04f 0000 	mov.w	r0, #0
  4002d6:	f380 8811 	msr	BASEPRI, r0
  4002da:	4770      	bx	lr
  4002dc:	f3af 8000 	nop.w

004002e0 <pxCurrentTCBConst2>:
  4002e0:	20000490 	.word	0x20000490

004002e4 <vPortEnterCritical>:
{
  4002e4:	b508      	push	{r3, lr}
  4002e6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4002ea:	f383 8811 	msr	BASEPRI, r3
  4002ee:	f3bf 8f6f 	isb	sy
  4002f2:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
  4002f6:	4a09      	ldr	r2, [pc, #36]	; (40031c <vPortEnterCritical+0x38>)
  4002f8:	6813      	ldr	r3, [r2, #0]
  4002fa:	3301      	adds	r3, #1
  4002fc:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
  4002fe:	2b01      	cmp	r3, #1
  400300:	d000      	beq.n	400304 <vPortEnterCritical+0x20>
  400302:	bd08      	pop	{r3, pc}
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400304:	4b06      	ldr	r3, [pc, #24]	; (400320 <vPortEnterCritical+0x3c>)
  400306:	681b      	ldr	r3, [r3, #0]
  400308:	f013 0fff 	tst.w	r3, #255	; 0xff
  40030c:	d0f9      	beq.n	400302 <vPortEnterCritical+0x1e>
  40030e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  400312:	4804      	ldr	r0, [pc, #16]	; (400324 <vPortEnterCritical+0x40>)
  400314:	4b04      	ldr	r3, [pc, #16]	; (400328 <vPortEnterCritical+0x44>)
  400316:	4798      	blx	r3
}
  400318:	e7f3      	b.n	400302 <vPortEnterCritical+0x1e>
  40031a:	bf00      	nop
  40031c:	20000004 	.word	0x20000004
  400320:	e000ed04 	.word	0xe000ed04
  400324:	00402dbc 	.word	0x00402dbc
  400328:	0040288d 	.word	0x0040288d

0040032c <vPortExitCritical>:
{
  40032c:	b508      	push	{r3, lr}
    configASSERT( uxCriticalNesting );
  40032e:	4b08      	ldr	r3, [pc, #32]	; (400350 <vPortExitCritical+0x24>)
  400330:	681b      	ldr	r3, [r3, #0]
  400332:	b13b      	cbz	r3, 400344 <vPortExitCritical+0x18>
    uxCriticalNesting--;
  400334:	4a06      	ldr	r2, [pc, #24]	; (400350 <vPortExitCritical+0x24>)
  400336:	6813      	ldr	r3, [r2, #0]
  400338:	3b01      	subs	r3, #1
  40033a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
  40033c:	b90b      	cbnz	r3, 400342 <vPortExitCritical+0x16>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
  40033e:	f383 8811 	msr	BASEPRI, r3
  400342:	bd08      	pop	{r3, pc}
    configASSERT( uxCriticalNesting );
  400344:	f240 11ad 	movw	r1, #429	; 0x1ad
  400348:	4802      	ldr	r0, [pc, #8]	; (400354 <vPortExitCritical+0x28>)
  40034a:	4b03      	ldr	r3, [pc, #12]	; (400358 <vPortExitCritical+0x2c>)
  40034c:	4798      	blx	r3
  40034e:	e7f1      	b.n	400334 <vPortExitCritical+0x8>
  400350:	20000004 	.word	0x20000004
  400354:	00402dbc 	.word	0x00402dbc
  400358:	0040288d 	.word	0x0040288d
  40035c:	00000000 	.word	0x00000000

00400360 <PendSV_Handler>:
    __asm volatile
  400360:	f3ef 8009 	mrs	r0, PSP
  400364:	f3bf 8f6f 	isb	sy
  400368:	4b15      	ldr	r3, [pc, #84]	; (4003c0 <pxCurrentTCBConst>)
  40036a:	681a      	ldr	r2, [r3, #0]
  40036c:	f01e 0f10 	tst.w	lr, #16
  400370:	bf08      	it	eq
  400372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40037a:	6010      	str	r0, [r2, #0]
  40037c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400380:	f04f 0050 	mov.w	r0, #80	; 0x50
  400384:	f380 8811 	msr	BASEPRI, r0
  400388:	f3bf 8f4f 	dsb	sy
  40038c:	f3bf 8f6f 	isb	sy
  400390:	f001 f99a 	bl	4016c8 <vTaskSwitchContext>
  400394:	f04f 0000 	mov.w	r0, #0
  400398:	f380 8811 	msr	BASEPRI, r0
  40039c:	bc09      	pop	{r0, r3}
  40039e:	6819      	ldr	r1, [r3, #0]
  4003a0:	6808      	ldr	r0, [r1, #0]
  4003a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003a6:	f01e 0f10 	tst.w	lr, #16
  4003aa:	bf08      	it	eq
  4003ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4003b0:	f380 8809 	msr	PSP, r0
  4003b4:	f3bf 8f6f 	isb	sy
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop
  4003bc:	f3af 8000 	nop.w

004003c0 <pxCurrentTCBConst>:
  4003c0:	20000490 	.word	0x20000490

004003c4 <SysTick_Handler>:
{
  4003c4:	b508      	push	{r3, lr}
        __asm volatile
  4003c6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4003ca:	f383 8811 	msr	BASEPRI, r3
  4003ce:	f3bf 8f6f 	isb	sy
  4003d2:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
  4003d6:	4b05      	ldr	r3, [pc, #20]	; (4003ec <SysTick_Handler+0x28>)
  4003d8:	4798      	blx	r3
  4003da:	b118      	cbz	r0, 4003e4 <SysTick_Handler+0x20>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4003dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003e0:	4b03      	ldr	r3, [pc, #12]	; (4003f0 <SysTick_Handler+0x2c>)
  4003e2:	601a      	str	r2, [r3, #0]
        __asm volatile
  4003e4:	2300      	movs	r3, #0
  4003e6:	f383 8811 	msr	BASEPRI, r3
  4003ea:	bd08      	pop	{r3, pc}
  4003ec:	00401381 	.word	0x00401381
  4003f0:	e000ed04 	.word	0xe000ed04

004003f4 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <vPortSetupTimerInterrupt+0x24>)
  4003f6:	2300      	movs	r3, #0
  4003f8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4003fa:	4908      	ldr	r1, [pc, #32]	; (40041c <vPortSetupTimerInterrupt+0x28>)
  4003fc:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4003fe:	4b08      	ldr	r3, [pc, #32]	; (400420 <vPortSetupTimerInterrupt+0x2c>)
  400400:	681b      	ldr	r3, [r3, #0]
  400402:	4908      	ldr	r1, [pc, #32]	; (400424 <vPortSetupTimerInterrupt+0x30>)
  400404:	fba1 1303 	umull	r1, r3, r1, r3
  400408:	099b      	lsrs	r3, r3, #6
  40040a:	3b01      	subs	r3, #1
  40040c:	4906      	ldr	r1, [pc, #24]	; (400428 <vPortSetupTimerInterrupt+0x34>)
  40040e:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400410:	2307      	movs	r3, #7
  400412:	6013      	str	r3, [r2, #0]
  400414:	4770      	bx	lr
  400416:	bf00      	nop
  400418:	e000e010 	.word	0xe000e010
  40041c:	e000e018 	.word	0xe000e018
  400420:	20000018 	.word	0x20000018
  400424:	10624dd3 	.word	0x10624dd3
  400428:	e000e014 	.word	0xe000e014

0040042c <xPortStartScheduler>:
{
  40042c:	b510      	push	{r4, lr}
  40042e:	b082      	sub	sp, #8
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400430:	4b36      	ldr	r3, [pc, #216]	; (40050c <xPortStartScheduler+0xe0>)
  400432:	681a      	ldr	r2, [r3, #0]
  400434:	4b36      	ldr	r3, [pc, #216]	; (400510 <xPortStartScheduler+0xe4>)
  400436:	429a      	cmp	r2, r3
  400438:	d01e      	beq.n	400478 <xPortStartScheduler+0x4c>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  40043a:	4b34      	ldr	r3, [pc, #208]	; (40050c <xPortStartScheduler+0xe0>)
  40043c:	681a      	ldr	r2, [r3, #0]
  40043e:	4b35      	ldr	r3, [pc, #212]	; (400514 <xPortStartScheduler+0xe8>)
  400440:	429a      	cmp	r2, r3
  400442:	d01f      	beq.n	400484 <xPortStartScheduler+0x58>
            ulOriginalPriority = *pucFirstUserPriorityRegister;
  400444:	4b34      	ldr	r3, [pc, #208]	; (400518 <xPortStartScheduler+0xec>)
  400446:	781a      	ldrb	r2, [r3, #0]
  400448:	b2d2      	uxtb	r2, r2
  40044a:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40044c:	22ff      	movs	r2, #255	; 0xff
  40044e:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400450:	781b      	ldrb	r3, [r3, #0]
  400452:	b2db      	uxtb	r3, r3
  400454:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400458:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40045c:	f003 0350 	and.w	r3, r3, #80	; 0x50
  400460:	4a2e      	ldr	r2, [pc, #184]	; (40051c <xPortStartScheduler+0xf0>)
  400462:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400464:	2207      	movs	r2, #7
  400466:	4b2e      	ldr	r3, [pc, #184]	; (400520 <xPortStartScheduler+0xf4>)
  400468:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40046a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40046e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400472:	d01e      	beq.n	4004b2 <xPortStartScheduler+0x86>
  400474:	2206      	movs	r2, #6
  400476:	e00c      	b.n	400492 <xPortStartScheduler+0x66>
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400478:	f44f 7197 	mov.w	r1, #302	; 0x12e
  40047c:	4829      	ldr	r0, [pc, #164]	; (400524 <xPortStartScheduler+0xf8>)
  40047e:	4b2a      	ldr	r3, [pc, #168]	; (400528 <xPortStartScheduler+0xfc>)
  400480:	4798      	blx	r3
  400482:	e7da      	b.n	40043a <xPortStartScheduler+0xe>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400484:	f240 112f 	movw	r1, #303	; 0x12f
  400488:	4826      	ldr	r0, [pc, #152]	; (400524 <xPortStartScheduler+0xf8>)
  40048a:	4b27      	ldr	r3, [pc, #156]	; (400528 <xPortStartScheduler+0xfc>)
  40048c:	4798      	blx	r3
  40048e:	e7d9      	b.n	400444 <xPortStartScheduler+0x18>
  400490:	460a      	mov	r2, r1
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400492:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400496:	005b      	lsls	r3, r3, #1
  400498:	b2db      	uxtb	r3, r3
  40049a:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40049e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4004a2:	1e51      	subs	r1, r2, #1
  4004a4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4004a8:	d1f2      	bne.n	400490 <xPortStartScheduler+0x64>
  4004aa:	4b1d      	ldr	r3, [pc, #116]	; (400520 <xPortStartScheduler+0xf4>)
  4004ac:	601a      	str	r2, [r3, #0]
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  4004ae:	2a03      	cmp	r2, #3
  4004b0:	d004      	beq.n	4004bc <xPortStartScheduler+0x90>
  4004b2:	f240 1161 	movw	r1, #353	; 0x161
  4004b6:	481b      	ldr	r0, [pc, #108]	; (400524 <xPortStartScheduler+0xf8>)
  4004b8:	4b1b      	ldr	r3, [pc, #108]	; (400528 <xPortStartScheduler+0xfc>)
  4004ba:	4798      	blx	r3
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4004bc:	4a18      	ldr	r2, [pc, #96]	; (400520 <xPortStartScheduler+0xf4>)
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4004be:	6813      	ldr	r3, [r2, #0]
  4004c0:	021b      	lsls	r3, r3, #8
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4004c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4004c6:	6013      	str	r3, [r2, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
  4004c8:	9b01      	ldr	r3, [sp, #4]
  4004ca:	b2db      	uxtb	r3, r3
  4004cc:	4a12      	ldr	r2, [pc, #72]	; (400518 <xPortStartScheduler+0xec>)
  4004ce:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
  4004d0:	4b16      	ldr	r3, [pc, #88]	; (40052c <xPortStartScheduler+0x100>)
  4004d2:	681a      	ldr	r2, [r3, #0]
  4004d4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4004d8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
  4004da:	681a      	ldr	r2, [r3, #0]
  4004dc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4004e0:	601a      	str	r2, [r3, #0]
    vPortSetupTimerInterrupt();
  4004e2:	4b13      	ldr	r3, [pc, #76]	; (400530 <xPortStartScheduler+0x104>)
  4004e4:	4798      	blx	r3
    uxCriticalNesting = 0;
  4004e6:	2400      	movs	r4, #0
  4004e8:	4b12      	ldr	r3, [pc, #72]	; (400534 <xPortStartScheduler+0x108>)
  4004ea:	601c      	str	r4, [r3, #0]
    vPortEnableVFP();
  4004ec:	4b12      	ldr	r3, [pc, #72]	; (400538 <xPortStartScheduler+0x10c>)
  4004ee:	4798      	blx	r3
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4004f0:	4a12      	ldr	r2, [pc, #72]	; (40053c <xPortStartScheduler+0x110>)
  4004f2:	6813      	ldr	r3, [r2, #0]
  4004f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4004f8:	6013      	str	r3, [r2, #0]
    prvPortStartFirstTask();
  4004fa:	4b11      	ldr	r3, [pc, #68]	; (400540 <xPortStartScheduler+0x114>)
  4004fc:	4798      	blx	r3
    vTaskSwitchContext();
  4004fe:	4b11      	ldr	r3, [pc, #68]	; (400544 <xPortStartScheduler+0x118>)
  400500:	4798      	blx	r3
    prvTaskExitError();
  400502:	4b11      	ldr	r3, [pc, #68]	; (400548 <xPortStartScheduler+0x11c>)
  400504:	4798      	blx	r3
}
  400506:	4620      	mov	r0, r4
  400508:	b002      	add	sp, #8
  40050a:	bd10      	pop	{r4, pc}
  40050c:	e000ed00 	.word	0xe000ed00
  400510:	410fc271 	.word	0x410fc271
  400514:	410fc270 	.word	0x410fc270
  400518:	e000e400 	.word	0xe000e400
  40051c:	20000468 	.word	0x20000468
  400520:	2000046c 	.word	0x2000046c
  400524:	00402dbc 	.word	0x00402dbc
  400528:	0040288d 	.word	0x0040288d
  40052c:	e000ed20 	.word	0xe000ed20
  400530:	004003f5 	.word	0x004003f5
  400534:	20000004 	.word	0x20000004
  400538:	00400231 	.word	0x00400231
  40053c:	e000ef34 	.word	0xe000ef34
  400540:	00400209 	.word	0x00400209
  400544:	004016c9 	.word	0x004016c9
  400548:	00400245 	.word	0x00400245

0040054c <prvInsertBlockIntoFreeList>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert )
{
  40054c:	b410      	push	{r4}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40054e:	4a13      	ldr	r2, [pc, #76]	; (40059c <prvInsertBlockIntoFreeList+0x50>)
  400550:	e000      	b.n	400554 <prvInsertBlockIntoFreeList+0x8>
  400552:	461a      	mov	r2, r3
  400554:	6813      	ldr	r3, [r2, #0]
  400556:	4283      	cmp	r3, r0
  400558:	d3fb      	bcc.n	400552 <prvInsertBlockIntoFreeList+0x6>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40055a:	6851      	ldr	r1, [r2, #4]
  40055c:	1854      	adds	r4, r2, r1
  40055e:	42a0      	cmp	r0, r4
  400560:	d00a      	beq.n	400578 <prvInsertBlockIntoFreeList+0x2c>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  400562:	6841      	ldr	r1, [r0, #4]
  400564:	1844      	adds	r4, r0, r1
  400566:	42a3      	cmp	r3, r4
  400568:	d00b      	beq.n	400582 <prvInsertBlockIntoFreeList+0x36>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  40056a:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
  40056c:	4290      	cmp	r0, r2
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40056e:	bf18      	it	ne
  400570:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
  400572:	f85d 4b04 	ldr.w	r4, [sp], #4
  400576:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400578:	6840      	ldr	r0, [r0, #4]
  40057a:	4401      	add	r1, r0
  40057c:	6051      	str	r1, [r2, #4]
  40057e:	4610      	mov	r0, r2
  400580:	e7ef      	b.n	400562 <prvInsertBlockIntoFreeList+0x16>
        if( pxIterator->pxNextFreeBlock != pxEnd )
  400582:	4c07      	ldr	r4, [pc, #28]	; (4005a0 <prvInsertBlockIntoFreeList+0x54>)
  400584:	6824      	ldr	r4, [r4, #0]
  400586:	42a3      	cmp	r3, r4
  400588:	d006      	beq.n	400598 <prvInsertBlockIntoFreeList+0x4c>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  40058a:	685b      	ldr	r3, [r3, #4]
  40058c:	4419      	add	r1, r3
  40058e:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400590:	6813      	ldr	r3, [r2, #0]
  400592:	681b      	ldr	r3, [r3, #0]
  400594:	6003      	str	r3, [r0, #0]
  400596:	e7e9      	b.n	40056c <prvInsertBlockIntoFreeList+0x20>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  400598:	6003      	str	r3, [r0, #0]
  40059a:	e7e7      	b.n	40056c <prvInsertBlockIntoFreeList+0x20>
  40059c:	20000488 	.word	0x20000488
  4005a0:	20000470 	.word	0x20000470

004005a4 <pvPortMalloc>:
{
  4005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005a6:	4604      	mov	r4, r0
    configASSERT( pxEnd );
  4005a8:	4b2f      	ldr	r3, [pc, #188]	; (400668 <pvPortMalloc+0xc4>)
  4005aa:	681b      	ldr	r3, [r3, #0]
  4005ac:	b1eb      	cbz	r3, 4005ea <pvPortMalloc+0x46>
    vTaskSuspendAll();
  4005ae:	4b2f      	ldr	r3, [pc, #188]	; (40066c <pvPortMalloc+0xc8>)
  4005b0:	4798      	blx	r3
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4005b2:	4b2f      	ldr	r3, [pc, #188]	; (400670 <pvPortMalloc+0xcc>)
  4005b4:	681d      	ldr	r5, [r3, #0]
  4005b6:	4225      	tst	r5, r4
  4005b8:	d14d      	bne.n	400656 <pvPortMalloc+0xb2>
            if( ( xWantedSize > 0 ) &&
  4005ba:	2c00      	cmp	r4, #0
  4005bc:	d04e      	beq.n	40065c <pvPortMalloc+0xb8>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
  4005be:	f104 0108 	add.w	r1, r4, #8
            if( ( xWantedSize > 0 ) &&
  4005c2:	428c      	cmp	r4, r1
  4005c4:	d24a      	bcs.n	40065c <pvPortMalloc+0xb8>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4005c6:	f011 0f07 	tst.w	r1, #7
  4005ca:	d005      	beq.n	4005d8 <pvPortMalloc+0x34>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) >
  4005cc:	f021 0307 	bic.w	r3, r1, #7
  4005d0:	3308      	adds	r3, #8
  4005d2:	4299      	cmp	r1, r3
  4005d4:	d242      	bcs.n	40065c <pvPortMalloc+0xb8>
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4005d6:	4619      	mov	r1, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  4005d8:	2900      	cmp	r1, #0
  4005da:	d03c      	beq.n	400656 <pvPortMalloc+0xb2>
  4005dc:	4b25      	ldr	r3, [pc, #148]	; (400674 <pvPortMalloc+0xd0>)
  4005de:	681e      	ldr	r6, [r3, #0]
  4005e0:	42b1      	cmp	r1, r6
  4005e2:	d838      	bhi.n	400656 <pvPortMalloc+0xb2>
                pxBlock = xStart.pxNextFreeBlock;
  4005e4:	4a24      	ldr	r2, [pc, #144]	; (400678 <pvPortMalloc+0xd4>)
  4005e6:	6814      	ldr	r4, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4005e8:	e006      	b.n	4005f8 <pvPortMalloc+0x54>
    configASSERT( pxEnd );
  4005ea:	218e      	movs	r1, #142	; 0x8e
  4005ec:	4823      	ldr	r0, [pc, #140]	; (40067c <pvPortMalloc+0xd8>)
  4005ee:	4b24      	ldr	r3, [pc, #144]	; (400680 <pvPortMalloc+0xdc>)
  4005f0:	4798      	blx	r3
  4005f2:	e7dc      	b.n	4005ae <pvPortMalloc+0xa>
  4005f4:	4622      	mov	r2, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
  4005f6:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4005f8:	6863      	ldr	r3, [r4, #4]
  4005fa:	4299      	cmp	r1, r3
  4005fc:	d902      	bls.n	400604 <pvPortMalloc+0x60>
  4005fe:	6823      	ldr	r3, [r4, #0]
  400600:	2b00      	cmp	r3, #0
  400602:	d1f7      	bne.n	4005f4 <pvPortMalloc+0x50>
                if( pxBlock != pxEnd )
  400604:	4b18      	ldr	r3, [pc, #96]	; (400668 <pvPortMalloc+0xc4>)
  400606:	681b      	ldr	r3, [r3, #0]
  400608:	429c      	cmp	r4, r3
  40060a:	d024      	beq.n	400656 <pvPortMalloc+0xb2>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  40060c:	6817      	ldr	r7, [r2, #0]
  40060e:	3708      	adds	r7, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400610:	6823      	ldr	r3, [r4, #0]
  400612:	6013      	str	r3, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400614:	6863      	ldr	r3, [r4, #4]
  400616:	1a5b      	subs	r3, r3, r1
  400618:	2b10      	cmp	r3, #16
  40061a:	d816      	bhi.n	40064a <pvPortMalloc+0xa6>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  40061c:	6862      	ldr	r2, [r4, #4]
  40061e:	1ab6      	subs	r6, r6, r2
  400620:	4914      	ldr	r1, [pc, #80]	; (400674 <pvPortMalloc+0xd0>)
  400622:	600e      	str	r6, [r1, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  400624:	4917      	ldr	r1, [pc, #92]	; (400684 <pvPortMalloc+0xe0>)
  400626:	6809      	ldr	r1, [r1, #0]
  400628:	428e      	cmp	r6, r1
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  40062a:	bf3c      	itt	cc
  40062c:	4915      	ldrcc	r1, [pc, #84]	; (400684 <pvPortMalloc+0xe0>)
  40062e:	600e      	strcc	r6, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
  400630:	4315      	orrs	r5, r2
  400632:	6065      	str	r5, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
  400634:	2300      	movs	r3, #0
  400636:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
  400638:	4a13      	ldr	r2, [pc, #76]	; (400688 <pvPortMalloc+0xe4>)
  40063a:	6813      	ldr	r3, [r2, #0]
  40063c:	3301      	adds	r3, #1
  40063e:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
  400640:	4b12      	ldr	r3, [pc, #72]	; (40068c <pvPortMalloc+0xe8>)
  400642:	4798      	blx	r3
            if( pvReturn == NULL )
  400644:	b167      	cbz	r7, 400660 <pvPortMalloc+0xbc>
}
  400646:	4638      	mov	r0, r7
  400648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  40064a:	1860      	adds	r0, r4, r1
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40064c:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
  40064e:	6061      	str	r1, [r4, #4]
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400650:	4b0f      	ldr	r3, [pc, #60]	; (400690 <pvPortMalloc+0xec>)
  400652:	4798      	blx	r3
  400654:	e7e2      	b.n	40061c <pvPortMalloc+0x78>
    ( void ) xTaskResumeAll();
  400656:	4b0d      	ldr	r3, [pc, #52]	; (40068c <pvPortMalloc+0xe8>)
  400658:	4798      	blx	r3
  40065a:	e001      	b.n	400660 <pvPortMalloc+0xbc>
  40065c:	4b0b      	ldr	r3, [pc, #44]	; (40068c <pvPortMalloc+0xe8>)
  40065e:	4798      	blx	r3
                vApplicationMallocFailedHook();
  400660:	4b0c      	ldr	r3, [pc, #48]	; (400694 <pvPortMalloc+0xf0>)
  400662:	4798      	blx	r3
  400664:	2700      	movs	r7, #0
    return pvReturn;
  400666:	e7ee      	b.n	400646 <pvPortMalloc+0xa2>
  400668:	20000470 	.word	0x20000470
  40066c:	00401365 	.word	0x00401365
  400670:	20000474 	.word	0x20000474
  400674:	20000478 	.word	0x20000478
  400678:	20000488 	.word	0x20000488
  40067c:	00402dec 	.word	0x00402dec
  400680:	0040288d 	.word	0x0040288d
  400684:	2000047c 	.word	0x2000047c
  400688:	20000480 	.word	0x20000480
  40068c:	004014f1 	.word	0x004014f1
  400690:	0040054d 	.word	0x0040054d
  400694:	004028b9 	.word	0x004028b9

00400698 <vPortFree>:
    if( pv != NULL )
  400698:	2800      	cmp	r0, #0
  40069a:	d044      	beq.n	400726 <vPortFree+0x8e>
{
  40069c:	b510      	push	{r4, lr}
  40069e:	4604      	mov	r4, r0
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006a0:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4006a4:	4b20      	ldr	r3, [pc, #128]	; (400728 <vPortFree+0x90>)
  4006a6:	681b      	ldr	r3, [r3, #0]
  4006a8:	421a      	tst	r2, r3
  4006aa:	d011      	beq.n	4006d0 <vPortFree+0x38>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006ac:	f850 3c08 	ldr.w	r3, [r0, #-8]
  4006b0:	b1f3      	cbz	r3, 4006f0 <vPortFree+0x58>
  4006b2:	f240 112d 	movw	r1, #301	; 0x12d
  4006b6:	481d      	ldr	r0, [pc, #116]	; (40072c <vPortFree+0x94>)
  4006b8:	4b1d      	ldr	r3, [pc, #116]	; (400730 <vPortFree+0x98>)
  4006ba:	4798      	blx	r3
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006c0:	4a19      	ldr	r2, [pc, #100]	; (400728 <vPortFree+0x90>)
  4006c2:	6812      	ldr	r2, [r2, #0]
  4006c4:	4213      	tst	r3, r2
  4006c6:	d002      	beq.n	4006ce <vPortFree+0x36>
            if( pxLink->pxNextFreeBlock == NULL )
  4006c8:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4006cc:	b1a1      	cbz	r1, 4006f8 <vPortFree+0x60>
  4006ce:	bd10      	pop	{r4, pc}
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
  4006d4:	4815      	ldr	r0, [pc, #84]	; (40072c <vPortFree+0x94>)
  4006d6:	4b16      	ldr	r3, [pc, #88]	; (400730 <vPortFree+0x98>)
  4006d8:	4798      	blx	r3
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006da:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d1e7      	bne.n	4006b2 <vPortFree+0x1a>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006e6:	4a10      	ldr	r2, [pc, #64]	; (400728 <vPortFree+0x90>)
  4006e8:	6812      	ldr	r2, [r2, #0]
  4006ea:	4213      	tst	r3, r2
  4006ec:	d0ef      	beq.n	4006ce <vPortFree+0x36>
  4006ee:	e003      	b.n	4006f8 <vPortFree+0x60>
  4006f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006f4:	4a0c      	ldr	r2, [pc, #48]	; (400728 <vPortFree+0x90>)
  4006f6:	6812      	ldr	r2, [r2, #0]
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
  4006f8:	ea23 0302 	bic.w	r3, r3, r2
  4006fc:	f844 3c04 	str.w	r3, [r4, #-4]
                vTaskSuspendAll();
  400700:	4b0c      	ldr	r3, [pc, #48]	; (400734 <vPortFree+0x9c>)
  400702:	4798      	blx	r3
                    xFreeBytesRemaining += pxLink->xBlockSize;
  400704:	4a0c      	ldr	r2, [pc, #48]	; (400738 <vPortFree+0xa0>)
  400706:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40070a:	6811      	ldr	r1, [r2, #0]
  40070c:	440b      	add	r3, r1
  40070e:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  400710:	f1a4 0008 	sub.w	r0, r4, #8
  400714:	4b09      	ldr	r3, [pc, #36]	; (40073c <vPortFree+0xa4>)
  400716:	4798      	blx	r3
                    xNumberOfSuccessfulFrees++;
  400718:	4a09      	ldr	r2, [pc, #36]	; (400740 <vPortFree+0xa8>)
  40071a:	6813      	ldr	r3, [r2, #0]
  40071c:	3301      	adds	r3, #1
  40071e:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
  400720:	4b08      	ldr	r3, [pc, #32]	; (400744 <vPortFree+0xac>)
  400722:	4798      	blx	r3
}
  400724:	bd10      	pop	{r4, pc}
  400726:	4770      	bx	lr
  400728:	20000474 	.word	0x20000474
  40072c:	00402dec 	.word	0x00402dec
  400730:	0040288d 	.word	0x0040288d
  400734:	00401365 	.word	0x00401365
  400738:	20000478 	.word	0x20000478
  40073c:	0040054d 	.word	0x0040054d
  400740:	20000484 	.word	0x20000484
  400744:	004014f1 	.word	0x004014f1

00400748 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40074c:	4605      	mov	r5, r0
    BaseType_t xDefinedRegions = 0;
    size_t xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
  40074e:	4b35      	ldr	r3, [pc, #212]	; (400824 <vPortDefineHeapRegions+0xdc>)
  400750:	681b      	ldr	r3, [r3, #0]
  400752:	b123      	cbz	r3, 40075e <vPortDefineHeapRegions+0x16>
  400754:	f240 11a3 	movw	r1, #419	; 0x1a3
  400758:	4833      	ldr	r0, [pc, #204]	; (400828 <vPortDefineHeapRegions+0xe0>)
  40075a:	4b34      	ldr	r3, [pc, #208]	; (40082c <vPortDefineHeapRegions+0xe4>)
  40075c:	4798      	blx	r3

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

    while( pxHeapRegion->xSizeInBytes > 0 )
  40075e:	f8d5 b004 	ldr.w	fp, [r5, #4]
  400762:	f1bb 0f00 	cmp.w	fp, #0
  400766:	d052      	beq.n	40080e <vPortDefineHeapRegions+0xc6>
  400768:	3508      	adds	r5, #8
  40076a:	2600      	movs	r6, #0
  40076c:	46b0      	mov	r8, r6
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != NULL );
  40076e:	4f2d      	ldr	r7, [pc, #180]	; (400824 <vPortDefineHeapRegions+0xdc>)

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( xAddress > ( size_t ) pxEnd );
  400770:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400828 <vPortDefineHeapRegions+0xe0>
  400774:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 40082c <vPortDefineHeapRegions+0xe4>
  400778:	e01d      	b.n	4007b6 <vPortDefineHeapRegions+0x6e>
            configASSERT( pxEnd != NULL );
  40077a:	683b      	ldr	r3, [r7, #0]
  40077c:	b373      	cbz	r3, 4007dc <vPortDefineHeapRegions+0x94>
            configASSERT( xAddress > ( size_t ) pxEnd );
  40077e:	683b      	ldr	r3, [r7, #0]
  400780:	42a3      	cmp	r3, r4
  400782:	d230      	bcs.n	4007e6 <vPortDefineHeapRegions+0x9e>
        }

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
  400784:	6839      	ldr	r1, [r7, #0]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + xTotalRegionSize;
  400786:	eb0b 0304 	add.w	r3, fp, r4
        xAddress -= xHeapStructSize;
  40078a:	3b08      	subs	r3, #8
        xAddress &= ~portBYTE_ALIGNMENT_MASK;
  40078c:	f023 0307 	bic.w	r3, r3, #7
        pxEnd = ( BlockLink_t * ) xAddress;
  400790:	603b      	str	r3, [r7, #0]
        pxEnd->xBlockSize = 0;
  400792:	2200      	movs	r2, #0
  400794:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = NULL;
  400796:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  400798:	4622      	mov	r2, r4
        pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  40079a:	1b18      	subs	r0, r3, r4
  40079c:	6060      	str	r0, [r4, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  40079e:	6023      	str	r3, [r4, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
  4007a0:	b101      	cbz	r1, 4007a4 <vPortDefineHeapRegions+0x5c>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  4007a2:	600c      	str	r4, [r1, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  4007a4:	6853      	ldr	r3, [r2, #4]
  4007a6:	4498      	add	r8, r3

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
  4007a8:	3601      	adds	r6, #1
  4007aa:	3508      	adds	r5, #8
    while( pxHeapRegion->xSizeInBytes > 0 )
  4007ac:	f855 bc04 	ldr.w	fp, [r5, #-4]
  4007b0:	f1bb 0f00 	cmp.w	fp, #0
  4007b4:	d01c      	beq.n	4007f0 <vPortDefineHeapRegions+0xa8>
        xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  4007b6:	f855 4c08 	ldr.w	r4, [r5, #-8]
        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4007ba:	f014 0f07 	tst.w	r4, #7
  4007be:	d006      	beq.n	4007ce <vPortDefineHeapRegions+0x86>
            xAddress += ( portBYTE_ALIGNMENT - 1 );
  4007c0:	1de2      	adds	r2, r4, #7
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007c2:	f022 0207 	bic.w	r2, r2, #7
            xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  4007c6:	44a3      	add	fp, r4
  4007c8:	ebab 0b02 	sub.w	fp, fp, r2
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007cc:	4614      	mov	r4, r2
        if( xDefinedRegions == 0 )
  4007ce:	2e00      	cmp	r6, #0
  4007d0:	d1d3      	bne.n	40077a <vPortDefineHeapRegions+0x32>
            xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  4007d2:	4b17      	ldr	r3, [pc, #92]	; (400830 <vPortDefineHeapRegions+0xe8>)
  4007d4:	601c      	str	r4, [r3, #0]
            xStart.xBlockSize = ( size_t ) 0;
  4007d6:	2200      	movs	r2, #0
  4007d8:	605a      	str	r2, [r3, #4]
  4007da:	e7d3      	b.n	400784 <vPortDefineHeapRegions+0x3c>
            configASSERT( pxEnd != NULL );
  4007dc:	f240 11c5 	movw	r1, #453	; 0x1c5
  4007e0:	4650      	mov	r0, sl
  4007e2:	47c8      	blx	r9
  4007e4:	e7cb      	b.n	40077e <vPortDefineHeapRegions+0x36>
            configASSERT( xAddress > ( size_t ) pxEnd );
  4007e6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  4007ea:	4650      	mov	r0, sl
  4007ec:	47c8      	blx	r9
  4007ee:	e7c9      	b.n	400784 <vPortDefineHeapRegions+0x3c>
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  4007f0:	4b10      	ldr	r3, [pc, #64]	; (400834 <vPortDefineHeapRegions+0xec>)
  4007f2:	f8c3 8000 	str.w	r8, [r3]
    xFreeBytesRemaining = xTotalHeapSize;
  4007f6:	4b10      	ldr	r3, [pc, #64]	; (400838 <vPortDefineHeapRegions+0xf0>)
  4007f8:	f8c3 8000 	str.w	r8, [r3]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
  4007fc:	f1b8 0f00 	cmp.w	r8, #0
  400800:	d00a      	beq.n	400818 <vPortDefineHeapRegions+0xd0>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  400802:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400806:	4b0d      	ldr	r3, [pc, #52]	; (40083c <vPortDefineHeapRegions+0xf4>)
  400808:	601a      	str	r2, [r3, #0]
}
  40080a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  40080e:	2300      	movs	r3, #0
  400810:	4a08      	ldr	r2, [pc, #32]	; (400834 <vPortDefineHeapRegions+0xec>)
  400812:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
  400814:	4a08      	ldr	r2, [pc, #32]	; (400838 <vPortDefineHeapRegions+0xf0>)
  400816:	6013      	str	r3, [r2, #0]
    configASSERT( xTotalHeapSize );
  400818:	f240 11f1 	movw	r1, #497	; 0x1f1
  40081c:	4802      	ldr	r0, [pc, #8]	; (400828 <vPortDefineHeapRegions+0xe0>)
  40081e:	4b03      	ldr	r3, [pc, #12]	; (40082c <vPortDefineHeapRegions+0xe4>)
  400820:	4798      	blx	r3
  400822:	e7ee      	b.n	400802 <vPortDefineHeapRegions+0xba>
  400824:	20000470 	.word	0x20000470
  400828:	00402dec 	.word	0x00402dec
  40082c:	0040288d 	.word	0x0040288d
  400830:	20000488 	.word	0x20000488
  400834:	2000047c 	.word	0x2000047c
  400838:	20000478 	.word	0x20000478
  40083c:	20000474 	.word	0x20000474

00400840 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
  400840:	b510      	push	{r4, lr}
  400842:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
  400844:	4b04      	ldr	r3, [pc, #16]	; (400858 <prvIsQueueEmpty+0x18>)
  400846:	4798      	blx	r3
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
  400848:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
  40084a:	4b04      	ldr	r3, [pc, #16]	; (40085c <prvIsQueueEmpty+0x1c>)
  40084c:	4798      	blx	r3

    return xReturn;
}
  40084e:	fab4 f084 	clz	r0, r4
  400852:	0940      	lsrs	r0, r0, #5
  400854:	bd10      	pop	{r4, pc}
  400856:	bf00      	nop
  400858:	004002e5 	.word	0x004002e5
  40085c:	0040032d 	.word	0x0040032d

00400860 <prvCopyDataToQueue>:
{
  400860:	b570      	push	{r4, r5, r6, lr}
  400862:	4604      	mov	r4, r0
  400864:	4616      	mov	r6, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400866:	6b85      	ldr	r5, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400868:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40086a:	b95a      	cbnz	r2, 400884 <prvCopyDataToQueue+0x24>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40086c:	6803      	ldr	r3, [r0, #0]
    BaseType_t xReturn = pdFALSE;
  40086e:	2000      	movs	r0, #0
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400870:	b113      	cbz	r3, 400878 <prvCopyDataToQueue+0x18>
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  400872:	3501      	adds	r5, #1
  400874:	63a5      	str	r5, [r4, #56]	; 0x38
}
  400876:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400878:	68a0      	ldr	r0, [r4, #8]
  40087a:	4b17      	ldr	r3, [pc, #92]	; (4008d8 <prvCopyDataToQueue+0x78>)
  40087c:	4798      	blx	r3
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
  40087e:	2300      	movs	r3, #0
  400880:	60a3      	str	r3, [r4, #8]
  400882:	e7f6      	b.n	400872 <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
  400884:	b96e      	cbnz	r6, 4008a2 <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400886:	6840      	ldr	r0, [r0, #4]
  400888:	4b14      	ldr	r3, [pc, #80]	; (4008dc <prvCopyDataToQueue+0x7c>)
  40088a:	4798      	blx	r3
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  40088c:	6863      	ldr	r3, [r4, #4]
  40088e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400890:	4413      	add	r3, r2
  400892:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400894:	68a2      	ldr	r2, [r4, #8]
  400896:	4293      	cmp	r3, r2
  400898:	d319      	bcc.n	4008ce <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
  40089a:	6823      	ldr	r3, [r4, #0]
  40089c:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
  40089e:	2000      	movs	r0, #0
  4008a0:	e7e7      	b.n	400872 <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  4008a2:	68c0      	ldr	r0, [r0, #12]
  4008a4:	4b0d      	ldr	r3, [pc, #52]	; (4008dc <prvCopyDataToQueue+0x7c>)
  4008a6:	4798      	blx	r3
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  4008a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008aa:	4252      	negs	r2, r2
  4008ac:	68e3      	ldr	r3, [r4, #12]
  4008ae:	4413      	add	r3, r2
  4008b0:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008b2:	6821      	ldr	r1, [r4, #0]
  4008b4:	428b      	cmp	r3, r1
  4008b6:	d202      	bcs.n	4008be <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  4008b8:	68a3      	ldr	r3, [r4, #8]
  4008ba:	441a      	add	r2, r3
  4008bc:	60e2      	str	r2, [r4, #12]
        if( xPosition == queueOVERWRITE )
  4008be:	2e02      	cmp	r6, #2
  4008c0:	d001      	beq.n	4008c6 <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
  4008c2:	2000      	movs	r0, #0
  4008c4:	e7d5      	b.n	400872 <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4008c6:	b125      	cbz	r5, 4008d2 <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
  4008c8:	3d01      	subs	r5, #1
    BaseType_t xReturn = pdFALSE;
  4008ca:	2000      	movs	r0, #0
  4008cc:	e7d1      	b.n	400872 <prvCopyDataToQueue+0x12>
  4008ce:	2000      	movs	r0, #0
  4008d0:	e7cf      	b.n	400872 <prvCopyDataToQueue+0x12>
  4008d2:	2000      	movs	r0, #0
  4008d4:	e7cd      	b.n	400872 <prvCopyDataToQueue+0x12>
  4008d6:	bf00      	nop
  4008d8:	004019fd 	.word	0x004019fd
  4008dc:	00402931 	.word	0x00402931

004008e0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
  4008e0:	b570      	push	{r4, r5, r6, lr}
  4008e2:	b082      	sub	sp, #8
  4008e4:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4008e6:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  4008e8:	b15c      	cbz	r4, 400902 <prvNotifyQueueSetContainer+0x22>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4008ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4008ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4008ee:	429a      	cmp	r2, r3
  4008f0:	d20d      	bcs.n	40090e <prvNotifyQueueSetContainer+0x2e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4008f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4008f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4008f6:	429a      	cmp	r2, r3
  4008f8:	d30f      	bcc.n	40091a <prvNotifyQueueSetContainer+0x3a>
        BaseType_t xReturn = pdFALSE;
  4008fa:	2600      	movs	r6, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
  4008fc:	4630      	mov	r0, r6
  4008fe:	b002      	add	sp, #8
  400900:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400902:	f640 31d5 	movw	r1, #3029	; 0xbd5
  400906:	4817      	ldr	r0, [pc, #92]	; (400964 <prvNotifyQueueSetContainer+0x84>)
  400908:	4b17      	ldr	r3, [pc, #92]	; (400968 <prvNotifyQueueSetContainer+0x88>)
  40090a:	4798      	blx	r3
  40090c:	e7ed      	b.n	4008ea <prvNotifyQueueSetContainer+0xa>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40090e:	f640 31d6 	movw	r1, #3030	; 0xbd6
  400912:	4814      	ldr	r0, [pc, #80]	; (400964 <prvNotifyQueueSetContainer+0x84>)
  400914:	4b14      	ldr	r3, [pc, #80]	; (400968 <prvNotifyQueueSetContainer+0x88>)
  400916:	4798      	blx	r3
  400918:	e7eb      	b.n	4008f2 <prvNotifyQueueSetContainer+0x12>
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40091a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  40091e:	b26d      	sxtb	r5, r5
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
  400920:	2200      	movs	r2, #0
  400922:	a901      	add	r1, sp, #4
  400924:	4620      	mov	r0, r4
  400926:	4b11      	ldr	r3, [pc, #68]	; (40096c <prvNotifyQueueSetContainer+0x8c>)
  400928:	4798      	blx	r3
  40092a:	4606      	mov	r6, r0
            if( cTxLock == queueUNLOCKED )
  40092c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400930:	d006      	beq.n	400940 <prvNotifyQueueSetContainer+0x60>
                configASSERT( cTxLock != queueINT8_MAX );
  400932:	2d7f      	cmp	r5, #127	; 0x7f
  400934:	d00f      	beq.n	400956 <prvNotifyQueueSetContainer+0x76>
                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400936:	3501      	adds	r5, #1
  400938:	b26d      	sxtb	r5, r5
  40093a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  40093e:	e7dd      	b.n	4008fc <prvNotifyQueueSetContainer+0x1c>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400940:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400942:	2b00      	cmp	r3, #0
  400944:	d0da      	beq.n	4008fc <prvNotifyQueueSetContainer+0x1c>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400946:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40094a:	4b09      	ldr	r3, [pc, #36]	; (400970 <prvNotifyQueueSetContainer+0x90>)
  40094c:	4798      	blx	r3
  40094e:	2800      	cmp	r0, #0
                        xReturn = pdTRUE;
  400950:	bf18      	it	ne
  400952:	2601      	movne	r6, #1
  400954:	e7d2      	b.n	4008fc <prvNotifyQueueSetContainer+0x1c>
                configASSERT( cTxLock != queueINT8_MAX );
  400956:	f640 31f6 	movw	r1, #3062	; 0xbf6
  40095a:	4802      	ldr	r0, [pc, #8]	; (400964 <prvNotifyQueueSetContainer+0x84>)
  40095c:	4b02      	ldr	r3, [pc, #8]	; (400968 <prvNotifyQueueSetContainer+0x88>)
  40095e:	4798      	blx	r3
  400960:	e7e9      	b.n	400936 <prvNotifyQueueSetContainer+0x56>
  400962:	bf00      	nop
  400964:	00402e18 	.word	0x00402e18
  400968:	0040288d 	.word	0x0040288d
  40096c:	00400861 	.word	0x00400861
  400970:	00401839 	.word	0x00401839

00400974 <prvCopyDataFromQueue>:
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400974:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400976:	b172      	cbz	r2, 400996 <prvCopyDataFromQueue+0x22>
{
  400978:	b510      	push	{r4, lr}
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  40097a:	68c3      	ldr	r3, [r0, #12]
  40097c:	4413      	add	r3, r2
  40097e:	60c3      	str	r3, [r0, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400980:	6884      	ldr	r4, [r0, #8]
  400982:	42a3      	cmp	r3, r4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  400984:	bf24      	itt	cs
  400986:	6803      	ldrcs	r3, [r0, #0]
  400988:	60c3      	strcs	r3, [r0, #12]
  40098a:	460c      	mov	r4, r1
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  40098c:	68c1      	ldr	r1, [r0, #12]
  40098e:	4620      	mov	r0, r4
  400990:	4b01      	ldr	r3, [pc, #4]	; (400998 <prvCopyDataFromQueue+0x24>)
  400992:	4798      	blx	r3
  400994:	bd10      	pop	{r4, pc}
  400996:	4770      	bx	lr
  400998:	00402931 	.word	0x00402931

0040099c <prvUnlockQueue>:
{
  40099c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009a0:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
  4009a2:	4b23      	ldr	r3, [pc, #140]	; (400a30 <prvUnlockQueue+0x94>)
  4009a4:	4798      	blx	r3
        int8_t cTxLock = pxQueue->cTxLock;
  4009a6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4009aa:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  4009ac:	2c00      	cmp	r4, #0
  4009ae:	dd18      	ble.n	4009e2 <prvUnlockQueue+0x46>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4009b0:	4e20      	ldr	r6, [pc, #128]	; (400a34 <prvUnlockQueue+0x98>)
                            vTaskMissedYield();
  4009b2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400a40 <prvUnlockQueue+0xa4>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009b6:	4f20      	ldr	r7, [pc, #128]	; (400a38 <prvUnlockQueue+0x9c>)
  4009b8:	e008      	b.n	4009cc <prvUnlockQueue+0x30>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4009bc:	b18b      	cbz	r3, 4009e2 <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009be:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4009c2:	47b8      	blx	r7
  4009c4:	b958      	cbnz	r0, 4009de <prvUnlockQueue+0x42>
  4009c6:	3c01      	subs	r4, #1
  4009c8:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  4009ca:	b154      	cbz	r4, 4009e2 <prvUnlockQueue+0x46>
                    if( pxQueue->pxQueueSetContainer != NULL )
  4009cc:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4009ce:	2b00      	cmp	r3, #0
  4009d0:	d0f3      	beq.n	4009ba <prvUnlockQueue+0x1e>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4009d2:	4628      	mov	r0, r5
  4009d4:	47b0      	blx	r6
  4009d6:	2800      	cmp	r0, #0
  4009d8:	d0f5      	beq.n	4009c6 <prvUnlockQueue+0x2a>
                            vTaskMissedYield();
  4009da:	47c0      	blx	r8
  4009dc:	e7f3      	b.n	4009c6 <prvUnlockQueue+0x2a>
                                vTaskMissedYield();
  4009de:	47c0      	blx	r8
  4009e0:	e7f1      	b.n	4009c6 <prvUnlockQueue+0x2a>
        pxQueue->cTxLock = queueUNLOCKED;
  4009e2:	23ff      	movs	r3, #255	; 0xff
  4009e4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
  4009e8:	4b14      	ldr	r3, [pc, #80]	; (400a3c <prvUnlockQueue+0xa0>)
  4009ea:	4798      	blx	r3
    taskENTER_CRITICAL();
  4009ec:	4b10      	ldr	r3, [pc, #64]	; (400a30 <prvUnlockQueue+0x94>)
  4009ee:	4798      	blx	r3
        int8_t cRxLock = pxQueue->cRxLock;
  4009f0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  4009f4:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  4009f6:	2c00      	cmp	r4, #0
  4009f8:	dd12      	ble.n	400a20 <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4009fa:	692b      	ldr	r3, [r5, #16]
  4009fc:	b183      	cbz	r3, 400a20 <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4009fe:	f105 0710 	add.w	r7, r5, #16
  400a02:	4e0d      	ldr	r6, [pc, #52]	; (400a38 <prvUnlockQueue+0x9c>)
                    vTaskMissedYield();
  400a04:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400a40 <prvUnlockQueue+0xa4>
  400a08:	e004      	b.n	400a14 <prvUnlockQueue+0x78>
  400a0a:	3c01      	subs	r4, #1
  400a0c:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400a0e:	b13c      	cbz	r4, 400a20 <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a10:	692b      	ldr	r3, [r5, #16]
  400a12:	b12b      	cbz	r3, 400a20 <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a14:	4638      	mov	r0, r7
  400a16:	47b0      	blx	r6
  400a18:	2800      	cmp	r0, #0
  400a1a:	d0f6      	beq.n	400a0a <prvUnlockQueue+0x6e>
                    vTaskMissedYield();
  400a1c:	47c0      	blx	r8
  400a1e:	e7f4      	b.n	400a0a <prvUnlockQueue+0x6e>
        pxQueue->cRxLock = queueUNLOCKED;
  400a20:	23ff      	movs	r3, #255	; 0xff
  400a22:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
  400a26:	4b05      	ldr	r3, [pc, #20]	; (400a3c <prvUnlockQueue+0xa0>)
  400a28:	4798      	blx	r3
  400a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a2e:	bf00      	nop
  400a30:	004002e5 	.word	0x004002e5
  400a34:	004008e1 	.word	0x004008e1
  400a38:	00401839 	.word	0x00401839
  400a3c:	0040032d 	.word	0x0040032d
  400a40:	004019d1 	.word	0x004019d1

00400a44 <xQueueGenericReset>:
{
  400a44:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
  400a46:	b150      	cbz	r0, 400a5e <xQueueGenericReset+0x1a>
  400a48:	460d      	mov	r5, r1
  400a4a:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
  400a4c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
  400a4e:	b963      	cbnz	r3, 400a6a <xQueueGenericReset+0x26>
    configASSERT( xReturn != pdFAIL );
  400a50:	f240 1145 	movw	r1, #325	; 0x145
  400a54:	481c      	ldr	r0, [pc, #112]	; (400ac8 <xQueueGenericReset+0x84>)
  400a56:	4b1d      	ldr	r3, [pc, #116]	; (400acc <xQueueGenericReset+0x88>)
  400a58:	4798      	blx	r3
  400a5a:	2000      	movs	r0, #0
    return xReturn;
  400a5c:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxQueue );
  400a5e:	f44f 7188 	mov.w	r1, #272	; 0x110
  400a62:	4819      	ldr	r0, [pc, #100]	; (400ac8 <xQueueGenericReset+0x84>)
  400a64:	4b19      	ldr	r3, [pc, #100]	; (400acc <xQueueGenericReset+0x88>)
  400a66:	4798      	blx	r3
  400a68:	e7f2      	b.n	400a50 <xQueueGenericReset+0xc>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
  400a6a:	f04f 32ff 	mov.w	r2, #4294967295
  400a6e:	fbb2 f3f3 	udiv	r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
  400a72:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400a74:	4293      	cmp	r3, r2
  400a76:	d3eb      	bcc.n	400a50 <xQueueGenericReset+0xc>
        taskENTER_CRITICAL();
  400a78:	4b15      	ldr	r3, [pc, #84]	; (400ad0 <xQueueGenericReset+0x8c>)
  400a7a:	4798      	blx	r3
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a7c:	6822      	ldr	r2, [r4, #0]
  400a7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400a80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a82:	fb03 f301 	mul.w	r3, r3, r1
  400a86:	18d0      	adds	r0, r2, r3
  400a88:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a8a:	2000      	movs	r0, #0
  400a8c:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400a8e:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a90:	1a5b      	subs	r3, r3, r1
  400a92:	4413      	add	r3, r2
  400a94:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
  400a96:	23ff      	movs	r3, #255	; 0xff
  400a98:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
  400a9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
  400aa0:	b955      	cbnz	r5, 400ab8 <xQueueGenericReset+0x74>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400aa2:	6923      	ldr	r3, [r4, #16]
  400aa4:	b91b      	cbnz	r3, 400aae <xQueueGenericReset+0x6a>
        taskEXIT_CRITICAL();
  400aa6:	4b0b      	ldr	r3, [pc, #44]	; (400ad4 <xQueueGenericReset+0x90>)
  400aa8:	4798      	blx	r3
    BaseType_t xReturn = pdPASS;
  400aaa:	2001      	movs	r0, #1
  400aac:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400aae:	f104 0010 	add.w	r0, r4, #16
  400ab2:	4b09      	ldr	r3, [pc, #36]	; (400ad8 <xQueueGenericReset+0x94>)
  400ab4:	4798      	blx	r3
  400ab6:	e7f6      	b.n	400aa6 <xQueueGenericReset+0x62>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400ab8:	f104 0010 	add.w	r0, r4, #16
  400abc:	4d07      	ldr	r5, [pc, #28]	; (400adc <xQueueGenericReset+0x98>)
  400abe:	47a8      	blx	r5
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400ac0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ac4:	47a8      	blx	r5
  400ac6:	e7ee      	b.n	400aa6 <xQueueGenericReset+0x62>
  400ac8:	00402e18 	.word	0x00402e18
  400acc:	0040288d 	.word	0x0040288d
  400ad0:	004002e5 	.word	0x004002e5
  400ad4:	0040032d 	.word	0x0040032d
  400ad8:	00401839 	.word	0x00401839
  400adc:	00400191 	.word	0x00400191

00400ae0 <xQueueGenericCreate>:
    {
  400ae0:	b570      	push	{r4, r5, r6, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400ae2:	b308      	cbz	r0, 400b28 <xQueueGenericCreate+0x48>
  400ae4:	460d      	mov	r5, r1
  400ae6:	4606      	mov	r6, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400ae8:	f04f 33ff 	mov.w	r3, #4294967295
  400aec:	fbb3 f3f0 	udiv	r3, r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400af0:	428b      	cmp	r3, r1
  400af2:	d319      	bcc.n	400b28 <xQueueGenericCreate+0x48>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
  400af4:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400af8:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
  400afc:	d814      	bhi.n	400b28 <xQueueGenericCreate+0x48>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400afe:	304c      	adds	r0, #76	; 0x4c
  400b00:	4b0d      	ldr	r3, [pc, #52]	; (400b38 <xQueueGenericCreate+0x58>)
  400b02:	4798      	blx	r3
            if( pxNewQueue != NULL )
  400b04:	4604      	mov	r4, r0
  400b06:	b158      	cbz	r0, 400b20 <xQueueGenericCreate+0x40>
    if( uxItemSize == ( UBaseType_t ) 0 )
  400b08:	b165      	cbz	r5, 400b24 <xQueueGenericCreate+0x44>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400b0a:	f100 034c 	add.w	r3, r0, #76	; 0x4c
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400b0e:	6003      	str	r3, [r0, #0]
    pxNewQueue->uxLength = uxQueueLength;
  400b10:	63e6      	str	r6, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
  400b12:	6425      	str	r5, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400b14:	2101      	movs	r1, #1
  400b16:	4620      	mov	r0, r4
  400b18:	4b08      	ldr	r3, [pc, #32]	; (400b3c <xQueueGenericCreate+0x5c>)
  400b1a:	4798      	blx	r3
            pxNewQueue->pxQueueSetContainer = NULL;
  400b1c:	2300      	movs	r3, #0
  400b1e:	64a3      	str	r3, [r4, #72]	; 0x48
    }
  400b20:	4620      	mov	r0, r4
  400b22:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400b24:	6020      	str	r0, [r4, #0]
  400b26:	e7f3      	b.n	400b10 <xQueueGenericCreate+0x30>
            configASSERT( pxNewQueue );
  400b28:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
  400b2c:	4804      	ldr	r0, [pc, #16]	; (400b40 <xQueueGenericCreate+0x60>)
  400b2e:	4b05      	ldr	r3, [pc, #20]	; (400b44 <xQueueGenericCreate+0x64>)
  400b30:	4798      	blx	r3
        Queue_t * pxNewQueue = NULL;
  400b32:	2400      	movs	r4, #0
        return pxNewQueue;
  400b34:	e7f4      	b.n	400b20 <xQueueGenericCreate+0x40>
  400b36:	bf00      	nop
  400b38:	004005a5 	.word	0x004005a5
  400b3c:	00400a45 	.word	0x00400a45
  400b40:	00402e18 	.word	0x00402e18
  400b44:	0040288d 	.word	0x0040288d

00400b48 <xQueueGenericSend>:
{
  400b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b4c:	b085      	sub	sp, #20
  400b4e:	4689      	mov	r9, r1
  400b50:	9201      	str	r2, [sp, #4]
  400b52:	461e      	mov	r6, r3
    configASSERT( pxQueue );
  400b54:	4604      	mov	r4, r0
  400b56:	b1a8      	cbz	r0, 400b84 <xQueueGenericSend+0x3c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b58:	f1b9 0f00 	cmp.w	r9, #0
  400b5c:	d018      	beq.n	400b90 <xQueueGenericSend+0x48>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b5e:	2e02      	cmp	r6, #2
  400b60:	d01f      	beq.n	400ba2 <xQueueGenericSend+0x5a>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400b62:	4b57      	ldr	r3, [pc, #348]	; (400cc0 <xQueueGenericSend+0x178>)
  400b64:	4798      	blx	r3
  400b66:	b930      	cbnz	r0, 400b76 <xQueueGenericSend+0x2e>
  400b68:	9b01      	ldr	r3, [sp, #4]
  400b6a:	b123      	cbz	r3, 400b76 <xQueueGenericSend+0x2e>
  400b6c:	f240 3133 	movw	r1, #819	; 0x333
  400b70:	4854      	ldr	r0, [pc, #336]	; (400cc4 <xQueueGenericSend+0x17c>)
  400b72:	4b55      	ldr	r3, [pc, #340]	; (400cc8 <xQueueGenericSend+0x180>)
  400b74:	4798      	blx	r3
{
  400b76:	f04f 0a00 	mov.w	sl, #0
        taskENTER_CRITICAL();
  400b7a:	4d54      	ldr	r5, [pc, #336]	; (400ccc <xQueueGenericSend+0x184>)
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400b7c:	4f54      	ldr	r7, [pc, #336]	; (400cd0 <xQueueGenericSend+0x188>)
                    portYIELD_WITHIN_API();
  400b7e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 400cf8 <xQueueGenericSend+0x1b0>
  400b82:	e040      	b.n	400c06 <xQueueGenericSend+0xbe>
    configASSERT( pxQueue );
  400b84:	f240 312e 	movw	r1, #814	; 0x32e
  400b88:	484e      	ldr	r0, [pc, #312]	; (400cc4 <xQueueGenericSend+0x17c>)
  400b8a:	4b4f      	ldr	r3, [pc, #316]	; (400cc8 <xQueueGenericSend+0x180>)
  400b8c:	4798      	blx	r3
  400b8e:	e7e3      	b.n	400b58 <xQueueGenericSend+0x10>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b90:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400b92:	2b00      	cmp	r3, #0
  400b94:	d0e3      	beq.n	400b5e <xQueueGenericSend+0x16>
  400b96:	f240 312f 	movw	r1, #815	; 0x32f
  400b9a:	484a      	ldr	r0, [pc, #296]	; (400cc4 <xQueueGenericSend+0x17c>)
  400b9c:	4b4a      	ldr	r3, [pc, #296]	; (400cc8 <xQueueGenericSend+0x180>)
  400b9e:	4798      	blx	r3
  400ba0:	e7dd      	b.n	400b5e <xQueueGenericSend+0x16>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400ba2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ba4:	2b01      	cmp	r3, #1
  400ba6:	d0dc      	beq.n	400b62 <xQueueGenericSend+0x1a>
  400ba8:	f44f 714c 	mov.w	r1, #816	; 0x330
  400bac:	4845      	ldr	r0, [pc, #276]	; (400cc4 <xQueueGenericSend+0x17c>)
  400bae:	4b46      	ldr	r3, [pc, #280]	; (400cc8 <xQueueGenericSend+0x180>)
  400bb0:	4798      	blx	r3
  400bb2:	e7d6      	b.n	400b62 <xQueueGenericSend+0x1a>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400bb4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400bb6:	4632      	mov	r2, r6
  400bb8:	4649      	mov	r1, r9
  400bba:	4620      	mov	r0, r4
  400bbc:	4b45      	ldr	r3, [pc, #276]	; (400cd4 <xQueueGenericSend+0x18c>)
  400bbe:	4798      	blx	r3
                        if( pxQueue->pxQueueSetContainer != NULL )
  400bc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400bc2:	b153      	cbz	r3, 400bda <xQueueGenericSend+0x92>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400bc4:	2e02      	cmp	r6, #2
  400bc6:	d077      	beq.n	400cb8 <xQueueGenericSend+0x170>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400bc8:	4620      	mov	r0, r4
  400bca:	4b43      	ldr	r3, [pc, #268]	; (400cd8 <xQueueGenericSend+0x190>)
  400bcc:	4798      	blx	r3
                taskEXIT_CRITICAL();
  400bce:	4b43      	ldr	r3, [pc, #268]	; (400cdc <xQueueGenericSend+0x194>)
  400bd0:	4798      	blx	r3
                return pdPASS;
  400bd2:	2001      	movs	r0, #1
}
  400bd4:	b005      	add	sp, #20
  400bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400bdc:	2b00      	cmp	r3, #0
  400bde:	d0f6      	beq.n	400bce <xQueueGenericSend+0x86>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400be0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400be4:	4b3e      	ldr	r3, [pc, #248]	; (400ce0 <xQueueGenericSend+0x198>)
  400be6:	4798      	blx	r3
  400be8:	e7f1      	b.n	400bce <xQueueGenericSend+0x86>
                    taskEXIT_CRITICAL();
  400bea:	4b3c      	ldr	r3, [pc, #240]	; (400cdc <xQueueGenericSend+0x194>)
  400bec:	4798      	blx	r3
                    return errQUEUE_FULL;
  400bee:	2000      	movs	r0, #0
  400bf0:	e7f0      	b.n	400bd4 <xQueueGenericSend+0x8c>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400bf2:	a802      	add	r0, sp, #8
  400bf4:	47b8      	blx	r7
  400bf6:	e013      	b.n	400c20 <xQueueGenericSend+0xd8>
                prvUnlockQueue( pxQueue );
  400bf8:	4620      	mov	r0, r4
  400bfa:	4b3a      	ldr	r3, [pc, #232]	; (400ce4 <xQueueGenericSend+0x19c>)
  400bfc:	4798      	blx	r3
                ( void ) xTaskResumeAll();
  400bfe:	4b3a      	ldr	r3, [pc, #232]	; (400ce8 <xQueueGenericSend+0x1a0>)
  400c00:	4798      	blx	r3
  400c02:	f04f 0a01 	mov.w	sl, #1
        taskENTER_CRITICAL();
  400c06:	47a8      	blx	r5
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400c08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c0c:	429a      	cmp	r2, r3
  400c0e:	d3d1      	bcc.n	400bb4 <xQueueGenericSend+0x6c>
  400c10:	2e02      	cmp	r6, #2
  400c12:	d048      	beq.n	400ca6 <xQueueGenericSend+0x15e>
                if( xTicksToWait == ( TickType_t ) 0 )
  400c14:	9b01      	ldr	r3, [sp, #4]
  400c16:	2b00      	cmp	r3, #0
  400c18:	d0e7      	beq.n	400bea <xQueueGenericSend+0xa2>
                else if( xEntryTimeSet == pdFALSE )
  400c1a:	f1ba 0f00 	cmp.w	sl, #0
  400c1e:	d0e8      	beq.n	400bf2 <xQueueGenericSend+0xaa>
        taskEXIT_CRITICAL();
  400c20:	4b2e      	ldr	r3, [pc, #184]	; (400cdc <xQueueGenericSend+0x194>)
  400c22:	4798      	blx	r3
        vTaskSuspendAll();
  400c24:	4b31      	ldr	r3, [pc, #196]	; (400cec <xQueueGenericSend+0x1a4>)
  400c26:	4798      	blx	r3
        prvLockQueue( pxQueue );
  400c28:	47a8      	blx	r5
  400c2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400c2e:	b25b      	sxtb	r3, r3
  400c30:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c34:	bf04      	itt	eq
  400c36:	2300      	moveq	r3, #0
  400c38:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400c3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400c40:	b25b      	sxtb	r3, r3
  400c42:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c46:	bf04      	itt	eq
  400c48:	2300      	moveq	r3, #0
  400c4a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400c4e:	4b23      	ldr	r3, [pc, #140]	; (400cdc <xQueueGenericSend+0x194>)
  400c50:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400c52:	a901      	add	r1, sp, #4
  400c54:	a802      	add	r0, sp, #8
  400c56:	4b26      	ldr	r3, [pc, #152]	; (400cf0 <xQueueGenericSend+0x1a8>)
  400c58:	4798      	blx	r3
  400c5a:	b9e8      	cbnz	r0, 400c98 <xQueueGenericSend+0x150>
    taskENTER_CRITICAL();
  400c5c:	47a8      	blx	r5
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400c5e:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400c62:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
    taskEXIT_CRITICAL();
  400c66:	4b1d      	ldr	r3, [pc, #116]	; (400cdc <xQueueGenericSend+0x194>)
  400c68:	4798      	blx	r3
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400c6a:	45d3      	cmp	fp, sl
  400c6c:	d1c4      	bne.n	400bf8 <xQueueGenericSend+0xb0>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400c6e:	9901      	ldr	r1, [sp, #4]
  400c70:	f104 0010 	add.w	r0, r4, #16
  400c74:	4b1f      	ldr	r3, [pc, #124]	; (400cf4 <xQueueGenericSend+0x1ac>)
  400c76:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
  400c78:	4620      	mov	r0, r4
  400c7a:	4b1a      	ldr	r3, [pc, #104]	; (400ce4 <xQueueGenericSend+0x19c>)
  400c7c:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
  400c7e:	4b1a      	ldr	r3, [pc, #104]	; (400ce8 <xQueueGenericSend+0x1a0>)
  400c80:	4798      	blx	r3
  400c82:	2800      	cmp	r0, #0
  400c84:	d1bd      	bne.n	400c02 <xQueueGenericSend+0xba>
                    portYIELD_WITHIN_API();
  400c86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400c8a:	f8c8 3000 	str.w	r3, [r8]
  400c8e:	f3bf 8f4f 	dsb	sy
  400c92:	f3bf 8f6f 	isb	sy
  400c96:	e7b4      	b.n	400c02 <xQueueGenericSend+0xba>
            prvUnlockQueue( pxQueue );
  400c98:	4620      	mov	r0, r4
  400c9a:	4b12      	ldr	r3, [pc, #72]	; (400ce4 <xQueueGenericSend+0x19c>)
  400c9c:	4798      	blx	r3
            ( void ) xTaskResumeAll();
  400c9e:	4b12      	ldr	r3, [pc, #72]	; (400ce8 <xQueueGenericSend+0x1a0>)
  400ca0:	4798      	blx	r3
            return errQUEUE_FULL;
  400ca2:	2000      	movs	r0, #0
  400ca4:	e796      	b.n	400bd4 <xQueueGenericSend+0x8c>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400ca6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ca8:	2202      	movs	r2, #2
  400caa:	4649      	mov	r1, r9
  400cac:	4620      	mov	r0, r4
  400cae:	4b09      	ldr	r3, [pc, #36]	; (400cd4 <xQueueGenericSend+0x18c>)
  400cb0:	4798      	blx	r3
                        if( pxQueue->pxQueueSetContainer != NULL )
  400cb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400cb4:	2b00      	cmp	r3, #0
  400cb6:	d090      	beq.n	400bda <xQueueGenericSend+0x92>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400cb8:	2d00      	cmp	r5, #0
  400cba:	d085      	beq.n	400bc8 <xQueueGenericSend+0x80>
  400cbc:	e787      	b.n	400bce <xQueueGenericSend+0x86>
  400cbe:	bf00      	nop
  400cc0:	004019dd 	.word	0x004019dd
  400cc4:	00402e18 	.word	0x00402e18
  400cc8:	0040288d 	.word	0x0040288d
  400ccc:	004002e5 	.word	0x004002e5
  400cd0:	0040192d 	.word	0x0040192d
  400cd4:	00400861 	.word	0x00400861
  400cd8:	004008e1 	.word	0x004008e1
  400cdc:	0040032d 	.word	0x0040032d
  400ce0:	00401839 	.word	0x00401839
  400ce4:	0040099d 	.word	0x0040099d
  400ce8:	004014f1 	.word	0x004014f1
  400cec:	00401365 	.word	0x00401365
  400cf0:	00401945 	.word	0x00401945
  400cf4:	00401799 	.word	0x00401799
  400cf8:	e000ed04 	.word	0xe000ed04

00400cfc <xQueueReceive>:
{
  400cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d00:	b084      	sub	sp, #16
  400d02:	4688      	mov	r8, r1
  400d04:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
  400d06:	4604      	mov	r4, r0
  400d08:	b198      	cbz	r0, 400d32 <xQueueReceive+0x36>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d0a:	f1b8 0f00 	cmp.w	r8, #0
  400d0e:	d016      	beq.n	400d3e <xQueueReceive+0x42>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400d10:	4b48      	ldr	r3, [pc, #288]	; (400e34 <xQueueReceive+0x138>)
  400d12:	4798      	blx	r3
  400d14:	b930      	cbnz	r0, 400d24 <xQueueReceive+0x28>
  400d16:	9b01      	ldr	r3, [sp, #4]
  400d18:	b123      	cbz	r3, 400d24 <xQueueReceive+0x28>
  400d1a:	f240 515a 	movw	r1, #1370	; 0x55a
  400d1e:	4846      	ldr	r0, [pc, #280]	; (400e38 <xQueueReceive+0x13c>)
  400d20:	4b46      	ldr	r3, [pc, #280]	; (400e3c <xQueueReceive+0x140>)
  400d22:	4798      	blx	r3
{
  400d24:	f04f 0a00 	mov.w	sl, #0
        taskENTER_CRITICAL();
  400d28:	4d45      	ldr	r5, [pc, #276]	; (400e40 <xQueueReceive+0x144>)
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400d2a:	4e46      	ldr	r6, [pc, #280]	; (400e44 <xQueueReceive+0x148>)
                    portYIELD_WITHIN_API();
  400d2c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 400e6c <xQueueReceive+0x170>
  400d30:	e03a      	b.n	400da8 <xQueueReceive+0xac>
    configASSERT( ( pxQueue ) );
  400d32:	f240 5151 	movw	r1, #1361	; 0x551
  400d36:	4840      	ldr	r0, [pc, #256]	; (400e38 <xQueueReceive+0x13c>)
  400d38:	4b40      	ldr	r3, [pc, #256]	; (400e3c <xQueueReceive+0x140>)
  400d3a:	4798      	blx	r3
  400d3c:	e7e5      	b.n	400d0a <xQueueReceive+0xe>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400d40:	2b00      	cmp	r3, #0
  400d42:	d0e5      	beq.n	400d10 <xQueueReceive+0x14>
  400d44:	f240 5155 	movw	r1, #1365	; 0x555
  400d48:	483b      	ldr	r0, [pc, #236]	; (400e38 <xQueueReceive+0x13c>)
  400d4a:	4b3c      	ldr	r3, [pc, #240]	; (400e3c <xQueueReceive+0x140>)
  400d4c:	4798      	blx	r3
  400d4e:	e7df      	b.n	400d10 <xQueueReceive+0x14>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
  400d50:	4641      	mov	r1, r8
  400d52:	4620      	mov	r0, r4
  400d54:	4b3c      	ldr	r3, [pc, #240]	; (400e48 <xQueueReceive+0x14c>)
  400d56:	4798      	blx	r3
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  400d58:	1e7b      	subs	r3, r7, #1
  400d5a:	63a3      	str	r3, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d5c:	6923      	ldr	r3, [r4, #16]
  400d5e:	b92b      	cbnz	r3, 400d6c <xQueueReceive+0x70>
                taskEXIT_CRITICAL();
  400d60:	4b3a      	ldr	r3, [pc, #232]	; (400e4c <xQueueReceive+0x150>)
  400d62:	4798      	blx	r3
                return pdPASS;
  400d64:	2001      	movs	r0, #1
}
  400d66:	b004      	add	sp, #16
  400d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d6c:	f104 0010 	add.w	r0, r4, #16
  400d70:	4b37      	ldr	r3, [pc, #220]	; (400e50 <xQueueReceive+0x154>)
  400d72:	4798      	blx	r3
  400d74:	e7f4      	b.n	400d60 <xQueueReceive+0x64>
                    taskEXIT_CRITICAL();
  400d76:	4b35      	ldr	r3, [pc, #212]	; (400e4c <xQueueReceive+0x150>)
  400d78:	4798      	blx	r3
                    return errQUEUE_EMPTY;
  400d7a:	2000      	movs	r0, #0
  400d7c:	e7f3      	b.n	400d66 <xQueueReceive+0x6a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400d7e:	a802      	add	r0, sp, #8
  400d80:	47b0      	blx	r6
  400d82:	e01b      	b.n	400dbc <xQueueReceive+0xc0>
                prvUnlockQueue( pxQueue );
  400d84:	4620      	mov	r0, r4
  400d86:	4b33      	ldr	r3, [pc, #204]	; (400e54 <xQueueReceive+0x158>)
  400d88:	4798      	blx	r3
                ( void ) xTaskResumeAll();
  400d8a:	4b33      	ldr	r3, [pc, #204]	; (400e58 <xQueueReceive+0x15c>)
  400d8c:	4798      	blx	r3
  400d8e:	e009      	b.n	400da4 <xQueueReceive+0xa8>
            prvUnlockQueue( pxQueue );
  400d90:	4620      	mov	r0, r4
  400d92:	4b30      	ldr	r3, [pc, #192]	; (400e54 <xQueueReceive+0x158>)
  400d94:	4798      	blx	r3
            ( void ) xTaskResumeAll();
  400d96:	4b30      	ldr	r3, [pc, #192]	; (400e58 <xQueueReceive+0x15c>)
  400d98:	4798      	blx	r3
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400d9a:	4620      	mov	r0, r4
  400d9c:	4b2f      	ldr	r3, [pc, #188]	; (400e5c <xQueueReceive+0x160>)
  400d9e:	4798      	blx	r3
  400da0:	2800      	cmp	r0, #0
  400da2:	d144      	bne.n	400e2e <xQueueReceive+0x132>
  400da4:	f04f 0a01 	mov.w	sl, #1
        taskENTER_CRITICAL();
  400da8:	47a8      	blx	r5
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400daa:	6ba7      	ldr	r7, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400dac:	2f00      	cmp	r7, #0
  400dae:	d1cf      	bne.n	400d50 <xQueueReceive+0x54>
                if( xTicksToWait == ( TickType_t ) 0 )
  400db0:	9b01      	ldr	r3, [sp, #4]
  400db2:	2b00      	cmp	r3, #0
  400db4:	d0df      	beq.n	400d76 <xQueueReceive+0x7a>
                else if( xEntryTimeSet == pdFALSE )
  400db6:	f1ba 0f00 	cmp.w	sl, #0
  400dba:	d0e0      	beq.n	400d7e <xQueueReceive+0x82>
        taskEXIT_CRITICAL();
  400dbc:	4b23      	ldr	r3, [pc, #140]	; (400e4c <xQueueReceive+0x150>)
  400dbe:	4798      	blx	r3
        vTaskSuspendAll();
  400dc0:	4b27      	ldr	r3, [pc, #156]	; (400e60 <xQueueReceive+0x164>)
  400dc2:	4798      	blx	r3
        prvLockQueue( pxQueue );
  400dc4:	47a8      	blx	r5
  400dc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400dca:	b25b      	sxtb	r3, r3
  400dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dd0:	bf04      	itt	eq
  400dd2:	2300      	moveq	r3, #0
  400dd4:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400dd8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400ddc:	b25b      	sxtb	r3, r3
  400dde:	f1b3 3fff 	cmp.w	r3, #4294967295
  400de2:	bf04      	itt	eq
  400de4:	2300      	moveq	r3, #0
  400de6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400dea:	4b18      	ldr	r3, [pc, #96]	; (400e4c <xQueueReceive+0x150>)
  400dec:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400dee:	a901      	add	r1, sp, #4
  400df0:	a802      	add	r0, sp, #8
  400df2:	4b1c      	ldr	r3, [pc, #112]	; (400e64 <xQueueReceive+0x168>)
  400df4:	4798      	blx	r3
  400df6:	2800      	cmp	r0, #0
  400df8:	d1ca      	bne.n	400d90 <xQueueReceive+0x94>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400dfa:	4620      	mov	r0, r4
  400dfc:	4b17      	ldr	r3, [pc, #92]	; (400e5c <xQueueReceive+0x160>)
  400dfe:	4798      	blx	r3
  400e00:	2800      	cmp	r0, #0
  400e02:	d0bf      	beq.n	400d84 <xQueueReceive+0x88>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400e04:	9901      	ldr	r1, [sp, #4]
  400e06:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e0a:	4b17      	ldr	r3, [pc, #92]	; (400e68 <xQueueReceive+0x16c>)
  400e0c:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
  400e0e:	4620      	mov	r0, r4
  400e10:	4b10      	ldr	r3, [pc, #64]	; (400e54 <xQueueReceive+0x158>)
  400e12:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
  400e14:	4b10      	ldr	r3, [pc, #64]	; (400e58 <xQueueReceive+0x15c>)
  400e16:	4798      	blx	r3
  400e18:	2800      	cmp	r0, #0
  400e1a:	d1c3      	bne.n	400da4 <xQueueReceive+0xa8>
                    portYIELD_WITHIN_API();
  400e1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400e20:	f8c9 3000 	str.w	r3, [r9]
  400e24:	f3bf 8f4f 	dsb	sy
  400e28:	f3bf 8f6f 	isb	sy
  400e2c:	e7ba      	b.n	400da4 <xQueueReceive+0xa8>
                return errQUEUE_EMPTY;
  400e2e:	2000      	movs	r0, #0
  400e30:	e799      	b.n	400d66 <xQueueReceive+0x6a>
  400e32:	bf00      	nop
  400e34:	004019dd 	.word	0x004019dd
  400e38:	00402e18 	.word	0x00402e18
  400e3c:	0040288d 	.word	0x0040288d
  400e40:	004002e5 	.word	0x004002e5
  400e44:	0040192d 	.word	0x0040192d
  400e48:	00400975 	.word	0x00400975
  400e4c:	0040032d 	.word	0x0040032d
  400e50:	00401839 	.word	0x00401839
  400e54:	0040099d 	.word	0x0040099d
  400e58:	004014f1 	.word	0x004014f1
  400e5c:	00400841 	.word	0x00400841
  400e60:	00401365 	.word	0x00401365
  400e64:	00401945 	.word	0x00401945
  400e68:	00401799 	.word	0x00401799
  400e6c:	e000ed04 	.word	0xe000ed04

00400e70 <uxQueueMessagesWaiting>:
{
  400e70:	b510      	push	{r4, lr}
    configASSERT( xQueue );
  400e72:	4604      	mov	r4, r0
  400e74:	b130      	cbz	r0, 400e84 <uxQueueMessagesWaiting+0x14>
    taskENTER_CRITICAL();
  400e76:	4b06      	ldr	r3, [pc, #24]	; (400e90 <uxQueueMessagesWaiting+0x20>)
  400e78:	4798      	blx	r3
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
  400e7a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    taskEXIT_CRITICAL();
  400e7c:	4b05      	ldr	r3, [pc, #20]	; (400e94 <uxQueueMessagesWaiting+0x24>)
  400e7e:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
  400e80:	4620      	mov	r0, r4
  400e82:	bd10      	pop	{r4, pc}
    configASSERT( xQueue );
  400e84:	f240 71e3 	movw	r1, #2019	; 0x7e3
  400e88:	4803      	ldr	r0, [pc, #12]	; (400e98 <uxQueueMessagesWaiting+0x28>)
  400e8a:	4b04      	ldr	r3, [pc, #16]	; (400e9c <uxQueueMessagesWaiting+0x2c>)
  400e8c:	4798      	blx	r3
  400e8e:	e7f2      	b.n	400e76 <uxQueueMessagesWaiting+0x6>
  400e90:	004002e5 	.word	0x004002e5
  400e94:	0040032d 	.word	0x0040032d
  400e98:	00402e18 	.word	0x00402e18
  400e9c:	0040288d 	.word	0x0040288d

00400ea0 <vQueueAddToRegistry>:
    {
  400ea0:	b570      	push	{r4, r5, r6, lr}
  400ea2:	460d      	mov	r5, r1
        configASSERT( xQueue );
  400ea4:	4604      	mov	r4, r0
  400ea6:	b1b8      	cbz	r0, 400ed8 <vQueueAddToRegistry+0x38>
        if( pcQueueName != NULL )
  400ea8:	b1ad      	cbz	r5, 400ed6 <vQueueAddToRegistry+0x36>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  400eaa:	4b12      	ldr	r3, [pc, #72]	; (400ef4 <vQueueAddToRegistry+0x54>)
  400eac:	685b      	ldr	r3, [r3, #4]
  400eae:	429c      	cmp	r4, r3
  400eb0:	d018      	beq.n	400ee4 <vQueueAddToRegistry+0x44>
  400eb2:	4a10      	ldr	r2, [pc, #64]	; (400ef4 <vQueueAddToRegistry+0x54>)
  400eb4:	2100      	movs	r1, #0
  400eb6:	460b      	mov	r3, r1
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  400eb8:	4616      	mov	r6, r2
  400eba:	b1a9      	cbz	r1, 400ee8 <vQueueAddToRegistry+0x48>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400ebc:	3301      	adds	r3, #1
  400ebe:	2b08      	cmp	r3, #8
  400ec0:	d006      	beq.n	400ed0 <vQueueAddToRegistry+0x30>
  400ec2:	3208      	adds	r2, #8
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  400ec4:	6850      	ldr	r0, [r2, #4]
  400ec6:	4284      	cmp	r4, r0
  400ec8:	d1f7      	bne.n	400eba <vQueueAddToRegistry+0x1a>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  400eca:	490a      	ldr	r1, [pc, #40]	; (400ef4 <vQueueAddToRegistry+0x54>)
  400ecc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
        if( pxEntryToWrite != NULL )
  400ed0:	b109      	cbz	r1, 400ed6 <vQueueAddToRegistry+0x36>
            pxEntryToWrite->pcQueueName = pcQueueName;
  400ed2:	600d      	str	r5, [r1, #0]
            pxEntryToWrite->xHandle = xQueue;
  400ed4:	604c      	str	r4, [r1, #4]
  400ed6:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( xQueue );
  400ed8:	f640 21c8 	movw	r1, #2760	; 0xac8
  400edc:	4806      	ldr	r0, [pc, #24]	; (400ef8 <vQueueAddToRegistry+0x58>)
  400ede:	4b07      	ldr	r3, [pc, #28]	; (400efc <vQueueAddToRegistry+0x5c>)
  400ee0:	4798      	blx	r3
  400ee2:	e7e1      	b.n	400ea8 <vQueueAddToRegistry+0x8>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  400ee4:	2300      	movs	r3, #0
  400ee6:	e7f0      	b.n	400eca <vQueueAddToRegistry+0x2a>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  400ee8:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  400eec:	2800      	cmp	r0, #0
  400eee:	bf08      	it	eq
  400ef0:	4611      	moveq	r1, r2
  400ef2:	e7e3      	b.n	400ebc <vQueueAddToRegistry+0x1c>
  400ef4:	2000060c 	.word	0x2000060c
  400ef8:	00402e18 	.word	0x00402e18
  400efc:	0040288d 	.word	0x0040288d

00400f00 <vQueueWaitForMessageRestricted>:
    {
  400f00:	b570      	push	{r4, r5, r6, lr}
  400f02:	4604      	mov	r4, r0
  400f04:	460d      	mov	r5, r1
  400f06:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
  400f08:	4b11      	ldr	r3, [pc, #68]	; (400f50 <vQueueWaitForMessageRestricted+0x50>)
  400f0a:	4798      	blx	r3
  400f0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400f10:	b25b      	sxtb	r3, r3
  400f12:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f16:	bf04      	itt	eq
  400f18:	2300      	moveq	r3, #0
  400f1a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400f1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400f22:	b25b      	sxtb	r3, r3
  400f24:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f28:	bf04      	itt	eq
  400f2a:	2300      	moveq	r3, #0
  400f2c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400f30:	4b08      	ldr	r3, [pc, #32]	; (400f54 <vQueueWaitForMessageRestricted+0x54>)
  400f32:	4798      	blx	r3
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  400f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f36:	b11b      	cbz	r3, 400f40 <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
  400f38:	4620      	mov	r0, r4
  400f3a:	4b07      	ldr	r3, [pc, #28]	; (400f58 <vQueueWaitForMessageRestricted+0x58>)
  400f3c:	4798      	blx	r3
  400f3e:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  400f40:	4632      	mov	r2, r6
  400f42:	4629      	mov	r1, r5
  400f44:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f48:	4b04      	ldr	r3, [pc, #16]	; (400f5c <vQueueWaitForMessageRestricted+0x5c>)
  400f4a:	4798      	blx	r3
  400f4c:	e7f4      	b.n	400f38 <vQueueWaitForMessageRestricted+0x38>
  400f4e:	bf00      	nop
  400f50:	004002e5 	.word	0x004002e5
  400f54:	0040032d 	.word	0x0040032d
  400f58:	0040099d 	.word	0x0040099d
  400f5c:	004017d9 	.word	0x004017d9

00400f60 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400f60:	4b07      	ldr	r3, [pc, #28]	; (400f80 <prvResetNextTaskUnblockTime+0x20>)
  400f62:	681b      	ldr	r3, [r3, #0]
  400f64:	681b      	ldr	r3, [r3, #0]
  400f66:	b133      	cbz	r3, 400f76 <prvResetNextTaskUnblockTime+0x16>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  400f68:	4b05      	ldr	r3, [pc, #20]	; (400f80 <prvResetNextTaskUnblockTime+0x20>)
  400f6a:	681b      	ldr	r3, [r3, #0]
  400f6c:	68db      	ldr	r3, [r3, #12]
  400f6e:	681a      	ldr	r2, [r3, #0]
  400f70:	4b04      	ldr	r3, [pc, #16]	; (400f84 <prvResetNextTaskUnblockTime+0x24>)
  400f72:	601a      	str	r2, [r3, #0]
  400f74:	4770      	bx	lr
        xNextTaskUnblockTime = portMAX_DELAY;
  400f76:	f04f 32ff 	mov.w	r2, #4294967295
  400f7a:	4b02      	ldr	r3, [pc, #8]	; (400f84 <prvResetNextTaskUnblockTime+0x24>)
  400f7c:	601a      	str	r2, [r3, #0]
  400f7e:	4770      	bx	lr
  400f80:	20000494 	.word	0x20000494
  400f84:	2000057c 	.word	0x2000057c

00400f88 <prvIdleTask>:
{
  400f88:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  400f8a:	4d15      	ldr	r5, [pc, #84]	; (400fe0 <prvIdleTask+0x58>)
                taskENTER_CRITICAL();
  400f8c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 400ff4 <prvIdleTask+0x6c>
                taskYIELD();
  400f90:	f8df 9064 	ldr.w	r9, [pc, #100]	; 400ff8 <prvIdleTask+0x70>
  400f94:	e007      	b.n	400fa6 <prvIdleTask+0x1e>
  400f96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400f9a:	f8c9 3000 	str.w	r3, [r9]
  400f9e:	f3bf 8f4f 	dsb	sy
  400fa2:	f3bf 8f6f 	isb	sy
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  400fa6:	682b      	ldr	r3, [r5, #0]
  400fa8:	2b00      	cmp	r3, #0
  400faa:	d0f4      	beq.n	400f96 <prvIdleTask+0xe>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  400fac:	4f0d      	ldr	r7, [pc, #52]	; (400fe4 <prvIdleTask+0x5c>)
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  400fae:	4e0e      	ldr	r6, [pc, #56]	; (400fe8 <prvIdleTask+0x60>)
                taskENTER_CRITICAL();
  400fb0:	47c0      	blx	r8
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  400fb2:	68fb      	ldr	r3, [r7, #12]
  400fb4:	68dc      	ldr	r4, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  400fb6:	1d20      	adds	r0, r4, #4
  400fb8:	47b0      	blx	r6
                    --uxCurrentNumberOfTasks;
  400fba:	4a0c      	ldr	r2, [pc, #48]	; (400fec <prvIdleTask+0x64>)
  400fbc:	6813      	ldr	r3, [r2, #0]
  400fbe:	3b01      	subs	r3, #1
  400fc0:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
  400fc2:	682b      	ldr	r3, [r5, #0]
  400fc4:	3b01      	subs	r3, #1
  400fc6:	602b      	str	r3, [r5, #0]
                taskEXIT_CRITICAL();
  400fc8:	4b09      	ldr	r3, [pc, #36]	; (400ff0 <prvIdleTask+0x68>)
  400fca:	4798      	blx	r3
                vPortFreeStack( pxTCB->pxStack );
  400fcc:	6b20      	ldr	r0, [r4, #48]	; 0x30
  400fce:	f8df a02c 	ldr.w	sl, [pc, #44]	; 400ffc <prvIdleTask+0x74>
  400fd2:	47d0      	blx	sl
                vPortFree( pxTCB );
  400fd4:	4620      	mov	r0, r4
  400fd6:	47d0      	blx	sl
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  400fd8:	682b      	ldr	r3, [r5, #0]
  400fda:	2b00      	cmp	r3, #0
  400fdc:	d1e8      	bne.n	400fb0 <prvIdleTask+0x28>
  400fde:	e7da      	b.n	400f96 <prvIdleTask+0xe>
  400fe0:	20000540 	.word	0x20000540
  400fe4:	200005b4 	.word	0x200005b4
  400fe8:	004001e1 	.word	0x004001e1
  400fec:	2000053c 	.word	0x2000053c
  400ff0:	0040032d 	.word	0x0040032d
  400ff4:	004002e5 	.word	0x004002e5
  400ff8:	e000ed04 	.word	0xe000ed04
  400ffc:	00400699 	.word	0x00400699

00401000 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
  401000:	b570      	push	{r4, r5, r6, lr}
  401002:	4604      	mov	r4, r0
  401004:	460e      	mov	r6, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
  401006:	4b24      	ldr	r3, [pc, #144]	; (401098 <prvAddCurrentTaskToDelayedList+0x98>)
  401008:	681d      	ldr	r5, [r3, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40100a:	4b24      	ldr	r3, [pc, #144]	; (40109c <prvAddCurrentTaskToDelayedList+0x9c>)
  40100c:	6818      	ldr	r0, [r3, #0]
  40100e:	3004      	adds	r0, #4
  401010:	4b23      	ldr	r3, [pc, #140]	; (4010a0 <prvAddCurrentTaskToDelayedList+0xa0>)
  401012:	4798      	blx	r3
  401014:	b948      	cbnz	r0, 40102a <prvAddCurrentTaskToDelayedList+0x2a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  401016:	4b21      	ldr	r3, [pc, #132]	; (40109c <prvAddCurrentTaskToDelayedList+0x9c>)
  401018:	681a      	ldr	r2, [r3, #0]
  40101a:	4922      	ldr	r1, [pc, #136]	; (4010a4 <prvAddCurrentTaskToDelayedList+0xa4>)
  40101c:	680b      	ldr	r3, [r1, #0]
  40101e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401020:	2201      	movs	r2, #1
  401022:	4082      	lsls	r2, r0
  401024:	ea23 0302 	bic.w	r3, r3, r2
  401028:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40102a:	f1b4 3fff 	cmp.w	r4, #4294967295
  40102e:	d013      	beq.n	401058 <prvAddCurrentTaskToDelayedList+0x58>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
  401030:	442c      	add	r4, r5

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401032:	4b1a      	ldr	r3, [pc, #104]	; (40109c <prvAddCurrentTaskToDelayedList+0x9c>)
  401034:	681b      	ldr	r3, [r3, #0]
  401036:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
  401038:	42a5      	cmp	r5, r4
  40103a:	d824      	bhi.n	401086 <prvAddCurrentTaskToDelayedList+0x86>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40103c:	4b1a      	ldr	r3, [pc, #104]	; (4010a8 <prvAddCurrentTaskToDelayedList+0xa8>)
  40103e:	6818      	ldr	r0, [r3, #0]
  401040:	4b16      	ldr	r3, [pc, #88]	; (40109c <prvAddCurrentTaskToDelayedList+0x9c>)
  401042:	6819      	ldr	r1, [r3, #0]
  401044:	3104      	adds	r1, #4
  401046:	4b19      	ldr	r3, [pc, #100]	; (4010ac <prvAddCurrentTaskToDelayedList+0xac>)
  401048:	4798      	blx	r3

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
  40104a:	4b19      	ldr	r3, [pc, #100]	; (4010b0 <prvAddCurrentTaskToDelayedList+0xb0>)
  40104c:	681b      	ldr	r3, [r3, #0]
  40104e:	429c      	cmp	r4, r3
                    {
                        xNextTaskUnblockTime = xTimeToWake;
  401050:	bf3c      	itt	cc
  401052:	4b17      	ldrcc	r3, [pc, #92]	; (4010b0 <prvAddCurrentTaskToDelayedList+0xb0>)
  401054:	601c      	strcc	r4, [r3, #0]
  401056:	bd70      	pop	{r4, r5, r6, pc}
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401058:	2e00      	cmp	r6, #0
  40105a:	d0e9      	beq.n	401030 <prvAddCurrentTaskToDelayedList+0x30>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40105c:	4a15      	ldr	r2, [pc, #84]	; (4010b4 <prvAddCurrentTaskToDelayedList+0xb4>)
  40105e:	6851      	ldr	r1, [r2, #4]
  401060:	4b0e      	ldr	r3, [pc, #56]	; (40109c <prvAddCurrentTaskToDelayedList+0x9c>)
  401062:	6818      	ldr	r0, [r3, #0]
  401064:	6081      	str	r1, [r0, #8]
  401066:	6818      	ldr	r0, [r3, #0]
  401068:	688c      	ldr	r4, [r1, #8]
  40106a:	60c4      	str	r4, [r0, #12]
  40106c:	688c      	ldr	r4, [r1, #8]
  40106e:	6818      	ldr	r0, [r3, #0]
  401070:	3004      	adds	r0, #4
  401072:	6060      	str	r0, [r4, #4]
  401074:	6818      	ldr	r0, [r3, #0]
  401076:	3004      	adds	r0, #4
  401078:	6088      	str	r0, [r1, #8]
  40107a:	681b      	ldr	r3, [r3, #0]
  40107c:	615a      	str	r2, [r3, #20]
  40107e:	6813      	ldr	r3, [r2, #0]
  401080:	3301      	adds	r3, #1
  401082:	6013      	str	r3, [r2, #0]
  401084:	bd70      	pop	{r4, r5, r6, pc}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401086:	4b0c      	ldr	r3, [pc, #48]	; (4010b8 <prvAddCurrentTaskToDelayedList+0xb8>)
  401088:	6818      	ldr	r0, [r3, #0]
  40108a:	4b04      	ldr	r3, [pc, #16]	; (40109c <prvAddCurrentTaskToDelayedList+0x9c>)
  40108c:	6819      	ldr	r1, [r3, #0]
  40108e:	3104      	adds	r1, #4
  401090:	4b06      	ldr	r3, [pc, #24]	; (4010ac <prvAddCurrentTaskToDelayedList+0xac>)
  401092:	4798      	blx	r3
  401094:	bd70      	pop	{r4, r5, r6, pc}
  401096:	bf00      	nop
  401098:	200005c8 	.word	0x200005c8
  40109c:	20000490 	.word	0x20000490
  4010a0:	004001e1 	.word	0x004001e1
  4010a4:	2000054c 	.word	0x2000054c
  4010a8:	20000494 	.word	0x20000494
  4010ac:	004001ad 	.word	0x004001ad
  4010b0:	2000057c 	.word	0x2000057c
  4010b4:	200005a0 	.word	0x200005a0
  4010b8:	20000498 	.word	0x20000498

004010bc <xTaskCreate>:
    {
  4010bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010c0:	b083      	sub	sp, #12
  4010c2:	4683      	mov	fp, r0
  4010c4:	460e      	mov	r6, r1
  4010c6:	9301      	str	r3, [sp, #4]
  4010c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4010ca:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  4010ce:	0097      	lsls	r7, r2, #2
  4010d0:	4638      	mov	r0, r7
  4010d2:	4b67      	ldr	r3, [pc, #412]	; (401270 <xTaskCreate+0x1b4>)
  4010d4:	4798      	blx	r3
                if( pxStack != NULL )
  4010d6:	2800      	cmp	r0, #0
  4010d8:	f000 809b 	beq.w	401212 <xTaskCreate+0x156>
  4010dc:	4680      	mov	r8, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  4010de:	2064      	movs	r0, #100	; 0x64
  4010e0:	4b63      	ldr	r3, [pc, #396]	; (401270 <xTaskCreate+0x1b4>)
  4010e2:	4798      	blx	r3
                    if( pxNewTCB != NULL )
  4010e4:	4604      	mov	r4, r0
  4010e6:	2800      	cmp	r0, #0
  4010e8:	f000 8090 	beq.w	40120c <xTaskCreate+0x150>
                        pxNewTCB->pxStack = pxStack;
  4010ec:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  4010f0:	463a      	mov	r2, r7
  4010f2:	21a5      	movs	r1, #165	; 0xa5
  4010f4:	4640      	mov	r0, r8
  4010f6:	4b5f      	ldr	r3, [pc, #380]	; (401274 <xTaskCreate+0x1b8>)
  4010f8:	4798      	blx	r3
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  4010fa:	3f04      	subs	r7, #4
  4010fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4010fe:	441f      	add	r7, r3
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  401100:	f027 0707 	bic.w	r7, r7, #7
    if( pcName != NULL )
  401104:	2e00      	cmp	r6, #0
  401106:	f000 8087 	beq.w	401218 <xTaskCreate+0x15c>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  40110a:	7833      	ldrb	r3, [r6, #0]
  40110c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            if( pcName[ x ] == ( char ) 0x00 )
  401110:	7833      	ldrb	r3, [r6, #0]
  401112:	b15b      	cbz	r3, 40112c <xTaskCreate+0x70>
  401114:	4633      	mov	r3, r6
  401116:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40111a:	3613      	adds	r6, #19
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  40111c:	7859      	ldrb	r1, [r3, #1]
  40111e:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
  401122:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401126:	b109      	cbz	r1, 40112c <xTaskCreate+0x70>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401128:	42b3      	cmp	r3, r6
  40112a:	d1f7      	bne.n	40111c <xTaskCreate+0x60>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40112c:	2300      	movs	r3, #0
  40112e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    configASSERT( uxPriority < configMAX_PRIORITIES );
  401132:	2d07      	cmp	r5, #7
  401134:	d874      	bhi.n	401220 <xTaskCreate+0x164>
  401136:	2d07      	cmp	r5, #7
  401138:	bf28      	it	cs
  40113a:	2507      	movcs	r5, #7
    pxNewTCB->uxPriority = uxPriority;
  40113c:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
  40113e:	64a5      	str	r5, [r4, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
  401140:	2600      	movs	r6, #0
  401142:	64e6      	str	r6, [r4, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401144:	f104 0804 	add.w	r8, r4, #4
  401148:	4640      	mov	r0, r8
  40114a:	f8df 917c 	ldr.w	r9, [pc, #380]	; 4012c8 <xTaskCreate+0x20c>
  40114e:	47c8      	blx	r9
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401150:	f104 0018 	add.w	r0, r4, #24
  401154:	47c8      	blx	r9
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401156:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401158:	f1c5 0508 	rsb	r5, r5, #8
  40115c:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  40115e:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
  401160:	6526      	str	r6, [r4, #80]	; 0x50
  401162:	6566      	str	r6, [r4, #84]	; 0x54
  401164:	65a6      	str	r6, [r4, #88]	; 0x58
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
  401166:	65e6      	str	r6, [r4, #92]	; 0x5c
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
  401168:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40116c:	9a01      	ldr	r2, [sp, #4]
  40116e:	4659      	mov	r1, fp
  401170:	4638      	mov	r0, r7
  401172:	4b41      	ldr	r3, [pc, #260]	; (401278 <xTaskCreate+0x1bc>)
  401174:	4798      	blx	r3
  401176:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
  401178:	f1ba 0f00 	cmp.w	sl, #0
  40117c:	d001      	beq.n	401182 <xTaskCreate+0xc6>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40117e:	f8ca 4000 	str.w	r4, [sl]
    taskENTER_CRITICAL();
  401182:	4b3e      	ldr	r3, [pc, #248]	; (40127c <xTaskCreate+0x1c0>)
  401184:	4798      	blx	r3
        uxCurrentNumberOfTasks++;
  401186:	4a3e      	ldr	r2, [pc, #248]	; (401280 <xTaskCreate+0x1c4>)
  401188:	6813      	ldr	r3, [r2, #0]
  40118a:	3301      	adds	r3, #1
  40118c:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
  40118e:	4b3d      	ldr	r3, [pc, #244]	; (401284 <xTaskCreate+0x1c8>)
  401190:	681b      	ldr	r3, [r3, #0]
  401192:	2b00      	cmp	r3, #0
  401194:	d04a      	beq.n	40122c <xTaskCreate+0x170>
            if( xSchedulerRunning == pdFALSE )
  401196:	4b3c      	ldr	r3, [pc, #240]	; (401288 <xTaskCreate+0x1cc>)
  401198:	681b      	ldr	r3, [r3, #0]
  40119a:	b93b      	cbnz	r3, 4011ac <xTaskCreate+0xf0>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  40119c:	4b39      	ldr	r3, [pc, #228]	; (401284 <xTaskCreate+0x1c8>)
  40119e:	681b      	ldr	r3, [r3, #0]
  4011a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4011a4:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
  4011a6:	bf9c      	itt	ls
  4011a8:	4b36      	ldrls	r3, [pc, #216]	; (401284 <xTaskCreate+0x1c8>)
  4011aa:	601c      	strls	r4, [r3, #0]
        uxTaskNumber++;
  4011ac:	4a37      	ldr	r2, [pc, #220]	; (40128c <xTaskCreate+0x1d0>)
  4011ae:	6813      	ldr	r3, [r2, #0]
  4011b0:	3301      	adds	r3, #1
  4011b2:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
  4011b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4011b6:	4936      	ldr	r1, [pc, #216]	; (401290 <xTaskCreate+0x1d4>)
  4011b8:	6808      	ldr	r0, [r1, #0]
  4011ba:	2201      	movs	r2, #1
  4011bc:	409a      	lsls	r2, r3
  4011be:	4302      	orrs	r2, r0
  4011c0:	600a      	str	r2, [r1, #0]
  4011c2:	4a34      	ldr	r2, [pc, #208]	; (401294 <xTaskCreate+0x1d8>)
  4011c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4011c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4011cc:	685b      	ldr	r3, [r3, #4]
  4011ce:	60a3      	str	r3, [r4, #8]
  4011d0:	6899      	ldr	r1, [r3, #8]
  4011d2:	60e1      	str	r1, [r4, #12]
  4011d4:	6899      	ldr	r1, [r3, #8]
  4011d6:	f8c1 8004 	str.w	r8, [r1, #4]
  4011da:	f8c3 8008 	str.w	r8, [r3, #8]
  4011de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4011e0:	0083      	lsls	r3, r0, #2
  4011e2:	1819      	adds	r1, r3, r0
  4011e4:	0089      	lsls	r1, r1, #2
  4011e6:	1855      	adds	r5, r2, r1
  4011e8:	6165      	str	r5, [r4, #20]
  4011ea:	5851      	ldr	r1, [r2, r1]
  4011ec:	3101      	adds	r1, #1
  4011ee:	4403      	add	r3, r0
  4011f0:	009b      	lsls	r3, r3, #2
  4011f2:	50d1      	str	r1, [r2, r3]
    taskEXIT_CRITICAL();
  4011f4:	4b28      	ldr	r3, [pc, #160]	; (401298 <xTaskCreate+0x1dc>)
  4011f6:	4798      	blx	r3
    if( xSchedulerRunning != pdFALSE )
  4011f8:	4b23      	ldr	r3, [pc, #140]	; (401288 <xTaskCreate+0x1cc>)
  4011fa:	681b      	ldr	r3, [r3, #0]
  4011fc:	2b00      	cmp	r3, #0
  4011fe:	d035      	beq.n	40126c <xTaskCreate+0x1b0>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  401200:	4b20      	ldr	r3, [pc, #128]	; (401284 <xTaskCreate+0x1c8>)
  401202:	681b      	ldr	r3, [r3, #0]
            xReturn = pdPASS;
  401204:	2001      	movs	r0, #1
    }
  401206:	b003      	add	sp, #12
  401208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        vPortFreeStack( pxStack );
  40120c:	4640      	mov	r0, r8
  40120e:	4b23      	ldr	r3, [pc, #140]	; (40129c <xTaskCreate+0x1e0>)
  401210:	4798      	blx	r3
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401212:	f04f 30ff 	mov.w	r0, #4294967295
  401216:	e7f6      	b.n	401206 <xTaskCreate+0x14a>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
  401218:	2300      	movs	r3, #0
  40121a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40121e:	e788      	b.n	401132 <xTaskCreate+0x76>
    configASSERT( uxPriority < configMAX_PRIORITIES );
  401220:	f240 3197 	movw	r1, #919	; 0x397
  401224:	481e      	ldr	r0, [pc, #120]	; (4012a0 <xTaskCreate+0x1e4>)
  401226:	4b1f      	ldr	r3, [pc, #124]	; (4012a4 <xTaskCreate+0x1e8>)
  401228:	4798      	blx	r3
  40122a:	e784      	b.n	401136 <xTaskCreate+0x7a>
            pxCurrentTCB = pxNewTCB;
  40122c:	4b15      	ldr	r3, [pc, #84]	; (401284 <xTaskCreate+0x1c8>)
  40122e:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401230:	6813      	ldr	r3, [r2, #0]
  401232:	2b01      	cmp	r3, #1
  401234:	d1ba      	bne.n	4011ac <xTaskCreate+0xf0>
  401236:	4d17      	ldr	r5, [pc, #92]	; (401294 <xTaskCreate+0x1d8>)
  401238:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40123c:	4e1a      	ldr	r6, [pc, #104]	; (4012a8 <xTaskCreate+0x1ec>)
  40123e:	4628      	mov	r0, r5
  401240:	47b0      	blx	r6
  401242:	3514      	adds	r5, #20
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401244:	42af      	cmp	r7, r5
  401246:	d1fa      	bne.n	40123e <xTaskCreate+0x182>
    vListInitialise( &xDelayedTaskList1 );
  401248:	4f18      	ldr	r7, [pc, #96]	; (4012ac <xTaskCreate+0x1f0>)
  40124a:	4638      	mov	r0, r7
  40124c:	4d16      	ldr	r5, [pc, #88]	; (4012a8 <xTaskCreate+0x1ec>)
  40124e:	47a8      	blx	r5
    vListInitialise( &xDelayedTaskList2 );
  401250:	4e17      	ldr	r6, [pc, #92]	; (4012b0 <xTaskCreate+0x1f4>)
  401252:	4630      	mov	r0, r6
  401254:	47a8      	blx	r5
    vListInitialise( &xPendingReadyList );
  401256:	4817      	ldr	r0, [pc, #92]	; (4012b4 <xTaskCreate+0x1f8>)
  401258:	47a8      	blx	r5
            vListInitialise( &xTasksWaitingTermination );
  40125a:	4817      	ldr	r0, [pc, #92]	; (4012b8 <xTaskCreate+0x1fc>)
  40125c:	47a8      	blx	r5
            vListInitialise( &xSuspendedTaskList );
  40125e:	4817      	ldr	r0, [pc, #92]	; (4012bc <xTaskCreate+0x200>)
  401260:	47a8      	blx	r5
    pxDelayedTaskList = &xDelayedTaskList1;
  401262:	4b17      	ldr	r3, [pc, #92]	; (4012c0 <xTaskCreate+0x204>)
  401264:	601f      	str	r7, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401266:	4b17      	ldr	r3, [pc, #92]	; (4012c4 <xTaskCreate+0x208>)
  401268:	601e      	str	r6, [r3, #0]
  40126a:	e79f      	b.n	4011ac <xTaskCreate+0xf0>
            xReturn = pdPASS;
  40126c:	2001      	movs	r0, #1
        return xReturn;
  40126e:	e7ca      	b.n	401206 <xTaskCreate+0x14a>
  401270:	004005a5 	.word	0x004005a5
  401274:	00402a65 	.word	0x00402a65
  401278:	00400289 	.word	0x00400289
  40127c:	004002e5 	.word	0x004002e5
  401280:	2000053c 	.word	0x2000053c
  401284:	20000490 	.word	0x20000490
  401288:	2000059c 	.word	0x2000059c
  40128c:	20000548 	.word	0x20000548
  401290:	2000054c 	.word	0x2000054c
  401294:	2000049c 	.word	0x2000049c
  401298:	0040032d 	.word	0x0040032d
  40129c:	00400699 	.word	0x00400699
  4012a0:	00402e30 	.word	0x00402e30
  4012a4:	0040288d 	.word	0x0040288d
  4012a8:	00400191 	.word	0x00400191
  4012ac:	20000550 	.word	0x20000550
  4012b0:	20000564 	.word	0x20000564
  4012b4:	20000588 	.word	0x20000588
  4012b8:	200005b4 	.word	0x200005b4
  4012bc:	200005a0 	.word	0x200005a0
  4012c0:	20000494 	.word	0x20000494
  4012c4:	20000498 	.word	0x20000498
  4012c8:	004001a7 	.word	0x004001a7

004012cc <vTaskStartScheduler>:
{
  4012cc:	b510      	push	{r4, lr}
  4012ce:	b082      	sub	sp, #8
            xReturn = xTaskCreate( prvIdleTask,
  4012d0:	4b18      	ldr	r3, [pc, #96]	; (401334 <vTaskStartScheduler+0x68>)
  4012d2:	9301      	str	r3, [sp, #4]
  4012d4:	2300      	movs	r3, #0
  4012d6:	9300      	str	r3, [sp, #0]
  4012d8:	2282      	movs	r2, #130	; 0x82
  4012da:	4917      	ldr	r1, [pc, #92]	; (401338 <vTaskStartScheduler+0x6c>)
  4012dc:	4817      	ldr	r0, [pc, #92]	; (40133c <vTaskStartScheduler+0x70>)
  4012de:	4c18      	ldr	r4, [pc, #96]	; (401340 <vTaskStartScheduler+0x74>)
  4012e0:	47a0      	blx	r4
            if( xReturn == pdPASS )
  4012e2:	2801      	cmp	r0, #1
  4012e4:	d006      	beq.n	4012f4 <vTaskStartScheduler+0x28>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4012e6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4012ea:	d01c      	beq.n	401326 <vTaskStartScheduler+0x5a>
    ( void ) uxTopUsedPriority;
  4012ec:	4b15      	ldr	r3, [pc, #84]	; (401344 <vTaskStartScheduler+0x78>)
  4012ee:	681b      	ldr	r3, [r3, #0]
}
  4012f0:	b002      	add	sp, #8
  4012f2:	bd10      	pop	{r4, pc}
                xReturn = xTimerCreateTimerTask();
  4012f4:	4b14      	ldr	r3, [pc, #80]	; (401348 <vTaskStartScheduler+0x7c>)
  4012f6:	4798      	blx	r3
    if( xReturn == pdPASS )
  4012f8:	2801      	cmp	r0, #1
  4012fa:	d1f4      	bne.n	4012e6 <vTaskStartScheduler+0x1a>
        __asm volatile
  4012fc:	f04f 0350 	mov.w	r3, #80	; 0x50
  401300:	f383 8811 	msr	BASEPRI, r3
  401304:	f3bf 8f6f 	isb	sy
  401308:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
  40130c:	f04f 32ff 	mov.w	r2, #4294967295
  401310:	4b0e      	ldr	r3, [pc, #56]	; (40134c <vTaskStartScheduler+0x80>)
  401312:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
  401314:	2201      	movs	r2, #1
  401316:	4b0e      	ldr	r3, [pc, #56]	; (401350 <vTaskStartScheduler+0x84>)
  401318:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  40131a:	2200      	movs	r2, #0
  40131c:	4b0d      	ldr	r3, [pc, #52]	; (401354 <vTaskStartScheduler+0x88>)
  40131e:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
  401320:	4b0d      	ldr	r3, [pc, #52]	; (401358 <vTaskStartScheduler+0x8c>)
  401322:	4798      	blx	r3
  401324:	e7e2      	b.n	4012ec <vTaskStartScheduler+0x20>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401326:	f44f 6104 	mov.w	r1, #2112	; 0x840
  40132a:	480c      	ldr	r0, [pc, #48]	; (40135c <vTaskStartScheduler+0x90>)
  40132c:	4b0c      	ldr	r3, [pc, #48]	; (401360 <vTaskStartScheduler+0x94>)
  40132e:	4798      	blx	r3
  401330:	e7dc      	b.n	4012ec <vTaskStartScheduler+0x20>
  401332:	bf00      	nop
  401334:	20000578 	.word	0x20000578
  401338:	00402e48 	.word	0x00402e48
  40133c:	00400f89 	.word	0x00400f89
  401340:	004010bd 	.word	0x004010bd
  401344:	20000008 	.word	0x20000008
  401348:	00401e19 	.word	0x00401e19
  40134c:	2000057c 	.word	0x2000057c
  401350:	2000059c 	.word	0x2000059c
  401354:	200005c8 	.word	0x200005c8
  401358:	0040042d 	.word	0x0040042d
  40135c:	00402e30 	.word	0x00402e30
  401360:	0040288d 	.word	0x0040288d

00401364 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
  401364:	4a02      	ldr	r2, [pc, #8]	; (401370 <vTaskSuspendAll+0xc>)
  401366:	6813      	ldr	r3, [r2, #0]
  401368:	3301      	adds	r3, #1
  40136a:	6013      	str	r3, [r2, #0]
    portMEMORY_BARRIER();
  40136c:	4770      	bx	lr
  40136e:	bf00      	nop
  401370:	20000544 	.word	0x20000544

00401374 <xTaskGetTickCount>:
        xTicks = xTickCount;
  401374:	4b01      	ldr	r3, [pc, #4]	; (40137c <xTaskGetTickCount+0x8>)
  401376:	6818      	ldr	r0, [r3, #0]
}
  401378:	4770      	bx	lr
  40137a:	bf00      	nop
  40137c:	200005c8 	.word	0x200005c8

00401380 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401380:	4b4f      	ldr	r3, [pc, #316]	; (4014c0 <xTaskIncrementTick+0x140>)
  401382:	681b      	ldr	r3, [r3, #0]
  401384:	2b00      	cmp	r3, #0
  401386:	f040 8095 	bne.w	4014b4 <xTaskIncrementTick+0x134>
{
  40138a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  40138e:	4b4d      	ldr	r3, [pc, #308]	; (4014c4 <xTaskIncrementTick+0x144>)
  401390:	681e      	ldr	r6, [r3, #0]
  401392:	3601      	adds	r6, #1
        xTickCount = xConstTickCount;
  401394:	601e      	str	r6, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401396:	b97e      	cbnz	r6, 4013b8 <xTaskIncrementTick+0x38>
            taskSWITCH_DELAYED_LISTS();
  401398:	4b4b      	ldr	r3, [pc, #300]	; (4014c8 <xTaskIncrementTick+0x148>)
  40139a:	681b      	ldr	r3, [r3, #0]
  40139c:	681b      	ldr	r3, [r3, #0]
  40139e:	bb13      	cbnz	r3, 4013e6 <xTaskIncrementTick+0x66>
  4013a0:	4a49      	ldr	r2, [pc, #292]	; (4014c8 <xTaskIncrementTick+0x148>)
  4013a2:	6811      	ldr	r1, [r2, #0]
  4013a4:	4b49      	ldr	r3, [pc, #292]	; (4014cc <xTaskIncrementTick+0x14c>)
  4013a6:	6818      	ldr	r0, [r3, #0]
  4013a8:	6010      	str	r0, [r2, #0]
  4013aa:	6019      	str	r1, [r3, #0]
  4013ac:	4a48      	ldr	r2, [pc, #288]	; (4014d0 <xTaskIncrementTick+0x150>)
  4013ae:	6813      	ldr	r3, [r2, #0]
  4013b0:	3301      	adds	r3, #1
  4013b2:	6013      	str	r3, [r2, #0]
  4013b4:	4b47      	ldr	r3, [pc, #284]	; (4014d4 <xTaskIncrementTick+0x154>)
  4013b6:	4798      	blx	r3
        if( xConstTickCount >= xNextTaskUnblockTime )
  4013b8:	4b47      	ldr	r3, [pc, #284]	; (4014d8 <xTaskIncrementTick+0x158>)
  4013ba:	681b      	ldr	r3, [r3, #0]
  4013bc:	429e      	cmp	r6, r3
  4013be:	d31c      	bcc.n	4013fa <xTaskIncrementTick+0x7a>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4013c0:	4b41      	ldr	r3, [pc, #260]	; (4014c8 <xTaskIncrementTick+0x148>)
  4013c2:	681b      	ldr	r3, [r3, #0]
  4013c4:	681b      	ldr	r3, [r3, #0]
  4013c6:	b1a3      	cbz	r3, 4013f2 <xTaskIncrementTick+0x72>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4013c8:	4b3f      	ldr	r3, [pc, #252]	; (4014c8 <xTaskIncrementTick+0x148>)
  4013ca:	681b      	ldr	r3, [r3, #0]
  4013cc:	68db      	ldr	r3, [r3, #12]
  4013ce:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  4013d0:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
  4013d2:	4296      	cmp	r6, r2
  4013d4:	d314      	bcc.n	401400 <xTaskIncrementTick+0x80>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  4013d6:	f04f 0e00 	mov.w	lr, #0
                    prvAddTaskToReadyList( pxTCB );
  4013da:	4840      	ldr	r0, [pc, #256]	; (4014dc <xTaskIncrementTick+0x15c>)
  4013dc:	f04f 0c01 	mov.w	ip, #1
  4013e0:	493f      	ldr	r1, [pc, #252]	; (4014e0 <xTaskIncrementTick+0x160>)
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4013e2:	4c39      	ldr	r4, [pc, #228]	; (4014c8 <xTaskIncrementTick+0x148>)
  4013e4:	e038      	b.n	401458 <xTaskIncrementTick+0xd8>
            taskSWITCH_DELAYED_LISTS();
  4013e6:	f640 21c7 	movw	r1, #2759	; 0xac7
  4013ea:	483e      	ldr	r0, [pc, #248]	; (4014e4 <xTaskIncrementTick+0x164>)
  4013ec:	4b3e      	ldr	r3, [pc, #248]	; (4014e8 <xTaskIncrementTick+0x168>)
  4013ee:	4798      	blx	r3
  4013f0:	e7d6      	b.n	4013a0 <xTaskIncrementTick+0x20>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4013f2:	f04f 32ff 	mov.w	r2, #4294967295
  4013f6:	4b38      	ldr	r3, [pc, #224]	; (4014d8 <xTaskIncrementTick+0x158>)
  4013f8:	601a      	str	r2, [r3, #0]
}
  4013fa:	2000      	movs	r0, #0
  4013fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        xNextTaskUnblockTime = xItemValue;
  401400:	4b35      	ldr	r3, [pc, #212]	; (4014d8 <xTaskIncrementTick+0x158>)
  401402:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
  401404:	e7f9      	b.n	4013fa <xTaskIncrementTick+0x7a>
                    prvAddTaskToReadyList( pxTCB );
  401406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401408:	f8d0 8000 	ldr.w	r8, [r0]
  40140c:	fa0c f502 	lsl.w	r5, ip, r2
  401410:	ea45 0508 	orr.w	r5, r5, r8
  401414:	6005      	str	r5, [r0, #0]
  401416:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40141a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40141e:	6855      	ldr	r5, [r2, #4]
  401420:	609d      	str	r5, [r3, #8]
  401422:	68aa      	ldr	r2, [r5, #8]
  401424:	60da      	str	r2, [r3, #12]
  401426:	68aa      	ldr	r2, [r5, #8]
  401428:	6057      	str	r7, [r2, #4]
  40142a:	60af      	str	r7, [r5, #8]
  40142c:	6add      	ldr	r5, [r3, #44]	; 0x2c
  40142e:	00aa      	lsls	r2, r5, #2
  401430:	1957      	adds	r7, r2, r5
  401432:	eb01 0887 	add.w	r8, r1, r7, lsl #2
  401436:	f8c3 8014 	str.w	r8, [r3, #20]
  40143a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
  40143e:	3301      	adds	r3, #1
  401440:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401444:	6823      	ldr	r3, [r4, #0]
  401446:	681b      	ldr	r3, [r3, #0]
  401448:	2b00      	cmp	r3, #0
  40144a:	d0d2      	beq.n	4013f2 <xTaskIncrementTick+0x72>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40144c:	6823      	ldr	r3, [r4, #0]
  40144e:	68db      	ldr	r3, [r3, #12]
  401450:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401452:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
  401454:	4296      	cmp	r6, r2
  401456:	d3d3      	bcc.n	401400 <xTaskIncrementTick+0x80>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401458:	695a      	ldr	r2, [r3, #20]
  40145a:	689d      	ldr	r5, [r3, #8]
  40145c:	68df      	ldr	r7, [r3, #12]
  40145e:	60af      	str	r7, [r5, #8]
  401460:	68dd      	ldr	r5, [r3, #12]
  401462:	689f      	ldr	r7, [r3, #8]
  401464:	606f      	str	r7, [r5, #4]
  401466:	1d1f      	adds	r7, r3, #4
  401468:	6855      	ldr	r5, [r2, #4]
  40146a:	42bd      	cmp	r5, r7
  40146c:	bf04      	itt	eq
  40146e:	68dd      	ldreq	r5, [r3, #12]
  401470:	6055      	streq	r5, [r2, #4]
  401472:	f8c3 e014 	str.w	lr, [r3, #20]
  401476:	6815      	ldr	r5, [r2, #0]
  401478:	3d01      	subs	r5, #1
  40147a:	6015      	str	r5, [r2, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40147c:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
  401480:	f1b8 0f00 	cmp.w	r8, #0
  401484:	d0bf      	beq.n	401406 <xTaskIncrementTick+0x86>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401486:	69da      	ldr	r2, [r3, #28]
  401488:	6a1d      	ldr	r5, [r3, #32]
  40148a:	6095      	str	r5, [r2, #8]
  40148c:	6a1a      	ldr	r2, [r3, #32]
  40148e:	69dd      	ldr	r5, [r3, #28]
  401490:	6055      	str	r5, [r2, #4]
  401492:	f103 0518 	add.w	r5, r3, #24
  401496:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40149a:	42aa      	cmp	r2, r5
  40149c:	bf04      	itt	eq
  40149e:	6a1a      	ldreq	r2, [r3, #32]
  4014a0:	f8c8 2004 	streq.w	r2, [r8, #4]
  4014a4:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  4014a8:	f8d8 2000 	ldr.w	r2, [r8]
  4014ac:	3a01      	subs	r2, #1
  4014ae:	f8c8 2000 	str.w	r2, [r8]
  4014b2:	e7a8      	b.n	401406 <xTaskIncrementTick+0x86>
        ++xPendedTicks;
  4014b4:	4a0d      	ldr	r2, [pc, #52]	; (4014ec <xTaskIncrementTick+0x16c>)
  4014b6:	6813      	ldr	r3, [r2, #0]
  4014b8:	3301      	adds	r3, #1
  4014ba:	6013      	str	r3, [r2, #0]
}
  4014bc:	2000      	movs	r0, #0
  4014be:	4770      	bx	lr
  4014c0:	20000544 	.word	0x20000544
  4014c4:	200005c8 	.word	0x200005c8
  4014c8:	20000494 	.word	0x20000494
  4014cc:	20000498 	.word	0x20000498
  4014d0:	20000580 	.word	0x20000580
  4014d4:	00400f61 	.word	0x00400f61
  4014d8:	2000057c 	.word	0x2000057c
  4014dc:	2000054c 	.word	0x2000054c
  4014e0:	2000049c 	.word	0x2000049c
  4014e4:	00402e30 	.word	0x00402e30
  4014e8:	0040288d 	.word	0x0040288d
  4014ec:	20000584 	.word	0x20000584

004014f0 <xTaskResumeAll>:
{
  4014f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    configASSERT( uxSchedulerSuspended );
  4014f4:	4b50      	ldr	r3, [pc, #320]	; (401638 <xTaskResumeAll+0x148>)
  4014f6:	681b      	ldr	r3, [r3, #0]
  4014f8:	2b00      	cmp	r3, #0
  4014fa:	d07b      	beq.n	4015f4 <xTaskResumeAll+0x104>
    taskENTER_CRITICAL();
  4014fc:	4b4f      	ldr	r3, [pc, #316]	; (40163c <xTaskResumeAll+0x14c>)
  4014fe:	4798      	blx	r3
        --uxSchedulerSuspended;
  401500:	4b4d      	ldr	r3, [pc, #308]	; (401638 <xTaskResumeAll+0x148>)
  401502:	681a      	ldr	r2, [r3, #0]
  401504:	3a01      	subs	r2, #1
  401506:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401508:	681b      	ldr	r3, [r3, #0]
  40150a:	2b00      	cmp	r3, #0
  40150c:	f040 808e 	bne.w	40162c <xTaskResumeAll+0x13c>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401510:	4b4b      	ldr	r3, [pc, #300]	; (401640 <xTaskResumeAll+0x150>)
  401512:	681b      	ldr	r3, [r3, #0]
  401514:	2b00      	cmp	r3, #0
  401516:	f000 8089 	beq.w	40162c <xTaskResumeAll+0x13c>
  40151a:	2300      	movs	r3, #0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40151c:	4949      	ldr	r1, [pc, #292]	; (401644 <xTaskResumeAll+0x154>)
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  40151e:	461c      	mov	r4, r3
                    prvAddTaskToReadyList( pxTCB );
  401520:	4849      	ldr	r0, [pc, #292]	; (401648 <xTaskResumeAll+0x158>)
  401522:	2601      	movs	r6, #1
  401524:	4a49      	ldr	r2, [pc, #292]	; (40164c <xTaskResumeAll+0x15c>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401526:	f8df a144 	ldr.w	sl, [pc, #324]	; 40166c <xTaskResumeAll+0x17c>
                        xYieldPending = pdTRUE;
  40152a:	f8df e138 	ldr.w	lr, [pc, #312]	; 401664 <xTaskResumeAll+0x174>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40152e:	680d      	ldr	r5, [r1, #0]
  401530:	2d00      	cmp	r5, #0
  401532:	d065      	beq.n	401600 <xTaskResumeAll+0x110>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401534:	68cb      	ldr	r3, [r1, #12]
  401536:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401538:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
  40153c:	69dd      	ldr	r5, [r3, #28]
  40153e:	6a1f      	ldr	r7, [r3, #32]
  401540:	60af      	str	r7, [r5, #8]
  401542:	6a1d      	ldr	r5, [r3, #32]
  401544:	69df      	ldr	r7, [r3, #28]
  401546:	606f      	str	r7, [r5, #4]
  401548:	f103 0818 	add.w	r8, r3, #24
  40154c:	f8dc 5004 	ldr.w	r5, [ip, #4]
  401550:	4545      	cmp	r5, r8
  401552:	bf04      	itt	eq
  401554:	6a1d      	ldreq	r5, [r3, #32]
  401556:	f8cc 5004 	streq.w	r5, [ip, #4]
  40155a:	629c      	str	r4, [r3, #40]	; 0x28
  40155c:	f8dc 5000 	ldr.w	r5, [ip]
  401560:	3d01      	subs	r5, #1
  401562:	f8cc 5000 	str.w	r5, [ip]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401566:	f8d3 c014 	ldr.w	ip, [r3, #20]
  40156a:	689d      	ldr	r5, [r3, #8]
  40156c:	68df      	ldr	r7, [r3, #12]
  40156e:	60af      	str	r7, [r5, #8]
  401570:	68dd      	ldr	r5, [r3, #12]
  401572:	689f      	ldr	r7, [r3, #8]
  401574:	606f      	str	r7, [r5, #4]
  401576:	f103 0804 	add.w	r8, r3, #4
  40157a:	f8dc 5004 	ldr.w	r5, [ip, #4]
  40157e:	4545      	cmp	r5, r8
  401580:	bf04      	itt	eq
  401582:	68dd      	ldreq	r5, [r3, #12]
  401584:	f8cc 5004 	streq.w	r5, [ip, #4]
  401588:	615c      	str	r4, [r3, #20]
  40158a:	f8dc 5000 	ldr.w	r5, [ip]
  40158e:	3d01      	subs	r5, #1
  401590:	f8cc 5000 	str.w	r5, [ip]
                    prvAddTaskToReadyList( pxTCB );
  401594:	6add      	ldr	r5, [r3, #44]	; 0x2c
  401596:	f8d0 9000 	ldr.w	r9, [r0]
  40159a:	fa06 fc05 	lsl.w	ip, r6, r5
  40159e:	ea4c 0c09 	orr.w	ip, ip, r9
  4015a2:	f8c0 c000 	str.w	ip, [r0]
  4015a6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4015aa:	eb02 0585 	add.w	r5, r2, r5, lsl #2
  4015ae:	686d      	ldr	r5, [r5, #4]
  4015b0:	609d      	str	r5, [r3, #8]
  4015b2:	68af      	ldr	r7, [r5, #8]
  4015b4:	60df      	str	r7, [r3, #12]
  4015b6:	68af      	ldr	r7, [r5, #8]
  4015b8:	f8c7 8004 	str.w	r8, [r7, #4]
  4015bc:	f8c5 8008 	str.w	r8, [r5, #8]
  4015c0:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
  4015c4:	ea4f 0588 	mov.w	r5, r8, lsl #2
  4015c8:	eb05 0c08 	add.w	ip, r5, r8
  4015cc:	eb02 098c 	add.w	r9, r2, ip, lsl #2
  4015d0:	f8c3 9014 	str.w	r9, [r3, #20]
  4015d4:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
  4015d8:	f10c 0c01 	add.w	ip, ip, #1
  4015dc:	4445      	add	r5, r8
  4015de:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4015e2:	f8da 5000 	ldr.w	r5, [sl]
  4015e6:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  4015e8:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  4015ea:	42af      	cmp	r7, r5
  4015ec:	d39f      	bcc.n	40152e <xTaskResumeAll+0x3e>
                        xYieldPending = pdTRUE;
  4015ee:	f8ce 6000 	str.w	r6, [lr]
  4015f2:	e79c      	b.n	40152e <xTaskResumeAll+0x3e>
    configASSERT( uxSchedulerSuspended );
  4015f4:	f640 01b3 	movw	r1, #2227	; 0x8b3
  4015f8:	4815      	ldr	r0, [pc, #84]	; (401650 <xTaskResumeAll+0x160>)
  4015fa:	4b16      	ldr	r3, [pc, #88]	; (401654 <xTaskResumeAll+0x164>)
  4015fc:	4798      	blx	r3
  4015fe:	e77d      	b.n	4014fc <xTaskResumeAll+0xc>
                if( pxTCB != NULL )
  401600:	b10b      	cbz	r3, 401606 <xTaskResumeAll+0x116>
                    prvResetNextTaskUnblockTime();
  401602:	4b15      	ldr	r3, [pc, #84]	; (401658 <xTaskResumeAll+0x168>)
  401604:	4798      	blx	r3
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
  401606:	4b15      	ldr	r3, [pc, #84]	; (40165c <xTaskResumeAll+0x16c>)
  401608:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
  40160a:	b16c      	cbz	r4, 401628 <xTaskResumeAll+0x138>
                            if( xTaskIncrementTick() != pdFALSE )
  40160c:	4d14      	ldr	r5, [pc, #80]	; (401660 <xTaskResumeAll+0x170>)
                                xYieldPending = pdTRUE;
  40160e:	4f15      	ldr	r7, [pc, #84]	; (401664 <xTaskResumeAll+0x174>)
  401610:	2601      	movs	r6, #1
  401612:	e001      	b.n	401618 <xTaskResumeAll+0x128>
                        } while( xPendedCounts > ( TickType_t ) 0U );
  401614:	3c01      	subs	r4, #1
  401616:	d004      	beq.n	401622 <xTaskResumeAll+0x132>
                            if( xTaskIncrementTick() != pdFALSE )
  401618:	47a8      	blx	r5
  40161a:	2800      	cmp	r0, #0
  40161c:	d0fa      	beq.n	401614 <xTaskResumeAll+0x124>
                                xYieldPending = pdTRUE;
  40161e:	603e      	str	r6, [r7, #0]
  401620:	e7f8      	b.n	401614 <xTaskResumeAll+0x124>
                        xPendedTicks = 0;
  401622:	2200      	movs	r2, #0
  401624:	4b0d      	ldr	r3, [pc, #52]	; (40165c <xTaskResumeAll+0x16c>)
  401626:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
  401628:	4b0e      	ldr	r3, [pc, #56]	; (401664 <xTaskResumeAll+0x174>)
  40162a:	681b      	ldr	r3, [r3, #0]
    taskEXIT_CRITICAL();
  40162c:	4b0e      	ldr	r3, [pc, #56]	; (401668 <xTaskResumeAll+0x178>)
  40162e:	4798      	blx	r3
}
  401630:	2000      	movs	r0, #0
  401632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401636:	bf00      	nop
  401638:	20000544 	.word	0x20000544
  40163c:	004002e5 	.word	0x004002e5
  401640:	2000053c 	.word	0x2000053c
  401644:	20000588 	.word	0x20000588
  401648:	2000054c 	.word	0x2000054c
  40164c:	2000049c 	.word	0x2000049c
  401650:	00402e30 	.word	0x00402e30
  401654:	0040288d 	.word	0x0040288d
  401658:	00400f61 	.word	0x00400f61
  40165c:	20000584 	.word	0x20000584
  401660:	00401381 	.word	0x00401381
  401664:	200005cc 	.word	0x200005cc
  401668:	0040032d 	.word	0x0040032d
  40166c:	20000490 	.word	0x20000490

00401670 <vTaskDelay>:
    {
  401670:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
  401672:	b160      	cbz	r0, 40168e <vTaskDelay+0x1e>
  401674:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
  401676:	4b0d      	ldr	r3, [pc, #52]	; (4016ac <vTaskDelay+0x3c>)
  401678:	681b      	ldr	r3, [r3, #0]
  40167a:	b98b      	cbnz	r3, 4016a0 <vTaskDelay+0x30>
            vTaskSuspendAll();
  40167c:	4b0c      	ldr	r3, [pc, #48]	; (4016b0 <vTaskDelay+0x40>)
  40167e:	4798      	blx	r3
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401680:	2100      	movs	r1, #0
  401682:	4620      	mov	r0, r4
  401684:	4b0b      	ldr	r3, [pc, #44]	; (4016b4 <vTaskDelay+0x44>)
  401686:	4798      	blx	r3
            xAlreadyYielded = xTaskResumeAll();
  401688:	4b0b      	ldr	r3, [pc, #44]	; (4016b8 <vTaskDelay+0x48>)
  40168a:	4798      	blx	r3
        if( xAlreadyYielded == pdFALSE )
  40168c:	b938      	cbnz	r0, 40169e <vTaskDelay+0x2e>
            portYIELD_WITHIN_API();
  40168e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401692:	4b0a      	ldr	r3, [pc, #40]	; (4016bc <vTaskDelay+0x4c>)
  401694:	601a      	str	r2, [r3, #0]
  401696:	f3bf 8f4f 	dsb	sy
  40169a:	f3bf 8f6f 	isb	sy
  40169e:	bd10      	pop	{r4, pc}
            configASSERT( uxSchedulerSuspended == 0 );
  4016a0:	f240 5149 	movw	r1, #1353	; 0x549
  4016a4:	4806      	ldr	r0, [pc, #24]	; (4016c0 <vTaskDelay+0x50>)
  4016a6:	4b07      	ldr	r3, [pc, #28]	; (4016c4 <vTaskDelay+0x54>)
  4016a8:	4798      	blx	r3
  4016aa:	e7e7      	b.n	40167c <vTaskDelay+0xc>
  4016ac:	20000544 	.word	0x20000544
  4016b0:	00401365 	.word	0x00401365
  4016b4:	00401001 	.word	0x00401001
  4016b8:	004014f1 	.word	0x004014f1
  4016bc:	e000ed04 	.word	0xe000ed04
  4016c0:	00402e30 	.word	0x00402e30
  4016c4:	0040288d 	.word	0x0040288d

004016c8 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4016c8:	4b2b      	ldr	r3, [pc, #172]	; (401778 <vTaskSwitchContext+0xb0>)
  4016ca:	681b      	ldr	r3, [r3, #0]
  4016cc:	2b00      	cmp	r3, #0
  4016ce:	d134      	bne.n	40173a <vTaskSwitchContext+0x72>
{
  4016d0:	b510      	push	{r4, lr}
        xYieldPending = pdFALSE;
  4016d2:	2200      	movs	r2, #0
  4016d4:	4b29      	ldr	r3, [pc, #164]	; (40177c <vTaskSwitchContext+0xb4>)
  4016d6:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
  4016d8:	4b29      	ldr	r3, [pc, #164]	; (401780 <vTaskSwitchContext+0xb8>)
  4016da:	681b      	ldr	r3, [r3, #0]
  4016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016de:	681a      	ldr	r2, [r3, #0]
  4016e0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4016e4:	d02d      	beq.n	401742 <vTaskSwitchContext+0x7a>
  4016e6:	4b26      	ldr	r3, [pc, #152]	; (401780 <vTaskSwitchContext+0xb8>)
  4016e8:	6818      	ldr	r0, [r3, #0]
  4016ea:	6819      	ldr	r1, [r3, #0]
  4016ec:	3134      	adds	r1, #52	; 0x34
  4016ee:	4b25      	ldr	r3, [pc, #148]	; (401784 <vTaskSwitchContext+0xbc>)
  4016f0:	4798      	blx	r3
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4016f2:	4b25      	ldr	r3, [pc, #148]	; (401788 <vTaskSwitchContext+0xc0>)
  4016f4:	681c      	ldr	r4, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  4016f6:	fab4 f484 	clz	r4, r4
  4016fa:	b2e4      	uxtb	r4, r4
  4016fc:	f1c4 041f 	rsb	r4, r4, #31
  401700:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401704:	009b      	lsls	r3, r3, #2
  401706:	4a21      	ldr	r2, [pc, #132]	; (40178c <vTaskSwitchContext+0xc4>)
  401708:	58d3      	ldr	r3, [r2, r3]
  40170a:	b33b      	cbz	r3, 40175c <vTaskSwitchContext+0x94>
  40170c:	4b1f      	ldr	r3, [pc, #124]	; (40178c <vTaskSwitchContext+0xc4>)
  40170e:	00a2      	lsls	r2, r4, #2
  401710:	1911      	adds	r1, r2, r4
  401712:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401716:	6848      	ldr	r0, [r1, #4]
  401718:	6840      	ldr	r0, [r0, #4]
  40171a:	6048      	str	r0, [r1, #4]
  40171c:	4422      	add	r2, r4
  40171e:	460b      	mov	r3, r1
  401720:	3308      	adds	r3, #8
  401722:	4298      	cmp	r0, r3
  401724:	d020      	beq.n	401768 <vTaskSwitchContext+0xa0>
  401726:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40172a:	4b18      	ldr	r3, [pc, #96]	; (40178c <vTaskSwitchContext+0xc4>)
  40172c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401730:	6863      	ldr	r3, [r4, #4]
  401732:	68da      	ldr	r2, [r3, #12]
  401734:	4b12      	ldr	r3, [pc, #72]	; (401780 <vTaskSwitchContext+0xb8>)
  401736:	601a      	str	r2, [r3, #0]
  401738:	bd10      	pop	{r4, pc}
        xYieldPending = pdTRUE;
  40173a:	2201      	movs	r2, #1
  40173c:	4b0f      	ldr	r3, [pc, #60]	; (40177c <vTaskSwitchContext+0xb4>)
  40173e:	601a      	str	r2, [r3, #0]
  401740:	4770      	bx	lr
        taskCHECK_FOR_STACK_OVERFLOW();
  401742:	685a      	ldr	r2, [r3, #4]
  401744:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401748:	d1cd      	bne.n	4016e6 <vTaskSwitchContext+0x1e>
  40174a:	689a      	ldr	r2, [r3, #8]
  40174c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401750:	d1c9      	bne.n	4016e6 <vTaskSwitchContext+0x1e>
  401752:	68db      	ldr	r3, [r3, #12]
  401754:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401758:	d1c5      	bne.n	4016e6 <vTaskSwitchContext+0x1e>
  40175a:	e7ca      	b.n	4016f2 <vTaskSwitchContext+0x2a>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40175c:	f640 4102 	movw	r1, #3074	; 0xc02
  401760:	480b      	ldr	r0, [pc, #44]	; (401790 <vTaskSwitchContext+0xc8>)
  401762:	4b0c      	ldr	r3, [pc, #48]	; (401794 <vTaskSwitchContext+0xcc>)
  401764:	4798      	blx	r3
  401766:	e7d1      	b.n	40170c <vTaskSwitchContext+0x44>
  401768:	6841      	ldr	r1, [r0, #4]
  40176a:	4613      	mov	r3, r2
  40176c:	4a07      	ldr	r2, [pc, #28]	; (40178c <vTaskSwitchContext+0xc4>)
  40176e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401772:	6059      	str	r1, [r3, #4]
  401774:	e7d7      	b.n	401726 <vTaskSwitchContext+0x5e>
  401776:	bf00      	nop
  401778:	20000544 	.word	0x20000544
  40177c:	200005cc 	.word	0x200005cc
  401780:	20000490 	.word	0x20000490
  401784:	004028cd 	.word	0x004028cd
  401788:	2000054c 	.word	0x2000054c
  40178c:	2000049c 	.word	0x2000049c
  401790:	00402e30 	.word	0x00402e30
  401794:	0040288d 	.word	0x0040288d

00401798 <vTaskPlaceOnEventList>:
{
  401798:	b538      	push	{r3, r4, r5, lr}
  40179a:	460c      	mov	r4, r1
    configASSERT( pxEventList );
  40179c:	4605      	mov	r5, r0
  40179e:	b150      	cbz	r0, 4017b6 <vTaskPlaceOnEventList+0x1e>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4017a0:	4b08      	ldr	r3, [pc, #32]	; (4017c4 <vTaskPlaceOnEventList+0x2c>)
  4017a2:	6819      	ldr	r1, [r3, #0]
  4017a4:	3118      	adds	r1, #24
  4017a6:	4628      	mov	r0, r5
  4017a8:	4b07      	ldr	r3, [pc, #28]	; (4017c8 <vTaskPlaceOnEventList+0x30>)
  4017aa:	4798      	blx	r3
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  4017ac:	2101      	movs	r1, #1
  4017ae:	4620      	mov	r0, r4
  4017b0:	4b06      	ldr	r3, [pc, #24]	; (4017cc <vTaskPlaceOnEventList+0x34>)
  4017b2:	4798      	blx	r3
  4017b4:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxEventList );
  4017b6:	f640 411c 	movw	r1, #3100	; 0xc1c
  4017ba:	4805      	ldr	r0, [pc, #20]	; (4017d0 <vTaskPlaceOnEventList+0x38>)
  4017bc:	4b05      	ldr	r3, [pc, #20]	; (4017d4 <vTaskPlaceOnEventList+0x3c>)
  4017be:	4798      	blx	r3
  4017c0:	e7ee      	b.n	4017a0 <vTaskPlaceOnEventList+0x8>
  4017c2:	bf00      	nop
  4017c4:	20000490 	.word	0x20000490
  4017c8:	004001ad 	.word	0x004001ad
  4017cc:	00401001 	.word	0x00401001
  4017d0:	00402e30 	.word	0x00402e30
  4017d4:	0040288d 	.word	0x0040288d

004017d8 <vTaskPlaceOnEventListRestricted>:
    {
  4017d8:	b570      	push	{r4, r5, r6, lr}
  4017da:	460e      	mov	r6, r1
  4017dc:	4615      	mov	r5, r2
        configASSERT( pxEventList );
  4017de:	4604      	mov	r4, r0
  4017e0:	b1d8      	cbz	r0, 40181a <vTaskPlaceOnEventListRestricted+0x42>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4017e2:	6862      	ldr	r2, [r4, #4]
  4017e4:	4b10      	ldr	r3, [pc, #64]	; (401828 <vTaskPlaceOnEventListRestricted+0x50>)
  4017e6:	6819      	ldr	r1, [r3, #0]
  4017e8:	61ca      	str	r2, [r1, #28]
  4017ea:	6819      	ldr	r1, [r3, #0]
  4017ec:	6890      	ldr	r0, [r2, #8]
  4017ee:	6208      	str	r0, [r1, #32]
  4017f0:	6890      	ldr	r0, [r2, #8]
  4017f2:	6819      	ldr	r1, [r3, #0]
  4017f4:	3118      	adds	r1, #24
  4017f6:	6041      	str	r1, [r0, #4]
  4017f8:	6819      	ldr	r1, [r3, #0]
  4017fa:	3118      	adds	r1, #24
  4017fc:	6091      	str	r1, [r2, #8]
  4017fe:	681b      	ldr	r3, [r3, #0]
  401800:	629c      	str	r4, [r3, #40]	; 0x28
  401802:	6823      	ldr	r3, [r4, #0]
  401804:	3301      	adds	r3, #1
  401806:	6023      	str	r3, [r4, #0]
            xTicksToWait = portMAX_DELAY;
  401808:	2d00      	cmp	r5, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  40180a:	4629      	mov	r1, r5
  40180c:	bf0c      	ite	eq
  40180e:	4630      	moveq	r0, r6
  401810:	f04f 30ff 	movne.w	r0, #4294967295
  401814:	4b05      	ldr	r3, [pc, #20]	; (40182c <vTaskPlaceOnEventListRestricted+0x54>)
  401816:	4798      	blx	r3
  401818:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxEventList );
  40181a:	f640 4152 	movw	r1, #3154	; 0xc52
  40181e:	4804      	ldr	r0, [pc, #16]	; (401830 <vTaskPlaceOnEventListRestricted+0x58>)
  401820:	4b04      	ldr	r3, [pc, #16]	; (401834 <vTaskPlaceOnEventListRestricted+0x5c>)
  401822:	4798      	blx	r3
  401824:	e7dd      	b.n	4017e2 <vTaskPlaceOnEventListRestricted+0xa>
  401826:	bf00      	nop
  401828:	20000490 	.word	0x20000490
  40182c:	00401001 	.word	0x00401001
  401830:	00402e30 	.word	0x00402e30
  401834:	0040288d 	.word	0x0040288d

00401838 <xTaskRemoveFromEventList>:
{
  401838:	b538      	push	{r3, r4, r5, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40183a:	68c3      	ldr	r3, [r0, #12]
  40183c:	68dc      	ldr	r4, [r3, #12]
    configASSERT( pxUnblockedTCB );
  40183e:	2c00      	cmp	r4, #0
  401840:	d051      	beq.n	4018e6 <xTaskRemoveFromEventList+0xae>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
  401842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401844:	69e2      	ldr	r2, [r4, #28]
  401846:	6a21      	ldr	r1, [r4, #32]
  401848:	6091      	str	r1, [r2, #8]
  40184a:	6a22      	ldr	r2, [r4, #32]
  40184c:	69e1      	ldr	r1, [r4, #28]
  40184e:	6051      	str	r1, [r2, #4]
  401850:	f104 0118 	add.w	r1, r4, #24
  401854:	685a      	ldr	r2, [r3, #4]
  401856:	428a      	cmp	r2, r1
  401858:	bf04      	itt	eq
  40185a:	6a22      	ldreq	r2, [r4, #32]
  40185c:	605a      	streq	r2, [r3, #4]
  40185e:	2200      	movs	r2, #0
  401860:	62a2      	str	r2, [r4, #40]	; 0x28
  401862:	681a      	ldr	r2, [r3, #0]
  401864:	3a01      	subs	r2, #1
  401866:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401868:	4b28      	ldr	r3, [pc, #160]	; (40190c <xTaskRemoveFromEventList+0xd4>)
  40186a:	681b      	ldr	r3, [r3, #0]
  40186c:	2b00      	cmp	r3, #0
  40186e:	d140      	bne.n	4018f2 <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
  401870:	6963      	ldr	r3, [r4, #20]
  401872:	68a2      	ldr	r2, [r4, #8]
  401874:	68e1      	ldr	r1, [r4, #12]
  401876:	6091      	str	r1, [r2, #8]
  401878:	68e2      	ldr	r2, [r4, #12]
  40187a:	68a1      	ldr	r1, [r4, #8]
  40187c:	6051      	str	r1, [r2, #4]
  40187e:	1d21      	adds	r1, r4, #4
  401880:	685a      	ldr	r2, [r3, #4]
  401882:	428a      	cmp	r2, r1
  401884:	bf04      	itt	eq
  401886:	68e2      	ldreq	r2, [r4, #12]
  401888:	605a      	streq	r2, [r3, #4]
  40188a:	2200      	movs	r2, #0
  40188c:	6162      	str	r2, [r4, #20]
  40188e:	681a      	ldr	r2, [r3, #0]
  401890:	3a01      	subs	r2, #1
  401892:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
  401894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401896:	481e      	ldr	r0, [pc, #120]	; (401910 <xTaskRemoveFromEventList+0xd8>)
  401898:	6805      	ldr	r5, [r0, #0]
  40189a:	2201      	movs	r2, #1
  40189c:	409a      	lsls	r2, r3
  40189e:	432a      	orrs	r2, r5
  4018a0:	6002      	str	r2, [r0, #0]
  4018a2:	4a1c      	ldr	r2, [pc, #112]	; (401914 <xTaskRemoveFromEventList+0xdc>)
  4018a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4018a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4018ac:	685b      	ldr	r3, [r3, #4]
  4018ae:	60a3      	str	r3, [r4, #8]
  4018b0:	6898      	ldr	r0, [r3, #8]
  4018b2:	60e0      	str	r0, [r4, #12]
  4018b4:	6898      	ldr	r0, [r3, #8]
  4018b6:	6041      	str	r1, [r0, #4]
  4018b8:	6099      	str	r1, [r3, #8]
  4018ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4018bc:	0083      	lsls	r3, r0, #2
  4018be:	1819      	adds	r1, r3, r0
  4018c0:	0089      	lsls	r1, r1, #2
  4018c2:	1855      	adds	r5, r2, r1
  4018c4:	6165      	str	r5, [r4, #20]
  4018c6:	5851      	ldr	r1, [r2, r1]
  4018c8:	3101      	adds	r1, #1
  4018ca:	4403      	add	r3, r0
  4018cc:	009b      	lsls	r3, r3, #2
  4018ce:	50d1      	str	r1, [r2, r3]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4018d0:	4b11      	ldr	r3, [pc, #68]	; (401918 <xTaskRemoveFromEventList+0xe0>)
  4018d2:	681b      	ldr	r3, [r3, #0]
  4018d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4018d8:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
  4018da:	bf83      	ittte	hi
  4018dc:	2001      	movhi	r0, #1
  4018de:	4b0f      	ldrhi	r3, [pc, #60]	; (40191c <xTaskRemoveFromEventList+0xe4>)
  4018e0:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
  4018e2:	2000      	movls	r0, #0
}
  4018e4:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxUnblockedTCB );
  4018e6:	f640 4182 	movw	r1, #3202	; 0xc82
  4018ea:	480d      	ldr	r0, [pc, #52]	; (401920 <xTaskRemoveFromEventList+0xe8>)
  4018ec:	4b0d      	ldr	r3, [pc, #52]	; (401924 <xTaskRemoveFromEventList+0xec>)
  4018ee:	4798      	blx	r3
  4018f0:	e7a7      	b.n	401842 <xTaskRemoveFromEventList+0xa>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4018f2:	4b0d      	ldr	r3, [pc, #52]	; (401928 <xTaskRemoveFromEventList+0xf0>)
  4018f4:	685a      	ldr	r2, [r3, #4]
  4018f6:	61e2      	str	r2, [r4, #28]
  4018f8:	6890      	ldr	r0, [r2, #8]
  4018fa:	6220      	str	r0, [r4, #32]
  4018fc:	6890      	ldr	r0, [r2, #8]
  4018fe:	6041      	str	r1, [r0, #4]
  401900:	6091      	str	r1, [r2, #8]
  401902:	62a3      	str	r3, [r4, #40]	; 0x28
  401904:	681a      	ldr	r2, [r3, #0]
  401906:	3201      	adds	r2, #1
  401908:	601a      	str	r2, [r3, #0]
  40190a:	e7e1      	b.n	4018d0 <xTaskRemoveFromEventList+0x98>
  40190c:	20000544 	.word	0x20000544
  401910:	2000054c 	.word	0x2000054c
  401914:	2000049c 	.word	0x2000049c
  401918:	20000490 	.word	0x20000490
  40191c:	200005cc 	.word	0x200005cc
  401920:	00402e30 	.word	0x00402e30
  401924:	0040288d 	.word	0x0040288d
  401928:	20000588 	.word	0x20000588

0040192c <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
  40192c:	4b03      	ldr	r3, [pc, #12]	; (40193c <vTaskInternalSetTimeOutState+0x10>)
  40192e:	681b      	ldr	r3, [r3, #0]
  401930:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
  401932:	4b03      	ldr	r3, [pc, #12]	; (401940 <vTaskInternalSetTimeOutState+0x14>)
  401934:	681b      	ldr	r3, [r3, #0]
  401936:	6043      	str	r3, [r0, #4]
  401938:	4770      	bx	lr
  40193a:	bf00      	nop
  40193c:	20000580 	.word	0x20000580
  401940:	200005c8 	.word	0x200005c8

00401944 <xTaskCheckForTimeOut>:
{
  401944:	b570      	push	{r4, r5, r6, lr}
  401946:	460c      	mov	r4, r1
    configASSERT( pxTimeOut );
  401948:	4605      	mov	r5, r0
  40194a:	b1d0      	cbz	r0, 401982 <xTaskCheckForTimeOut+0x3e>
    configASSERT( pxTicksToWait );
  40194c:	b1fc      	cbz	r4, 40198e <xTaskCheckForTimeOut+0x4a>
    taskENTER_CRITICAL();
  40194e:	4b19      	ldr	r3, [pc, #100]	; (4019b4 <xTaskCheckForTimeOut+0x70>)
  401950:	4798      	blx	r3
        const TickType_t xConstTickCount = xTickCount;
  401952:	4b19      	ldr	r3, [pc, #100]	; (4019b8 <xTaskCheckForTimeOut+0x74>)
  401954:	681b      	ldr	r3, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
  401956:	6822      	ldr	r2, [r4, #0]
  401958:	f1b2 3fff 	cmp.w	r2, #4294967295
  40195c:	d028      	beq.n	4019b0 <xTaskCheckForTimeOut+0x6c>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40195e:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401960:	4816      	ldr	r0, [pc, #88]	; (4019bc <xTaskCheckForTimeOut+0x78>)
  401962:	6800      	ldr	r0, [r0, #0]
  401964:	682e      	ldr	r6, [r5, #0]
  401966:	4286      	cmp	r6, r0
  401968:	d001      	beq.n	40196e <xTaskCheckForTimeOut+0x2a>
  40196a:	428b      	cmp	r3, r1
  40196c:	d215      	bcs.n	40199a <xTaskCheckForTimeOut+0x56>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40196e:	1a5b      	subs	r3, r3, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401970:	4293      	cmp	r3, r2
  401972:	d316      	bcc.n	4019a2 <xTaskCheckForTimeOut+0x5e>
            *pxTicksToWait = ( TickType_t ) 0;
  401974:	2300      	movs	r3, #0
  401976:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401978:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
  40197a:	4b11      	ldr	r3, [pc, #68]	; (4019c0 <xTaskCheckForTimeOut+0x7c>)
  40197c:	4798      	blx	r3
}
  40197e:	4620      	mov	r0, r4
  401980:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( pxTimeOut );
  401982:	f640 41fd 	movw	r1, #3325	; 0xcfd
  401986:	480f      	ldr	r0, [pc, #60]	; (4019c4 <xTaskCheckForTimeOut+0x80>)
  401988:	4b0f      	ldr	r3, [pc, #60]	; (4019c8 <xTaskCheckForTimeOut+0x84>)
  40198a:	4798      	blx	r3
  40198c:	e7de      	b.n	40194c <xTaskCheckForTimeOut+0x8>
    configASSERT( pxTicksToWait );
  40198e:	f640 41fe 	movw	r1, #3326	; 0xcfe
  401992:	480c      	ldr	r0, [pc, #48]	; (4019c4 <xTaskCheckForTimeOut+0x80>)
  401994:	4b0c      	ldr	r3, [pc, #48]	; (4019c8 <xTaskCheckForTimeOut+0x84>)
  401996:	4798      	blx	r3
  401998:	e7d9      	b.n	40194e <xTaskCheckForTimeOut+0xa>
            *pxTicksToWait = ( TickType_t ) 0;
  40199a:	2300      	movs	r3, #0
  40199c:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  40199e:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
  4019a0:	e7eb      	b.n	40197a <xTaskCheckForTimeOut+0x36>
            *pxTicksToWait -= xElapsedTime;
  4019a2:	1ad3      	subs	r3, r2, r3
  4019a4:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
  4019a6:	4628      	mov	r0, r5
  4019a8:	4b08      	ldr	r3, [pc, #32]	; (4019cc <xTaskCheckForTimeOut+0x88>)
  4019aa:	4798      	blx	r3
            xReturn = pdFALSE;
  4019ac:	2400      	movs	r4, #0
  4019ae:	e7e4      	b.n	40197a <xTaskCheckForTimeOut+0x36>
                xReturn = pdFALSE;
  4019b0:	2400      	movs	r4, #0
  4019b2:	e7e2      	b.n	40197a <xTaskCheckForTimeOut+0x36>
  4019b4:	004002e5 	.word	0x004002e5
  4019b8:	200005c8 	.word	0x200005c8
  4019bc:	20000580 	.word	0x20000580
  4019c0:	0040032d 	.word	0x0040032d
  4019c4:	00402e30 	.word	0x00402e30
  4019c8:	0040288d 	.word	0x0040288d
  4019cc:	0040192d 	.word	0x0040192d

004019d0 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
  4019d0:	2201      	movs	r2, #1
  4019d2:	4b01      	ldr	r3, [pc, #4]	; (4019d8 <vTaskMissedYield+0x8>)
  4019d4:	601a      	str	r2, [r3, #0]
  4019d6:	4770      	bx	lr
  4019d8:	200005cc 	.word	0x200005cc

004019dc <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
  4019dc:	4b05      	ldr	r3, [pc, #20]	; (4019f4 <xTaskGetSchedulerState+0x18>)
  4019de:	681b      	ldr	r3, [r3, #0]
  4019e0:	b133      	cbz	r3, 4019f0 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4019e2:	4b05      	ldr	r3, [pc, #20]	; (4019f8 <xTaskGetSchedulerState+0x1c>)
  4019e4:	681b      	ldr	r3, [r3, #0]
                xReturn = taskSCHEDULER_SUSPENDED;
  4019e6:	2b00      	cmp	r3, #0
  4019e8:	bf0c      	ite	eq
  4019ea:	2002      	moveq	r0, #2
  4019ec:	2000      	movne	r0, #0
  4019ee:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
  4019f0:	2001      	movs	r0, #1
    }
  4019f2:	4770      	bx	lr
  4019f4:	2000059c 	.word	0x2000059c
  4019f8:	20000544 	.word	0x20000544

004019fc <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
  4019fc:	2800      	cmp	r0, #0
  4019fe:	d04d      	beq.n	401a9c <xTaskPriorityDisinherit+0xa0>
    {
  401a00:	b570      	push	{r4, r5, r6, lr}
  401a02:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
  401a04:	4b27      	ldr	r3, [pc, #156]	; (401aa4 <xTaskPriorityDisinherit+0xa8>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	4298      	cmp	r0, r3
  401a0a:	d004      	beq.n	401a16 <xTaskPriorityDisinherit+0x1a>
  401a0c:	f241 014f 	movw	r1, #4175	; 0x104f
  401a10:	4825      	ldr	r0, [pc, #148]	; (401aa8 <xTaskPriorityDisinherit+0xac>)
  401a12:	4b26      	ldr	r3, [pc, #152]	; (401aac <xTaskPriorityDisinherit+0xb0>)
  401a14:	4798      	blx	r3
            configASSERT( pxTCB->uxMutexesHeld );
  401a16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401a18:	b14b      	cbz	r3, 401a2e <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
  401a1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401a1c:	3b01      	subs	r3, #1
  401a1e:	64e3      	str	r3, [r4, #76]	; 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401a20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401a22:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  401a24:	4291      	cmp	r1, r2
  401a26:	d03b      	beq.n	401aa0 <xTaskPriorityDisinherit+0xa4>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401a28:	b13b      	cbz	r3, 401a3a <xTaskPriorityDisinherit+0x3e>
        BaseType_t xReturn = pdFALSE;
  401a2a:	2000      	movs	r0, #0
    }
  401a2c:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB->uxMutexesHeld );
  401a2e:	f241 0150 	movw	r1, #4176	; 0x1050
  401a32:	481d      	ldr	r0, [pc, #116]	; (401aa8 <xTaskPriorityDisinherit+0xac>)
  401a34:	4b1d      	ldr	r3, [pc, #116]	; (401aac <xTaskPriorityDisinherit+0xb0>)
  401a36:	4798      	blx	r3
  401a38:	e7ef      	b.n	401a1a <xTaskPriorityDisinherit+0x1e>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401a3a:	1d25      	adds	r5, r4, #4
  401a3c:	4628      	mov	r0, r5
  401a3e:	4b1c      	ldr	r3, [pc, #112]	; (401ab0 <xTaskPriorityDisinherit+0xb4>)
  401a40:	4798      	blx	r3
  401a42:	b938      	cbnz	r0, 401a54 <xTaskPriorityDisinherit+0x58>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
  401a44:	491b      	ldr	r1, [pc, #108]	; (401ab4 <xTaskPriorityDisinherit+0xb8>)
  401a46:	680b      	ldr	r3, [r1, #0]
  401a48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401a4a:	2201      	movs	r2, #1
  401a4c:	4082      	lsls	r2, r0
  401a4e:	ea23 0302 	bic.w	r3, r3, r2
  401a52:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
  401a54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a56:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a58:	f1c3 0208 	rsb	r2, r3, #8
  401a5c:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
  401a5e:	4915      	ldr	r1, [pc, #84]	; (401ab4 <xTaskPriorityDisinherit+0xb8>)
  401a60:	680e      	ldr	r6, [r1, #0]
  401a62:	2001      	movs	r0, #1
  401a64:	fa00 f203 	lsl.w	r2, r0, r3
  401a68:	4332      	orrs	r2, r6
  401a6a:	600a      	str	r2, [r1, #0]
  401a6c:	4a12      	ldr	r2, [pc, #72]	; (401ab8 <xTaskPriorityDisinherit+0xbc>)
  401a6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401a76:	685b      	ldr	r3, [r3, #4]
  401a78:	60a3      	str	r3, [r4, #8]
  401a7a:	6899      	ldr	r1, [r3, #8]
  401a7c:	60e1      	str	r1, [r4, #12]
  401a7e:	6899      	ldr	r1, [r3, #8]
  401a80:	604d      	str	r5, [r1, #4]
  401a82:	609d      	str	r5, [r3, #8]
  401a84:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  401a86:	00ab      	lsls	r3, r5, #2
  401a88:	1959      	adds	r1, r3, r5
  401a8a:	0089      	lsls	r1, r1, #2
  401a8c:	1856      	adds	r6, r2, r1
  401a8e:	6166      	str	r6, [r4, #20]
  401a90:	5851      	ldr	r1, [r2, r1]
  401a92:	4401      	add	r1, r0
  401a94:	442b      	add	r3, r5
  401a96:	009b      	lsls	r3, r3, #2
  401a98:	50d1      	str	r1, [r2, r3]
  401a9a:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xReturn = pdFALSE;
  401a9c:	2000      	movs	r0, #0
  401a9e:	4770      	bx	lr
  401aa0:	2000      	movs	r0, #0
  401aa2:	bd70      	pop	{r4, r5, r6, pc}
  401aa4:	20000490 	.word	0x20000490
  401aa8:	00402e30 	.word	0x00402e30
  401aac:	0040288d 	.word	0x0040288d
  401ab0:	004001e1 	.word	0x004001e1
  401ab4:	2000054c 	.word	0x2000054c
  401ab8:	2000049c 	.word	0x2000049c

00401abc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
  401abc:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401abe:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401ac0:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
  401ac2:	4291      	cmp	r1, r2
  401ac4:	d80c      	bhi.n	401ae0 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ac6:	1ad2      	subs	r2, r2, r3
  401ac8:	6983      	ldr	r3, [r0, #24]
  401aca:	429a      	cmp	r2, r3
  401acc:	d301      	bcc.n	401ad2 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
  401ace:	2001      	movs	r0, #1
  401ad0:	bd08      	pop	{r3, pc}
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401ad2:	1d01      	adds	r1, r0, #4
  401ad4:	4b09      	ldr	r3, [pc, #36]	; (401afc <prvInsertTimerInActiveList+0x40>)
  401ad6:	6818      	ldr	r0, [r3, #0]
  401ad8:	4b09      	ldr	r3, [pc, #36]	; (401b00 <prvInsertTimerInActiveList+0x44>)
  401ada:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  401adc:	2000      	movs	r0, #0
  401ade:	bd08      	pop	{r3, pc}
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401ae0:	429a      	cmp	r2, r3
  401ae2:	d201      	bcs.n	401ae8 <prvInsertTimerInActiveList+0x2c>
  401ae4:	4299      	cmp	r1, r3
  401ae6:	d206      	bcs.n	401af6 <prvInsertTimerInActiveList+0x3a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401ae8:	1d01      	adds	r1, r0, #4
  401aea:	4b06      	ldr	r3, [pc, #24]	; (401b04 <prvInsertTimerInActiveList+0x48>)
  401aec:	6818      	ldr	r0, [r3, #0]
  401aee:	4b04      	ldr	r3, [pc, #16]	; (401b00 <prvInsertTimerInActiveList+0x44>)
  401af0:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  401af2:	2000      	movs	r0, #0
  401af4:	bd08      	pop	{r3, pc}
                xProcessTimerNow = pdTRUE;
  401af6:	2001      	movs	r0, #1
            }
        }

        return xProcessTimerNow;
    }
  401af8:	bd08      	pop	{r3, pc}
  401afa:	bf00      	nop
  401afc:	200005d4 	.word	0x200005d4
  401b00:	004001ad 	.word	0x004001ad
  401b04:	200005d0 	.word	0x200005d0

00401b08 <prvReloadTimer>:
    {
  401b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401b0a:	4604      	mov	r4, r0
  401b0c:	460d      	mov	r5, r1
  401b0e:	4617      	mov	r7, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401b10:	4e07      	ldr	r6, [pc, #28]	; (401b30 <prvReloadTimer+0x28>)
  401b12:	e004      	b.n	401b1e <prvReloadTimer+0x16>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
  401b14:	69a3      	ldr	r3, [r4, #24]
  401b16:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401b18:	6a23      	ldr	r3, [r4, #32]
  401b1a:	4620      	mov	r0, r4
  401b1c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401b1e:	69a1      	ldr	r1, [r4, #24]
  401b20:	462b      	mov	r3, r5
  401b22:	463a      	mov	r2, r7
  401b24:	4429      	add	r1, r5
  401b26:	4620      	mov	r0, r4
  401b28:	47b0      	blx	r6
  401b2a:	2800      	cmp	r0, #0
  401b2c:	d1f2      	bne.n	401b14 <prvReloadTimer+0xc>
    }
  401b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b30:	00401abd 	.word	0x00401abd

00401b34 <prvProcessExpiredTimer>:
    {
  401b34:	b570      	push	{r4, r5, r6, lr}
  401b36:	4605      	mov	r5, r0
  401b38:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401b3a:	4b0d      	ldr	r3, [pc, #52]	; (401b70 <prvProcessExpiredTimer+0x3c>)
  401b3c:	681b      	ldr	r3, [r3, #0]
  401b3e:	68db      	ldr	r3, [r3, #12]
  401b40:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401b42:	1d20      	adds	r0, r4, #4
  401b44:	4b0b      	ldr	r3, [pc, #44]	; (401b74 <prvProcessExpiredTimer+0x40>)
  401b46:	4798      	blx	r3
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401b48:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401b4c:	f013 0f04 	tst.w	r3, #4
  401b50:	d107      	bne.n	401b62 <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401b52:	f023 0301 	bic.w	r3, r3, #1
  401b56:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401b5a:	6a23      	ldr	r3, [r4, #32]
  401b5c:	4620      	mov	r0, r4
  401b5e:	4798      	blx	r3
  401b60:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
  401b62:	4632      	mov	r2, r6
  401b64:	4629      	mov	r1, r5
  401b66:	4620      	mov	r0, r4
  401b68:	4b03      	ldr	r3, [pc, #12]	; (401b78 <prvProcessExpiredTimer+0x44>)
  401b6a:	4798      	blx	r3
  401b6c:	e7f5      	b.n	401b5a <prvProcessExpiredTimer+0x26>
  401b6e:	bf00      	nop
  401b70:	200005d0 	.word	0x200005d0
  401b74:	004001e1 	.word	0x004001e1
  401b78:	00401b09 	.word	0x00401b09

00401b7c <prvSampleTimeNow>:
    {
  401b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401b80:	4680      	mov	r8, r0
        xTimeNow = xTaskGetTickCount();
  401b82:	4b14      	ldr	r3, [pc, #80]	; (401bd4 <prvSampleTimeNow+0x58>)
  401b84:	4798      	blx	r3
  401b86:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
  401b88:	4b13      	ldr	r3, [pc, #76]	; (401bd8 <prvSampleTimeNow+0x5c>)
  401b8a:	681b      	ldr	r3, [r3, #0]
  401b8c:	4298      	cmp	r0, r3
  401b8e:	d307      	bcc.n	401ba0 <prvSampleTimeNow+0x24>
            *pxTimerListsWereSwitched = pdFALSE;
  401b90:	2300      	movs	r3, #0
  401b92:	f8c8 3000 	str.w	r3, [r8]
        xLastTime = xTimeNow;
  401b96:	4b10      	ldr	r3, [pc, #64]	; (401bd8 <prvSampleTimeNow+0x5c>)
  401b98:	601c      	str	r4, [r3, #0]
    }
  401b9a:	4620      	mov	r0, r4
  401b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401ba0:	4b0e      	ldr	r3, [pc, #56]	; (401bdc <prvSampleTimeNow+0x60>)
  401ba2:	681b      	ldr	r3, [r3, #0]
  401ba4:	681a      	ldr	r2, [r3, #0]
  401ba6:	b15a      	cbz	r2, 401bc0 <prvSampleTimeNow+0x44>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401ba8:	f04f 37ff 	mov.w	r7, #4294967295
  401bac:	4e0c      	ldr	r6, [pc, #48]	; (401be0 <prvSampleTimeNow+0x64>)
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401bae:	4d0b      	ldr	r5, [pc, #44]	; (401bdc <prvSampleTimeNow+0x60>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401bb0:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401bb2:	4639      	mov	r1, r7
  401bb4:	6818      	ldr	r0, [r3, #0]
  401bb6:	47b0      	blx	r6
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401bb8:	682b      	ldr	r3, [r5, #0]
  401bba:	681a      	ldr	r2, [r3, #0]
  401bbc:	2a00      	cmp	r2, #0
  401bbe:	d1f7      	bne.n	401bb0 <prvSampleTimeNow+0x34>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
  401bc0:	4a08      	ldr	r2, [pc, #32]	; (401be4 <prvSampleTimeNow+0x68>)
  401bc2:	6810      	ldr	r0, [r2, #0]
  401bc4:	4905      	ldr	r1, [pc, #20]	; (401bdc <prvSampleTimeNow+0x60>)
  401bc6:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
  401bc8:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
  401bca:	2301      	movs	r3, #1
  401bcc:	f8c8 3000 	str.w	r3, [r8]
  401bd0:	e7e1      	b.n	401b96 <prvSampleTimeNow+0x1a>
  401bd2:	bf00      	nop
  401bd4:	00401375 	.word	0x00401375
  401bd8:	20000600 	.word	0x20000600
  401bdc:	200005d0 	.word	0x200005d0
  401be0:	00401b35 	.word	0x00401b35
  401be4:	200005d4 	.word	0x200005d4

00401be8 <prvTimerTask>:
    {
  401be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bec:	b087      	sub	sp, #28
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401bee:	4e5e      	ldr	r6, [pc, #376]	; (401d68 <prvTimerTask+0x180>)
                ( void ) xTaskResumeAll();
  401bf0:	4f5e      	ldr	r7, [pc, #376]	; (401d6c <prvTimerTask+0x184>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401bf2:	4d5f      	ldr	r5, [pc, #380]	; (401d70 <prvTimerTask+0x188>)
                        portYIELD_WITHIN_API();
  401bf4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 401da0 <prvTimerTask+0x1b8>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401bf8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 401da4 <prvTimerTask+0x1bc>
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401bfc:	6833      	ldr	r3, [r6, #0]
  401bfe:	681a      	ldr	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
  401c00:	b192      	cbz	r2, 401c28 <prvTimerTask+0x40>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401c02:	68db      	ldr	r3, [r3, #12]
  401c04:	f8d3 a000 	ldr.w	sl, [r3]
        vTaskSuspendAll();
  401c08:	4b5a      	ldr	r3, [pc, #360]	; (401d74 <prvTimerTask+0x18c>)
  401c0a:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401c0c:	a802      	add	r0, sp, #8
  401c0e:	4b5a      	ldr	r3, [pc, #360]	; (401d78 <prvTimerTask+0x190>)
  401c10:	4798      	blx	r3
  401c12:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401c14:	9a02      	ldr	r2, [sp, #8]
  401c16:	bb42      	cbnz	r2, 401c6a <prvTimerTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401c18:	4550      	cmp	r0, sl
  401c1a:	d315      	bcc.n	401c48 <prvTimerTask+0x60>
                    ( void ) xTaskResumeAll();
  401c1c:	47b8      	blx	r7
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401c1e:	4621      	mov	r1, r4
  401c20:	4650      	mov	r0, sl
  401c22:	4b56      	ldr	r3, [pc, #344]	; (401d7c <prvTimerTask+0x194>)
  401c24:	4798      	blx	r3
  401c26:	e01e      	b.n	401c66 <prvTimerTask+0x7e>
        vTaskSuspendAll();
  401c28:	4b52      	ldr	r3, [pc, #328]	; (401d74 <prvTimerTask+0x18c>)
  401c2a:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401c2c:	a802      	add	r0, sp, #8
  401c2e:	4b52      	ldr	r3, [pc, #328]	; (401d78 <prvTimerTask+0x190>)
  401c30:	4798      	blx	r3
  401c32:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401c34:	9b02      	ldr	r3, [sp, #8]
  401c36:	b9c3      	cbnz	r3, 401c6a <prvTimerTask+0x82>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401c38:	4b51      	ldr	r3, [pc, #324]	; (401d80 <prvTimerTask+0x198>)
  401c3a:	681b      	ldr	r3, [r3, #0]
  401c3c:	681a      	ldr	r2, [r3, #0]
  401c3e:	fab2 f282 	clz	r2, r2
  401c42:	0952      	lsrs	r2, r2, #5
            xNextExpireTime = ( TickType_t ) 0U;
  401c44:	f04f 0a00 	mov.w	sl, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401c48:	ebaa 0104 	sub.w	r1, sl, r4
  401c4c:	6828      	ldr	r0, [r5, #0]
  401c4e:	4b4d      	ldr	r3, [pc, #308]	; (401d84 <prvTimerTask+0x19c>)
  401c50:	4798      	blx	r3
                    if( xTaskResumeAll() == pdFALSE )
  401c52:	47b8      	blx	r7
  401c54:	b938      	cbnz	r0, 401c66 <prvTimerTask+0x7e>
                        portYIELD_WITHIN_API();
  401c56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c5a:	f8c9 3000 	str.w	r3, [r9]
  401c5e:	f3bf 8f4f 	dsb	sy
  401c62:	f3bf 8f6f 	isb	sy
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401c66:	4c48      	ldr	r4, [pc, #288]	; (401d88 <prvTimerTask+0x1a0>)
  401c68:	e008      	b.n	401c7c <prvTimerTask+0x94>
                ( void ) xTaskResumeAll();
  401c6a:	47b8      	blx	r7
  401c6c:	e7fb      	b.n	401c66 <prvTimerTask+0x7e>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401c6e:	9905      	ldr	r1, [sp, #20]
  401c70:	9804      	ldr	r0, [sp, #16]
  401c72:	9b03      	ldr	r3, [sp, #12]
  401c74:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401c76:	9b02      	ldr	r3, [sp, #8]
  401c78:	2b00      	cmp	r3, #0
  401c7a:	da08      	bge.n	401c8e <prvTimerTask+0xa6>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401c7c:	2200      	movs	r2, #0
  401c7e:	a902      	add	r1, sp, #8
  401c80:	6828      	ldr	r0, [r5, #0]
  401c82:	47a0      	blx	r4
  401c84:	2800      	cmp	r0, #0
  401c86:	d0b9      	beq.n	401bfc <prvTimerTask+0x14>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401c88:	9b02      	ldr	r3, [sp, #8]
  401c8a:	2b00      	cmp	r3, #0
  401c8c:	dbef      	blt.n	401c6e <prvTimerTask+0x86>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401c8e:	f8dd a010 	ldr.w	sl, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  401c92:	f8da 3014 	ldr.w	r3, [sl, #20]
  401c96:	b113      	cbz	r3, 401c9e <prvTimerTask+0xb6>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c98:	f10a 0004 	add.w	r0, sl, #4
  401c9c:	47c0      	blx	r8
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401c9e:	a801      	add	r0, sp, #4
  401ca0:	4b35      	ldr	r3, [pc, #212]	; (401d78 <prvTimerTask+0x190>)
  401ca2:	4798      	blx	r3
  401ca4:	4683      	mov	fp, r0
                switch( xMessage.xMessageID )
  401ca6:	9b02      	ldr	r3, [sp, #8]
  401ca8:	3b01      	subs	r3, #1
  401caa:	2b08      	cmp	r3, #8
  401cac:	d8e6      	bhi.n	401c7c <prvTimerTask+0x94>
  401cae:	e8df f003 	tbb	[pc, r3]
  401cb2:	0505      	.short	0x0505
  401cb4:	054d342d 	.word	0x054d342d
  401cb8:	2d05      	.short	0x2d05
  401cba:	34          	.byte	0x34
  401cbb:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401cbc:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401cc0:	f043 0301 	orr.w	r3, r3, #1
  401cc4:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  401cc8:	9903      	ldr	r1, [sp, #12]
  401cca:	f8da 0018 	ldr.w	r0, [sl, #24]
  401cce:	460b      	mov	r3, r1
  401cd0:	465a      	mov	r2, fp
  401cd2:	4401      	add	r1, r0
  401cd4:	4650      	mov	r0, sl
  401cd6:	4c2d      	ldr	r4, [pc, #180]	; (401d8c <prvTimerTask+0x1a4>)
  401cd8:	47a0      	blx	r4
  401cda:	2800      	cmp	r0, #0
  401cdc:	d0c3      	beq.n	401c66 <prvTimerTask+0x7e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401cde:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401ce2:	f013 0f04 	tst.w	r3, #4
  401ce6:	d108      	bne.n	401cfa <prvTimerTask+0x112>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401ce8:	f023 0301 	bic.w	r3, r3, #1
  401cec:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401cf0:	f8da 3020 	ldr.w	r3, [sl, #32]
  401cf4:	4650      	mov	r0, sl
  401cf6:	4798      	blx	r3
  401cf8:	e7b5      	b.n	401c66 <prvTimerTask+0x7e>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
  401cfa:	f8da 3018 	ldr.w	r3, [sl, #24]
  401cfe:	465a      	mov	r2, fp
  401d00:	9903      	ldr	r1, [sp, #12]
  401d02:	4419      	add	r1, r3
  401d04:	4650      	mov	r0, sl
  401d06:	4b22      	ldr	r3, [pc, #136]	; (401d90 <prvTimerTask+0x1a8>)
  401d08:	4798      	blx	r3
  401d0a:	e7f1      	b.n	401cf0 <prvTimerTask+0x108>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401d0c:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401d10:	f023 0301 	bic.w	r3, r3, #1
  401d14:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  401d18:	e7a5      	b.n	401c66 <prvTimerTask+0x7e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401d1a:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401d1e:	f043 0301 	orr.w	r3, r3, #1
  401d22:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401d26:	9b03      	ldr	r3, [sp, #12]
  401d28:	f8ca 3018 	str.w	r3, [sl, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401d2c:	b143      	cbz	r3, 401d40 <prvTimerTask+0x158>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401d2e:	f8da 1018 	ldr.w	r1, [sl, #24]
  401d32:	465b      	mov	r3, fp
  401d34:	465a      	mov	r2, fp
  401d36:	4459      	add	r1, fp
  401d38:	4650      	mov	r0, sl
  401d3a:	4c14      	ldr	r4, [pc, #80]	; (401d8c <prvTimerTask+0x1a4>)
  401d3c:	47a0      	blx	r4
  401d3e:	e792      	b.n	401c66 <prvTimerTask+0x7e>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401d40:	f240 3159 	movw	r1, #857	; 0x359
  401d44:	4813      	ldr	r0, [pc, #76]	; (401d94 <prvTimerTask+0x1ac>)
  401d46:	4b14      	ldr	r3, [pc, #80]	; (401d98 <prvTimerTask+0x1b0>)
  401d48:	4798      	blx	r3
  401d4a:	e7f0      	b.n	401d2e <prvTimerTask+0x146>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  401d4c:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401d50:	f013 0f02 	tst.w	r3, #2
  401d54:	d004      	beq.n	401d60 <prvTimerTask+0x178>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401d56:	f023 0301 	bic.w	r3, r3, #1
  401d5a:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  401d5e:	e782      	b.n	401c66 <prvTimerTask+0x7e>
                                    vPortFree( pxTimer );
  401d60:	4650      	mov	r0, sl
  401d62:	4b0e      	ldr	r3, [pc, #56]	; (401d9c <prvTimerTask+0x1b4>)
  401d64:	4798      	blx	r3
  401d66:	e77e      	b.n	401c66 <prvTimerTask+0x7e>
  401d68:	200005d0 	.word	0x200005d0
  401d6c:	004014f1 	.word	0x004014f1
  401d70:	20000604 	.word	0x20000604
  401d74:	00401365 	.word	0x00401365
  401d78:	00401b7d 	.word	0x00401b7d
  401d7c:	00401b35 	.word	0x00401b35
  401d80:	200005d4 	.word	0x200005d4
  401d84:	00400f01 	.word	0x00400f01
  401d88:	00400cfd 	.word	0x00400cfd
  401d8c:	00401abd 	.word	0x00401abd
  401d90:	00401b09 	.word	0x00401b09
  401d94:	00402e58 	.word	0x00402e58
  401d98:	0040288d 	.word	0x0040288d
  401d9c:	00400699 	.word	0x00400699
  401da0:	e000ed04 	.word	0xe000ed04
  401da4:	004001e1 	.word	0x004001e1

00401da8 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
  401da8:	b570      	push	{r4, r5, r6, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
  401daa:	4b10      	ldr	r3, [pc, #64]	; (401dec <prvCheckForValidListAndQueue+0x44>)
  401dac:	4798      	blx	r3
        {
            if( xTimerQueue == NULL )
  401dae:	4b10      	ldr	r3, [pc, #64]	; (401df0 <prvCheckForValidListAndQueue+0x48>)
  401db0:	681b      	ldr	r3, [r3, #0]
  401db2:	b113      	cbz	r3, 401dba <prvCheckForValidListAndQueue+0x12>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
  401db4:	4b0f      	ldr	r3, [pc, #60]	; (401df4 <prvCheckForValidListAndQueue+0x4c>)
  401db6:	4798      	blx	r3
  401db8:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &xActiveTimerList1 );
  401dba:	4d0f      	ldr	r5, [pc, #60]	; (401df8 <prvCheckForValidListAndQueue+0x50>)
  401dbc:	4628      	mov	r0, r5
  401dbe:	4e0f      	ldr	r6, [pc, #60]	; (401dfc <prvCheckForValidListAndQueue+0x54>)
  401dc0:	47b0      	blx	r6
                vListInitialise( &xActiveTimerList2 );
  401dc2:	4c0f      	ldr	r4, [pc, #60]	; (401e00 <prvCheckForValidListAndQueue+0x58>)
  401dc4:	4620      	mov	r0, r4
  401dc6:	47b0      	blx	r6
                pxCurrentTimerList = &xActiveTimerList1;
  401dc8:	4b0e      	ldr	r3, [pc, #56]	; (401e04 <prvCheckForValidListAndQueue+0x5c>)
  401dca:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
  401dcc:	4b0e      	ldr	r3, [pc, #56]	; (401e08 <prvCheckForValidListAndQueue+0x60>)
  401dce:	601c      	str	r4, [r3, #0]
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401dd0:	2200      	movs	r2, #0
  401dd2:	2110      	movs	r1, #16
  401dd4:	2005      	movs	r0, #5
  401dd6:	4b0d      	ldr	r3, [pc, #52]	; (401e0c <prvCheckForValidListAndQueue+0x64>)
  401dd8:	4798      	blx	r3
  401dda:	4b05      	ldr	r3, [pc, #20]	; (401df0 <prvCheckForValidListAndQueue+0x48>)
  401ddc:	6018      	str	r0, [r3, #0]
                        if( xTimerQueue != NULL )
  401dde:	2800      	cmp	r0, #0
  401de0:	d0e8      	beq.n	401db4 <prvCheckForValidListAndQueue+0xc>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401de2:	490b      	ldr	r1, [pc, #44]	; (401e10 <prvCheckForValidListAndQueue+0x68>)
  401de4:	4b0b      	ldr	r3, [pc, #44]	; (401e14 <prvCheckForValidListAndQueue+0x6c>)
  401de6:	4798      	blx	r3
  401de8:	e7e4      	b.n	401db4 <prvCheckForValidListAndQueue+0xc>
  401dea:	bf00      	nop
  401dec:	004002e5 	.word	0x004002e5
  401df0:	20000604 	.word	0x20000604
  401df4:	0040032d 	.word	0x0040032d
  401df8:	200005d8 	.word	0x200005d8
  401dfc:	00400191 	.word	0x00400191
  401e00:	200005ec 	.word	0x200005ec
  401e04:	200005d0 	.word	0x200005d0
  401e08:	200005d4 	.word	0x200005d4
  401e0c:	00400ae1 	.word	0x00400ae1
  401e10:	00402e50 	.word	0x00402e50
  401e14:	00400ea1 	.word	0x00400ea1

00401e18 <xTimerCreateTimerTask>:
    {
  401e18:	b510      	push	{r4, lr}
  401e1a:	b082      	sub	sp, #8
        prvCheckForValidListAndQueue();
  401e1c:	4b0d      	ldr	r3, [pc, #52]	; (401e54 <xTimerCreateTimerTask+0x3c>)
  401e1e:	4798      	blx	r3
        if( xTimerQueue != NULL )
  401e20:	4b0d      	ldr	r3, [pc, #52]	; (401e58 <xTimerCreateTimerTask+0x40>)
  401e22:	681b      	ldr	r3, [r3, #0]
  401e24:	b17b      	cbz	r3, 401e46 <xTimerCreateTimerTask+0x2e>
                    xReturn = xTaskCreate( prvTimerTask,
  401e26:	4b0d      	ldr	r3, [pc, #52]	; (401e5c <xTimerCreateTimerTask+0x44>)
  401e28:	9301      	str	r3, [sp, #4]
  401e2a:	2307      	movs	r3, #7
  401e2c:	9300      	str	r3, [sp, #0]
  401e2e:	2300      	movs	r3, #0
  401e30:	f44f 7282 	mov.w	r2, #260	; 0x104
  401e34:	490a      	ldr	r1, [pc, #40]	; (401e60 <xTimerCreateTimerTask+0x48>)
  401e36:	480b      	ldr	r0, [pc, #44]	; (401e64 <xTimerCreateTimerTask+0x4c>)
  401e38:	4c0b      	ldr	r4, [pc, #44]	; (401e68 <xTimerCreateTimerTask+0x50>)
  401e3a:	47a0      	blx	r4
        configASSERT( xReturn );
  401e3c:	4603      	mov	r3, r0
  401e3e:	b110      	cbz	r0, 401e46 <xTimerCreateTimerTask+0x2e>
    }
  401e40:	4618      	mov	r0, r3
  401e42:	b002      	add	sp, #8
  401e44:	bd10      	pop	{r4, pc}
        configASSERT( xReturn );
  401e46:	f240 1119 	movw	r1, #281	; 0x119
  401e4a:	4808      	ldr	r0, [pc, #32]	; (401e6c <xTimerCreateTimerTask+0x54>)
  401e4c:	4b08      	ldr	r3, [pc, #32]	; (401e70 <xTimerCreateTimerTask+0x58>)
  401e4e:	4798      	blx	r3
  401e50:	2300      	movs	r3, #0
        return xReturn;
  401e52:	e7f5      	b.n	401e40 <xTimerCreateTimerTask+0x28>
  401e54:	00401da9 	.word	0x00401da9
  401e58:	20000604 	.word	0x20000604
  401e5c:	20000608 	.word	0x20000608
  401e60:	00402e74 	.word	0x00402e74
  401e64:	00401be9 	.word	0x00401be9
  401e68:	004010bd 	.word	0x004010bd
  401e6c:	00402e58 	.word	0x00402e58
  401e70:	0040288d 	.word	0x0040288d

00401e74 <toggleLED>:
}

// 
uint8_t toggleLED(uint8_t uiLedNum)
{
	ioport_set_pin_level(decLED[uiLedNum], !ioport_get_pin_level(decLED[uiLedNum]));
  401e74:	4b09      	ldr	r3, [pc, #36]	; (401e9c <toggleLED+0x28>)
  401e76:	5c1a      	ldrb	r2, [r3, r0]
	return pin >> 5;
  401e78:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401e7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401e7e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401e82:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401e84:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  401e86:	f002 011f 	and.w	r1, r2, #31
  401e8a:	2201      	movs	r2, #1
  401e8c:	408a      	lsls	r2, r1
	if (level) {
  401e8e:	4210      	tst	r0, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e90:	bf0c      	ite	eq
  401e92:	631a      	streq	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401e94:	635a      	strne	r2, [r3, #52]	; 0x34

	return SUCCESS; // dummy return
}
  401e96:	4b02      	ldr	r3, [pc, #8]	; (401ea0 <toggleLED+0x2c>)
  401e98:	7818      	ldrb	r0, [r3, #0]
  401e9a:	4770      	bx	lr
  401e9c:	20000010 	.word	0x20000010
  401ea0:	2000000c 	.word	0x2000000c

00401ea4 <taskHeartbeat>:
// toggles an LED on and off every 0.5 second
// heartbeat task created up to four times: 
//     *    1 onboard LED uncontrolled
//     *	3 extension board LEDs controlled by button functions
void taskHeartbeat( void * pvParameters )
{
  401ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Block for 500ms. */
	const TickType_t xDelay = 500 / portTICK_PERIOD_MS;	// SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ = 4MHz

	// casting sent parameter back to what it was originally
	const uint8_t* ledNum = (uint8_t*) pvParameters;
	const uint8_t led = *ledNum;
  401ea6:	7807      	ldrb	r7, [r0, #0]

	while(FOREVER)
	{	// actual task
		toggleLED(led);		// toggle LED state
  401ea8:	4e04      	ldr	r6, [pc, #16]	; (401ebc <taskHeartbeat+0x18>)
		vTaskDelay( xDelay );	// then wait 0.5 
  401eaa:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  401eae:	4c04      	ldr	r4, [pc, #16]	; (401ec0 <taskHeartbeat+0x1c>)
		toggleLED(led);		// toggle LED state
  401eb0:	4638      	mov	r0, r7
  401eb2:	47b0      	blx	r6
		vTaskDelay( xDelay );	// then wait 0.5 
  401eb4:	4628      	mov	r0, r5
  401eb6:	47a0      	blx	r4
  401eb8:	e7fa      	b.n	401eb0 <taskHeartbeat+0xc>
  401eba:	bf00      	nop
  401ebc:	00401e75 	.word	0x00401e75
  401ec0:	00401671 	.word	0x00401671

00401ec4 <taskBlinkLED>:

// blinks target LED at the rate specified by the delay;
// delay is determined from message received from current system control task
// delay is bounded by min and max values
void taskBlinkLED( void * pvParameters )
{
  401ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ec8:	b0aa      	sub	sp, #168	; 0xa8
	/* Block for 500ms. */
	TickType_t xDelay = 500;	// SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ = 4MHz

	// casting sent parameter back to what it was originally
	const struct DataBlinkLED data = *(struct DataBlinkLED*) pvParameters;
  401eca:	2270      	movs	r2, #112	; 0x70
  401ecc:	4601      	mov	r1, r0
  401ece:	a80e      	add	r0, sp, #56	; 0x38
  401ed0:	4b24      	ldr	r3, [pc, #144]	; (401f64 <taskBlinkLED+0xa0>)
  401ed2:	4798      	blx	r3

	char uart_message[50] = "\0";
  401ed4:	4b24      	ldr	r3, [pc, #144]	; (401f68 <taskBlinkLED+0xa4>)
  401ed6:	881b      	ldrh	r3, [r3, #0]
  401ed8:	f8ad 3004 	strh.w	r3, [sp, #4]
  401edc:	2230      	movs	r2, #48	; 0x30
  401ede:	2100      	movs	r1, #0
  401ee0:	f10d 0006 	add.w	r0, sp, #6
  401ee4:	4b21      	ldr	r3, [pc, #132]	; (401f6c <taskBlinkLED+0xa8>)
  401ee6:	4798      	blx	r3
	enum ledQueueMessage message = 0;	// preparing mailbox...
  401ee8:	2300      	movs	r3, #0
  401eea:	f88d 3003 	strb.w	r3, [sp, #3]
	TickType_t xDelay = 500;	// SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ = 4MHz
  401eee:	f44f 78fa 	mov.w	r8, #500	; 0x1f4

	while(FOREVER)
	{
		//
		strcpy(uart_message, data.uart_led_message[0]);
  401ef2:	4f1f      	ldr	r7, [pc, #124]	; (401f70 <taskBlinkLED+0xac>)
		xQueueSendToBack(data.uart_queue_handle, (void*) &uart_message, (TickType_t) 10);
  401ef4:	4e1f      	ldr	r6, [pc, #124]	; (401f74 <taskBlinkLED+0xb0>)
  401ef6:	e014      	b.n	401f22 <taskBlinkLED+0x5e>
			// retrieving message from mailbox
			xQueueReceive(data.led_queue_handle, &message, 0);
			
			// setting delay value appropriately
			// depending on message and current delay value
			if (message == INCREMENT && xDelay < MAXDELAY)
  401ef8:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
  401efc:	d201      	bcs.n	401f02 <taskBlinkLED+0x3e>
			{
				xDelay += DELTADELAY;
  401efe:	f108 0832 	add.w	r8, r8, #50	; 0x32
			{
				xDelay -= DELTADELAY;
			}
		}
		// toggle LED and wait for delay period
		toggleLED(data.led_number);				// toggle LED state
  401f02:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
  401f06:	4b1c      	ldr	r3, [pc, #112]	; (401f78 <taskBlinkLED+0xb4>)
  401f08:	4798      	blx	r3
		
		//
		strcpy(uart_message, data.uart_led_message[1]);
  401f0a:	f10d 0176 	add.w	r1, sp, #118	; 0x76
  401f0e:	a801      	add	r0, sp, #4
  401f10:	47b8      	blx	r7
		xQueueSendToBack(data.uart_queue_handle, (void*) &uart_message, (TickType_t) 10);
  401f12:	2300      	movs	r3, #0
  401f14:	220a      	movs	r2, #10
  401f16:	a901      	add	r1, sp, #4
  401f18:	4620      	mov	r0, r4
  401f1a:	47b0      	blx	r6
		
		vTaskDelay( xDelay / portTICK_PERIOD_MS);	// then wait 0.5
  401f1c:	4640      	mov	r0, r8
  401f1e:	4b17      	ldr	r3, [pc, #92]	; (401f7c <taskBlinkLED+0xb8>)
  401f20:	4798      	blx	r3
		strcpy(uart_message, data.uart_led_message[0]);
  401f22:	a911      	add	r1, sp, #68	; 0x44
  401f24:	a801      	add	r0, sp, #4
  401f26:	47b8      	blx	r7
		xQueueSendToBack(data.uart_queue_handle, (void*) &uart_message, (TickType_t) 10);
  401f28:	9c10      	ldr	r4, [sp, #64]	; 0x40
  401f2a:	2300      	movs	r3, #0
  401f2c:	220a      	movs	r2, #10
  401f2e:	a901      	add	r1, sp, #4
  401f30:	4620      	mov	r0, r4
  401f32:	47b0      	blx	r6
		if (uxQueueMessagesWaiting(data.led_queue_handle))
  401f34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  401f36:	4628      	mov	r0, r5
  401f38:	4b11      	ldr	r3, [pc, #68]	; (401f80 <taskBlinkLED+0xbc>)
  401f3a:	4798      	blx	r3
  401f3c:	2800      	cmp	r0, #0
  401f3e:	d0e0      	beq.n	401f02 <taskBlinkLED+0x3e>
			xQueueReceive(data.led_queue_handle, &message, 0);
  401f40:	2200      	movs	r2, #0
  401f42:	f10d 0103 	add.w	r1, sp, #3
  401f46:	4628      	mov	r0, r5
  401f48:	4b0e      	ldr	r3, [pc, #56]	; (401f84 <taskBlinkLED+0xc0>)
  401f4a:	4798      	blx	r3
			if (message == INCREMENT && xDelay < MAXDELAY)
  401f4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401f50:	2b02      	cmp	r3, #2
  401f52:	d0d1      	beq.n	401ef8 <taskBlinkLED+0x34>
			else if (message == DECREMENT && xDelay > MINDELAY)
  401f54:	2b01      	cmp	r3, #1
  401f56:	d1d4      	bne.n	401f02 <taskBlinkLED+0x3e>
  401f58:	f1b8 0fc8 	cmp.w	r8, #200	; 0xc8
				xDelay -= DELTADELAY;
  401f5c:	bf88      	it	hi
  401f5e:	f1a8 0832 	subhi.w	r8, r8, #50	; 0x32
  401f62:	e7ce      	b.n	401f02 <taskBlinkLED+0x3e>
  401f64:	00402931 	.word	0x00402931
  401f68:	00402e7c 	.word	0x00402e7c
  401f6c:	00402a65 	.word	0x00402a65
  401f70:	00402b01 	.word	0x00402b01
  401f74:	00400b49 	.word	0x00400b49
  401f78:	00401e75 	.word	0x00401e75
  401f7c:	00401671 	.word	0x00401671
  401f80:	00400e71 	.word	0x00400e71
  401f84:	00400cfd 	.word	0x00400cfd

00401f88 <taskUART>:
		vTaskDelay(xDelay);
	}
}

void taskUART(void* pvParameters)
{
  401f88:	b5f0      	push	{r4, r5, r6, r7, lr}
  401f8a:	b08f      	sub	sp, #60	; 0x3c
	const struct UARTData data = *(struct UARTData*) pvParameters;
  401f8c:	6806      	ldr	r6, [r0, #0]
	
	char message[50];
	
	while (FOREVER)
	{	
		if (xQueueReceive(data.uart_queue_handle, &message, 0) == pdTRUE)
  401f8e:	4d09      	ldr	r5, [pc, #36]	; (401fb4 <taskUART+0x2c>)
		{
			UARTPutStr(EDBG_UART, message, strlen(message));
  401f90:	4f09      	ldr	r7, [pc, #36]	; (401fb8 <taskUART+0x30>)
		if (xQueueReceive(data.uart_queue_handle, &message, 0) == pdTRUE)
  401f92:	2400      	movs	r4, #0
  401f94:	4622      	mov	r2, r4
  401f96:	a901      	add	r1, sp, #4
  401f98:	4630      	mov	r0, r6
  401f9a:	47a8      	blx	r5
  401f9c:	2801      	cmp	r0, #1
  401f9e:	d1f9      	bne.n	401f94 <taskUART+0xc>
			UARTPutStr(EDBG_UART, message, strlen(message));
  401fa0:	a801      	add	r0, sp, #4
  401fa2:	4b06      	ldr	r3, [pc, #24]	; (401fbc <taskUART+0x34>)
  401fa4:	4798      	blx	r3
  401fa6:	b2c2      	uxtb	r2, r0
  401fa8:	a901      	add	r1, sp, #4
  401faa:	4638      	mov	r0, r7
  401fac:	4b04      	ldr	r3, [pc, #16]	; (401fc0 <taskUART+0x38>)
  401fae:	4798      	blx	r3
  401fb0:	e7ef      	b.n	401f92 <taskUART+0xa>
  401fb2:	bf00      	nop
  401fb4:	00400cfd 	.word	0x00400cfd
  401fb8:	400e0600 	.word	0x400e0600
  401fbc:	00402bc1 	.word	0x00402bc1
  401fc0:	00402265 	.word	0x00402265

00401fc4 <getNextLED>:
getNextLED (enum ledSelect current)
{
	enum ledSelect next = 0;
	
	// returns next LED given current, rotating through
	switch (current)
  401fc4:	b120      	cbz	r0, 401fd0 <getNextLED+0xc>
	enum ledSelect next = 0;
  401fc6:	2801      	cmp	r0, #1
  401fc8:	bf0c      	ite	eq
  401fca:	2002      	moveq	r0, #2
  401fcc:	2000      	movne	r0, #0
  401fce:	4770      	bx	lr
	{
		case LED1:
			next = LED2;
  401fd0:	2001      	movs	r0, #1
			break;
		default:
			break;
	}
	return next;
}
  401fd2:	4770      	bx	lr

00401fd4 <taskSystemControl>:
{
  401fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fd8:	b0ac      	sub	sp, #176	; 0xb0
	struct DataControlLED data = *(struct DataControlLED*) pvParameters;
  401fda:	2278      	movs	r2, #120	; 0x78
  401fdc:	4601      	mov	r1, r0
  401fde:	a80e      	add	r0, sp, #56	; 0x38
  401fe0:	4b38      	ldr	r3, [pc, #224]	; (4020c4 <taskSystemControl+0xf0>)
  401fe2:	4798      	blx	r3
	char uart_message[50] = "\0";
  401fe4:	4b38      	ldr	r3, [pc, #224]	; (4020c8 <taskSystemControl+0xf4>)
  401fe6:	881b      	ldrh	r3, [r3, #0]
  401fe8:	f8ad 3004 	strh.w	r3, [sp, #4]
  401fec:	2230      	movs	r2, #48	; 0x30
  401fee:	2100      	movs	r1, #0
  401ff0:	f10d 0006 	add.w	r0, sp, #6
  401ff4:	4b35      	ldr	r3, [pc, #212]	; (4020cc <taskSystemControl+0xf8>)
  401ff6:	4798      	blx	r3
	enum ledQueueMessage message = 0;
  401ff8:	2300      	movs	r3, #0
  401ffa:	f88d 3003 	strb.w	r3, [sp, #3]
		strcpy(uart_message , data.uart_led_message[0]);
  401ffe:	4f34      	ldr	r7, [pc, #208]	; (4020d0 <taskSystemControl+0xfc>)
		xQueueSendToBack(data.uart_queue_handle, (void*) &uart_message, (TickType_t) 10);
  402000:	461c      	mov	r4, r3
  402002:	260a      	movs	r6, #10
  402004:	4d33      	ldr	r5, [pc, #204]	; (4020d4 <taskSystemControl+0x100>)
			vTaskDelay(xDebounceDelay);
  402006:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4020e0 <taskSystemControl+0x10c>
  40200a:	e016      	b.n	40203a <taskSystemControl+0x66>
		else if (readButton(SECOND))
  40200c:	2001      	movs	r0, #1
  40200e:	4b32      	ldr	r3, [pc, #200]	; (4020d8 <taskSystemControl+0x104>)
  402010:	4798      	blx	r3
  402012:	2800      	cmp	r0, #0
  402014:	d043      	beq.n	40209e <taskSystemControl+0xca>
			vTaskDelay(xDebounceDelay);
  402016:	200f      	movs	r0, #15
  402018:	47c0      	blx	r8
			if (readButton(SECOND))
  40201a:	2001      	movs	r0, #1
  40201c:	4b2e      	ldr	r3, [pc, #184]	; (4020d8 <taskSystemControl+0x104>)
  40201e:	4798      	blx	r3
  402020:	2800      	cmp	r0, #0
  402022:	d12d      	bne.n	402080 <taskSystemControl+0xac>
		strcpy(uart_message, data.uart_led_message[1]);
  402024:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  402028:	a801      	add	r0, sp, #4
  40202a:	47b8      	blx	r7
		xQueueSendToBack(data.uart_queue_handle, (void*) &uart_message, (TickType_t) 10);
  40202c:	4623      	mov	r3, r4
  40202e:	4632      	mov	r2, r6
  402030:	a901      	add	r1, sp, #4
  402032:	980f      	ldr	r0, [sp, #60]	; 0x3c
  402034:	47a8      	blx	r5
		vTaskDelay(xDelay);
  402036:	2064      	movs	r0, #100	; 0x64
  402038:	47c0      	blx	r8
		strcpy(uart_message , data.uart_led_message[0]);
  40203a:	a913      	add	r1, sp, #76	; 0x4c
  40203c:	a801      	add	r0, sp, #4
  40203e:	47b8      	blx	r7
		xQueueSendToBack(data.uart_queue_handle, (void*) &uart_message, (TickType_t) 10);
  402040:	4623      	mov	r3, r4
  402042:	4632      	mov	r2, r6
  402044:	a901      	add	r1, sp, #4
  402046:	980f      	ldr	r0, [sp, #60]	; 0x3c
  402048:	47a8      	blx	r5
		if (readButton(FIRST))							// poll button
  40204a:	4620      	mov	r0, r4
  40204c:	4b22      	ldr	r3, [pc, #136]	; (4020d8 <taskSystemControl+0x104>)
  40204e:	4798      	blx	r3
  402050:	2800      	cmp	r0, #0
  402052:	d0db      	beq.n	40200c <taskSystemControl+0x38>
			vTaskDelay(xDebounceDelay);					// wait a moment
  402054:	200f      	movs	r0, #15
  402056:	47c0      	blx	r8
			if (readButton(FIRST))						// take action if valid
  402058:	4620      	mov	r0, r4
  40205a:	4b1f      	ldr	r3, [pc, #124]	; (4020d8 <taskSystemControl+0x104>)
  40205c:	4798      	blx	r3
  40205e:	2800      	cmp	r0, #0
  402060:	d0e0      	beq.n	402024 <taskSystemControl+0x50>
				message = DECREMENT;
  402062:	a92c      	add	r1, sp, #176	; 0xb0
  402064:	2301      	movs	r3, #1
  402066:	f801 3dad 	strb.w	r3, [r1, #-173]!
				xQueueSendToBack(data.led_queue_handle[data.current_led], (void*) &message, (TickType_t) 10);
  40206a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
  40206e:	ab2c      	add	r3, sp, #176	; 0xb0
  402070:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402074:	4623      	mov	r3, r4
  402076:	4632      	mov	r2, r6
  402078:	f850 0c70 	ldr.w	r0, [r0, #-112]
  40207c:	47a8      	blx	r5
  40207e:	e7d1      	b.n	402024 <taskSystemControl+0x50>
				message = INCREMENT;
  402080:	a92c      	add	r1, sp, #176	; 0xb0
  402082:	2302      	movs	r3, #2
  402084:	f801 3dad 	strb.w	r3, [r1, #-173]!
				xQueueSendToBack(data.led_queue_handle[data.current_led], (void*) &message, (TickType_t) 10);
  402088:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
  40208c:	ab2c      	add	r3, sp, #176	; 0xb0
  40208e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402092:	4623      	mov	r3, r4
  402094:	4632      	mov	r2, r6
  402096:	f850 0c70 	ldr.w	r0, [r0, #-112]
  40209a:	47a8      	blx	r5
  40209c:	e7c2      	b.n	402024 <taskSystemControl+0x50>
		else if (readButton(THIRD))
  40209e:	2002      	movs	r0, #2
  4020a0:	4b0d      	ldr	r3, [pc, #52]	; (4020d8 <taskSystemControl+0x104>)
  4020a2:	4798      	blx	r3
  4020a4:	2800      	cmp	r0, #0
  4020a6:	d0bd      	beq.n	402024 <taskSystemControl+0x50>
			vTaskDelay(xDebounceDelay);
  4020a8:	200f      	movs	r0, #15
  4020aa:	47c0      	blx	r8
			if (readButton(THIRD))	// if valid, change control to next LED taskSystemControl
  4020ac:	2002      	movs	r0, #2
  4020ae:	4b0a      	ldr	r3, [pc, #40]	; (4020d8 <taskSystemControl+0x104>)
  4020b0:	4798      	blx	r3
  4020b2:	2800      	cmp	r0, #0
  4020b4:	d0b6      	beq.n	402024 <taskSystemControl+0x50>
				data.current_led = getNextLED(data.current_led);
  4020b6:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
  4020ba:	4b08      	ldr	r3, [pc, #32]	; (4020dc <taskSystemControl+0x108>)
  4020bc:	4798      	blx	r3
  4020be:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
  4020c2:	e7af      	b.n	402024 <taskSystemControl+0x50>
  4020c4:	00402931 	.word	0x00402931
  4020c8:	00402e7c 	.word	0x00402e7c
  4020cc:	00402a65 	.word	0x00402a65
  4020d0:	00402b01 	.word	0x00402b01
  4020d4:	00400b49 	.word	0x00400b49
  4020d8:	00400165 	.word	0x00400165
  4020dc:	00401fc5 	.word	0x00401fc5
  4020e0:	00401671 	.word	0x00401671

004020e4 <OITExpansionBoardInit>:
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)


void OITExpansionBoardInit(void)
{
  4020e4:	b410      	push	{r4}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4020e6:	4a44      	ldr	r2, [pc, #272]	; (4021f8 <OITExpansionBoardInit+0x114>)
  4020e8:	2304      	movs	r3, #4
  4020ea:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4020ec:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4020f0:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4020f2:	2308      	movs	r3, #8
  4020f4:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4020f6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4020fa:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4020fc:	4b3f      	ldr	r3, [pc, #252]	; (4021fc <OITExpansionBoardInit+0x118>)
  4020fe:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  402102:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402104:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402108:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40210a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40210e:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402110:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402114:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402116:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  40211a:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40211c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402120:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402122:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  402126:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402128:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40212c:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40212e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402132:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402134:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  402136:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40213a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40213c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  402140:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402142:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  402144:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  402148:	675c      	str	r4, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40214a:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40214e:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402152:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402156:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40215a:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40215c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402160:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402162:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402166:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402168:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  40216a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40216e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  402170:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  402174:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402176:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  402178:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  40217c:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40217e:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402182:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402186:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40218a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  40218e:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402190:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402194:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402196:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40219a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40219c:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40219e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4021a2:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4021a4:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  4021a8:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4021aa:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4021ac:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  4021b0:	6758      	str	r0, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4021b2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4021b6:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4021ba:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4021be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4021c2:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021c4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4021c8:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4021ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4021ce:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  4021d0:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  4021d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4021d6:	6f11      	ldr	r1, [r2, #112]	; 0x70
  4021d8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  4021dc:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4021de:	6f51      	ldr	r1, [r2, #116]	; 0x74
  4021e0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  4021e4:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_ESR = mask;
  4021e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4021ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4021ee:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	Init4Led5BtnBoardExt1();
#endif
#ifdef OIT_4LED_5BTN_BOARD_EXT3
	Init4Led5BtnBoardExt3();
#endif
}
  4021f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4021f6:	4770      	bx	lr
  4021f8:	400e1000 	.word	0x400e1000
  4021fc:	400e0e00 	.word	0x400e0e00

00402200 <initUART>:
// 
// 
//
uint8_t
initUART (Uart * pUart)
{
  402200:	b510      	push	{r4, lr}
  402202:	4604      	mov	r4, r0
		base->PIO_PUDR = mask;
  402204:	4b12      	ldr	r3, [pc, #72]	; (402250 <initUART+0x50>)
  402206:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40220a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40220c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402210:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402212:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402218:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40221a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40221e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402220:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402222:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  402226:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402228:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40222a:	2007      	movs	r0, #7
  40222c:	4b09      	ldr	r3, [pc, #36]	; (402254 <initUART+0x54>)
  40222e:	4798      	blx	r3
	ioport_disable_port(IOPORT_PIOA, PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
	sysclk_enable_peripheral_clock(ID_UART0);

	// Configure UART Control Registers
	// Reset and Disable RX and TX
	pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
  402230:	23ac      	movs	r3, #172	; 0xac
  402232:	6023      	str	r3, [r4, #0]
	}
       
	if(retVal != 1)
	{
		// Set The Actual BAUD to Control Register
		pUart->UART_BRGR = cd;
  402234:	2334      	movs	r3, #52	; 0x34
  402236:	6223      	str	r3, [r4, #32]

		// Configure Mode
		pUart->UART_MR = UART_SERIAL_PARITY;
  402238:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40223c:	6063      	str	r3, [r4, #4]
	       
		// Disable PDC Channel
		pUart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40223e:	f240 2302 	movw	r3, #514	; 0x202
  402242:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	       
		// Enable RX and TX
		pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402246:	2350      	movs	r3, #80	; 0x50
  402248:	6023      	str	r3, [r4, #0]
	}
       
	return retVal;
}
  40224a:	2000      	movs	r0, #0
  40224c:	bd10      	pop	{r4, pc}
  40224e:	bf00      	nop
  402250:	400e0e00 	.word	0x400e0e00
  402254:	0040244d 	.word	0x0040244d

00402258 <UARTPutC>:
//
void
UARTPutC (Uart * pUart, char data)
{	
	// Wait for Transmitter to be Ready
	while((pUart->UART_SR & UART_SR_TXRDY) == 0)
  402258:	6943      	ldr	r3, [r0, #20]
  40225a:	f013 0f02 	tst.w	r3, #2
  40225e:	d0fb      	beq.n	402258 <UARTPutC>
	{
		
	}
	pUart->UART_THR = data;
  402260:	61c1      	str	r1, [r0, #28]
  402262:	4770      	bx	lr

00402264 <UARTPutStr>:
}

void
UARTPutStr (Uart * pUart, char * data, uint8_t len)
{	
	for (int i = 0; i < len; ++i)
  402264:	b162      	cbz	r2, 402280 <UARTPutStr+0x1c>
{	
  402266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402268:	4615      	mov	r5, r2
  40226a:	4606      	mov	r6, r0
  40226c:	460c      	mov	r4, r1
  40226e:	440d      	add	r5, r1
	{
		UARTPutC(pUart, data[i]);
  402270:	4f04      	ldr	r7, [pc, #16]	; (402284 <UARTPutStr+0x20>)
  402272:	f814 1b01 	ldrb.w	r1, [r4], #1
  402276:	4630      	mov	r0, r6
  402278:	47b8      	blx	r7
	for (int i = 0; i < len; ++i)
  40227a:	42ac      	cmp	r4, r5
  40227c:	d1f9      	bne.n	402272 <UARTPutStr+0xe>
  40227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402280:	4770      	bx	lr
  402282:	bf00      	nop
  402284:	00402259 	.word	0x00402259

00402288 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402288:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40228a:	480e      	ldr	r0, [pc, #56]	; (4022c4 <sysclk_init+0x3c>)
  40228c:	4b0e      	ldr	r3, [pc, #56]	; (4022c8 <sysclk_init+0x40>)
  40228e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402290:	213e      	movs	r1, #62	; 0x3e
  402292:	2000      	movs	r0, #0
  402294:	4b0d      	ldr	r3, [pc, #52]	; (4022cc <sysclk_init+0x44>)
  402296:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402298:	4c0d      	ldr	r4, [pc, #52]	; (4022d0 <sysclk_init+0x48>)
  40229a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40229c:	2800      	cmp	r0, #0
  40229e:	d0fc      	beq.n	40229a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4022a0:	4b0c      	ldr	r3, [pc, #48]	; (4022d4 <sysclk_init+0x4c>)
  4022a2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4022a4:	4a0c      	ldr	r2, [pc, #48]	; (4022d8 <sysclk_init+0x50>)
  4022a6:	4b0d      	ldr	r3, [pc, #52]	; (4022dc <sysclk_init+0x54>)
  4022a8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4022aa:	4c0d      	ldr	r4, [pc, #52]	; (4022e0 <sysclk_init+0x58>)
  4022ac:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4022ae:	2800      	cmp	r0, #0
  4022b0:	d0fc      	beq.n	4022ac <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4022b2:	2010      	movs	r0, #16
  4022b4:	4b0b      	ldr	r3, [pc, #44]	; (4022e4 <sysclk_init+0x5c>)
  4022b6:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4022b8:	4b0b      	ldr	r3, [pc, #44]	; (4022e8 <sysclk_init+0x60>)
  4022ba:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4022bc:	480b      	ldr	r0, [pc, #44]	; (4022ec <sysclk_init+0x64>)
  4022be:	4b02      	ldr	r3, [pc, #8]	; (4022c8 <sysclk_init+0x40>)
  4022c0:	4798      	blx	r3
  4022c2:	bd10      	pop	{r4, pc}
  4022c4:	07270e00 	.word	0x07270e00
  4022c8:	00402679 	.word	0x00402679
  4022cc:	004023c9 	.word	0x004023c9
  4022d0:	0040241d 	.word	0x0040241d
  4022d4:	0040242d 	.word	0x0040242d
  4022d8:	200f3f01 	.word	0x200f3f01
  4022dc:	400e0400 	.word	0x400e0400
  4022e0:	0040243d 	.word	0x0040243d
  4022e4:	00402365 	.word	0x00402365
  4022e8:	0040256d 	.word	0x0040256d
  4022ec:	05b8d800 	.word	0x05b8d800

004022f0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4022f0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4022f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4022f6:	4b18      	ldr	r3, [pc, #96]	; (402358 <board_init+0x68>)
  4022f8:	605a      	str	r2, [r3, #4]
  4022fa:	2009      	movs	r0, #9
  4022fc:	4c17      	ldr	r4, [pc, #92]	; (40235c <board_init+0x6c>)
  4022fe:	47a0      	blx	r4
  402300:	200a      	movs	r0, #10
  402302:	47a0      	blx	r4
  402304:	200b      	movs	r0, #11
  402306:	47a0      	blx	r4
  402308:	200c      	movs	r0, #12
  40230a:	47a0      	blx	r4
  40230c:	200d      	movs	r0, #13
  40230e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402310:	4b13      	ldr	r3, [pc, #76]	; (402360 <board_init+0x70>)
  402312:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402316:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402318:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40231c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40231e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  402322:	2204      	movs	r2, #4
  402324:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402326:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40232a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40232c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402330:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402332:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402338:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40233a:	f021 0104 	bic.w	r1, r1, #4
  40233e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402340:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402342:	f021 0104 	bic.w	r1, r1, #4
  402346:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  402348:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40234c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402350:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402354:	bd10      	pop	{r4, pc}
  402356:	bf00      	nop
  402358:	400e1850 	.word	0x400e1850
  40235c:	0040244d 	.word	0x0040244d
  402360:	400e1400 	.word	0x400e1400

00402364 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402364:	4a17      	ldr	r2, [pc, #92]	; (4023c4 <pmc_switch_mck_to_pllack+0x60>)
  402366:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40236c:	4318      	orrs	r0, r3
  40236e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402370:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402372:	f013 0f08 	tst.w	r3, #8
  402376:	d10a      	bne.n	40238e <pmc_switch_mck_to_pllack+0x2a>
  402378:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40237c:	4911      	ldr	r1, [pc, #68]	; (4023c4 <pmc_switch_mck_to_pllack+0x60>)
  40237e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402380:	f012 0f08 	tst.w	r2, #8
  402384:	d103      	bne.n	40238e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402386:	3b01      	subs	r3, #1
  402388:	d1f9      	bne.n	40237e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40238a:	2001      	movs	r0, #1
  40238c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40238e:	4a0d      	ldr	r2, [pc, #52]	; (4023c4 <pmc_switch_mck_to_pllack+0x60>)
  402390:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402392:	f023 0303 	bic.w	r3, r3, #3
  402396:	f043 0302 	orr.w	r3, r3, #2
  40239a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40239c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40239e:	f013 0f08 	tst.w	r3, #8
  4023a2:	d10a      	bne.n	4023ba <pmc_switch_mck_to_pllack+0x56>
  4023a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4023a8:	4906      	ldr	r1, [pc, #24]	; (4023c4 <pmc_switch_mck_to_pllack+0x60>)
  4023aa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4023ac:	f012 0f08 	tst.w	r2, #8
  4023b0:	d105      	bne.n	4023be <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4023b2:	3b01      	subs	r3, #1
  4023b4:	d1f9      	bne.n	4023aa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4023b6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4023b8:	4770      	bx	lr
	return 0;
  4023ba:	2000      	movs	r0, #0
  4023bc:	4770      	bx	lr
  4023be:	2000      	movs	r0, #0
  4023c0:	4770      	bx	lr
  4023c2:	bf00      	nop
  4023c4:	400e0400 	.word	0x400e0400

004023c8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4023c8:	b9c8      	cbnz	r0, 4023fe <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4023ca:	4a11      	ldr	r2, [pc, #68]	; (402410 <pmc_switch_mainck_to_xtal+0x48>)
  4023cc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4023ce:	0209      	lsls	r1, r1, #8
  4023d0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4023d2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4023d6:	f023 0303 	bic.w	r3, r3, #3
  4023da:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4023de:	f043 0301 	orr.w	r3, r3, #1
  4023e2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4023e4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4023e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023e8:	f013 0f01 	tst.w	r3, #1
  4023ec:	d0fb      	beq.n	4023e6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4023ee:	4a08      	ldr	r2, [pc, #32]	; (402410 <pmc_switch_mainck_to_xtal+0x48>)
  4023f0:	6a13      	ldr	r3, [r2, #32]
  4023f2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4023fa:	6213      	str	r3, [r2, #32]
  4023fc:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4023fe:	4904      	ldr	r1, [pc, #16]	; (402410 <pmc_switch_mainck_to_xtal+0x48>)
  402400:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402402:	4a04      	ldr	r2, [pc, #16]	; (402414 <pmc_switch_mainck_to_xtal+0x4c>)
  402404:	401a      	ands	r2, r3
  402406:	4b04      	ldr	r3, [pc, #16]	; (402418 <pmc_switch_mainck_to_xtal+0x50>)
  402408:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40240a:	620b      	str	r3, [r1, #32]
  40240c:	4770      	bx	lr
  40240e:	bf00      	nop
  402410:	400e0400 	.word	0x400e0400
  402414:	fec8fffc 	.word	0xfec8fffc
  402418:	01370002 	.word	0x01370002

0040241c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40241c:	4b02      	ldr	r3, [pc, #8]	; (402428 <pmc_osc_is_ready_mainck+0xc>)
  40241e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402420:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402424:	4770      	bx	lr
  402426:	bf00      	nop
  402428:	400e0400 	.word	0x400e0400

0040242c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40242c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402430:	4b01      	ldr	r3, [pc, #4]	; (402438 <pmc_disable_pllack+0xc>)
  402432:	629a      	str	r2, [r3, #40]	; 0x28
  402434:	4770      	bx	lr
  402436:	bf00      	nop
  402438:	400e0400 	.word	0x400e0400

0040243c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40243c:	4b02      	ldr	r3, [pc, #8]	; (402448 <pmc_is_locked_pllack+0xc>)
  40243e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402440:	f000 0002 	and.w	r0, r0, #2
  402444:	4770      	bx	lr
  402446:	bf00      	nop
  402448:	400e0400 	.word	0x400e0400

0040244c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40244c:	282f      	cmp	r0, #47	; 0x2f
  40244e:	d81e      	bhi.n	40248e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402450:	281f      	cmp	r0, #31
  402452:	d80c      	bhi.n	40246e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402454:	4b11      	ldr	r3, [pc, #68]	; (40249c <pmc_enable_periph_clk+0x50>)
  402456:	699a      	ldr	r2, [r3, #24]
  402458:	2301      	movs	r3, #1
  40245a:	4083      	lsls	r3, r0
  40245c:	4393      	bics	r3, r2
  40245e:	d018      	beq.n	402492 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402460:	2301      	movs	r3, #1
  402462:	fa03 f000 	lsl.w	r0, r3, r0
  402466:	4b0d      	ldr	r3, [pc, #52]	; (40249c <pmc_enable_periph_clk+0x50>)
  402468:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40246a:	2000      	movs	r0, #0
  40246c:	4770      	bx	lr
		ul_id -= 32;
  40246e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402470:	4b0a      	ldr	r3, [pc, #40]	; (40249c <pmc_enable_periph_clk+0x50>)
  402472:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402476:	2301      	movs	r3, #1
  402478:	4083      	lsls	r3, r0
  40247a:	4393      	bics	r3, r2
  40247c:	d00b      	beq.n	402496 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40247e:	2301      	movs	r3, #1
  402480:	fa03 f000 	lsl.w	r0, r3, r0
  402484:	4b05      	ldr	r3, [pc, #20]	; (40249c <pmc_enable_periph_clk+0x50>)
  402486:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40248a:	2000      	movs	r0, #0
  40248c:	4770      	bx	lr
		return 1;
  40248e:	2001      	movs	r0, #1
  402490:	4770      	bx	lr
	return 0;
  402492:	2000      	movs	r0, #0
  402494:	4770      	bx	lr
  402496:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402498:	4770      	bx	lr
  40249a:	bf00      	nop
  40249c:	400e0400 	.word	0x400e0400

004024a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4024a0:	e7fe      	b.n	4024a0 <Dummy_Handler>
	...

004024a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4024a4:	b500      	push	{lr}
  4024a6:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4024a8:	4b25      	ldr	r3, [pc, #148]	; (402540 <Reset_Handler+0x9c>)
  4024aa:	4a26      	ldr	r2, [pc, #152]	; (402544 <Reset_Handler+0xa0>)
  4024ac:	429a      	cmp	r2, r3
  4024ae:	d010      	beq.n	4024d2 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4024b0:	4b25      	ldr	r3, [pc, #148]	; (402548 <Reset_Handler+0xa4>)
  4024b2:	4a23      	ldr	r2, [pc, #140]	; (402540 <Reset_Handler+0x9c>)
  4024b4:	429a      	cmp	r2, r3
  4024b6:	d20c      	bcs.n	4024d2 <Reset_Handler+0x2e>
  4024b8:	3b01      	subs	r3, #1
  4024ba:	1a9b      	subs	r3, r3, r2
  4024bc:	f023 0303 	bic.w	r3, r3, #3
  4024c0:	3304      	adds	r3, #4
  4024c2:	4413      	add	r3, r2
  4024c4:	491f      	ldr	r1, [pc, #124]	; (402544 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  4024c6:	f851 0b04 	ldr.w	r0, [r1], #4
  4024ca:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4024ce:	429a      	cmp	r2, r3
  4024d0:	d1f9      	bne.n	4024c6 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4024d2:	4b1e      	ldr	r3, [pc, #120]	; (40254c <Reset_Handler+0xa8>)
  4024d4:	4a1e      	ldr	r2, [pc, #120]	; (402550 <Reset_Handler+0xac>)
  4024d6:	429a      	cmp	r2, r3
  4024d8:	d20a      	bcs.n	4024f0 <Reset_Handler+0x4c>
  4024da:	3b01      	subs	r3, #1
  4024dc:	1a9b      	subs	r3, r3, r2
  4024de:	f023 0303 	bic.w	r3, r3, #3
  4024e2:	3304      	adds	r3, #4
  4024e4:	4413      	add	r3, r2
		*pDest++ = 0;
  4024e6:	2100      	movs	r1, #0
  4024e8:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4024ec:	4293      	cmp	r3, r2
  4024ee:	d1fb      	bne.n	4024e8 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4024f0:	4a18      	ldr	r2, [pc, #96]	; (402554 <Reset_Handler+0xb0>)
  4024f2:	4b19      	ldr	r3, [pc, #100]	; (402558 <Reset_Handler+0xb4>)
  4024f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4024f8:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4024fa:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4024fe:	fab3 f383 	clz	r3, r3
  402502:	095b      	lsrs	r3, r3, #5
  402504:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402506:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  402508:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40250c:	2200      	movs	r2, #0
  40250e:	4b13      	ldr	r3, [pc, #76]	; (40255c <Reset_Handler+0xb8>)
  402510:	701a      	strb	r2, [r3, #0]
	return flags;
  402512:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402514:	4a12      	ldr	r2, [pc, #72]	; (402560 <Reset_Handler+0xbc>)
  402516:	6813      	ldr	r3, [r2, #0]
  402518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40251c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40251e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402522:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402526:	b129      	cbz	r1, 402534 <Reset_Handler+0x90>
		cpu_irq_enable();
  402528:	2201      	movs	r2, #1
  40252a:	4b0c      	ldr	r3, [pc, #48]	; (40255c <Reset_Handler+0xb8>)
  40252c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40252e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402532:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  402534:	4b0b      	ldr	r3, [pc, #44]	; (402564 <Reset_Handler+0xc0>)
  402536:	4798      	blx	r3

	/* Branch to main function */
	main();
  402538:	4b0b      	ldr	r3, [pc, #44]	; (402568 <Reset_Handler+0xc4>)
  40253a:	4798      	blx	r3
  40253c:	e7fe      	b.n	40253c <Reset_Handler+0x98>
  40253e:	bf00      	nop
  402540:	20000000 	.word	0x20000000
  402544:	00403114 	.word	0x00403114
  402548:	2000044c 	.word	0x2000044c
  40254c:	20000670 	.word	0x20000670
  402550:	2000044c 	.word	0x2000044c
  402554:	e000ed00 	.word	0xe000ed00
  402558:	00400000 	.word	0x00400000
  40255c:	20000014 	.word	0x20000014
  402560:	e000ed88 	.word	0xe000ed88
  402564:	004028e1 	.word	0x004028e1
  402568:	004026ed 	.word	0x004026ed

0040256c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  40256c:	4b3b      	ldr	r3, [pc, #236]	; (40265c <SystemCoreClockUpdate+0xf0>)
  40256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402570:	f003 0303 	and.w	r3, r3, #3
  402574:	2b01      	cmp	r3, #1
  402576:	d01d      	beq.n	4025b4 <SystemCoreClockUpdate+0x48>
  402578:	b183      	cbz	r3, 40259c <SystemCoreClockUpdate+0x30>
  40257a:	2b02      	cmp	r3, #2
  40257c:	d036      	beq.n	4025ec <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40257e:	4b37      	ldr	r3, [pc, #220]	; (40265c <SystemCoreClockUpdate+0xf0>)
  402580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402582:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402586:	2b70      	cmp	r3, #112	; 0x70
  402588:	d05f      	beq.n	40264a <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40258a:	4b34      	ldr	r3, [pc, #208]	; (40265c <SystemCoreClockUpdate+0xf0>)
  40258c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40258e:	4934      	ldr	r1, [pc, #208]	; (402660 <SystemCoreClockUpdate+0xf4>)
  402590:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402594:	680b      	ldr	r3, [r1, #0]
  402596:	40d3      	lsrs	r3, r2
  402598:	600b      	str	r3, [r1, #0]
  40259a:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40259c:	4b31      	ldr	r3, [pc, #196]	; (402664 <SystemCoreClockUpdate+0xf8>)
  40259e:	695b      	ldr	r3, [r3, #20]
  4025a0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4025a4:	bf14      	ite	ne
  4025a6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4025aa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4025ae:	4b2c      	ldr	r3, [pc, #176]	; (402660 <SystemCoreClockUpdate+0xf4>)
  4025b0:	601a      	str	r2, [r3, #0]
  4025b2:	e7e4      	b.n	40257e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4025b4:	4b29      	ldr	r3, [pc, #164]	; (40265c <SystemCoreClockUpdate+0xf0>)
  4025b6:	6a1b      	ldr	r3, [r3, #32]
  4025b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4025bc:	d003      	beq.n	4025c6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4025be:	4a2a      	ldr	r2, [pc, #168]	; (402668 <SystemCoreClockUpdate+0xfc>)
  4025c0:	4b27      	ldr	r3, [pc, #156]	; (402660 <SystemCoreClockUpdate+0xf4>)
  4025c2:	601a      	str	r2, [r3, #0]
  4025c4:	e7db      	b.n	40257e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4025c6:	4a29      	ldr	r2, [pc, #164]	; (40266c <SystemCoreClockUpdate+0x100>)
  4025c8:	4b25      	ldr	r3, [pc, #148]	; (402660 <SystemCoreClockUpdate+0xf4>)
  4025ca:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4025cc:	4b23      	ldr	r3, [pc, #140]	; (40265c <SystemCoreClockUpdate+0xf0>)
  4025ce:	6a1b      	ldr	r3, [r3, #32]
  4025d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4025d4:	2b10      	cmp	r3, #16
  4025d6:	d005      	beq.n	4025e4 <SystemCoreClockUpdate+0x78>
  4025d8:	2b20      	cmp	r3, #32
  4025da:	d1d0      	bne.n	40257e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  4025dc:	4a22      	ldr	r2, [pc, #136]	; (402668 <SystemCoreClockUpdate+0xfc>)
  4025de:	4b20      	ldr	r3, [pc, #128]	; (402660 <SystemCoreClockUpdate+0xf4>)
  4025e0:	601a      	str	r2, [r3, #0]
				break;
  4025e2:	e7cc      	b.n	40257e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  4025e4:	4a22      	ldr	r2, [pc, #136]	; (402670 <SystemCoreClockUpdate+0x104>)
  4025e6:	4b1e      	ldr	r3, [pc, #120]	; (402660 <SystemCoreClockUpdate+0xf4>)
  4025e8:	601a      	str	r2, [r3, #0]
				break;
  4025ea:	e7c8      	b.n	40257e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4025ec:	4b1b      	ldr	r3, [pc, #108]	; (40265c <SystemCoreClockUpdate+0xf0>)
  4025ee:	6a1b      	ldr	r3, [r3, #32]
  4025f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4025f4:	d016      	beq.n	402624 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4025f6:	4a1c      	ldr	r2, [pc, #112]	; (402668 <SystemCoreClockUpdate+0xfc>)
  4025f8:	4b19      	ldr	r3, [pc, #100]	; (402660 <SystemCoreClockUpdate+0xf4>)
  4025fa:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4025fc:	4b17      	ldr	r3, [pc, #92]	; (40265c <SystemCoreClockUpdate+0xf0>)
  4025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402600:	f003 0303 	and.w	r3, r3, #3
  402604:	2b02      	cmp	r3, #2
  402606:	d1ba      	bne.n	40257e <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402608:	4a14      	ldr	r2, [pc, #80]	; (40265c <SystemCoreClockUpdate+0xf0>)
  40260a:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40260c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40260e:	4814      	ldr	r0, [pc, #80]	; (402660 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402610:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402614:	6803      	ldr	r3, [r0, #0]
  402616:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40261a:	b2d2      	uxtb	r2, r2
  40261c:	fbb3 f3f2 	udiv	r3, r3, r2
  402620:	6003      	str	r3, [r0, #0]
  402622:	e7ac      	b.n	40257e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402624:	4a11      	ldr	r2, [pc, #68]	; (40266c <SystemCoreClockUpdate+0x100>)
  402626:	4b0e      	ldr	r3, [pc, #56]	; (402660 <SystemCoreClockUpdate+0xf4>)
  402628:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40262a:	4b0c      	ldr	r3, [pc, #48]	; (40265c <SystemCoreClockUpdate+0xf0>)
  40262c:	6a1b      	ldr	r3, [r3, #32]
  40262e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402632:	2b10      	cmp	r3, #16
  402634:	d005      	beq.n	402642 <SystemCoreClockUpdate+0xd6>
  402636:	2b20      	cmp	r3, #32
  402638:	d1e0      	bne.n	4025fc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  40263a:	4a0b      	ldr	r2, [pc, #44]	; (402668 <SystemCoreClockUpdate+0xfc>)
  40263c:	4b08      	ldr	r3, [pc, #32]	; (402660 <SystemCoreClockUpdate+0xf4>)
  40263e:	601a      	str	r2, [r3, #0]
				break;
  402640:	e7dc      	b.n	4025fc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  402642:	4a0b      	ldr	r2, [pc, #44]	; (402670 <SystemCoreClockUpdate+0x104>)
  402644:	4b06      	ldr	r3, [pc, #24]	; (402660 <SystemCoreClockUpdate+0xf4>)
  402646:	601a      	str	r2, [r3, #0]
				break;
  402648:	e7d8      	b.n	4025fc <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40264a:	4a05      	ldr	r2, [pc, #20]	; (402660 <SystemCoreClockUpdate+0xf4>)
  40264c:	6813      	ldr	r3, [r2, #0]
  40264e:	4909      	ldr	r1, [pc, #36]	; (402674 <SystemCoreClockUpdate+0x108>)
  402650:	fba1 1303 	umull	r1, r3, r1, r3
  402654:	085b      	lsrs	r3, r3, #1
  402656:	6013      	str	r3, [r2, #0]
  402658:	4770      	bx	lr
  40265a:	bf00      	nop
  40265c:	400e0400 	.word	0x400e0400
  402660:	20000018 	.word	0x20000018
  402664:	400e1810 	.word	0x400e1810
  402668:	00b71b00 	.word	0x00b71b00
  40266c:	003d0900 	.word	0x003d0900
  402670:	007a1200 	.word	0x007a1200
  402674:	aaaaaaab 	.word	0xaaaaaaab

00402678 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402678:	4b12      	ldr	r3, [pc, #72]	; (4026c4 <system_init_flash+0x4c>)
  40267a:	4298      	cmp	r0, r3
  40267c:	d911      	bls.n	4026a2 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  40267e:	4b12      	ldr	r3, [pc, #72]	; (4026c8 <system_init_flash+0x50>)
  402680:	4298      	cmp	r0, r3
  402682:	d913      	bls.n	4026ac <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  402684:	4b11      	ldr	r3, [pc, #68]	; (4026cc <system_init_flash+0x54>)
  402686:	4298      	cmp	r0, r3
  402688:	d914      	bls.n	4026b4 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40268a:	4b11      	ldr	r3, [pc, #68]	; (4026d0 <system_init_flash+0x58>)
  40268c:	4298      	cmp	r0, r3
  40268e:	d915      	bls.n	4026bc <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402690:	4b10      	ldr	r3, [pc, #64]	; (4026d4 <system_init_flash+0x5c>)
  402692:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402694:	bf94      	ite	ls
  402696:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40269a:	4a0f      	ldrhi	r2, [pc, #60]	; (4026d8 <system_init_flash+0x60>)
  40269c:	4b0f      	ldr	r3, [pc, #60]	; (4026dc <system_init_flash+0x64>)
  40269e:	601a      	str	r2, [r3, #0]
  4026a0:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4026a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4026a6:	4b0d      	ldr	r3, [pc, #52]	; (4026dc <system_init_flash+0x64>)
  4026a8:	601a      	str	r2, [r3, #0]
  4026aa:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4026ac:	4a0c      	ldr	r2, [pc, #48]	; (4026e0 <system_init_flash+0x68>)
  4026ae:	4b0b      	ldr	r3, [pc, #44]	; (4026dc <system_init_flash+0x64>)
  4026b0:	601a      	str	r2, [r3, #0]
  4026b2:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4026b4:	4a0b      	ldr	r2, [pc, #44]	; (4026e4 <system_init_flash+0x6c>)
  4026b6:	4b09      	ldr	r3, [pc, #36]	; (4026dc <system_init_flash+0x64>)
  4026b8:	601a      	str	r2, [r3, #0]
  4026ba:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4026bc:	4a0a      	ldr	r2, [pc, #40]	; (4026e8 <system_init_flash+0x70>)
  4026be:	4b07      	ldr	r3, [pc, #28]	; (4026dc <system_init_flash+0x64>)
  4026c0:	601a      	str	r2, [r3, #0]
  4026c2:	4770      	bx	lr
  4026c4:	01312cff 	.word	0x01312cff
  4026c8:	026259ff 	.word	0x026259ff
  4026cc:	039386ff 	.word	0x039386ff
  4026d0:	04c4b3ff 	.word	0x04c4b3ff
  4026d4:	05f5e0ff 	.word	0x05f5e0ff
  4026d8:	04000500 	.word	0x04000500
  4026dc:	400e0a00 	.word	0x400e0a00
  4026e0:	04000100 	.word	0x04000100
  4026e4:	04000200 	.word	0x04000200
  4026e8:	04000300 	.word	0x04000300

004026ec <main>:
/************************************************************
	main: LED Control Application	

*************************************************************/
int main (void)
{
  4026ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026f0:	b0fe      	sub	sp, #504	; 0x1f8
}

static void prvMiscInitialisation( void )
{
       /* Initialize the SAM system */
       sysclk_init();
  4026f2:	4b4f      	ldr	r3, [pc, #316]	; (402830 <main+0x144>)
  4026f4:	4798      	blx	r3
       board_init();
  4026f6:	4b4f      	ldr	r3, [pc, #316]	; (402834 <main+0x148>)
  4026f8:	4798      	blx	r3
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  4026fa:	4a4f      	ldr	r2, [pc, #316]	; (402838 <main+0x14c>)
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  4026fc:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
  402700:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  402704:	f023 0307 	bic.w	r3, r3, #7
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  402708:	3207      	adds	r2, #7
  40270a:	f022 0207 	bic.w	r2, r2, #7
       HeapRegion_t xHeapRegions[] = {
  40270e:	9202      	str	r2, [sp, #8]
       ulHeapSize -= 1024;
  402710:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  402714:	9303      	str	r3, [sp, #12]
  402716:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40271a:	9304      	str	r3, [sp, #16]
  40271c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402720:	9305      	str	r3, [sp, #20]
  402722:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  402726:	9206      	str	r2, [sp, #24]
  402728:	9307      	str	r3, [sp, #28]
  40272a:	2400      	movs	r4, #0
  40272c:	9408      	str	r4, [sp, #32]
  40272e:	9409      	str	r4, [sp, #36]	; 0x24
       vPortDefineHeapRegions( xHeapRegions );
  402730:	a802      	add	r0, sp, #8
  402732:	4b42      	ldr	r3, [pc, #264]	; (40283c <main+0x150>)
  402734:	4798      	blx	r3
       prvInitialiseHeap();
       pmc_enable_periph_clk(ID_PIOA);
  402736:	2009      	movs	r0, #9
  402738:	4d41      	ldr	r5, [pc, #260]	; (402840 <main+0x154>)
  40273a:	47a8      	blx	r5
       pmc_enable_periph_clk(ID_PIOB);
  40273c:	200a      	movs	r0, #10
  40273e:	47a8      	blx	r5
	   OITExpansionBoardInit();
  402740:	4b40      	ldr	r3, [pc, #256]	; (402844 <main+0x158>)
  402742:	4798      	blx	r3
	   initUART(EDBG_UART);
  402744:	4840      	ldr	r0, [pc, #256]	; (402848 <main+0x15c>)
  402746:	4b41      	ldr	r3, [pc, #260]	; (40284c <main+0x160>)
  402748:	4798      	blx	r3
	uint8_t onboard_LED = 0;
  40274a:	f88d 41f7 	strb.w	r4, [sp, #503]	; 0x1f7
	struct DataBlinkLED led1_blink_data = {1, NULL, NULL, {"LED 1 STARTING\n", "LED 1 BLOCKING\n"}};
  40274e:	4e40      	ldr	r6, [pc, #256]	; (402850 <main+0x164>)
  402750:	2770      	movs	r7, #112	; 0x70
  402752:	463a      	mov	r2, r7
  402754:	4631      	mov	r1, r6
  402756:	a861      	add	r0, sp, #388	; 0x184
  402758:	4d3e      	ldr	r5, [pc, #248]	; (402854 <main+0x168>)
  40275a:	47a8      	blx	r5
	struct DataBlinkLED led2_blink_data = {2, NULL, NULL, {"LED 2 STARTING\n", "LED 2 BLOCKING\n"}};
  40275c:	463a      	mov	r2, r7
  40275e:	19f1      	adds	r1, r6, r7
  402760:	a845      	add	r0, sp, #276	; 0x114
  402762:	47a8      	blx	r5
	struct DataBlinkLED led3_blink_data = {3, NULL, NULL, {"LED 3 STARTING\n", "LED 3 BLOCKING\n"}};
  402764:	463a      	mov	r2, r7
  402766:	f106 01e0 	add.w	r1, r6, #224	; 0xe0
  40276a:	a829      	add	r0, sp, #164	; 0xa4
  40276c:	47a8      	blx	r5
	struct DataControlLED led_control_data = 
  40276e:	2278      	movs	r2, #120	; 0x78
  402770:	f506 71a8 	add.w	r1, r6, #336	; 0x150
  402774:	a80b      	add	r0, sp, #44	; 0x2c
  402776:	47a8      	blx	r5
	struct UARTData uart_data = {NULL};
  402778:	940a      	str	r4, [sp, #40]	; 0x28
	xTaskCreate(taskHeartbeat,
  40277a:	9401      	str	r4, [sp, #4]
  40277c:	f04f 0801 	mov.w	r8, #1
  402780:	f8cd 8000 	str.w	r8, [sp]
  402784:	f20d 13f7 	addw	r3, sp, #503	; 0x1f7
  402788:	2282      	movs	r2, #130	; 0x82
  40278a:	4933      	ldr	r1, [pc, #204]	; (402858 <main+0x16c>)
  40278c:	4833      	ldr	r0, [pc, #204]	; (40285c <main+0x170>)
  40278e:	4d34      	ldr	r5, [pc, #208]	; (402860 <main+0x174>)
  402790:	47a8      	blx	r5
	xTaskCreate(taskBlinkLED,
  402792:	4e34      	ldr	r6, [pc, #208]	; (402864 <main+0x178>)
  402794:	9401      	str	r4, [sp, #4]
  402796:	2306      	movs	r3, #6
  402798:	9300      	str	r3, [sp, #0]
  40279a:	ab61      	add	r3, sp, #388	; 0x184
  40279c:	2282      	movs	r2, #130	; 0x82
  40279e:	4932      	ldr	r1, [pc, #200]	; (402868 <main+0x17c>)
  4027a0:	4630      	mov	r0, r6
  4027a2:	47a8      	blx	r5
	xTaskCreate(taskBlinkLED,
  4027a4:	9401      	str	r4, [sp, #4]
  4027a6:	2705      	movs	r7, #5
  4027a8:	9700      	str	r7, [sp, #0]
  4027aa:	ab45      	add	r3, sp, #276	; 0x114
  4027ac:	2282      	movs	r2, #130	; 0x82
  4027ae:	492f      	ldr	r1, [pc, #188]	; (40286c <main+0x180>)
  4027b0:	4630      	mov	r0, r6
  4027b2:	47a8      	blx	r5
	xTaskCreate(taskBlinkLED,
  4027b4:	9401      	str	r4, [sp, #4]
  4027b6:	2304      	movs	r3, #4
  4027b8:	9300      	str	r3, [sp, #0]
  4027ba:	ab29      	add	r3, sp, #164	; 0xa4
  4027bc:	2282      	movs	r2, #130	; 0x82
  4027be:	492c      	ldr	r1, [pc, #176]	; (402870 <main+0x184>)
  4027c0:	4630      	mov	r0, r6
  4027c2:	47a8      	blx	r5
	qhLED1 = xQueueCreate(5, sizeof(enum ledQueueMessage));
  4027c4:	4622      	mov	r2, r4
  4027c6:	4641      	mov	r1, r8
  4027c8:	4638      	mov	r0, r7
  4027ca:	4e2a      	ldr	r6, [pc, #168]	; (402874 <main+0x188>)
  4027cc:	47b0      	blx	r6
  4027ce:	4682      	mov	sl, r0
	qhLED2 = xQueueCreate(5, sizeof(enum ledQueueMessage));
  4027d0:	4622      	mov	r2, r4
  4027d2:	4641      	mov	r1, r8
  4027d4:	4638      	mov	r0, r7
  4027d6:	47b0      	blx	r6
  4027d8:	4681      	mov	r9, r0
	qhLED3 = xQueueCreate(5, sizeof(enum ledQueueMessage));
  4027da:	4622      	mov	r2, r4
  4027dc:	4641      	mov	r1, r8
  4027de:	4638      	mov	r0, r7
  4027e0:	47b0      	blx	r6
	led1_blink_data.led_queue_handle = qhLED1;
  4027e2:	f8cd a188 	str.w	sl, [sp, #392]	; 0x188
	led2_blink_data.led_queue_handle = qhLED2;
  4027e6:	f8cd 9118 	str.w	r9, [sp, #280]	; 0x118
	led3_blink_data.led_queue_handle = qhLED3;
  4027ea:	902a      	str	r0, [sp, #168]	; 0xa8
	led_control_data.led_queue_handle[0] = qhLED1;
  4027ec:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
	led_control_data.led_queue_handle[1] = qhLED2;
  4027f0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
	led_control_data.led_queue_handle[2] = qhLED3;
  4027f4:	900f      	str	r0, [sp, #60]	; 0x3c
	qhUART = xQueueCreate(20, sizeof(char) * 50);
  4027f6:	4622      	mov	r2, r4
  4027f8:	2132      	movs	r1, #50	; 0x32
  4027fa:	2014      	movs	r0, #20
  4027fc:	47b0      	blx	r6
	uart_data.uart_queue_handle = qhUART;
  4027fe:	900a      	str	r0, [sp, #40]	; 0x28
	led1_blink_data.uart_queue_handle = qhUART;
  402800:	9063      	str	r0, [sp, #396]	; 0x18c
	led2_blink_data.uart_queue_handle = qhUART;
  402802:	9047      	str	r0, [sp, #284]	; 0x11c
	led3_blink_data.uart_queue_handle = qhUART;
  402804:	902b      	str	r0, [sp, #172]	; 0xac
	led_control_data.uart_queue_handle = qhUART;
  402806:	900c      	str	r0, [sp, #48]	; 0x30
	xTaskCreate(taskUART,
  402808:	9401      	str	r4, [sp, #4]
  40280a:	2302      	movs	r3, #2
  40280c:	9300      	str	r3, [sp, #0]
  40280e:	ab0a      	add	r3, sp, #40	; 0x28
  402810:	2282      	movs	r2, #130	; 0x82
  402812:	4919      	ldr	r1, [pc, #100]	; (402878 <main+0x18c>)
  402814:	4819      	ldr	r0, [pc, #100]	; (40287c <main+0x190>)
  402816:	47a8      	blx	r5
	xTaskCreate(taskSystemControl,
  402818:	9401      	str	r4, [sp, #4]
  40281a:	2303      	movs	r3, #3
  40281c:	9300      	str	r3, [sp, #0]
  40281e:	ab0b      	add	r3, sp, #44	; 0x2c
  402820:	2282      	movs	r2, #130	; 0x82
  402822:	4917      	ldr	r1, [pc, #92]	; (402880 <main+0x194>)
  402824:	4817      	ldr	r0, [pc, #92]	; (402884 <main+0x198>)
  402826:	47a8      	blx	r5
	vTaskStartScheduler();
  402828:	4b17      	ldr	r3, [pc, #92]	; (402888 <main+0x19c>)
  40282a:	4798      	blx	r3
  40282c:	e7fe      	b.n	40282c <main+0x140>
  40282e:	bf00      	nop
  402830:	00402289 	.word	0x00402289
  402834:	004022f1 	.word	0x004022f1
  402838:	20003670 	.word	0x20003670
  40283c:	00400749 	.word	0x00400749
  402840:	0040244d 	.word	0x0040244d
  402844:	004020e5 	.word	0x004020e5
  402848:	400e0600 	.word	0x400e0600
  40284c:	00402201 	.word	0x00402201
  402850:	00402eb0 	.word	0x00402eb0
  402854:	00402931 	.word	0x00402931
  402858:	00403078 	.word	0x00403078
  40285c:	00401ea5 	.word	0x00401ea5
  402860:	004010bd 	.word	0x004010bd
  402864:	00401ec5 	.word	0x00401ec5
  402868:	00403088 	.word	0x00403088
  40286c:	00403098 	.word	0x00403098
  402870:	004030a8 	.word	0x004030a8
  402874:	00400ae1 	.word	0x00400ae1
  402878:	004030b8 	.word	0x004030b8
  40287c:	00401f89 	.word	0x00401f89
  402880:	004030c4 	.word	0x004030c4
  402884:	00401fd5 	.word	0x00401fd5
  402888:	004012cd 	.word	0x004012cd

0040288c <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  40288c:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  40288e:	2300      	movs	r3, #0
  402890:	9301      	str	r3, [sp, #4]
        __asm volatile
  402892:	f04f 0350 	mov.w	r3, #80	; 0x50
  402896:	f383 8811 	msr	BASEPRI, r3
  40289a:	f3bf 8f6f 	isb	sy
  40289e:	f3bf 8f4f 	dsb	sy

       /* Setting ulBlockVariable to a non-zero value in the debugger will allow
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
  4028a2:	9b01      	ldr	r3, [sp, #4]
  4028a4:	b91b      	cbnz	r3, 4028ae <vAssertCalled+0x22>
              {
                     __asm volatile( "NOP" );
  4028a6:	bf00      	nop
              while( ulBlockVariable == 0UL )
  4028a8:	9b01      	ldr	r3, [sp, #4]
  4028aa:	2b00      	cmp	r3, #0
  4028ac:	d0fb      	beq.n	4028a6 <vAssertCalled+0x1a>
        __asm volatile
  4028ae:	2300      	movs	r3, #0
  4028b0:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  4028b4:	b002      	add	sp, #8
  4028b6:	4770      	bx	lr

004028b8 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  4028b8:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  4028ba:	21e8      	movs	r1, #232	; 0xe8
  4028bc:	4801      	ldr	r0, [pc, #4]	; (4028c4 <vApplicationMallocFailedHook+0xc>)
  4028be:	4b02      	ldr	r3, [pc, #8]	; (4028c8 <vApplicationMallocFailedHook+0x10>)
  4028c0:	4798      	blx	r3
  4028c2:	bd08      	pop	{r3, pc}
  4028c4:	004030dc 	.word	0x004030dc
  4028c8:	0040288d 	.word	0x0040288d

004028cc <vApplicationStackOverflowHook>:
        __asm volatile
  4028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
  4028d0:	f383 8811 	msr	BASEPRI, r3
  4028d4:	f3bf 8f6f 	isb	sy
  4028d8:	f3bf 8f4f 	dsb	sy
  4028dc:	e7fe      	b.n	4028dc <vApplicationStackOverflowHook+0x10>
	...

004028e0 <__libc_init_array>:
  4028e0:	b570      	push	{r4, r5, r6, lr}
  4028e2:	4e0f      	ldr	r6, [pc, #60]	; (402920 <__libc_init_array+0x40>)
  4028e4:	4d0f      	ldr	r5, [pc, #60]	; (402924 <__libc_init_array+0x44>)
  4028e6:	1b76      	subs	r6, r6, r5
  4028e8:	10b6      	asrs	r6, r6, #2
  4028ea:	bf18      	it	ne
  4028ec:	2400      	movne	r4, #0
  4028ee:	d005      	beq.n	4028fc <__libc_init_array+0x1c>
  4028f0:	3401      	adds	r4, #1
  4028f2:	f855 3b04 	ldr.w	r3, [r5], #4
  4028f6:	4798      	blx	r3
  4028f8:	42a6      	cmp	r6, r4
  4028fa:	d1f9      	bne.n	4028f0 <__libc_init_array+0x10>
  4028fc:	4e0a      	ldr	r6, [pc, #40]	; (402928 <__libc_init_array+0x48>)
  4028fe:	4d0b      	ldr	r5, [pc, #44]	; (40292c <__libc_init_array+0x4c>)
  402900:	1b76      	subs	r6, r6, r5
  402902:	f000 fbf5 	bl	4030f0 <_init>
  402906:	10b6      	asrs	r6, r6, #2
  402908:	bf18      	it	ne
  40290a:	2400      	movne	r4, #0
  40290c:	d006      	beq.n	40291c <__libc_init_array+0x3c>
  40290e:	3401      	adds	r4, #1
  402910:	f855 3b04 	ldr.w	r3, [r5], #4
  402914:	4798      	blx	r3
  402916:	42a6      	cmp	r6, r4
  402918:	d1f9      	bne.n	40290e <__libc_init_array+0x2e>
  40291a:	bd70      	pop	{r4, r5, r6, pc}
  40291c:	bd70      	pop	{r4, r5, r6, pc}
  40291e:	bf00      	nop
  402920:	004030fc 	.word	0x004030fc
  402924:	004030fc 	.word	0x004030fc
  402928:	00403104 	.word	0x00403104
  40292c:	004030fc 	.word	0x004030fc

00402930 <memcpy>:
  402930:	4684      	mov	ip, r0
  402932:	ea41 0300 	orr.w	r3, r1, r0
  402936:	f013 0303 	ands.w	r3, r3, #3
  40293a:	d16d      	bne.n	402a18 <memcpy+0xe8>
  40293c:	3a40      	subs	r2, #64	; 0x40
  40293e:	d341      	bcc.n	4029c4 <memcpy+0x94>
  402940:	f851 3b04 	ldr.w	r3, [r1], #4
  402944:	f840 3b04 	str.w	r3, [r0], #4
  402948:	f851 3b04 	ldr.w	r3, [r1], #4
  40294c:	f840 3b04 	str.w	r3, [r0], #4
  402950:	f851 3b04 	ldr.w	r3, [r1], #4
  402954:	f840 3b04 	str.w	r3, [r0], #4
  402958:	f851 3b04 	ldr.w	r3, [r1], #4
  40295c:	f840 3b04 	str.w	r3, [r0], #4
  402960:	f851 3b04 	ldr.w	r3, [r1], #4
  402964:	f840 3b04 	str.w	r3, [r0], #4
  402968:	f851 3b04 	ldr.w	r3, [r1], #4
  40296c:	f840 3b04 	str.w	r3, [r0], #4
  402970:	f851 3b04 	ldr.w	r3, [r1], #4
  402974:	f840 3b04 	str.w	r3, [r0], #4
  402978:	f851 3b04 	ldr.w	r3, [r1], #4
  40297c:	f840 3b04 	str.w	r3, [r0], #4
  402980:	f851 3b04 	ldr.w	r3, [r1], #4
  402984:	f840 3b04 	str.w	r3, [r0], #4
  402988:	f851 3b04 	ldr.w	r3, [r1], #4
  40298c:	f840 3b04 	str.w	r3, [r0], #4
  402990:	f851 3b04 	ldr.w	r3, [r1], #4
  402994:	f840 3b04 	str.w	r3, [r0], #4
  402998:	f851 3b04 	ldr.w	r3, [r1], #4
  40299c:	f840 3b04 	str.w	r3, [r0], #4
  4029a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4029a4:	f840 3b04 	str.w	r3, [r0], #4
  4029a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4029ac:	f840 3b04 	str.w	r3, [r0], #4
  4029b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4029b4:	f840 3b04 	str.w	r3, [r0], #4
  4029b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4029bc:	f840 3b04 	str.w	r3, [r0], #4
  4029c0:	3a40      	subs	r2, #64	; 0x40
  4029c2:	d2bd      	bcs.n	402940 <memcpy+0x10>
  4029c4:	3230      	adds	r2, #48	; 0x30
  4029c6:	d311      	bcc.n	4029ec <memcpy+0xbc>
  4029c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4029cc:	f840 3b04 	str.w	r3, [r0], #4
  4029d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4029d4:	f840 3b04 	str.w	r3, [r0], #4
  4029d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4029dc:	f840 3b04 	str.w	r3, [r0], #4
  4029e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4029e4:	f840 3b04 	str.w	r3, [r0], #4
  4029e8:	3a10      	subs	r2, #16
  4029ea:	d2ed      	bcs.n	4029c8 <memcpy+0x98>
  4029ec:	320c      	adds	r2, #12
  4029ee:	d305      	bcc.n	4029fc <memcpy+0xcc>
  4029f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4029f4:	f840 3b04 	str.w	r3, [r0], #4
  4029f8:	3a04      	subs	r2, #4
  4029fa:	d2f9      	bcs.n	4029f0 <memcpy+0xc0>
  4029fc:	3204      	adds	r2, #4
  4029fe:	d008      	beq.n	402a12 <memcpy+0xe2>
  402a00:	07d2      	lsls	r2, r2, #31
  402a02:	bf1c      	itt	ne
  402a04:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402a08:	f800 3b01 	strbne.w	r3, [r0], #1
  402a0c:	d301      	bcc.n	402a12 <memcpy+0xe2>
  402a0e:	880b      	ldrh	r3, [r1, #0]
  402a10:	8003      	strh	r3, [r0, #0]
  402a12:	4660      	mov	r0, ip
  402a14:	4770      	bx	lr
  402a16:	bf00      	nop
  402a18:	2a08      	cmp	r2, #8
  402a1a:	d313      	bcc.n	402a44 <memcpy+0x114>
  402a1c:	078b      	lsls	r3, r1, #30
  402a1e:	d08d      	beq.n	40293c <memcpy+0xc>
  402a20:	f010 0303 	ands.w	r3, r0, #3
  402a24:	d08a      	beq.n	40293c <memcpy+0xc>
  402a26:	f1c3 0304 	rsb	r3, r3, #4
  402a2a:	1ad2      	subs	r2, r2, r3
  402a2c:	07db      	lsls	r3, r3, #31
  402a2e:	bf1c      	itt	ne
  402a30:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402a34:	f800 3b01 	strbne.w	r3, [r0], #1
  402a38:	d380      	bcc.n	40293c <memcpy+0xc>
  402a3a:	f831 3b02 	ldrh.w	r3, [r1], #2
  402a3e:	f820 3b02 	strh.w	r3, [r0], #2
  402a42:	e77b      	b.n	40293c <memcpy+0xc>
  402a44:	3a04      	subs	r2, #4
  402a46:	d3d9      	bcc.n	4029fc <memcpy+0xcc>
  402a48:	3a01      	subs	r2, #1
  402a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
  402a4e:	f800 3b01 	strb.w	r3, [r0], #1
  402a52:	d2f9      	bcs.n	402a48 <memcpy+0x118>
  402a54:	780b      	ldrb	r3, [r1, #0]
  402a56:	7003      	strb	r3, [r0, #0]
  402a58:	784b      	ldrb	r3, [r1, #1]
  402a5a:	7043      	strb	r3, [r0, #1]
  402a5c:	788b      	ldrb	r3, [r1, #2]
  402a5e:	7083      	strb	r3, [r0, #2]
  402a60:	4660      	mov	r0, ip
  402a62:	4770      	bx	lr

00402a64 <memset>:
  402a64:	b470      	push	{r4, r5, r6}
  402a66:	0786      	lsls	r6, r0, #30
  402a68:	d046      	beq.n	402af8 <memset+0x94>
  402a6a:	1e54      	subs	r4, r2, #1
  402a6c:	2a00      	cmp	r2, #0
  402a6e:	d041      	beq.n	402af4 <memset+0x90>
  402a70:	b2ca      	uxtb	r2, r1
  402a72:	4603      	mov	r3, r0
  402a74:	e002      	b.n	402a7c <memset+0x18>
  402a76:	f114 34ff 	adds.w	r4, r4, #4294967295
  402a7a:	d33b      	bcc.n	402af4 <memset+0x90>
  402a7c:	f803 2b01 	strb.w	r2, [r3], #1
  402a80:	079d      	lsls	r5, r3, #30
  402a82:	d1f8      	bne.n	402a76 <memset+0x12>
  402a84:	2c03      	cmp	r4, #3
  402a86:	d92e      	bls.n	402ae6 <memset+0x82>
  402a88:	b2cd      	uxtb	r5, r1
  402a8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402a8e:	2c0f      	cmp	r4, #15
  402a90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402a94:	d919      	bls.n	402aca <memset+0x66>
  402a96:	f103 0210 	add.w	r2, r3, #16
  402a9a:	4626      	mov	r6, r4
  402a9c:	3e10      	subs	r6, #16
  402a9e:	2e0f      	cmp	r6, #15
  402aa0:	f842 5c10 	str.w	r5, [r2, #-16]
  402aa4:	f842 5c0c 	str.w	r5, [r2, #-12]
  402aa8:	f842 5c08 	str.w	r5, [r2, #-8]
  402aac:	f842 5c04 	str.w	r5, [r2, #-4]
  402ab0:	f102 0210 	add.w	r2, r2, #16
  402ab4:	d8f2      	bhi.n	402a9c <memset+0x38>
  402ab6:	f1a4 0210 	sub.w	r2, r4, #16
  402aba:	f022 020f 	bic.w	r2, r2, #15
  402abe:	f004 040f 	and.w	r4, r4, #15
  402ac2:	3210      	adds	r2, #16
  402ac4:	2c03      	cmp	r4, #3
  402ac6:	4413      	add	r3, r2
  402ac8:	d90d      	bls.n	402ae6 <memset+0x82>
  402aca:	461e      	mov	r6, r3
  402acc:	4622      	mov	r2, r4
  402ace:	3a04      	subs	r2, #4
  402ad0:	2a03      	cmp	r2, #3
  402ad2:	f846 5b04 	str.w	r5, [r6], #4
  402ad6:	d8fa      	bhi.n	402ace <memset+0x6a>
  402ad8:	1f22      	subs	r2, r4, #4
  402ada:	f022 0203 	bic.w	r2, r2, #3
  402ade:	3204      	adds	r2, #4
  402ae0:	4413      	add	r3, r2
  402ae2:	f004 0403 	and.w	r4, r4, #3
  402ae6:	b12c      	cbz	r4, 402af4 <memset+0x90>
  402ae8:	b2c9      	uxtb	r1, r1
  402aea:	441c      	add	r4, r3
  402aec:	f803 1b01 	strb.w	r1, [r3], #1
  402af0:	429c      	cmp	r4, r3
  402af2:	d1fb      	bne.n	402aec <memset+0x88>
  402af4:	bc70      	pop	{r4, r5, r6}
  402af6:	4770      	bx	lr
  402af8:	4614      	mov	r4, r2
  402afa:	4603      	mov	r3, r0
  402afc:	e7c2      	b.n	402a84 <memset+0x20>
  402afe:	bf00      	nop

00402b00 <strcpy>:
  402b00:	ea80 0201 	eor.w	r2, r0, r1
  402b04:	4684      	mov	ip, r0
  402b06:	f012 0f03 	tst.w	r2, #3
  402b0a:	d14f      	bne.n	402bac <strcpy+0xac>
  402b0c:	f011 0f03 	tst.w	r1, #3
  402b10:	d132      	bne.n	402b78 <strcpy+0x78>
  402b12:	f84d 4d04 	str.w	r4, [sp, #-4]!
  402b16:	f011 0f04 	tst.w	r1, #4
  402b1a:	f851 3b04 	ldr.w	r3, [r1], #4
  402b1e:	d00b      	beq.n	402b38 <strcpy+0x38>
  402b20:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402b24:	439a      	bics	r2, r3
  402b26:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402b2a:	bf04      	itt	eq
  402b2c:	f84c 3b04 	streq.w	r3, [ip], #4
  402b30:	f851 3b04 	ldreq.w	r3, [r1], #4
  402b34:	d116      	bne.n	402b64 <strcpy+0x64>
  402b36:	bf00      	nop
  402b38:	f851 4b04 	ldr.w	r4, [r1], #4
  402b3c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402b40:	439a      	bics	r2, r3
  402b42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402b46:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  402b4a:	d10b      	bne.n	402b64 <strcpy+0x64>
  402b4c:	f84c 3b04 	str.w	r3, [ip], #4
  402b50:	43a2      	bics	r2, r4
  402b52:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402b56:	bf04      	itt	eq
  402b58:	f851 3b04 	ldreq.w	r3, [r1], #4
  402b5c:	f84c 4b04 	streq.w	r4, [ip], #4
  402b60:	d0ea      	beq.n	402b38 <strcpy+0x38>
  402b62:	4623      	mov	r3, r4
  402b64:	f80c 3b01 	strb.w	r3, [ip], #1
  402b68:	f013 0fff 	tst.w	r3, #255	; 0xff
  402b6c:	ea4f 2333 	mov.w	r3, r3, ror #8
  402b70:	d1f8      	bne.n	402b64 <strcpy+0x64>
  402b72:	f85d 4b04 	ldr.w	r4, [sp], #4
  402b76:	4770      	bx	lr
  402b78:	f011 0f01 	tst.w	r1, #1
  402b7c:	d006      	beq.n	402b8c <strcpy+0x8c>
  402b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
  402b82:	f80c 2b01 	strb.w	r2, [ip], #1
  402b86:	2a00      	cmp	r2, #0
  402b88:	bf08      	it	eq
  402b8a:	4770      	bxeq	lr
  402b8c:	f011 0f02 	tst.w	r1, #2
  402b90:	d0bf      	beq.n	402b12 <strcpy+0x12>
  402b92:	f831 2b02 	ldrh.w	r2, [r1], #2
  402b96:	f012 0fff 	tst.w	r2, #255	; 0xff
  402b9a:	bf16      	itet	ne
  402b9c:	f82c 2b02 	strhne.w	r2, [ip], #2
  402ba0:	f88c 2000 	strbeq.w	r2, [ip]
  402ba4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  402ba8:	d1b3      	bne.n	402b12 <strcpy+0x12>
  402baa:	4770      	bx	lr
  402bac:	f811 2b01 	ldrb.w	r2, [r1], #1
  402bb0:	f80c 2b01 	strb.w	r2, [ip], #1
  402bb4:	2a00      	cmp	r2, #0
  402bb6:	d1f9      	bne.n	402bac <strcpy+0xac>
  402bb8:	4770      	bx	lr
  402bba:	bf00      	nop
  402bbc:	0000      	movs	r0, r0
	...

00402bc0 <strlen>:
  402bc0:	f890 f000 	pld	[r0]
  402bc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402bc8:	f020 0107 	bic.w	r1, r0, #7
  402bcc:	f06f 0c00 	mvn.w	ip, #0
  402bd0:	f010 0407 	ands.w	r4, r0, #7
  402bd4:	f891 f020 	pld	[r1, #32]
  402bd8:	f040 8049 	bne.w	402c6e <strlen+0xae>
  402bdc:	f04f 0400 	mov.w	r4, #0
  402be0:	f06f 0007 	mvn.w	r0, #7
  402be4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402be8:	f891 f040 	pld	[r1, #64]	; 0x40
  402bec:	f100 0008 	add.w	r0, r0, #8
  402bf0:	fa82 f24c 	uadd8	r2, r2, ip
  402bf4:	faa4 f28c 	sel	r2, r4, ip
  402bf8:	fa83 f34c 	uadd8	r3, r3, ip
  402bfc:	faa2 f38c 	sel	r3, r2, ip
  402c00:	bb4b      	cbnz	r3, 402c56 <strlen+0x96>
  402c02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402c06:	fa82 f24c 	uadd8	r2, r2, ip
  402c0a:	f100 0008 	add.w	r0, r0, #8
  402c0e:	faa4 f28c 	sel	r2, r4, ip
  402c12:	fa83 f34c 	uadd8	r3, r3, ip
  402c16:	faa2 f38c 	sel	r3, r2, ip
  402c1a:	b9e3      	cbnz	r3, 402c56 <strlen+0x96>
  402c1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402c20:	fa82 f24c 	uadd8	r2, r2, ip
  402c24:	f100 0008 	add.w	r0, r0, #8
  402c28:	faa4 f28c 	sel	r2, r4, ip
  402c2c:	fa83 f34c 	uadd8	r3, r3, ip
  402c30:	faa2 f38c 	sel	r3, r2, ip
  402c34:	b97b      	cbnz	r3, 402c56 <strlen+0x96>
  402c36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402c3a:	f101 0120 	add.w	r1, r1, #32
  402c3e:	fa82 f24c 	uadd8	r2, r2, ip
  402c42:	f100 0008 	add.w	r0, r0, #8
  402c46:	faa4 f28c 	sel	r2, r4, ip
  402c4a:	fa83 f34c 	uadd8	r3, r3, ip
  402c4e:	faa2 f38c 	sel	r3, r2, ip
  402c52:	2b00      	cmp	r3, #0
  402c54:	d0c6      	beq.n	402be4 <strlen+0x24>
  402c56:	2a00      	cmp	r2, #0
  402c58:	bf04      	itt	eq
  402c5a:	3004      	addeq	r0, #4
  402c5c:	461a      	moveq	r2, r3
  402c5e:	ba12      	rev	r2, r2
  402c60:	fab2 f282 	clz	r2, r2
  402c64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402c68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402c6c:	4770      	bx	lr
  402c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402c72:	f004 0503 	and.w	r5, r4, #3
  402c76:	f1c4 0000 	rsb	r0, r4, #0
  402c7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402c7e:	f014 0f04 	tst.w	r4, #4
  402c82:	f891 f040 	pld	[r1, #64]	; 0x40
  402c86:	fa0c f505 	lsl.w	r5, ip, r5
  402c8a:	ea62 0205 	orn	r2, r2, r5
  402c8e:	bf1c      	itt	ne
  402c90:	ea63 0305 	ornne	r3, r3, r5
  402c94:	4662      	movne	r2, ip
  402c96:	f04f 0400 	mov.w	r4, #0
  402c9a:	e7a9      	b.n	402bf0 <strlen+0x30>

00402c9c <register_fini>:
  402c9c:	4b02      	ldr	r3, [pc, #8]	; (402ca8 <register_fini+0xc>)
  402c9e:	b113      	cbz	r3, 402ca6 <register_fini+0xa>
  402ca0:	4802      	ldr	r0, [pc, #8]	; (402cac <register_fini+0x10>)
  402ca2:	f000 b805 	b.w	402cb0 <atexit>
  402ca6:	4770      	bx	lr
  402ca8:	00000000 	.word	0x00000000
  402cac:	00402cbd 	.word	0x00402cbd

00402cb0 <atexit>:
  402cb0:	2300      	movs	r3, #0
  402cb2:	4601      	mov	r1, r0
  402cb4:	461a      	mov	r2, r3
  402cb6:	4618      	mov	r0, r3
  402cb8:	f000 b81e 	b.w	402cf8 <__register_exitproc>

00402cbc <__libc_fini_array>:
  402cbc:	b538      	push	{r3, r4, r5, lr}
  402cbe:	4c0a      	ldr	r4, [pc, #40]	; (402ce8 <__libc_fini_array+0x2c>)
  402cc0:	4d0a      	ldr	r5, [pc, #40]	; (402cec <__libc_fini_array+0x30>)
  402cc2:	1b64      	subs	r4, r4, r5
  402cc4:	10a4      	asrs	r4, r4, #2
  402cc6:	d00a      	beq.n	402cde <__libc_fini_array+0x22>
  402cc8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402ccc:	3b01      	subs	r3, #1
  402cce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402cd2:	3c01      	subs	r4, #1
  402cd4:	f855 3904 	ldr.w	r3, [r5], #-4
  402cd8:	4798      	blx	r3
  402cda:	2c00      	cmp	r4, #0
  402cdc:	d1f9      	bne.n	402cd2 <__libc_fini_array+0x16>
  402cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402ce2:	f000 ba0f 	b.w	403104 <_fini>
  402ce6:	bf00      	nop
  402ce8:	00403114 	.word	0x00403114
  402cec:	00403110 	.word	0x00403110

00402cf0 <__retarget_lock_acquire_recursive>:
  402cf0:	4770      	bx	lr
  402cf2:	bf00      	nop

00402cf4 <__retarget_lock_release_recursive>:
  402cf4:	4770      	bx	lr
  402cf6:	bf00      	nop

00402cf8 <__register_exitproc>:
  402cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402cfc:	4d2c      	ldr	r5, [pc, #176]	; (402db0 <__register_exitproc+0xb8>)
  402cfe:	4606      	mov	r6, r0
  402d00:	6828      	ldr	r0, [r5, #0]
  402d02:	4698      	mov	r8, r3
  402d04:	460f      	mov	r7, r1
  402d06:	4691      	mov	r9, r2
  402d08:	f7ff fff2 	bl	402cf0 <__retarget_lock_acquire_recursive>
  402d0c:	4b29      	ldr	r3, [pc, #164]	; (402db4 <__register_exitproc+0xbc>)
  402d0e:	681c      	ldr	r4, [r3, #0]
  402d10:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402d14:	2b00      	cmp	r3, #0
  402d16:	d03e      	beq.n	402d96 <__register_exitproc+0x9e>
  402d18:	685a      	ldr	r2, [r3, #4]
  402d1a:	2a1f      	cmp	r2, #31
  402d1c:	dc1c      	bgt.n	402d58 <__register_exitproc+0x60>
  402d1e:	f102 0e01 	add.w	lr, r2, #1
  402d22:	b176      	cbz	r6, 402d42 <__register_exitproc+0x4a>
  402d24:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402d28:	2401      	movs	r4, #1
  402d2a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402d2e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402d32:	4094      	lsls	r4, r2
  402d34:	4320      	orrs	r0, r4
  402d36:	2e02      	cmp	r6, #2
  402d38:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402d3c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402d40:	d023      	beq.n	402d8a <__register_exitproc+0x92>
  402d42:	3202      	adds	r2, #2
  402d44:	f8c3 e004 	str.w	lr, [r3, #4]
  402d48:	6828      	ldr	r0, [r5, #0]
  402d4a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402d4e:	f7ff ffd1 	bl	402cf4 <__retarget_lock_release_recursive>
  402d52:	2000      	movs	r0, #0
  402d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d58:	4b17      	ldr	r3, [pc, #92]	; (402db8 <__register_exitproc+0xc0>)
  402d5a:	b30b      	cbz	r3, 402da0 <__register_exitproc+0xa8>
  402d5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402d60:	f3af 8000 	nop.w
  402d64:	4603      	mov	r3, r0
  402d66:	b1d8      	cbz	r0, 402da0 <__register_exitproc+0xa8>
  402d68:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402d6c:	6002      	str	r2, [r0, #0]
  402d6e:	2100      	movs	r1, #0
  402d70:	6041      	str	r1, [r0, #4]
  402d72:	460a      	mov	r2, r1
  402d74:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402d78:	f04f 0e01 	mov.w	lr, #1
  402d7c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402d80:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402d84:	2e00      	cmp	r6, #0
  402d86:	d0dc      	beq.n	402d42 <__register_exitproc+0x4a>
  402d88:	e7cc      	b.n	402d24 <__register_exitproc+0x2c>
  402d8a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402d8e:	430c      	orrs	r4, r1
  402d90:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402d94:	e7d5      	b.n	402d42 <__register_exitproc+0x4a>
  402d96:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402d9a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402d9e:	e7bb      	b.n	402d18 <__register_exitproc+0x20>
  402da0:	6828      	ldr	r0, [r5, #0]
  402da2:	f7ff ffa7 	bl	402cf4 <__retarget_lock_release_recursive>
  402da6:	f04f 30ff 	mov.w	r0, #4294967295
  402daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402dae:	bf00      	nop
  402db0:	20000448 	.word	0x20000448
  402db4:	004030ec 	.word	0x004030ec
  402db8:	00000000 	.word	0x00000000
  402dbc:	732f2e2e 	.word	0x732f2e2e
  402dc0:	462f6372 	.word	0x462f6372
  402dc4:	52656572 	.word	0x52656572
  402dc8:	2f534f54 	.word	0x2f534f54
  402dcc:	74726f70 	.word	0x74726f70
  402dd0:	656c6261 	.word	0x656c6261
  402dd4:	4343472f 	.word	0x4343472f
  402dd8:	4d52412f 	.word	0x4d52412f
  402ddc:	344d435f 	.word	0x344d435f
  402de0:	6f702f46 	.word	0x6f702f46
  402de4:	632e7472 	.word	0x632e7472
  402de8:	00000000 	.word	0x00000000
  402dec:	732f2e2e 	.word	0x732f2e2e
  402df0:	462f6372 	.word	0x462f6372
  402df4:	52656572 	.word	0x52656572
  402df8:	2f534f54 	.word	0x2f534f54
  402dfc:	74726f70 	.word	0x74726f70
  402e00:	656c6261 	.word	0x656c6261
  402e04:	6d654d2f 	.word	0x6d654d2f
  402e08:	676e614d 	.word	0x676e614d
  402e0c:	6165682f 	.word	0x6165682f
  402e10:	2e355f70 	.word	0x2e355f70
  402e14:	00000063 	.word	0x00000063
  402e18:	732f2e2e 	.word	0x732f2e2e
  402e1c:	462f6372 	.word	0x462f6372
  402e20:	52656572 	.word	0x52656572
  402e24:	2f534f54 	.word	0x2f534f54
  402e28:	75657571 	.word	0x75657571
  402e2c:	00632e65 	.word	0x00632e65
  402e30:	732f2e2e 	.word	0x732f2e2e
  402e34:	462f6372 	.word	0x462f6372
  402e38:	52656572 	.word	0x52656572
  402e3c:	2f534f54 	.word	0x2f534f54
  402e40:	6b736174 	.word	0x6b736174
  402e44:	00632e73 	.word	0x00632e73
  402e48:	454c4449 	.word	0x454c4449
  402e4c:	00000000 	.word	0x00000000
  402e50:	51726d54 	.word	0x51726d54
  402e54:	00000000 	.word	0x00000000
  402e58:	732f2e2e 	.word	0x732f2e2e
  402e5c:	462f6372 	.word	0x462f6372
  402e60:	52656572 	.word	0x52656572
  402e64:	2f534f54 	.word	0x2f534f54
  402e68:	656d6974 	.word	0x656d6974
  402e6c:	632e7372 	.word	0x632e7372
  402e70:	00000000 	.word	0x00000000
  402e74:	20726d54 	.word	0x20726d54
  402e78:	00637653 	.word	0x00637653
	...
  402eb0:	00000001 	.word	0x00000001
	...
  402ebc:	2044454c 	.word	0x2044454c
  402ec0:	54532031 	.word	0x54532031
  402ec4:	49545241 	.word	0x49545241
  402ec8:	000a474e 	.word	0x000a474e
	...
  402eec:	454c0000 	.word	0x454c0000
  402ef0:	20312044 	.word	0x20312044
  402ef4:	434f4c42 	.word	0x434f4c42
  402ef8:	474e494b 	.word	0x474e494b
  402efc:	0000000a 	.word	0x0000000a
	...
  402f20:	00000002 	.word	0x00000002
	...
  402f2c:	2044454c 	.word	0x2044454c
  402f30:	54532032 	.word	0x54532032
  402f34:	49545241 	.word	0x49545241
  402f38:	000a474e 	.word	0x000a474e
	...
  402f5c:	454c0000 	.word	0x454c0000
  402f60:	20322044 	.word	0x20322044
  402f64:	434f4c42 	.word	0x434f4c42
  402f68:	474e494b 	.word	0x474e494b
  402f6c:	0000000a 	.word	0x0000000a
	...
  402f90:	00000003 	.word	0x00000003
	...
  402f9c:	2044454c 	.word	0x2044454c
  402fa0:	54532033 	.word	0x54532033
  402fa4:	49545241 	.word	0x49545241
  402fa8:	000a474e 	.word	0x000a474e
	...
  402fcc:	454c0000 	.word	0x454c0000
  402fd0:	20332044 	.word	0x20332044
  402fd4:	434f4c42 	.word	0x434f4c42
  402fd8:	474e494b 	.word	0x474e494b
  402fdc:	0000000a 	.word	0x0000000a
	...
  403014:	6e69614d 	.word	0x6e69614d
  403018:	746e6f43 	.word	0x746e6f43
  40301c:	206c6f72 	.word	0x206c6f72
  403020:	72617453 	.word	0x72617453
  403024:	676e6974 	.word	0x676e6974
  403028:	0000000a 	.word	0x0000000a
	...
  403044:	614d0000 	.word	0x614d0000
  403048:	6f436e69 	.word	0x6f436e69
  40304c:	6f72746e 	.word	0x6f72746e
  403050:	6c42206c 	.word	0x6c42206c
  403054:	696b636f 	.word	0x696b636f
  403058:	000a676e 	.word	0x000a676e
	...
  403078:	6b736154 	.word	0x6b736154
  40307c:	72616548 	.word	0x72616548
  403080:	61656274 	.word	0x61656274
  403084:	00000074 	.word	0x00000074
  403088:	6b736154 	.word	0x6b736154
  40308c:	6e696c42 	.word	0x6e696c42
  403090:	44454c6b 	.word	0x44454c6b
  403094:	00000031 	.word	0x00000031
  403098:	6b736154 	.word	0x6b736154
  40309c:	6e696c42 	.word	0x6e696c42
  4030a0:	44454c6b 	.word	0x44454c6b
  4030a4:	00000032 	.word	0x00000032
  4030a8:	6b736154 	.word	0x6b736154
  4030ac:	6e696c42 	.word	0x6e696c42
  4030b0:	44454c6b 	.word	0x44454c6b
  4030b4:	00000033 	.word	0x00000033
  4030b8:	6b736154 	.word	0x6b736154
  4030bc:	54524155 	.word	0x54524155
  4030c0:	00000000 	.word	0x00000000
  4030c4:	6b736154 	.word	0x6b736154
  4030c8:	74737953 	.word	0x74737953
  4030cc:	6f436d65 	.word	0x6f436d65
  4030d0:	6f72746e 	.word	0x6f72746e
  4030d4:	44454c6c 	.word	0x44454c6c
  4030d8:	00000032 	.word	0x00000032
  4030dc:	732f2e2e 	.word	0x732f2e2e
  4030e0:	6d2f6372 	.word	0x6d2f6372
  4030e4:	2e6e6961 	.word	0x2e6e6961
  4030e8:	00000063 	.word	0x00000063

004030ec <_global_impure_ptr>:
  4030ec:	20000020                                 .. 

004030f0 <_init>:
  4030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4030f2:	bf00      	nop
  4030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4030f6:	bc08      	pop	{r3}
  4030f8:	469e      	mov	lr, r3
  4030fa:	4770      	bx	lr

004030fc <__init_array_start>:
  4030fc:	00402c9d 	.word	0x00402c9d

00403100 <__frame_dummy_init_array_entry>:
  403100:	0040011d                                ..@.

00403104 <_fini>:
  403104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403106:	bf00      	nop
  403108:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40310a:	bc08      	pop	{r3}
  40310c:	469e      	mov	lr, r3
  40310e:	4770      	bx	lr

00403110 <__fini_array_start>:
  403110:	004000f9 	.word	0x004000f9
