
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fbc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000444  20000000  00402fbc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000228  20000444  00403400  00020444  2**2
                  ALLOC
  3 .stack        00003004  2000066c  00403628  00020444  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020472  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016742  00000000  00000000  000204cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030e4  00000000  00000000  00036c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007622  00000000  00000000  00039cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000850  00000000  00000000  00041313  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a80  00000000  00000000  00041b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006c9b  00000000  00000000  000425e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000af43  00000000  00000000  0004927e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006bd2d  00000000  00000000  000541c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016bc  00000000  00000000  000bfef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 36 00 20 85 26 40 00 81 26 40 00 81 26 40 00     p6. .&@..&@..&@.
  400010:	81 26 40 00 81 26 40 00 81 26 40 00 00 00 00 00     .&@..&@..&@.....
	...
  40002c:	91 02 40 00 81 26 40 00 00 00 00 00 31 03 40 00     ..@..&@.....1.@.
  40003c:	95 03 40 00 81 26 40 00 81 26 40 00 81 26 40 00     ..@..&@..&@..&@.
  40004c:	81 26 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .&@..&@..&@..&@.
  40005c:	11 24 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .$@..&@..&@..&@.
  40006c:	81 26 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .&@..&@..&@..&@.
  40007c:	81 26 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .&@..&@..&@..&@.
  40008c:	81 26 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .&@..&@..&@..&@.
  40009c:	81 26 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .&@..&@..&@..&@.
  4000ac:	81 26 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .&@..&@..&@..&@.
  4000bc:	81 26 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .&@..&@..&@..&@.
  4000cc:	81 26 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .&@..&@..&@..&@.
  4000dc:	81 26 40 00 81 26 40 00 81 26 40 00 81 26 40 00     .&@..&@..&@..&@.
  4000ec:	81 26 40 00 81 26 40 00 81 26 40 00                 .&@..&@..&@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000444 	.word	0x20000444
  400114:	00000000 	.word	0x00000000
  400118:	00402fbc 	.word	0x00402fbc

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00402fbc 	.word	0x00402fbc
  400158:	20000448 	.word	0x20000448
  40015c:	00402fbc 	.word	0x00402fbc
  400160:	00000000 	.word	0x00000000

00400164 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400164:	f100 0308 	add.w	r3, r0, #8
  400168:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
  40016a:	f04f 32ff 	mov.w	r2, #4294967295
  40016e:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400170:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400172:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400174:	2300      	movs	r3, #0
  400176:	6003      	str	r3, [r0, #0]
  400178:	4770      	bx	lr

0040017a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
  40017a:	2300      	movs	r3, #0
  40017c:	6103      	str	r3, [r0, #16]
  40017e:	4770      	bx	lr

00400180 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
  400180:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400182:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
  400184:	f1b5 3fff 	cmp.w	r5, #4294967295
  400188:	d002      	beq.n	400190 <vListInsert+0x10>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  40018a:	f100 0208 	add.w	r2, r0, #8
  40018e:	e002      	b.n	400196 <vListInsert+0x16>
        pxIterator = pxList->xListEnd.pxPrevious;
  400190:	6902      	ldr	r2, [r0, #16]
  400192:	e004      	b.n	40019e <vListInsert+0x1e>
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  400194:	461a      	mov	r2, r3
  400196:	6853      	ldr	r3, [r2, #4]
  400198:	681c      	ldr	r4, [r3, #0]
  40019a:	42a5      	cmp	r5, r4
  40019c:	d2fa      	bcs.n	400194 <vListInsert+0x14>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
  40019e:	6853      	ldr	r3, [r2, #4]
  4001a0:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4001a2:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
  4001a4:	608a      	str	r2, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
  4001a6:	6051      	str	r1, [r2, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
  4001a8:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  4001aa:	6803      	ldr	r3, [r0, #0]
  4001ac:	3301      	adds	r3, #1
  4001ae:	6003      	str	r3, [r0, #0]
}
  4001b0:	bc30      	pop	{r4, r5}
  4001b2:	4770      	bx	lr

004001b4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
  4001b4:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4001b6:	6842      	ldr	r2, [r0, #4]
  4001b8:	6881      	ldr	r1, [r0, #8]
  4001ba:	6091      	str	r1, [r2, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4001bc:	6882      	ldr	r2, [r0, #8]
  4001be:	6841      	ldr	r1, [r0, #4]
  4001c0:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
  4001c2:	685a      	ldr	r2, [r3, #4]
  4001c4:	4290      	cmp	r0, r2
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
  4001c6:	bf04      	itt	eq
  4001c8:	6882      	ldreq	r2, [r0, #8]
  4001ca:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
  4001cc:	2200      	movs	r2, #0
  4001ce:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
  4001d0:	681a      	ldr	r2, [r3, #0]
  4001d2:	3a01      	subs	r2, #1
  4001d4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
  4001d6:	6818      	ldr	r0, [r3, #0]
}
  4001d8:	4770      	bx	lr
	...

004001dc <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
  4001dc:	4808      	ldr	r0, [pc, #32]	; (400200 <prvPortStartFirstTask+0x24>)
  4001de:	6800      	ldr	r0, [r0, #0]
  4001e0:	6800      	ldr	r0, [r0, #0]
  4001e2:	f380 8808 	msr	MSP, r0
  4001e6:	f04f 0000 	mov.w	r0, #0
  4001ea:	f380 8814 	msr	CONTROL, r0
  4001ee:	b662      	cpsie	i
  4001f0:	b661      	cpsie	f
  4001f2:	f3bf 8f4f 	dsb	sy
  4001f6:	f3bf 8f6f 	isb	sy
  4001fa:	df00      	svc	0
  4001fc:	bf00      	nop
  4001fe:	0000      	.short	0x0000
  400200:	e000ed08 	.word	0xe000ed08

00400204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
  400204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400214 <vPortEnableVFP+0x10>
  400208:	6801      	ldr	r1, [r0, #0]
  40020a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40020e:	6001      	str	r1, [r0, #0]
  400210:	4770      	bx	lr
  400212:	0000      	.short	0x0000
  400214:	e000ed88 	.word	0xe000ed88

00400218 <prvTaskExitError>:
{
  400218:	b500      	push	{lr}
  40021a:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0;
  40021c:	2300      	movs	r3, #0
  40021e:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
  400220:	4b0b      	ldr	r3, [pc, #44]	; (400250 <prvTaskExitError+0x38>)
  400222:	681b      	ldr	r3, [r3, #0]
  400224:	f1b3 3fff 	cmp.w	r3, #4294967295
  400228:	d003      	beq.n	400232 <prvTaskExitError+0x1a>
  40022a:	21e7      	movs	r1, #231	; 0xe7
  40022c:	4809      	ldr	r0, [pc, #36]	; (400254 <prvTaskExitError+0x3c>)
  40022e:	4b0a      	ldr	r3, [pc, #40]	; (400258 <prvTaskExitError+0x40>)
  400230:	4798      	blx	r3

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
  400232:	f04f 0350 	mov.w	r3, #80	; 0x50
  400236:	f383 8811 	msr	BASEPRI, r3
  40023a:	f3bf 8f6f 	isb	sy
  40023e:	f3bf 8f4f 	dsb	sy
    while( ulDummy == 0 )
  400242:	9b01      	ldr	r3, [sp, #4]
  400244:	2b00      	cmp	r3, #0
  400246:	d0fc      	beq.n	400242 <prvTaskExitError+0x2a>
}
  400248:	b003      	add	sp, #12
  40024a:	f85d fb04 	ldr.w	pc, [sp], #4
  40024e:	bf00      	nop
  400250:	20000000 	.word	0x20000000
  400254:	00402e7c 	.word	0x00402e7c
  400258:	00402a09 	.word	0x00402a09

0040025c <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
  40025c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400260:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
  400264:	f021 0101 	bic.w	r1, r1, #1
  400268:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
  40026c:	4b05      	ldr	r3, [pc, #20]	; (400284 <pxPortInitialiseStack+0x28>)
  40026e:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
  400272:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
  400276:	f06f 0302 	mvn.w	r3, #2
  40027a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40027e:	3844      	subs	r0, #68	; 0x44
  400280:	4770      	bx	lr
  400282:	bf00      	nop
  400284:	00400219 	.word	0x00400219
	...

00400290 <SVC_Handler>:
    __asm volatile (
  400290:	4b07      	ldr	r3, [pc, #28]	; (4002b0 <pxCurrentTCBConst2>)
  400292:	6819      	ldr	r1, [r3, #0]
  400294:	6808      	ldr	r0, [r1, #0]
  400296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40029a:	f380 8809 	msr	PSP, r0
  40029e:	f3bf 8f6f 	isb	sy
  4002a2:	f04f 0000 	mov.w	r0, #0
  4002a6:	f380 8811 	msr	BASEPRI, r0
  4002aa:	4770      	bx	lr
  4002ac:	f3af 8000 	nop.w

004002b0 <pxCurrentTCBConst2>:
  4002b0:	20000488 	.word	0x20000488

004002b4 <vPortEnterCritical>:
{
  4002b4:	b508      	push	{r3, lr}
  4002b6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4002ba:	f383 8811 	msr	BASEPRI, r3
  4002be:	f3bf 8f6f 	isb	sy
  4002c2:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
  4002c6:	4a09      	ldr	r2, [pc, #36]	; (4002ec <vPortEnterCritical+0x38>)
  4002c8:	6813      	ldr	r3, [r2, #0]
  4002ca:	3301      	adds	r3, #1
  4002cc:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
  4002ce:	2b01      	cmp	r3, #1
  4002d0:	d000      	beq.n	4002d4 <vPortEnterCritical+0x20>
  4002d2:	bd08      	pop	{r3, pc}
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4002d4:	4b06      	ldr	r3, [pc, #24]	; (4002f0 <vPortEnterCritical+0x3c>)
  4002d6:	681b      	ldr	r3, [r3, #0]
  4002d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4002dc:	d0f9      	beq.n	4002d2 <vPortEnterCritical+0x1e>
  4002de:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  4002e2:	4804      	ldr	r0, [pc, #16]	; (4002f4 <vPortEnterCritical+0x40>)
  4002e4:	4b04      	ldr	r3, [pc, #16]	; (4002f8 <vPortEnterCritical+0x44>)
  4002e6:	4798      	blx	r3
}
  4002e8:	e7f3      	b.n	4002d2 <vPortEnterCritical+0x1e>
  4002ea:	bf00      	nop
  4002ec:	20000000 	.word	0x20000000
  4002f0:	e000ed04 	.word	0xe000ed04
  4002f4:	00402e7c 	.word	0x00402e7c
  4002f8:	00402a09 	.word	0x00402a09

004002fc <vPortExitCritical>:
{
  4002fc:	b508      	push	{r3, lr}
    configASSERT( uxCriticalNesting );
  4002fe:	4b08      	ldr	r3, [pc, #32]	; (400320 <vPortExitCritical+0x24>)
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	b13b      	cbz	r3, 400314 <vPortExitCritical+0x18>
    uxCriticalNesting--;
  400304:	4a06      	ldr	r2, [pc, #24]	; (400320 <vPortExitCritical+0x24>)
  400306:	6813      	ldr	r3, [r2, #0]
  400308:	3b01      	subs	r3, #1
  40030a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
  40030c:	b90b      	cbnz	r3, 400312 <vPortExitCritical+0x16>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
  40030e:	f383 8811 	msr	BASEPRI, r3
  400312:	bd08      	pop	{r3, pc}
    configASSERT( uxCriticalNesting );
  400314:	f240 11ad 	movw	r1, #429	; 0x1ad
  400318:	4802      	ldr	r0, [pc, #8]	; (400324 <vPortExitCritical+0x28>)
  40031a:	4b03      	ldr	r3, [pc, #12]	; (400328 <vPortExitCritical+0x2c>)
  40031c:	4798      	blx	r3
  40031e:	e7f1      	b.n	400304 <vPortExitCritical+0x8>
  400320:	20000000 	.word	0x20000000
  400324:	00402e7c 	.word	0x00402e7c
  400328:	00402a09 	.word	0x00402a09
  40032c:	00000000 	.word	0x00000000

00400330 <PendSV_Handler>:
    __asm volatile
  400330:	f3ef 8009 	mrs	r0, PSP
  400334:	f3bf 8f6f 	isb	sy
  400338:	4b15      	ldr	r3, [pc, #84]	; (400390 <pxCurrentTCBConst>)
  40033a:	681a      	ldr	r2, [r3, #0]
  40033c:	f01e 0f10 	tst.w	lr, #16
  400340:	bf08      	it	eq
  400342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40034a:	6010      	str	r0, [r2, #0]
  40034c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400350:	f04f 0050 	mov.w	r0, #80	; 0x50
  400354:	f380 8811 	msr	BASEPRI, r0
  400358:	f3bf 8f4f 	dsb	sy
  40035c:	f3bf 8f6f 	isb	sy
  400360:	f001 fad4 	bl	40190c <vTaskSwitchContext>
  400364:	f04f 0000 	mov.w	r0, #0
  400368:	f380 8811 	msr	BASEPRI, r0
  40036c:	bc09      	pop	{r0, r3}
  40036e:	6819      	ldr	r1, [r3, #0]
  400370:	6808      	ldr	r0, [r1, #0]
  400372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400376:	f01e 0f10 	tst.w	lr, #16
  40037a:	bf08      	it	eq
  40037c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400380:	f380 8809 	msr	PSP, r0
  400384:	f3bf 8f6f 	isb	sy
  400388:	4770      	bx	lr
  40038a:	bf00      	nop
  40038c:	f3af 8000 	nop.w

00400390 <pxCurrentTCBConst>:
  400390:	20000488 	.word	0x20000488

00400394 <SysTick_Handler>:
{
  400394:	b508      	push	{r3, lr}
        __asm volatile
  400396:	f04f 0350 	mov.w	r3, #80	; 0x50
  40039a:	f383 8811 	msr	BASEPRI, r3
  40039e:	f3bf 8f6f 	isb	sy
  4003a2:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
  4003a6:	4b05      	ldr	r3, [pc, #20]	; (4003bc <SysTick_Handler+0x28>)
  4003a8:	4798      	blx	r3
  4003aa:	b118      	cbz	r0, 4003b4 <SysTick_Handler+0x20>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4003ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003b0:	4b03      	ldr	r3, [pc, #12]	; (4003c0 <SysTick_Handler+0x2c>)
  4003b2:	601a      	str	r2, [r3, #0]
        __asm volatile
  4003b4:	2300      	movs	r3, #0
  4003b6:	f383 8811 	msr	BASEPRI, r3
  4003ba:	bd08      	pop	{r3, pc}
  4003bc:	00401559 	.word	0x00401559
  4003c0:	e000ed04 	.word	0xe000ed04

004003c4 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
  4003c4:	4a08      	ldr	r2, [pc, #32]	; (4003e8 <vPortSetupTimerInterrupt+0x24>)
  4003c6:	2300      	movs	r3, #0
  4003c8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4003ca:	4908      	ldr	r1, [pc, #32]	; (4003ec <vPortSetupTimerInterrupt+0x28>)
  4003cc:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4003ce:	4b08      	ldr	r3, [pc, #32]	; (4003f0 <vPortSetupTimerInterrupt+0x2c>)
  4003d0:	681b      	ldr	r3, [r3, #0]
  4003d2:	4908      	ldr	r1, [pc, #32]	; (4003f4 <vPortSetupTimerInterrupt+0x30>)
  4003d4:	fba1 1303 	umull	r1, r3, r1, r3
  4003d8:	099b      	lsrs	r3, r3, #6
  4003da:	3b01      	subs	r3, #1
  4003dc:	4906      	ldr	r1, [pc, #24]	; (4003f8 <vPortSetupTimerInterrupt+0x34>)
  4003de:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4003e0:	2307      	movs	r3, #7
  4003e2:	6013      	str	r3, [r2, #0]
  4003e4:	4770      	bx	lr
  4003e6:	bf00      	nop
  4003e8:	e000e010 	.word	0xe000e010
  4003ec:	e000e018 	.word	0xe000e018
  4003f0:	20000014 	.word	0x20000014
  4003f4:	10624dd3 	.word	0x10624dd3
  4003f8:	e000e014 	.word	0xe000e014

004003fc <xPortStartScheduler>:
{
  4003fc:	b510      	push	{r4, lr}
  4003fe:	b082      	sub	sp, #8
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400400:	4b36      	ldr	r3, [pc, #216]	; (4004dc <xPortStartScheduler+0xe0>)
  400402:	681a      	ldr	r2, [r3, #0]
  400404:	4b36      	ldr	r3, [pc, #216]	; (4004e0 <xPortStartScheduler+0xe4>)
  400406:	429a      	cmp	r2, r3
  400408:	d01e      	beq.n	400448 <xPortStartScheduler+0x4c>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  40040a:	4b34      	ldr	r3, [pc, #208]	; (4004dc <xPortStartScheduler+0xe0>)
  40040c:	681a      	ldr	r2, [r3, #0]
  40040e:	4b35      	ldr	r3, [pc, #212]	; (4004e4 <xPortStartScheduler+0xe8>)
  400410:	429a      	cmp	r2, r3
  400412:	d01f      	beq.n	400454 <xPortStartScheduler+0x58>
            ulOriginalPriority = *pucFirstUserPriorityRegister;
  400414:	4b34      	ldr	r3, [pc, #208]	; (4004e8 <xPortStartScheduler+0xec>)
  400416:	781a      	ldrb	r2, [r3, #0]
  400418:	b2d2      	uxtb	r2, r2
  40041a:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40041c:	22ff      	movs	r2, #255	; 0xff
  40041e:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400420:	781b      	ldrb	r3, [r3, #0]
  400422:	b2db      	uxtb	r3, r3
  400424:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400428:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40042c:	f003 0350 	and.w	r3, r3, #80	; 0x50
  400430:	4a2e      	ldr	r2, [pc, #184]	; (4004ec <xPortStartScheduler+0xf0>)
  400432:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400434:	2207      	movs	r2, #7
  400436:	4b2e      	ldr	r3, [pc, #184]	; (4004f0 <xPortStartScheduler+0xf4>)
  400438:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40043a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40043e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400442:	d01e      	beq.n	400482 <xPortStartScheduler+0x86>
  400444:	2206      	movs	r2, #6
  400446:	e00c      	b.n	400462 <xPortStartScheduler+0x66>
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400448:	f44f 7197 	mov.w	r1, #302	; 0x12e
  40044c:	4829      	ldr	r0, [pc, #164]	; (4004f4 <xPortStartScheduler+0xf8>)
  40044e:	4b2a      	ldr	r3, [pc, #168]	; (4004f8 <xPortStartScheduler+0xfc>)
  400450:	4798      	blx	r3
  400452:	e7da      	b.n	40040a <xPortStartScheduler+0xe>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400454:	f240 112f 	movw	r1, #303	; 0x12f
  400458:	4826      	ldr	r0, [pc, #152]	; (4004f4 <xPortStartScheduler+0xf8>)
  40045a:	4b27      	ldr	r3, [pc, #156]	; (4004f8 <xPortStartScheduler+0xfc>)
  40045c:	4798      	blx	r3
  40045e:	e7d9      	b.n	400414 <xPortStartScheduler+0x18>
  400460:	460a      	mov	r2, r1
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400462:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400466:	005b      	lsls	r3, r3, #1
  400468:	b2db      	uxtb	r3, r3
  40046a:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40046e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400472:	1e51      	subs	r1, r2, #1
  400474:	f013 0f80 	tst.w	r3, #128	; 0x80
  400478:	d1f2      	bne.n	400460 <xPortStartScheduler+0x64>
  40047a:	4b1d      	ldr	r3, [pc, #116]	; (4004f0 <xPortStartScheduler+0xf4>)
  40047c:	601a      	str	r2, [r3, #0]
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  40047e:	2a03      	cmp	r2, #3
  400480:	d004      	beq.n	40048c <xPortStartScheduler+0x90>
  400482:	f240 1161 	movw	r1, #353	; 0x161
  400486:	481b      	ldr	r0, [pc, #108]	; (4004f4 <xPortStartScheduler+0xf8>)
  400488:	4b1b      	ldr	r3, [pc, #108]	; (4004f8 <xPortStartScheduler+0xfc>)
  40048a:	4798      	blx	r3
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40048c:	4a18      	ldr	r2, [pc, #96]	; (4004f0 <xPortStartScheduler+0xf4>)
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  40048e:	6813      	ldr	r3, [r2, #0]
  400490:	021b      	lsls	r3, r3, #8
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400492:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400496:	6013      	str	r3, [r2, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
  400498:	9b01      	ldr	r3, [sp, #4]
  40049a:	b2db      	uxtb	r3, r3
  40049c:	4a12      	ldr	r2, [pc, #72]	; (4004e8 <xPortStartScheduler+0xec>)
  40049e:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
  4004a0:	4b16      	ldr	r3, [pc, #88]	; (4004fc <xPortStartScheduler+0x100>)
  4004a2:	681a      	ldr	r2, [r3, #0]
  4004a4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4004a8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
  4004aa:	681a      	ldr	r2, [r3, #0]
  4004ac:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4004b0:	601a      	str	r2, [r3, #0]
    vPortSetupTimerInterrupt();
  4004b2:	4b13      	ldr	r3, [pc, #76]	; (400500 <xPortStartScheduler+0x104>)
  4004b4:	4798      	blx	r3
    uxCriticalNesting = 0;
  4004b6:	2400      	movs	r4, #0
  4004b8:	4b12      	ldr	r3, [pc, #72]	; (400504 <xPortStartScheduler+0x108>)
  4004ba:	601c      	str	r4, [r3, #0]
    vPortEnableVFP();
  4004bc:	4b12      	ldr	r3, [pc, #72]	; (400508 <xPortStartScheduler+0x10c>)
  4004be:	4798      	blx	r3
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4004c0:	4a12      	ldr	r2, [pc, #72]	; (40050c <xPortStartScheduler+0x110>)
  4004c2:	6813      	ldr	r3, [r2, #0]
  4004c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4004c8:	6013      	str	r3, [r2, #0]
    prvPortStartFirstTask();
  4004ca:	4b11      	ldr	r3, [pc, #68]	; (400510 <xPortStartScheduler+0x114>)
  4004cc:	4798      	blx	r3
    vTaskSwitchContext();
  4004ce:	4b11      	ldr	r3, [pc, #68]	; (400514 <xPortStartScheduler+0x118>)
  4004d0:	4798      	blx	r3
    prvTaskExitError();
  4004d2:	4b11      	ldr	r3, [pc, #68]	; (400518 <xPortStartScheduler+0x11c>)
  4004d4:	4798      	blx	r3
}
  4004d6:	4620      	mov	r0, r4
  4004d8:	b002      	add	sp, #8
  4004da:	bd10      	pop	{r4, pc}
  4004dc:	e000ed00 	.word	0xe000ed00
  4004e0:	410fc271 	.word	0x410fc271
  4004e4:	410fc270 	.word	0x410fc270
  4004e8:	e000e400 	.word	0xe000e400
  4004ec:	20000460 	.word	0x20000460
  4004f0:	20000464 	.word	0x20000464
  4004f4:	00402e7c 	.word	0x00402e7c
  4004f8:	00402a09 	.word	0x00402a09
  4004fc:	e000ed20 	.word	0xe000ed20
  400500:	004003c5 	.word	0x004003c5
  400504:	20000000 	.word	0x20000000
  400508:	00400205 	.word	0x00400205
  40050c:	e000ef34 	.word	0xe000ef34
  400510:	004001dd 	.word	0x004001dd
  400514:	0040190d 	.word	0x0040190d
  400518:	00400219 	.word	0x00400219

0040051c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
  40051c:	b508      	push	{r3, lr}
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
  40051e:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400522:	2b0f      	cmp	r3, #15
  400524:	d906      	bls.n	400534 <vPortValidateInterruptPriority+0x18>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400526:	4a0e      	ldr	r2, [pc, #56]	; (400560 <vPortValidateInterruptPriority+0x44>)
  400528:	5c9b      	ldrb	r3, [r3, r2]
  40052a:	b2db      	uxtb	r3, r3
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40052c:	4a0d      	ldr	r2, [pc, #52]	; (400564 <vPortValidateInterruptPriority+0x48>)
  40052e:	7812      	ldrb	r2, [r2, #0]
  400530:	429a      	cmp	r2, r3
  400532:	d808      	bhi.n	400546 <vPortValidateInterruptPriority+0x2a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400534:	4b0c      	ldr	r3, [pc, #48]	; (400568 <vPortValidateInterruptPriority+0x4c>)
  400536:	681b      	ldr	r3, [r3, #0]
  400538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40053c:	4a0b      	ldr	r2, [pc, #44]	; (40056c <vPortValidateInterruptPriority+0x50>)
  40053e:	6812      	ldr	r2, [r2, #0]
  400540:	4293      	cmp	r3, r2
  400542:	d806      	bhi.n	400552 <vPortValidateInterruptPriority+0x36>
  400544:	bd08      	pop	{r3, pc}
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400546:	f240 21fe 	movw	r1, #766	; 0x2fe
  40054a:	4809      	ldr	r0, [pc, #36]	; (400570 <vPortValidateInterruptPriority+0x54>)
  40054c:	4b09      	ldr	r3, [pc, #36]	; (400574 <vPortValidateInterruptPriority+0x58>)
  40054e:	4798      	blx	r3
  400550:	e7f0      	b.n	400534 <vPortValidateInterruptPriority+0x18>
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400552:	f240 310e 	movw	r1, #782	; 0x30e
  400556:	4806      	ldr	r0, [pc, #24]	; (400570 <vPortValidateInterruptPriority+0x54>)
  400558:	4b06      	ldr	r3, [pc, #24]	; (400574 <vPortValidateInterruptPriority+0x58>)
  40055a:	4798      	blx	r3
    }
  40055c:	e7f2      	b.n	400544 <vPortValidateInterruptPriority+0x28>
  40055e:	bf00      	nop
  400560:	e000e3f0 	.word	0xe000e3f0
  400564:	20000460 	.word	0x20000460
  400568:	e000ed0c 	.word	0xe000ed0c
  40056c:	20000464 	.word	0x20000464
  400570:	00402e7c 	.word	0x00402e7c
  400574:	00402a09 	.word	0x00402a09

00400578 <prvInsertBlockIntoFreeList>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert )
{
  400578:	b410      	push	{r4}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40057a:	4a13      	ldr	r2, [pc, #76]	; (4005c8 <prvInsertBlockIntoFreeList+0x50>)
  40057c:	e000      	b.n	400580 <prvInsertBlockIntoFreeList+0x8>
  40057e:	461a      	mov	r2, r3
  400580:	6813      	ldr	r3, [r2, #0]
  400582:	4283      	cmp	r3, r0
  400584:	d3fb      	bcc.n	40057e <prvInsertBlockIntoFreeList+0x6>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  400586:	6851      	ldr	r1, [r2, #4]
  400588:	1854      	adds	r4, r2, r1
  40058a:	42a0      	cmp	r0, r4
  40058c:	d00a      	beq.n	4005a4 <prvInsertBlockIntoFreeList+0x2c>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  40058e:	6841      	ldr	r1, [r0, #4]
  400590:	1844      	adds	r4, r0, r1
  400592:	42a3      	cmp	r3, r4
  400594:	d00b      	beq.n	4005ae <prvInsertBlockIntoFreeList+0x36>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  400596:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
  400598:	4290      	cmp	r0, r2
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40059a:	bf18      	it	ne
  40059c:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
  40059e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005a2:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4005a4:	6840      	ldr	r0, [r0, #4]
  4005a6:	4401      	add	r1, r0
  4005a8:	6051      	str	r1, [r2, #4]
  4005aa:	4610      	mov	r0, r2
  4005ac:	e7ef      	b.n	40058e <prvInsertBlockIntoFreeList+0x16>
        if( pxIterator->pxNextFreeBlock != pxEnd )
  4005ae:	4c07      	ldr	r4, [pc, #28]	; (4005cc <prvInsertBlockIntoFreeList+0x54>)
  4005b0:	6824      	ldr	r4, [r4, #0]
  4005b2:	42a3      	cmp	r3, r4
  4005b4:	d006      	beq.n	4005c4 <prvInsertBlockIntoFreeList+0x4c>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4005b6:	685b      	ldr	r3, [r3, #4]
  4005b8:	4419      	add	r1, r3
  4005ba:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4005bc:	6813      	ldr	r3, [r2, #0]
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	6003      	str	r3, [r0, #0]
  4005c2:	e7e9      	b.n	400598 <prvInsertBlockIntoFreeList+0x20>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4005c4:	6003      	str	r3, [r0, #0]
  4005c6:	e7e7      	b.n	400598 <prvInsertBlockIntoFreeList+0x20>
  4005c8:	20000480 	.word	0x20000480
  4005cc:	20000468 	.word	0x20000468

004005d0 <pvPortMalloc>:
{
  4005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005d2:	4604      	mov	r4, r0
    configASSERT( pxEnd );
  4005d4:	4b2f      	ldr	r3, [pc, #188]	; (400694 <pvPortMalloc+0xc4>)
  4005d6:	681b      	ldr	r3, [r3, #0]
  4005d8:	b1eb      	cbz	r3, 400616 <pvPortMalloc+0x46>
    vTaskSuspendAll();
  4005da:	4b2f      	ldr	r3, [pc, #188]	; (400698 <pvPortMalloc+0xc8>)
  4005dc:	4798      	blx	r3
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4005de:	4b2f      	ldr	r3, [pc, #188]	; (40069c <pvPortMalloc+0xcc>)
  4005e0:	681d      	ldr	r5, [r3, #0]
  4005e2:	4225      	tst	r5, r4
  4005e4:	d14d      	bne.n	400682 <pvPortMalloc+0xb2>
            if( ( xWantedSize > 0 ) &&
  4005e6:	2c00      	cmp	r4, #0
  4005e8:	d04e      	beq.n	400688 <pvPortMalloc+0xb8>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
  4005ea:	f104 0108 	add.w	r1, r4, #8
            if( ( xWantedSize > 0 ) &&
  4005ee:	428c      	cmp	r4, r1
  4005f0:	d24a      	bcs.n	400688 <pvPortMalloc+0xb8>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4005f2:	f011 0f07 	tst.w	r1, #7
  4005f6:	d005      	beq.n	400604 <pvPortMalloc+0x34>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) >
  4005f8:	f021 0307 	bic.w	r3, r1, #7
  4005fc:	3308      	adds	r3, #8
  4005fe:	4299      	cmp	r1, r3
  400600:	d242      	bcs.n	400688 <pvPortMalloc+0xb8>
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400602:	4619      	mov	r1, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  400604:	2900      	cmp	r1, #0
  400606:	d03c      	beq.n	400682 <pvPortMalloc+0xb2>
  400608:	4b25      	ldr	r3, [pc, #148]	; (4006a0 <pvPortMalloc+0xd0>)
  40060a:	681e      	ldr	r6, [r3, #0]
  40060c:	42b1      	cmp	r1, r6
  40060e:	d838      	bhi.n	400682 <pvPortMalloc+0xb2>
                pxBlock = xStart.pxNextFreeBlock;
  400610:	4a24      	ldr	r2, [pc, #144]	; (4006a4 <pvPortMalloc+0xd4>)
  400612:	6814      	ldr	r4, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400614:	e006      	b.n	400624 <pvPortMalloc+0x54>
    configASSERT( pxEnd );
  400616:	218e      	movs	r1, #142	; 0x8e
  400618:	4823      	ldr	r0, [pc, #140]	; (4006a8 <pvPortMalloc+0xd8>)
  40061a:	4b24      	ldr	r3, [pc, #144]	; (4006ac <pvPortMalloc+0xdc>)
  40061c:	4798      	blx	r3
  40061e:	e7dc      	b.n	4005da <pvPortMalloc+0xa>
  400620:	4622      	mov	r2, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
  400622:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400624:	6863      	ldr	r3, [r4, #4]
  400626:	4299      	cmp	r1, r3
  400628:	d902      	bls.n	400630 <pvPortMalloc+0x60>
  40062a:	6823      	ldr	r3, [r4, #0]
  40062c:	2b00      	cmp	r3, #0
  40062e:	d1f7      	bne.n	400620 <pvPortMalloc+0x50>
                if( pxBlock != pxEnd )
  400630:	4b18      	ldr	r3, [pc, #96]	; (400694 <pvPortMalloc+0xc4>)
  400632:	681b      	ldr	r3, [r3, #0]
  400634:	429c      	cmp	r4, r3
  400636:	d024      	beq.n	400682 <pvPortMalloc+0xb2>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  400638:	6817      	ldr	r7, [r2, #0]
  40063a:	3708      	adds	r7, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40063c:	6823      	ldr	r3, [r4, #0]
  40063e:	6013      	str	r3, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400640:	6863      	ldr	r3, [r4, #4]
  400642:	1a5b      	subs	r3, r3, r1
  400644:	2b10      	cmp	r3, #16
  400646:	d816      	bhi.n	400676 <pvPortMalloc+0xa6>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  400648:	6862      	ldr	r2, [r4, #4]
  40064a:	1ab6      	subs	r6, r6, r2
  40064c:	4914      	ldr	r1, [pc, #80]	; (4006a0 <pvPortMalloc+0xd0>)
  40064e:	600e      	str	r6, [r1, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  400650:	4917      	ldr	r1, [pc, #92]	; (4006b0 <pvPortMalloc+0xe0>)
  400652:	6809      	ldr	r1, [r1, #0]
  400654:	428e      	cmp	r6, r1
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  400656:	bf3c      	itt	cc
  400658:	4915      	ldrcc	r1, [pc, #84]	; (4006b0 <pvPortMalloc+0xe0>)
  40065a:	600e      	strcc	r6, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
  40065c:	4315      	orrs	r5, r2
  40065e:	6065      	str	r5, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
  400660:	2300      	movs	r3, #0
  400662:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
  400664:	4a13      	ldr	r2, [pc, #76]	; (4006b4 <pvPortMalloc+0xe4>)
  400666:	6813      	ldr	r3, [r2, #0]
  400668:	3301      	adds	r3, #1
  40066a:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
  40066c:	4b12      	ldr	r3, [pc, #72]	; (4006b8 <pvPortMalloc+0xe8>)
  40066e:	4798      	blx	r3
            if( pvReturn == NULL )
  400670:	b167      	cbz	r7, 40068c <pvPortMalloc+0xbc>
}
  400672:	4638      	mov	r0, r7
  400674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  400676:	1860      	adds	r0, r4, r1
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400678:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
  40067a:	6061      	str	r1, [r4, #4]
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40067c:	4b0f      	ldr	r3, [pc, #60]	; (4006bc <pvPortMalloc+0xec>)
  40067e:	4798      	blx	r3
  400680:	e7e2      	b.n	400648 <pvPortMalloc+0x78>
    ( void ) xTaskResumeAll();
  400682:	4b0d      	ldr	r3, [pc, #52]	; (4006b8 <pvPortMalloc+0xe8>)
  400684:	4798      	blx	r3
  400686:	e001      	b.n	40068c <pvPortMalloc+0xbc>
  400688:	4b0b      	ldr	r3, [pc, #44]	; (4006b8 <pvPortMalloc+0xe8>)
  40068a:	4798      	blx	r3
                vApplicationMallocFailedHook();
  40068c:	4b0c      	ldr	r3, [pc, #48]	; (4006c0 <pvPortMalloc+0xf0>)
  40068e:	4798      	blx	r3
  400690:	2700      	movs	r7, #0
    return pvReturn;
  400692:	e7ee      	b.n	400672 <pvPortMalloc+0xa2>
  400694:	20000468 	.word	0x20000468
  400698:	0040153d 	.word	0x0040153d
  40069c:	2000046c 	.word	0x2000046c
  4006a0:	20000470 	.word	0x20000470
  4006a4:	20000480 	.word	0x20000480
  4006a8:	00402eac 	.word	0x00402eac
  4006ac:	00402a09 	.word	0x00402a09
  4006b0:	20000474 	.word	0x20000474
  4006b4:	20000478 	.word	0x20000478
  4006b8:	00401715 	.word	0x00401715
  4006bc:	00400579 	.word	0x00400579
  4006c0:	00402a35 	.word	0x00402a35

004006c4 <vPortFree>:
    if( pv != NULL )
  4006c4:	2800      	cmp	r0, #0
  4006c6:	d044      	beq.n	400752 <vPortFree+0x8e>
{
  4006c8:	b510      	push	{r4, lr}
  4006ca:	4604      	mov	r4, r0
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4006d0:	4b20      	ldr	r3, [pc, #128]	; (400754 <vPortFree+0x90>)
  4006d2:	681b      	ldr	r3, [r3, #0]
  4006d4:	421a      	tst	r2, r3
  4006d6:	d011      	beq.n	4006fc <vPortFree+0x38>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006d8:	f850 3c08 	ldr.w	r3, [r0, #-8]
  4006dc:	b1f3      	cbz	r3, 40071c <vPortFree+0x58>
  4006de:	f240 112d 	movw	r1, #301	; 0x12d
  4006e2:	481d      	ldr	r0, [pc, #116]	; (400758 <vPortFree+0x94>)
  4006e4:	4b1d      	ldr	r3, [pc, #116]	; (40075c <vPortFree+0x98>)
  4006e6:	4798      	blx	r3
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006ec:	4a19      	ldr	r2, [pc, #100]	; (400754 <vPortFree+0x90>)
  4006ee:	6812      	ldr	r2, [r2, #0]
  4006f0:	4213      	tst	r3, r2
  4006f2:	d002      	beq.n	4006fa <vPortFree+0x36>
            if( pxLink->pxNextFreeBlock == NULL )
  4006f4:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4006f8:	b1a1      	cbz	r1, 400724 <vPortFree+0x60>
  4006fa:	bd10      	pop	{r4, pc}
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
  400700:	4815      	ldr	r0, [pc, #84]	; (400758 <vPortFree+0x94>)
  400702:	4b16      	ldr	r3, [pc, #88]	; (40075c <vPortFree+0x98>)
  400704:	4798      	blx	r3
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  400706:	f854 3c08 	ldr.w	r3, [r4, #-8]
  40070a:	2b00      	cmp	r3, #0
  40070c:	d1e7      	bne.n	4006de <vPortFree+0x1a>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  40070e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400712:	4a10      	ldr	r2, [pc, #64]	; (400754 <vPortFree+0x90>)
  400714:	6812      	ldr	r2, [r2, #0]
  400716:	4213      	tst	r3, r2
  400718:	d0ef      	beq.n	4006fa <vPortFree+0x36>
  40071a:	e003      	b.n	400724 <vPortFree+0x60>
  40071c:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400720:	4a0c      	ldr	r2, [pc, #48]	; (400754 <vPortFree+0x90>)
  400722:	6812      	ldr	r2, [r2, #0]
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
  400724:	ea23 0302 	bic.w	r3, r3, r2
  400728:	f844 3c04 	str.w	r3, [r4, #-4]
                vTaskSuspendAll();
  40072c:	4b0c      	ldr	r3, [pc, #48]	; (400760 <vPortFree+0x9c>)
  40072e:	4798      	blx	r3
                    xFreeBytesRemaining += pxLink->xBlockSize;
  400730:	4a0c      	ldr	r2, [pc, #48]	; (400764 <vPortFree+0xa0>)
  400732:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400736:	6811      	ldr	r1, [r2, #0]
  400738:	440b      	add	r3, r1
  40073a:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  40073c:	f1a4 0008 	sub.w	r0, r4, #8
  400740:	4b09      	ldr	r3, [pc, #36]	; (400768 <vPortFree+0xa4>)
  400742:	4798      	blx	r3
                    xNumberOfSuccessfulFrees++;
  400744:	4a09      	ldr	r2, [pc, #36]	; (40076c <vPortFree+0xa8>)
  400746:	6813      	ldr	r3, [r2, #0]
  400748:	3301      	adds	r3, #1
  40074a:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
  40074c:	4b08      	ldr	r3, [pc, #32]	; (400770 <vPortFree+0xac>)
  40074e:	4798      	blx	r3
}
  400750:	bd10      	pop	{r4, pc}
  400752:	4770      	bx	lr
  400754:	2000046c 	.word	0x2000046c
  400758:	00402eac 	.word	0x00402eac
  40075c:	00402a09 	.word	0x00402a09
  400760:	0040153d 	.word	0x0040153d
  400764:	20000470 	.word	0x20000470
  400768:	00400579 	.word	0x00400579
  40076c:	2000047c 	.word	0x2000047c
  400770:	00401715 	.word	0x00401715

00400774 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400778:	4605      	mov	r5, r0
    BaseType_t xDefinedRegions = 0;
    size_t xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
  40077a:	4b35      	ldr	r3, [pc, #212]	; (400850 <vPortDefineHeapRegions+0xdc>)
  40077c:	681b      	ldr	r3, [r3, #0]
  40077e:	b123      	cbz	r3, 40078a <vPortDefineHeapRegions+0x16>
  400780:	f240 11a3 	movw	r1, #419	; 0x1a3
  400784:	4833      	ldr	r0, [pc, #204]	; (400854 <vPortDefineHeapRegions+0xe0>)
  400786:	4b34      	ldr	r3, [pc, #208]	; (400858 <vPortDefineHeapRegions+0xe4>)
  400788:	4798      	blx	r3

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

    while( pxHeapRegion->xSizeInBytes > 0 )
  40078a:	f8d5 b004 	ldr.w	fp, [r5, #4]
  40078e:	f1bb 0f00 	cmp.w	fp, #0
  400792:	d052      	beq.n	40083a <vPortDefineHeapRegions+0xc6>
  400794:	3508      	adds	r5, #8
  400796:	2600      	movs	r6, #0
  400798:	46b0      	mov	r8, r6
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != NULL );
  40079a:	4f2d      	ldr	r7, [pc, #180]	; (400850 <vPortDefineHeapRegions+0xdc>)

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( xAddress > ( size_t ) pxEnd );
  40079c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400854 <vPortDefineHeapRegions+0xe0>
  4007a0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 400858 <vPortDefineHeapRegions+0xe4>
  4007a4:	e01d      	b.n	4007e2 <vPortDefineHeapRegions+0x6e>
            configASSERT( pxEnd != NULL );
  4007a6:	683b      	ldr	r3, [r7, #0]
  4007a8:	b373      	cbz	r3, 400808 <vPortDefineHeapRegions+0x94>
            configASSERT( xAddress > ( size_t ) pxEnd );
  4007aa:	683b      	ldr	r3, [r7, #0]
  4007ac:	42a3      	cmp	r3, r4
  4007ae:	d230      	bcs.n	400812 <vPortDefineHeapRegions+0x9e>
        }

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
  4007b0:	6839      	ldr	r1, [r7, #0]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + xTotalRegionSize;
  4007b2:	eb0b 0304 	add.w	r3, fp, r4
        xAddress -= xHeapStructSize;
  4007b6:	3b08      	subs	r3, #8
        xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007b8:	f023 0307 	bic.w	r3, r3, #7
        pxEnd = ( BlockLink_t * ) xAddress;
  4007bc:	603b      	str	r3, [r7, #0]
        pxEnd->xBlockSize = 0;
  4007be:	2200      	movs	r2, #0
  4007c0:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = NULL;
  4007c2:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  4007c4:	4622      	mov	r2, r4
        pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  4007c6:	1b18      	subs	r0, r3, r4
  4007c8:	6060      	str	r0, [r4, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  4007ca:	6023      	str	r3, [r4, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
  4007cc:	b101      	cbz	r1, 4007d0 <vPortDefineHeapRegions+0x5c>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  4007ce:	600c      	str	r4, [r1, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  4007d0:	6853      	ldr	r3, [r2, #4]
  4007d2:	4498      	add	r8, r3

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
  4007d4:	3601      	adds	r6, #1
  4007d6:	3508      	adds	r5, #8
    while( pxHeapRegion->xSizeInBytes > 0 )
  4007d8:	f855 bc04 	ldr.w	fp, [r5, #-4]
  4007dc:	f1bb 0f00 	cmp.w	fp, #0
  4007e0:	d01c      	beq.n	40081c <vPortDefineHeapRegions+0xa8>
        xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  4007e2:	f855 4c08 	ldr.w	r4, [r5, #-8]
        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4007e6:	f014 0f07 	tst.w	r4, #7
  4007ea:	d006      	beq.n	4007fa <vPortDefineHeapRegions+0x86>
            xAddress += ( portBYTE_ALIGNMENT - 1 );
  4007ec:	1de2      	adds	r2, r4, #7
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007ee:	f022 0207 	bic.w	r2, r2, #7
            xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  4007f2:	44a3      	add	fp, r4
  4007f4:	ebab 0b02 	sub.w	fp, fp, r2
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007f8:	4614      	mov	r4, r2
        if( xDefinedRegions == 0 )
  4007fa:	2e00      	cmp	r6, #0
  4007fc:	d1d3      	bne.n	4007a6 <vPortDefineHeapRegions+0x32>
            xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  4007fe:	4b17      	ldr	r3, [pc, #92]	; (40085c <vPortDefineHeapRegions+0xe8>)
  400800:	601c      	str	r4, [r3, #0]
            xStart.xBlockSize = ( size_t ) 0;
  400802:	2200      	movs	r2, #0
  400804:	605a      	str	r2, [r3, #4]
  400806:	e7d3      	b.n	4007b0 <vPortDefineHeapRegions+0x3c>
            configASSERT( pxEnd != NULL );
  400808:	f240 11c5 	movw	r1, #453	; 0x1c5
  40080c:	4650      	mov	r0, sl
  40080e:	47c8      	blx	r9
  400810:	e7cb      	b.n	4007aa <vPortDefineHeapRegions+0x36>
            configASSERT( xAddress > ( size_t ) pxEnd );
  400812:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  400816:	4650      	mov	r0, sl
  400818:	47c8      	blx	r9
  40081a:	e7c9      	b.n	4007b0 <vPortDefineHeapRegions+0x3c>
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  40081c:	4b10      	ldr	r3, [pc, #64]	; (400860 <vPortDefineHeapRegions+0xec>)
  40081e:	f8c3 8000 	str.w	r8, [r3]
    xFreeBytesRemaining = xTotalHeapSize;
  400822:	4b10      	ldr	r3, [pc, #64]	; (400864 <vPortDefineHeapRegions+0xf0>)
  400824:	f8c3 8000 	str.w	r8, [r3]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
  400828:	f1b8 0f00 	cmp.w	r8, #0
  40082c:	d00a      	beq.n	400844 <vPortDefineHeapRegions+0xd0>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  40082e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400832:	4b0d      	ldr	r3, [pc, #52]	; (400868 <vPortDefineHeapRegions+0xf4>)
  400834:	601a      	str	r2, [r3, #0]
}
  400836:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  40083a:	2300      	movs	r3, #0
  40083c:	4a08      	ldr	r2, [pc, #32]	; (400860 <vPortDefineHeapRegions+0xec>)
  40083e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
  400840:	4a08      	ldr	r2, [pc, #32]	; (400864 <vPortDefineHeapRegions+0xf0>)
  400842:	6013      	str	r3, [r2, #0]
    configASSERT( xTotalHeapSize );
  400844:	f240 11f1 	movw	r1, #497	; 0x1f1
  400848:	4802      	ldr	r0, [pc, #8]	; (400854 <vPortDefineHeapRegions+0xe0>)
  40084a:	4b03      	ldr	r3, [pc, #12]	; (400858 <vPortDefineHeapRegions+0xe4>)
  40084c:	4798      	blx	r3
  40084e:	e7ee      	b.n	40082e <vPortDefineHeapRegions+0xba>
  400850:	20000468 	.word	0x20000468
  400854:	00402eac 	.word	0x00402eac
  400858:	00402a09 	.word	0x00402a09
  40085c:	20000480 	.word	0x20000480
  400860:	20000474 	.word	0x20000474
  400864:	20000470 	.word	0x20000470
  400868:	2000046c 	.word	0x2000046c

0040086c <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
  40086c:	b510      	push	{r4, lr}
  40086e:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
  400870:	4b04      	ldr	r3, [pc, #16]	; (400884 <prvIsQueueEmpty+0x18>)
  400872:	4798      	blx	r3
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
  400874:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
  400876:	4b04      	ldr	r3, [pc, #16]	; (400888 <prvIsQueueEmpty+0x1c>)
  400878:	4798      	blx	r3

    return xReturn;
}
  40087a:	fab4 f084 	clz	r0, r4
  40087e:	0940      	lsrs	r0, r0, #5
  400880:	bd10      	pop	{r4, pc}
  400882:	bf00      	nop
  400884:	004002b5 	.word	0x004002b5
  400888:	004002fd 	.word	0x004002fd

0040088c <prvCopyDataToQueue>:
{
  40088c:	b570      	push	{r4, r5, r6, lr}
  40088e:	4604      	mov	r4, r0
  400890:	4616      	mov	r6, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400892:	6b85      	ldr	r5, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400894:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400896:	b95a      	cbnz	r2, 4008b0 <prvCopyDataToQueue+0x24>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400898:	6803      	ldr	r3, [r0, #0]
    BaseType_t xReturn = pdFALSE;
  40089a:	2000      	movs	r0, #0
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40089c:	b113      	cbz	r3, 4008a4 <prvCopyDataToQueue+0x18>
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40089e:	3501      	adds	r5, #1
  4008a0:	63a5      	str	r5, [r4, #56]	; 0x38
}
  4008a2:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  4008a4:	68a0      	ldr	r0, [r4, #8]
  4008a6:	4b17      	ldr	r3, [pc, #92]	; (400904 <prvCopyDataToQueue+0x78>)
  4008a8:	4798      	blx	r3
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
  4008aa:	2300      	movs	r3, #0
  4008ac:	60a3      	str	r3, [r4, #8]
  4008ae:	e7f6      	b.n	40089e <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
  4008b0:	b96e      	cbnz	r6, 4008ce <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  4008b2:	6840      	ldr	r0, [r0, #4]
  4008b4:	4b14      	ldr	r3, [pc, #80]	; (400908 <prvCopyDataToQueue+0x7c>)
  4008b6:	4798      	blx	r3
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  4008b8:	6863      	ldr	r3, [r4, #4]
  4008ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008bc:	4413      	add	r3, r2
  4008be:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008c0:	68a2      	ldr	r2, [r4, #8]
  4008c2:	4293      	cmp	r3, r2
  4008c4:	d319      	bcc.n	4008fa <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
  4008c6:	6823      	ldr	r3, [r4, #0]
  4008c8:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
  4008ca:	2000      	movs	r0, #0
  4008cc:	e7e7      	b.n	40089e <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  4008ce:	68c0      	ldr	r0, [r0, #12]
  4008d0:	4b0d      	ldr	r3, [pc, #52]	; (400908 <prvCopyDataToQueue+0x7c>)
  4008d2:	4798      	blx	r3
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  4008d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008d6:	4252      	negs	r2, r2
  4008d8:	68e3      	ldr	r3, [r4, #12]
  4008da:	4413      	add	r3, r2
  4008dc:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008de:	6821      	ldr	r1, [r4, #0]
  4008e0:	428b      	cmp	r3, r1
  4008e2:	d202      	bcs.n	4008ea <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  4008e4:	68a3      	ldr	r3, [r4, #8]
  4008e6:	441a      	add	r2, r3
  4008e8:	60e2      	str	r2, [r4, #12]
        if( xPosition == queueOVERWRITE )
  4008ea:	2e02      	cmp	r6, #2
  4008ec:	d001      	beq.n	4008f2 <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
  4008ee:	2000      	movs	r0, #0
  4008f0:	e7d5      	b.n	40089e <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4008f2:	b125      	cbz	r5, 4008fe <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
  4008f4:	3d01      	subs	r5, #1
    BaseType_t xReturn = pdFALSE;
  4008f6:	2000      	movs	r0, #0
  4008f8:	e7d1      	b.n	40089e <prvCopyDataToQueue+0x12>
  4008fa:	2000      	movs	r0, #0
  4008fc:	e7cf      	b.n	40089e <prvCopyDataToQueue+0x12>
  4008fe:	2000      	movs	r0, #0
  400900:	e7cd      	b.n	40089e <prvCopyDataToQueue+0x12>
  400902:	bf00      	nop
  400904:	00401c41 	.word	0x00401c41
  400908:	00402aad 	.word	0x00402aad

0040090c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
  40090c:	b570      	push	{r4, r5, r6, lr}
  40090e:	b082      	sub	sp, #8
  400910:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400912:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400914:	b15c      	cbz	r4, 40092e <prvNotifyQueueSetContainer+0x22>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400916:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40091a:	429a      	cmp	r2, r3
  40091c:	d20d      	bcs.n	40093a <prvNotifyQueueSetContainer+0x2e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40091e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400922:	429a      	cmp	r2, r3
  400924:	d30f      	bcc.n	400946 <prvNotifyQueueSetContainer+0x3a>
        BaseType_t xReturn = pdFALSE;
  400926:	2600      	movs	r6, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
  400928:	4630      	mov	r0, r6
  40092a:	b002      	add	sp, #8
  40092c:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  40092e:	f640 31d5 	movw	r1, #3029	; 0xbd5
  400932:	4817      	ldr	r0, [pc, #92]	; (400990 <prvNotifyQueueSetContainer+0x84>)
  400934:	4b17      	ldr	r3, [pc, #92]	; (400994 <prvNotifyQueueSetContainer+0x88>)
  400936:	4798      	blx	r3
  400938:	e7ed      	b.n	400916 <prvNotifyQueueSetContainer+0xa>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40093a:	f640 31d6 	movw	r1, #3030	; 0xbd6
  40093e:	4814      	ldr	r0, [pc, #80]	; (400990 <prvNotifyQueueSetContainer+0x84>)
  400940:	4b14      	ldr	r3, [pc, #80]	; (400994 <prvNotifyQueueSetContainer+0x88>)
  400942:	4798      	blx	r3
  400944:	e7eb      	b.n	40091e <prvNotifyQueueSetContainer+0x12>
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  400946:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  40094a:	b26d      	sxtb	r5, r5
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
  40094c:	2200      	movs	r2, #0
  40094e:	a901      	add	r1, sp, #4
  400950:	4620      	mov	r0, r4
  400952:	4b11      	ldr	r3, [pc, #68]	; (400998 <prvNotifyQueueSetContainer+0x8c>)
  400954:	4798      	blx	r3
  400956:	4606      	mov	r6, r0
            if( cTxLock == queueUNLOCKED )
  400958:	f1b5 3fff 	cmp.w	r5, #4294967295
  40095c:	d006      	beq.n	40096c <prvNotifyQueueSetContainer+0x60>
                configASSERT( cTxLock != queueINT8_MAX );
  40095e:	2d7f      	cmp	r5, #127	; 0x7f
  400960:	d00f      	beq.n	400982 <prvNotifyQueueSetContainer+0x76>
                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400962:	3501      	adds	r5, #1
  400964:	b26d      	sxtb	r5, r5
  400966:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  40096a:	e7dd      	b.n	400928 <prvNotifyQueueSetContainer+0x1c>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40096c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40096e:	2b00      	cmp	r3, #0
  400970:	d0da      	beq.n	400928 <prvNotifyQueueSetContainer+0x1c>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400972:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400976:	4b09      	ldr	r3, [pc, #36]	; (40099c <prvNotifyQueueSetContainer+0x90>)
  400978:	4798      	blx	r3
  40097a:	2800      	cmp	r0, #0
                        xReturn = pdTRUE;
  40097c:	bf18      	it	ne
  40097e:	2601      	movne	r6, #1
  400980:	e7d2      	b.n	400928 <prvNotifyQueueSetContainer+0x1c>
                configASSERT( cTxLock != queueINT8_MAX );
  400982:	f640 31f6 	movw	r1, #3062	; 0xbf6
  400986:	4802      	ldr	r0, [pc, #8]	; (400990 <prvNotifyQueueSetContainer+0x84>)
  400988:	4b02      	ldr	r3, [pc, #8]	; (400994 <prvNotifyQueueSetContainer+0x88>)
  40098a:	4798      	blx	r3
  40098c:	e7e9      	b.n	400962 <prvNotifyQueueSetContainer+0x56>
  40098e:	bf00      	nop
  400990:	00402ed8 	.word	0x00402ed8
  400994:	00402a09 	.word	0x00402a09
  400998:	0040088d 	.word	0x0040088d
  40099c:	00401a7d 	.word	0x00401a7d

004009a0 <prvCopyDataFromQueue>:
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4009a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4009a2:	b172      	cbz	r2, 4009c2 <prvCopyDataFromQueue+0x22>
{
  4009a4:	b510      	push	{r4, lr}
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  4009a6:	68c3      	ldr	r3, [r0, #12]
  4009a8:	4413      	add	r3, r2
  4009aa:	60c3      	str	r3, [r0, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4009ac:	6884      	ldr	r4, [r0, #8]
  4009ae:	42a3      	cmp	r3, r4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  4009b0:	bf24      	itt	cs
  4009b2:	6803      	ldrcs	r3, [r0, #0]
  4009b4:	60c3      	strcs	r3, [r0, #12]
  4009b6:	460c      	mov	r4, r1
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  4009b8:	68c1      	ldr	r1, [r0, #12]
  4009ba:	4620      	mov	r0, r4
  4009bc:	4b01      	ldr	r3, [pc, #4]	; (4009c4 <prvCopyDataFromQueue+0x24>)
  4009be:	4798      	blx	r3
  4009c0:	bd10      	pop	{r4, pc}
  4009c2:	4770      	bx	lr
  4009c4:	00402aad 	.word	0x00402aad

004009c8 <prvUnlockQueue>:
{
  4009c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009cc:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
  4009ce:	4b23      	ldr	r3, [pc, #140]	; (400a5c <prvUnlockQueue+0x94>)
  4009d0:	4798      	blx	r3
        int8_t cTxLock = pxQueue->cTxLock;
  4009d2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4009d6:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  4009d8:	2c00      	cmp	r4, #0
  4009da:	dd18      	ble.n	400a0e <prvUnlockQueue+0x46>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4009dc:	4e20      	ldr	r6, [pc, #128]	; (400a60 <prvUnlockQueue+0x98>)
                            vTaskMissedYield();
  4009de:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400a6c <prvUnlockQueue+0xa4>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009e2:	4f20      	ldr	r7, [pc, #128]	; (400a64 <prvUnlockQueue+0x9c>)
  4009e4:	e008      	b.n	4009f8 <prvUnlockQueue+0x30>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4009e8:	b18b      	cbz	r3, 400a0e <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009ea:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4009ee:	47b8      	blx	r7
  4009f0:	b958      	cbnz	r0, 400a0a <prvUnlockQueue+0x42>
  4009f2:	3c01      	subs	r4, #1
  4009f4:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  4009f6:	b154      	cbz	r4, 400a0e <prvUnlockQueue+0x46>
                    if( pxQueue->pxQueueSetContainer != NULL )
  4009f8:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4009fa:	2b00      	cmp	r3, #0
  4009fc:	d0f3      	beq.n	4009e6 <prvUnlockQueue+0x1e>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4009fe:	4628      	mov	r0, r5
  400a00:	47b0      	blx	r6
  400a02:	2800      	cmp	r0, #0
  400a04:	d0f5      	beq.n	4009f2 <prvUnlockQueue+0x2a>
                            vTaskMissedYield();
  400a06:	47c0      	blx	r8
  400a08:	e7f3      	b.n	4009f2 <prvUnlockQueue+0x2a>
                                vTaskMissedYield();
  400a0a:	47c0      	blx	r8
  400a0c:	e7f1      	b.n	4009f2 <prvUnlockQueue+0x2a>
        pxQueue->cTxLock = queueUNLOCKED;
  400a0e:	23ff      	movs	r3, #255	; 0xff
  400a10:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
  400a14:	4b14      	ldr	r3, [pc, #80]	; (400a68 <prvUnlockQueue+0xa0>)
  400a16:	4798      	blx	r3
    taskENTER_CRITICAL();
  400a18:	4b10      	ldr	r3, [pc, #64]	; (400a5c <prvUnlockQueue+0x94>)
  400a1a:	4798      	blx	r3
        int8_t cRxLock = pxQueue->cRxLock;
  400a1c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400a20:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400a22:	2c00      	cmp	r4, #0
  400a24:	dd12      	ble.n	400a4c <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a26:	692b      	ldr	r3, [r5, #16]
  400a28:	b183      	cbz	r3, 400a4c <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a2a:	f105 0710 	add.w	r7, r5, #16
  400a2e:	4e0d      	ldr	r6, [pc, #52]	; (400a64 <prvUnlockQueue+0x9c>)
                    vTaskMissedYield();
  400a30:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400a6c <prvUnlockQueue+0xa4>
  400a34:	e004      	b.n	400a40 <prvUnlockQueue+0x78>
  400a36:	3c01      	subs	r4, #1
  400a38:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400a3a:	b13c      	cbz	r4, 400a4c <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a3c:	692b      	ldr	r3, [r5, #16]
  400a3e:	b12b      	cbz	r3, 400a4c <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a40:	4638      	mov	r0, r7
  400a42:	47b0      	blx	r6
  400a44:	2800      	cmp	r0, #0
  400a46:	d0f6      	beq.n	400a36 <prvUnlockQueue+0x6e>
                    vTaskMissedYield();
  400a48:	47c0      	blx	r8
  400a4a:	e7f4      	b.n	400a36 <prvUnlockQueue+0x6e>
        pxQueue->cRxLock = queueUNLOCKED;
  400a4c:	23ff      	movs	r3, #255	; 0xff
  400a4e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
  400a52:	4b05      	ldr	r3, [pc, #20]	; (400a68 <prvUnlockQueue+0xa0>)
  400a54:	4798      	blx	r3
  400a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a5a:	bf00      	nop
  400a5c:	004002b5 	.word	0x004002b5
  400a60:	0040090d 	.word	0x0040090d
  400a64:	00401a7d 	.word	0x00401a7d
  400a68:	004002fd 	.word	0x004002fd
  400a6c:	00401c15 	.word	0x00401c15

00400a70 <xQueueGenericReset>:
{
  400a70:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
  400a72:	b150      	cbz	r0, 400a8a <xQueueGenericReset+0x1a>
  400a74:	460d      	mov	r5, r1
  400a76:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
  400a78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
  400a7a:	b963      	cbnz	r3, 400a96 <xQueueGenericReset+0x26>
    configASSERT( xReturn != pdFAIL );
  400a7c:	f240 1145 	movw	r1, #325	; 0x145
  400a80:	4821      	ldr	r0, [pc, #132]	; (400b08 <xQueueGenericReset+0x98>)
  400a82:	4b22      	ldr	r3, [pc, #136]	; (400b0c <xQueueGenericReset+0x9c>)
  400a84:	4798      	blx	r3
  400a86:	2000      	movs	r0, #0
    return xReturn;
  400a88:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxQueue );
  400a8a:	f44f 7188 	mov.w	r1, #272	; 0x110
  400a8e:	481e      	ldr	r0, [pc, #120]	; (400b08 <xQueueGenericReset+0x98>)
  400a90:	4b1e      	ldr	r3, [pc, #120]	; (400b0c <xQueueGenericReset+0x9c>)
  400a92:	4798      	blx	r3
  400a94:	e7f2      	b.n	400a7c <xQueueGenericReset+0xc>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
  400a96:	f04f 32ff 	mov.w	r2, #4294967295
  400a9a:	fbb2 f3f3 	udiv	r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
  400a9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400aa0:	4293      	cmp	r3, r2
  400aa2:	d3eb      	bcc.n	400a7c <xQueueGenericReset+0xc>
        taskENTER_CRITICAL();
  400aa4:	4b1a      	ldr	r3, [pc, #104]	; (400b10 <xQueueGenericReset+0xa0>)
  400aa6:	4798      	blx	r3
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400aa8:	6822      	ldr	r2, [r4, #0]
  400aaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400aac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400aae:	fb03 f301 	mul.w	r3, r3, r1
  400ab2:	18d0      	adds	r0, r2, r3
  400ab4:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400ab6:	2000      	movs	r0, #0
  400ab8:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400aba:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400abc:	1a5b      	subs	r3, r3, r1
  400abe:	4413      	add	r3, r2
  400ac0:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
  400ac2:	23ff      	movs	r3, #255	; 0xff
  400ac4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
  400ac8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
  400acc:	b9a5      	cbnz	r5, 400af8 <xQueueGenericReset+0x88>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ace:	6923      	ldr	r3, [r4, #16]
  400ad0:	b91b      	cbnz	r3, 400ada <xQueueGenericReset+0x6a>
        taskEXIT_CRITICAL();
  400ad2:	4b10      	ldr	r3, [pc, #64]	; (400b14 <xQueueGenericReset+0xa4>)
  400ad4:	4798      	blx	r3
    BaseType_t xReturn = pdPASS;
  400ad6:	2001      	movs	r0, #1
  400ad8:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400ada:	f104 0010 	add.w	r0, r4, #16
  400ade:	4b0e      	ldr	r3, [pc, #56]	; (400b18 <xQueueGenericReset+0xa8>)
  400ae0:	4798      	blx	r3
  400ae2:	2800      	cmp	r0, #0
  400ae4:	d0f5      	beq.n	400ad2 <xQueueGenericReset+0x62>
                        queueYIELD_IF_USING_PREEMPTION();
  400ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400aea:	4b0c      	ldr	r3, [pc, #48]	; (400b1c <xQueueGenericReset+0xac>)
  400aec:	601a      	str	r2, [r3, #0]
  400aee:	f3bf 8f4f 	dsb	sy
  400af2:	f3bf 8f6f 	isb	sy
  400af6:	e7ec      	b.n	400ad2 <xQueueGenericReset+0x62>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400af8:	f104 0010 	add.w	r0, r4, #16
  400afc:	4d08      	ldr	r5, [pc, #32]	; (400b20 <xQueueGenericReset+0xb0>)
  400afe:	47a8      	blx	r5
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400b00:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400b04:	47a8      	blx	r5
  400b06:	e7e4      	b.n	400ad2 <xQueueGenericReset+0x62>
  400b08:	00402ed8 	.word	0x00402ed8
  400b0c:	00402a09 	.word	0x00402a09
  400b10:	004002b5 	.word	0x004002b5
  400b14:	004002fd 	.word	0x004002fd
  400b18:	00401a7d 	.word	0x00401a7d
  400b1c:	e000ed04 	.word	0xe000ed04
  400b20:	00400165 	.word	0x00400165

00400b24 <xQueueGenericCreate>:
    {
  400b24:	b570      	push	{r4, r5, r6, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400b26:	b308      	cbz	r0, 400b6c <xQueueGenericCreate+0x48>
  400b28:	460d      	mov	r5, r1
  400b2a:	4606      	mov	r6, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400b2c:	f04f 33ff 	mov.w	r3, #4294967295
  400b30:	fbb3 f3f0 	udiv	r3, r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400b34:	428b      	cmp	r3, r1
  400b36:	d319      	bcc.n	400b6c <xQueueGenericCreate+0x48>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
  400b38:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400b3c:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
  400b40:	d814      	bhi.n	400b6c <xQueueGenericCreate+0x48>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400b42:	304c      	adds	r0, #76	; 0x4c
  400b44:	4b0d      	ldr	r3, [pc, #52]	; (400b7c <xQueueGenericCreate+0x58>)
  400b46:	4798      	blx	r3
            if( pxNewQueue != NULL )
  400b48:	4604      	mov	r4, r0
  400b4a:	b158      	cbz	r0, 400b64 <xQueueGenericCreate+0x40>
    if( uxItemSize == ( UBaseType_t ) 0 )
  400b4c:	b165      	cbz	r5, 400b68 <xQueueGenericCreate+0x44>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400b4e:	f100 034c 	add.w	r3, r0, #76	; 0x4c
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400b52:	6003      	str	r3, [r0, #0]
    pxNewQueue->uxLength = uxQueueLength;
  400b54:	63e6      	str	r6, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
  400b56:	6425      	str	r5, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400b58:	2101      	movs	r1, #1
  400b5a:	4620      	mov	r0, r4
  400b5c:	4b08      	ldr	r3, [pc, #32]	; (400b80 <xQueueGenericCreate+0x5c>)
  400b5e:	4798      	blx	r3
            pxNewQueue->pxQueueSetContainer = NULL;
  400b60:	2300      	movs	r3, #0
  400b62:	64a3      	str	r3, [r4, #72]	; 0x48
    }
  400b64:	4620      	mov	r0, r4
  400b66:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400b68:	6020      	str	r0, [r4, #0]
  400b6a:	e7f3      	b.n	400b54 <xQueueGenericCreate+0x30>
            configASSERT( pxNewQueue );
  400b6c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
  400b70:	4804      	ldr	r0, [pc, #16]	; (400b84 <xQueueGenericCreate+0x60>)
  400b72:	4b05      	ldr	r3, [pc, #20]	; (400b88 <xQueueGenericCreate+0x64>)
  400b74:	4798      	blx	r3
        Queue_t * pxNewQueue = NULL;
  400b76:	2400      	movs	r4, #0
        return pxNewQueue;
  400b78:	e7f4      	b.n	400b64 <xQueueGenericCreate+0x40>
  400b7a:	bf00      	nop
  400b7c:	004005d1 	.word	0x004005d1
  400b80:	00400a71 	.word	0x00400a71
  400b84:	00402ed8 	.word	0x00402ed8
  400b88:	00402a09 	.word	0x00402a09

00400b8c <xQueueGenericSend>:
{
  400b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b90:	b085      	sub	sp, #20
  400b92:	4689      	mov	r9, r1
  400b94:	9201      	str	r2, [sp, #4]
  400b96:	461e      	mov	r6, r3
    configASSERT( pxQueue );
  400b98:	4604      	mov	r4, r0
  400b9a:	b1a8      	cbz	r0, 400bc8 <xQueueGenericSend+0x3c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b9c:	f1b9 0f00 	cmp.w	r9, #0
  400ba0:	d018      	beq.n	400bd4 <xQueueGenericSend+0x48>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400ba2:	2e02      	cmp	r6, #2
  400ba4:	d01f      	beq.n	400be6 <xQueueGenericSend+0x5a>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400ba6:	4b67      	ldr	r3, [pc, #412]	; (400d44 <xQueueGenericSend+0x1b8>)
  400ba8:	4798      	blx	r3
  400baa:	b930      	cbnz	r0, 400bba <xQueueGenericSend+0x2e>
  400bac:	9b01      	ldr	r3, [sp, #4]
  400bae:	b123      	cbz	r3, 400bba <xQueueGenericSend+0x2e>
  400bb0:	f240 3133 	movw	r1, #819	; 0x333
  400bb4:	4864      	ldr	r0, [pc, #400]	; (400d48 <xQueueGenericSend+0x1bc>)
  400bb6:	4b65      	ldr	r3, [pc, #404]	; (400d4c <xQueueGenericSend+0x1c0>)
  400bb8:	4798      	blx	r3
{
  400bba:	f04f 0a00 	mov.w	sl, #0
        taskENTER_CRITICAL();
  400bbe:	4d64      	ldr	r5, [pc, #400]	; (400d50 <xQueueGenericSend+0x1c4>)
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400bc0:	4f64      	ldr	r7, [pc, #400]	; (400d54 <xQueueGenericSend+0x1c8>)
                    portYIELD_WITHIN_API();
  400bc2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 400d60 <xQueueGenericSend+0x1d4>
  400bc6:	e05e      	b.n	400c86 <xQueueGenericSend+0xfa>
    configASSERT( pxQueue );
  400bc8:	f240 312e 	movw	r1, #814	; 0x32e
  400bcc:	485e      	ldr	r0, [pc, #376]	; (400d48 <xQueueGenericSend+0x1bc>)
  400bce:	4b5f      	ldr	r3, [pc, #380]	; (400d4c <xQueueGenericSend+0x1c0>)
  400bd0:	4798      	blx	r3
  400bd2:	e7e3      	b.n	400b9c <xQueueGenericSend+0x10>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	d0e3      	beq.n	400ba2 <xQueueGenericSend+0x16>
  400bda:	f240 312f 	movw	r1, #815	; 0x32f
  400bde:	485a      	ldr	r0, [pc, #360]	; (400d48 <xQueueGenericSend+0x1bc>)
  400be0:	4b5a      	ldr	r3, [pc, #360]	; (400d4c <xQueueGenericSend+0x1c0>)
  400be2:	4798      	blx	r3
  400be4:	e7dd      	b.n	400ba2 <xQueueGenericSend+0x16>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400be6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400be8:	2b01      	cmp	r3, #1
  400bea:	d0dc      	beq.n	400ba6 <xQueueGenericSend+0x1a>
  400bec:	f44f 714c 	mov.w	r1, #816	; 0x330
  400bf0:	4855      	ldr	r0, [pc, #340]	; (400d48 <xQueueGenericSend+0x1bc>)
  400bf2:	4b56      	ldr	r3, [pc, #344]	; (400d4c <xQueueGenericSend+0x1c0>)
  400bf4:	4798      	blx	r3
  400bf6:	e7d6      	b.n	400ba6 <xQueueGenericSend+0x1a>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400bf8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400bfa:	4632      	mov	r2, r6
  400bfc:	4649      	mov	r1, r9
  400bfe:	4620      	mov	r0, r4
  400c00:	4b55      	ldr	r3, [pc, #340]	; (400d58 <xQueueGenericSend+0x1cc>)
  400c02:	4798      	blx	r3
                        if( pxQueue->pxQueueSetContainer != NULL )
  400c04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400c06:	b1a3      	cbz	r3, 400c32 <xQueueGenericSend+0xa6>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400c08:	2e02      	cmp	r6, #2
  400c0a:	f000 8096 	beq.w	400d3a <xQueueGenericSend+0x1ae>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400c0e:	4620      	mov	r0, r4
  400c10:	4b52      	ldr	r3, [pc, #328]	; (400d5c <xQueueGenericSend+0x1d0>)
  400c12:	4798      	blx	r3
  400c14:	b138      	cbz	r0, 400c26 <xQueueGenericSend+0x9a>
                                queueYIELD_IF_USING_PREEMPTION();
  400c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c1a:	4b51      	ldr	r3, [pc, #324]	; (400d60 <xQueueGenericSend+0x1d4>)
  400c1c:	601a      	str	r2, [r3, #0]
  400c1e:	f3bf 8f4f 	dsb	sy
  400c22:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
  400c26:	4b4f      	ldr	r3, [pc, #316]	; (400d64 <xQueueGenericSend+0x1d8>)
  400c28:	4798      	blx	r3
                return pdPASS;
  400c2a:	2001      	movs	r0, #1
}
  400c2c:	b005      	add	sp, #20
  400c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c34:	b953      	cbnz	r3, 400c4c <xQueueGenericSend+0xc0>
                            else if( xYieldRequired != pdFALSE )
  400c36:	2800      	cmp	r0, #0
  400c38:	d0f5      	beq.n	400c26 <xQueueGenericSend+0x9a>
                                queueYIELD_IF_USING_PREEMPTION();
  400c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c3e:	4b48      	ldr	r3, [pc, #288]	; (400d60 <xQueueGenericSend+0x1d4>)
  400c40:	601a      	str	r2, [r3, #0]
  400c42:	f3bf 8f4f 	dsb	sy
  400c46:	f3bf 8f6f 	isb	sy
  400c4a:	e7ec      	b.n	400c26 <xQueueGenericSend+0x9a>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c50:	4b45      	ldr	r3, [pc, #276]	; (400d68 <xQueueGenericSend+0x1dc>)
  400c52:	4798      	blx	r3
  400c54:	2800      	cmp	r0, #0
  400c56:	d0e6      	beq.n	400c26 <xQueueGenericSend+0x9a>
                                    queueYIELD_IF_USING_PREEMPTION();
  400c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c5c:	4b40      	ldr	r3, [pc, #256]	; (400d60 <xQueueGenericSend+0x1d4>)
  400c5e:	601a      	str	r2, [r3, #0]
  400c60:	f3bf 8f4f 	dsb	sy
  400c64:	f3bf 8f6f 	isb	sy
  400c68:	e7dd      	b.n	400c26 <xQueueGenericSend+0x9a>
                    taskEXIT_CRITICAL();
  400c6a:	4b3e      	ldr	r3, [pc, #248]	; (400d64 <xQueueGenericSend+0x1d8>)
  400c6c:	4798      	blx	r3
                    return errQUEUE_FULL;
  400c6e:	2000      	movs	r0, #0
  400c70:	e7dc      	b.n	400c2c <xQueueGenericSend+0xa0>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400c72:	a802      	add	r0, sp, #8
  400c74:	47b8      	blx	r7
  400c76:	e013      	b.n	400ca0 <xQueueGenericSend+0x114>
                prvUnlockQueue( pxQueue );
  400c78:	4620      	mov	r0, r4
  400c7a:	4b3c      	ldr	r3, [pc, #240]	; (400d6c <xQueueGenericSend+0x1e0>)
  400c7c:	4798      	blx	r3
                ( void ) xTaskResumeAll();
  400c7e:	4b3c      	ldr	r3, [pc, #240]	; (400d70 <xQueueGenericSend+0x1e4>)
  400c80:	4798      	blx	r3
  400c82:	f04f 0a01 	mov.w	sl, #1
        taskENTER_CRITICAL();
  400c86:	47a8      	blx	r5
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400c88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c8c:	429a      	cmp	r2, r3
  400c8e:	d3b3      	bcc.n	400bf8 <xQueueGenericSend+0x6c>
  400c90:	2e02      	cmp	r6, #2
  400c92:	d048      	beq.n	400d26 <xQueueGenericSend+0x19a>
                if( xTicksToWait == ( TickType_t ) 0 )
  400c94:	9b01      	ldr	r3, [sp, #4]
  400c96:	2b00      	cmp	r3, #0
  400c98:	d0e7      	beq.n	400c6a <xQueueGenericSend+0xde>
                else if( xEntryTimeSet == pdFALSE )
  400c9a:	f1ba 0f00 	cmp.w	sl, #0
  400c9e:	d0e8      	beq.n	400c72 <xQueueGenericSend+0xe6>
        taskEXIT_CRITICAL();
  400ca0:	4b30      	ldr	r3, [pc, #192]	; (400d64 <xQueueGenericSend+0x1d8>)
  400ca2:	4798      	blx	r3
        vTaskSuspendAll();
  400ca4:	4b33      	ldr	r3, [pc, #204]	; (400d74 <xQueueGenericSend+0x1e8>)
  400ca6:	4798      	blx	r3
        prvLockQueue( pxQueue );
  400ca8:	47a8      	blx	r5
  400caa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400cae:	b25b      	sxtb	r3, r3
  400cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cb4:	bf04      	itt	eq
  400cb6:	2300      	moveq	r3, #0
  400cb8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400cbc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400cc0:	b25b      	sxtb	r3, r3
  400cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cc6:	bf04      	itt	eq
  400cc8:	2300      	moveq	r3, #0
  400cca:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400cce:	4b25      	ldr	r3, [pc, #148]	; (400d64 <xQueueGenericSend+0x1d8>)
  400cd0:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400cd2:	a901      	add	r1, sp, #4
  400cd4:	a802      	add	r0, sp, #8
  400cd6:	4b28      	ldr	r3, [pc, #160]	; (400d78 <xQueueGenericSend+0x1ec>)
  400cd8:	4798      	blx	r3
  400cda:	b9e8      	cbnz	r0, 400d18 <xQueueGenericSend+0x18c>
    taskENTER_CRITICAL();
  400cdc:	47a8      	blx	r5
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400cde:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400ce2:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
    taskEXIT_CRITICAL();
  400ce6:	4b1f      	ldr	r3, [pc, #124]	; (400d64 <xQueueGenericSend+0x1d8>)
  400ce8:	4798      	blx	r3
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400cea:	45d3      	cmp	fp, sl
  400cec:	d1c4      	bne.n	400c78 <xQueueGenericSend+0xec>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400cee:	9901      	ldr	r1, [sp, #4]
  400cf0:	f104 0010 	add.w	r0, r4, #16
  400cf4:	4b21      	ldr	r3, [pc, #132]	; (400d7c <xQueueGenericSend+0x1f0>)
  400cf6:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
  400cf8:	4620      	mov	r0, r4
  400cfa:	4b1c      	ldr	r3, [pc, #112]	; (400d6c <xQueueGenericSend+0x1e0>)
  400cfc:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
  400cfe:	4b1c      	ldr	r3, [pc, #112]	; (400d70 <xQueueGenericSend+0x1e4>)
  400d00:	4798      	blx	r3
  400d02:	2800      	cmp	r0, #0
  400d04:	d1bd      	bne.n	400c82 <xQueueGenericSend+0xf6>
                    portYIELD_WITHIN_API();
  400d06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400d0a:	f8c8 3000 	str.w	r3, [r8]
  400d0e:	f3bf 8f4f 	dsb	sy
  400d12:	f3bf 8f6f 	isb	sy
  400d16:	e7b4      	b.n	400c82 <xQueueGenericSend+0xf6>
            prvUnlockQueue( pxQueue );
  400d18:	4620      	mov	r0, r4
  400d1a:	4b14      	ldr	r3, [pc, #80]	; (400d6c <xQueueGenericSend+0x1e0>)
  400d1c:	4798      	blx	r3
            ( void ) xTaskResumeAll();
  400d1e:	4b14      	ldr	r3, [pc, #80]	; (400d70 <xQueueGenericSend+0x1e4>)
  400d20:	4798      	blx	r3
            return errQUEUE_FULL;
  400d22:	2000      	movs	r0, #0
  400d24:	e782      	b.n	400c2c <xQueueGenericSend+0xa0>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400d26:	6ba5      	ldr	r5, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400d28:	2202      	movs	r2, #2
  400d2a:	4649      	mov	r1, r9
  400d2c:	4620      	mov	r0, r4
  400d2e:	4b0a      	ldr	r3, [pc, #40]	; (400d58 <xQueueGenericSend+0x1cc>)
  400d30:	4798      	blx	r3
                        if( pxQueue->pxQueueSetContainer != NULL )
  400d32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d34:	2b00      	cmp	r3, #0
  400d36:	f43f af7c 	beq.w	400c32 <xQueueGenericSend+0xa6>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400d3a:	2d00      	cmp	r5, #0
  400d3c:	f43f af67 	beq.w	400c0e <xQueueGenericSend+0x82>
  400d40:	e771      	b.n	400c26 <xQueueGenericSend+0x9a>
  400d42:	bf00      	nop
  400d44:	00401c21 	.word	0x00401c21
  400d48:	00402ed8 	.word	0x00402ed8
  400d4c:	00402a09 	.word	0x00402a09
  400d50:	004002b5 	.word	0x004002b5
  400d54:	00401b71 	.word	0x00401b71
  400d58:	0040088d 	.word	0x0040088d
  400d5c:	0040090d 	.word	0x0040090d
  400d60:	e000ed04 	.word	0xe000ed04
  400d64:	004002fd 	.word	0x004002fd
  400d68:	00401a7d 	.word	0x00401a7d
  400d6c:	004009c9 	.word	0x004009c9
  400d70:	00401715 	.word	0x00401715
  400d74:	0040153d 	.word	0x0040153d
  400d78:	00401b89 	.word	0x00401b89
  400d7c:	004019dd 	.word	0x004019dd

00400d80 <xQueueGenericSendFromISR>:
{
  400d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d84:	460f      	mov	r7, r1
  400d86:	4691      	mov	r9, r2
  400d88:	461e      	mov	r6, r3
    configASSERT( pxQueue );
  400d8a:	4604      	mov	r4, r0
  400d8c:	b1c8      	cbz	r0, 400dc2 <xQueueGenericSendFromISR+0x42>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d8e:	b1f7      	cbz	r7, 400dce <xQueueGenericSendFromISR+0x4e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d90:	2e02      	cmp	r6, #2
  400d92:	d025      	beq.n	400de0 <xQueueGenericSendFromISR+0x60>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400d94:	4b3a      	ldr	r3, [pc, #232]	; (400e80 <xQueueGenericSendFromISR+0x100>)
  400d96:	4798      	blx	r3
        __asm volatile
  400d98:	f3ef 8811 	mrs	r8, BASEPRI
  400d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
  400da0:	f383 8811 	msr	BASEPRI, r3
  400da4:	f3bf 8f6f 	isb	sy
  400da8:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400dac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400dae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400db0:	429a      	cmp	r2, r3
  400db2:	d31e      	bcc.n	400df2 <xQueueGenericSendFromISR+0x72>
  400db4:	2e02      	cmp	r6, #2
  400db6:	d01c      	beq.n	400df2 <xQueueGenericSendFromISR+0x72>
            xReturn = errQUEUE_FULL;
  400db8:	2000      	movs	r0, #0
        __asm volatile
  400dba:	f388 8811 	msr	BASEPRI, r8
}
  400dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    configASSERT( pxQueue );
  400dc2:	f240 4102 	movw	r1, #1026	; 0x402
  400dc6:	482f      	ldr	r0, [pc, #188]	; (400e84 <xQueueGenericSendFromISR+0x104>)
  400dc8:	4b2f      	ldr	r3, [pc, #188]	; (400e88 <xQueueGenericSendFromISR+0x108>)
  400dca:	4798      	blx	r3
  400dcc:	e7df      	b.n	400d8e <xQueueGenericSendFromISR+0xe>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400dce:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400dd0:	2b00      	cmp	r3, #0
  400dd2:	d0dd      	beq.n	400d90 <xQueueGenericSendFromISR+0x10>
  400dd4:	f240 4103 	movw	r1, #1027	; 0x403
  400dd8:	482a      	ldr	r0, [pc, #168]	; (400e84 <xQueueGenericSendFromISR+0x104>)
  400dda:	4b2b      	ldr	r3, [pc, #172]	; (400e88 <xQueueGenericSendFromISR+0x108>)
  400ddc:	4798      	blx	r3
  400dde:	e7d7      	b.n	400d90 <xQueueGenericSendFromISR+0x10>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400de0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400de2:	2b01      	cmp	r3, #1
  400de4:	d0d6      	beq.n	400d94 <xQueueGenericSendFromISR+0x14>
  400de6:	f240 4104 	movw	r1, #1028	; 0x404
  400dea:	4826      	ldr	r0, [pc, #152]	; (400e84 <xQueueGenericSendFromISR+0x104>)
  400dec:	4b26      	ldr	r3, [pc, #152]	; (400e88 <xQueueGenericSendFromISR+0x108>)
  400dee:	4798      	blx	r3
  400df0:	e7d0      	b.n	400d94 <xQueueGenericSendFromISR+0x14>
            const int8_t cTxLock = pxQueue->cTxLock;
  400df2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400df6:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400df8:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400dfc:	4632      	mov	r2, r6
  400dfe:	4639      	mov	r1, r7
  400e00:	4620      	mov	r0, r4
  400e02:	4b22      	ldr	r3, [pc, #136]	; (400e8c <xQueueGenericSendFromISR+0x10c>)
  400e04:	4798      	blx	r3
            if( cTxLock == queueUNLOCKED )
  400e06:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e0a:	d007      	beq.n	400e1c <xQueueGenericSendFromISR+0x9c>
                configASSERT( cTxLock != queueINT8_MAX );
  400e0c:	2d7f      	cmp	r5, #127	; 0x7f
  400e0e:	d029      	beq.n	400e64 <xQueueGenericSendFromISR+0xe4>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400e10:	3501      	adds	r5, #1
  400e12:	b26d      	sxtb	r5, r5
  400e14:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
            xReturn = pdPASS;
  400e18:	2001      	movs	r0, #1
  400e1a:	e7ce      	b.n	400dba <xQueueGenericSendFromISR+0x3a>
                        if( pxQueue->pxQueueSetContainer != NULL )
  400e1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e1e:	b18b      	cbz	r3, 400e44 <xQueueGenericSendFromISR+0xc4>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400e20:	2e02      	cmp	r6, #2
  400e22:	d00a      	beq.n	400e3a <xQueueGenericSendFromISR+0xba>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400e24:	4620      	mov	r0, r4
  400e26:	4b1a      	ldr	r3, [pc, #104]	; (400e90 <xQueueGenericSendFromISR+0x110>)
  400e28:	4798      	blx	r3
  400e2a:	b308      	cbz	r0, 400e70 <xQueueGenericSendFromISR+0xf0>
                                if( pxHigherPriorityTaskWoken != NULL )
  400e2c:	f1b9 0f00 	cmp.w	r9, #0
  400e30:	d020      	beq.n	400e74 <xQueueGenericSendFromISR+0xf4>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
  400e32:	2001      	movs	r0, #1
  400e34:	f8c9 0000 	str.w	r0, [r9]
  400e38:	e7bf      	b.n	400dba <xQueueGenericSendFromISR+0x3a>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400e3a:	f1ba 0f00 	cmp.w	sl, #0
  400e3e:	d0f1      	beq.n	400e24 <xQueueGenericSendFromISR+0xa4>
            xReturn = pdPASS;
  400e40:	2001      	movs	r0, #1
  400e42:	e7ba      	b.n	400dba <xQueueGenericSendFromISR+0x3a>
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e46:	b90b      	cbnz	r3, 400e4c <xQueueGenericSendFromISR+0xcc>
            xReturn = pdPASS;
  400e48:	2001      	movs	r0, #1
  400e4a:	e7b6      	b.n	400dba <xQueueGenericSendFromISR+0x3a>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400e4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e50:	4b10      	ldr	r3, [pc, #64]	; (400e94 <xQueueGenericSendFromISR+0x114>)
  400e52:	4798      	blx	r3
  400e54:	b180      	cbz	r0, 400e78 <xQueueGenericSendFromISR+0xf8>
                                    if( pxHigherPriorityTaskWoken != NULL )
  400e56:	f1b9 0f00 	cmp.w	r9, #0
  400e5a:	d00f      	beq.n	400e7c <xQueueGenericSendFromISR+0xfc>
                                        *pxHigherPriorityTaskWoken = pdTRUE;
  400e5c:	2001      	movs	r0, #1
  400e5e:	f8c9 0000 	str.w	r0, [r9]
  400e62:	e7aa      	b.n	400dba <xQueueGenericSendFromISR+0x3a>
                configASSERT( cTxLock != queueINT8_MAX );
  400e64:	f240 418d 	movw	r1, #1165	; 0x48d
  400e68:	4806      	ldr	r0, [pc, #24]	; (400e84 <xQueueGenericSendFromISR+0x104>)
  400e6a:	4b07      	ldr	r3, [pc, #28]	; (400e88 <xQueueGenericSendFromISR+0x108>)
  400e6c:	4798      	blx	r3
  400e6e:	e7cf      	b.n	400e10 <xQueueGenericSendFromISR+0x90>
            xReturn = pdPASS;
  400e70:	2001      	movs	r0, #1
  400e72:	e7a2      	b.n	400dba <xQueueGenericSendFromISR+0x3a>
  400e74:	2001      	movs	r0, #1
  400e76:	e7a0      	b.n	400dba <xQueueGenericSendFromISR+0x3a>
  400e78:	2001      	movs	r0, #1
  400e7a:	e79e      	b.n	400dba <xQueueGenericSendFromISR+0x3a>
  400e7c:	2001      	movs	r0, #1
  400e7e:	e79c      	b.n	400dba <xQueueGenericSendFromISR+0x3a>
  400e80:	0040051d 	.word	0x0040051d
  400e84:	00402ed8 	.word	0x00402ed8
  400e88:	00402a09 	.word	0x00402a09
  400e8c:	0040088d 	.word	0x0040088d
  400e90:	0040090d 	.word	0x0040090d
  400e94:	00401a7d 	.word	0x00401a7d

00400e98 <xQueueReceive>:
{
  400e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400e9c:	b084      	sub	sp, #16
  400e9e:	4688      	mov	r8, r1
  400ea0:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
  400ea2:	4604      	mov	r4, r0
  400ea4:	b198      	cbz	r0, 400ece <xQueueReceive+0x36>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400ea6:	f1b8 0f00 	cmp.w	r8, #0
  400eaa:	d016      	beq.n	400eda <xQueueReceive+0x42>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400eac:	4b4d      	ldr	r3, [pc, #308]	; (400fe4 <xQueueReceive+0x14c>)
  400eae:	4798      	blx	r3
  400eb0:	b930      	cbnz	r0, 400ec0 <xQueueReceive+0x28>
  400eb2:	9b01      	ldr	r3, [sp, #4]
  400eb4:	b123      	cbz	r3, 400ec0 <xQueueReceive+0x28>
  400eb6:	f240 515a 	movw	r1, #1370	; 0x55a
  400eba:	484b      	ldr	r0, [pc, #300]	; (400fe8 <xQueueReceive+0x150>)
  400ebc:	4b4b      	ldr	r3, [pc, #300]	; (400fec <xQueueReceive+0x154>)
  400ebe:	4798      	blx	r3
{
  400ec0:	f04f 0a00 	mov.w	sl, #0
        taskENTER_CRITICAL();
  400ec4:	4d4a      	ldr	r5, [pc, #296]	; (400ff0 <xQueueReceive+0x158>)
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400ec6:	4e4b      	ldr	r6, [pc, #300]	; (400ff4 <xQueueReceive+0x15c>)
                    portYIELD_WITHIN_API();
  400ec8:	f8df 9138 	ldr.w	r9, [pc, #312]	; 401004 <xQueueReceive+0x16c>
  400ecc:	e044      	b.n	400f58 <xQueueReceive+0xc0>
    configASSERT( ( pxQueue ) );
  400ece:	f240 5151 	movw	r1, #1361	; 0x551
  400ed2:	4845      	ldr	r0, [pc, #276]	; (400fe8 <xQueueReceive+0x150>)
  400ed4:	4b45      	ldr	r3, [pc, #276]	; (400fec <xQueueReceive+0x154>)
  400ed6:	4798      	blx	r3
  400ed8:	e7e5      	b.n	400ea6 <xQueueReceive+0xe>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400edc:	2b00      	cmp	r3, #0
  400ede:	d0e5      	beq.n	400eac <xQueueReceive+0x14>
  400ee0:	f240 5155 	movw	r1, #1365	; 0x555
  400ee4:	4840      	ldr	r0, [pc, #256]	; (400fe8 <xQueueReceive+0x150>)
  400ee6:	4b41      	ldr	r3, [pc, #260]	; (400fec <xQueueReceive+0x154>)
  400ee8:	4798      	blx	r3
  400eea:	e7df      	b.n	400eac <xQueueReceive+0x14>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
  400eec:	4641      	mov	r1, r8
  400eee:	4620      	mov	r0, r4
  400ef0:	4b41      	ldr	r3, [pc, #260]	; (400ff8 <xQueueReceive+0x160>)
  400ef2:	4798      	blx	r3
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  400ef4:	1e7b      	subs	r3, r7, #1
  400ef6:	63a3      	str	r3, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ef8:	6923      	ldr	r3, [r4, #16]
  400efa:	b92b      	cbnz	r3, 400f08 <xQueueReceive+0x70>
                taskEXIT_CRITICAL();
  400efc:	4b3f      	ldr	r3, [pc, #252]	; (400ffc <xQueueReceive+0x164>)
  400efe:	4798      	blx	r3
                return pdPASS;
  400f00:	2001      	movs	r0, #1
}
  400f02:	b004      	add	sp, #16
  400f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400f08:	f104 0010 	add.w	r0, r4, #16
  400f0c:	4b3c      	ldr	r3, [pc, #240]	; (401000 <xQueueReceive+0x168>)
  400f0e:	4798      	blx	r3
  400f10:	2800      	cmp	r0, #0
  400f12:	d0f3      	beq.n	400efc <xQueueReceive+0x64>
                        queueYIELD_IF_USING_PREEMPTION();
  400f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f18:	4b3a      	ldr	r3, [pc, #232]	; (401004 <xQueueReceive+0x16c>)
  400f1a:	601a      	str	r2, [r3, #0]
  400f1c:	f3bf 8f4f 	dsb	sy
  400f20:	f3bf 8f6f 	isb	sy
  400f24:	e7ea      	b.n	400efc <xQueueReceive+0x64>
                    taskEXIT_CRITICAL();
  400f26:	4b35      	ldr	r3, [pc, #212]	; (400ffc <xQueueReceive+0x164>)
  400f28:	4798      	blx	r3
                    return errQUEUE_EMPTY;
  400f2a:	2000      	movs	r0, #0
  400f2c:	e7e9      	b.n	400f02 <xQueueReceive+0x6a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400f2e:	a802      	add	r0, sp, #8
  400f30:	47b0      	blx	r6
  400f32:	e01b      	b.n	400f6c <xQueueReceive+0xd4>
                prvUnlockQueue( pxQueue );
  400f34:	4620      	mov	r0, r4
  400f36:	4b34      	ldr	r3, [pc, #208]	; (401008 <xQueueReceive+0x170>)
  400f38:	4798      	blx	r3
                ( void ) xTaskResumeAll();
  400f3a:	4b34      	ldr	r3, [pc, #208]	; (40100c <xQueueReceive+0x174>)
  400f3c:	4798      	blx	r3
  400f3e:	e009      	b.n	400f54 <xQueueReceive+0xbc>
            prvUnlockQueue( pxQueue );
  400f40:	4620      	mov	r0, r4
  400f42:	4b31      	ldr	r3, [pc, #196]	; (401008 <xQueueReceive+0x170>)
  400f44:	4798      	blx	r3
            ( void ) xTaskResumeAll();
  400f46:	4b31      	ldr	r3, [pc, #196]	; (40100c <xQueueReceive+0x174>)
  400f48:	4798      	blx	r3
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400f4a:	4620      	mov	r0, r4
  400f4c:	4b30      	ldr	r3, [pc, #192]	; (401010 <xQueueReceive+0x178>)
  400f4e:	4798      	blx	r3
  400f50:	2800      	cmp	r0, #0
  400f52:	d144      	bne.n	400fde <xQueueReceive+0x146>
  400f54:	f04f 0a01 	mov.w	sl, #1
        taskENTER_CRITICAL();
  400f58:	47a8      	blx	r5
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400f5a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f5c:	2f00      	cmp	r7, #0
  400f5e:	d1c5      	bne.n	400eec <xQueueReceive+0x54>
                if( xTicksToWait == ( TickType_t ) 0 )
  400f60:	9b01      	ldr	r3, [sp, #4]
  400f62:	2b00      	cmp	r3, #0
  400f64:	d0df      	beq.n	400f26 <xQueueReceive+0x8e>
                else if( xEntryTimeSet == pdFALSE )
  400f66:	f1ba 0f00 	cmp.w	sl, #0
  400f6a:	d0e0      	beq.n	400f2e <xQueueReceive+0x96>
        taskEXIT_CRITICAL();
  400f6c:	4b23      	ldr	r3, [pc, #140]	; (400ffc <xQueueReceive+0x164>)
  400f6e:	4798      	blx	r3
        vTaskSuspendAll();
  400f70:	4b28      	ldr	r3, [pc, #160]	; (401014 <xQueueReceive+0x17c>)
  400f72:	4798      	blx	r3
        prvLockQueue( pxQueue );
  400f74:	47a8      	blx	r5
  400f76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400f7a:	b25b      	sxtb	r3, r3
  400f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f80:	bf04      	itt	eq
  400f82:	2300      	moveq	r3, #0
  400f84:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400f88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400f8c:	b25b      	sxtb	r3, r3
  400f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f92:	bf04      	itt	eq
  400f94:	2300      	moveq	r3, #0
  400f96:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400f9a:	4b18      	ldr	r3, [pc, #96]	; (400ffc <xQueueReceive+0x164>)
  400f9c:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f9e:	a901      	add	r1, sp, #4
  400fa0:	a802      	add	r0, sp, #8
  400fa2:	4b1d      	ldr	r3, [pc, #116]	; (401018 <xQueueReceive+0x180>)
  400fa4:	4798      	blx	r3
  400fa6:	2800      	cmp	r0, #0
  400fa8:	d1ca      	bne.n	400f40 <xQueueReceive+0xa8>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400faa:	4620      	mov	r0, r4
  400fac:	4b18      	ldr	r3, [pc, #96]	; (401010 <xQueueReceive+0x178>)
  400fae:	4798      	blx	r3
  400fb0:	2800      	cmp	r0, #0
  400fb2:	d0bf      	beq.n	400f34 <xQueueReceive+0x9c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400fb4:	9901      	ldr	r1, [sp, #4]
  400fb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fba:	4b18      	ldr	r3, [pc, #96]	; (40101c <xQueueReceive+0x184>)
  400fbc:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
  400fbe:	4620      	mov	r0, r4
  400fc0:	4b11      	ldr	r3, [pc, #68]	; (401008 <xQueueReceive+0x170>)
  400fc2:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
  400fc4:	4b11      	ldr	r3, [pc, #68]	; (40100c <xQueueReceive+0x174>)
  400fc6:	4798      	blx	r3
  400fc8:	2800      	cmp	r0, #0
  400fca:	d1c3      	bne.n	400f54 <xQueueReceive+0xbc>
                    portYIELD_WITHIN_API();
  400fcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400fd0:	f8c9 3000 	str.w	r3, [r9]
  400fd4:	f3bf 8f4f 	dsb	sy
  400fd8:	f3bf 8f6f 	isb	sy
  400fdc:	e7ba      	b.n	400f54 <xQueueReceive+0xbc>
                return errQUEUE_EMPTY;
  400fde:	2000      	movs	r0, #0
  400fe0:	e78f      	b.n	400f02 <xQueueReceive+0x6a>
  400fe2:	bf00      	nop
  400fe4:	00401c21 	.word	0x00401c21
  400fe8:	00402ed8 	.word	0x00402ed8
  400fec:	00402a09 	.word	0x00402a09
  400ff0:	004002b5 	.word	0x004002b5
  400ff4:	00401b71 	.word	0x00401b71
  400ff8:	004009a1 	.word	0x004009a1
  400ffc:	004002fd 	.word	0x004002fd
  401000:	00401a7d 	.word	0x00401a7d
  401004:	e000ed04 	.word	0xe000ed04
  401008:	004009c9 	.word	0x004009c9
  40100c:	00401715 	.word	0x00401715
  401010:	0040086d 	.word	0x0040086d
  401014:	0040153d 	.word	0x0040153d
  401018:	00401b89 	.word	0x00401b89
  40101c:	004019dd 	.word	0x004019dd

00401020 <uxQueueMessagesWaiting>:
{
  401020:	b510      	push	{r4, lr}
    configASSERT( xQueue );
  401022:	4604      	mov	r4, r0
  401024:	b130      	cbz	r0, 401034 <uxQueueMessagesWaiting+0x14>
    taskENTER_CRITICAL();
  401026:	4b06      	ldr	r3, [pc, #24]	; (401040 <uxQueueMessagesWaiting+0x20>)
  401028:	4798      	blx	r3
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
  40102a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    taskEXIT_CRITICAL();
  40102c:	4b05      	ldr	r3, [pc, #20]	; (401044 <uxQueueMessagesWaiting+0x24>)
  40102e:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
  401030:	4620      	mov	r0, r4
  401032:	bd10      	pop	{r4, pc}
    configASSERT( xQueue );
  401034:	f240 71e3 	movw	r1, #2019	; 0x7e3
  401038:	4803      	ldr	r0, [pc, #12]	; (401048 <uxQueueMessagesWaiting+0x28>)
  40103a:	4b04      	ldr	r3, [pc, #16]	; (40104c <uxQueueMessagesWaiting+0x2c>)
  40103c:	4798      	blx	r3
  40103e:	e7f2      	b.n	401026 <uxQueueMessagesWaiting+0x6>
  401040:	004002b5 	.word	0x004002b5
  401044:	004002fd 	.word	0x004002fd
  401048:	00402ed8 	.word	0x00402ed8
  40104c:	00402a09 	.word	0x00402a09

00401050 <vQueueAddToRegistry>:
    {
  401050:	b570      	push	{r4, r5, r6, lr}
  401052:	460d      	mov	r5, r1
        configASSERT( xQueue );
  401054:	4604      	mov	r4, r0
  401056:	b1b8      	cbz	r0, 401088 <vQueueAddToRegistry+0x38>
        if( pcQueueName != NULL )
  401058:	b1ad      	cbz	r5, 401086 <vQueueAddToRegistry+0x36>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  40105a:	4b12      	ldr	r3, [pc, #72]	; (4010a4 <vQueueAddToRegistry+0x54>)
  40105c:	685b      	ldr	r3, [r3, #4]
  40105e:	429c      	cmp	r4, r3
  401060:	d018      	beq.n	401094 <vQueueAddToRegistry+0x44>
  401062:	4a10      	ldr	r2, [pc, #64]	; (4010a4 <vQueueAddToRegistry+0x54>)
  401064:	2100      	movs	r1, #0
  401066:	460b      	mov	r3, r1
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  401068:	4616      	mov	r6, r2
  40106a:	b1a9      	cbz	r1, 401098 <vQueueAddToRegistry+0x48>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40106c:	3301      	adds	r3, #1
  40106e:	2b08      	cmp	r3, #8
  401070:	d006      	beq.n	401080 <vQueueAddToRegistry+0x30>
  401072:	3208      	adds	r2, #8
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  401074:	6850      	ldr	r0, [r2, #4]
  401076:	4284      	cmp	r4, r0
  401078:	d1f7      	bne.n	40106a <vQueueAddToRegistry+0x1a>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  40107a:	490a      	ldr	r1, [pc, #40]	; (4010a4 <vQueueAddToRegistry+0x54>)
  40107c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
        if( pxEntryToWrite != NULL )
  401080:	b109      	cbz	r1, 401086 <vQueueAddToRegistry+0x36>
            pxEntryToWrite->pcQueueName = pcQueueName;
  401082:	600d      	str	r5, [r1, #0]
            pxEntryToWrite->xHandle = xQueue;
  401084:	604c      	str	r4, [r1, #4]
  401086:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( xQueue );
  401088:	f640 21c8 	movw	r1, #2760	; 0xac8
  40108c:	4806      	ldr	r0, [pc, #24]	; (4010a8 <vQueueAddToRegistry+0x58>)
  40108e:	4b07      	ldr	r3, [pc, #28]	; (4010ac <vQueueAddToRegistry+0x5c>)
  401090:	4798      	blx	r3
  401092:	e7e1      	b.n	401058 <vQueueAddToRegistry+0x8>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  401094:	2300      	movs	r3, #0
  401096:	e7f0      	b.n	40107a <vQueueAddToRegistry+0x2a>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  401098:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  40109c:	2800      	cmp	r0, #0
  40109e:	bf08      	it	eq
  4010a0:	4611      	moveq	r1, r2
  4010a2:	e7e3      	b.n	40106c <vQueueAddToRegistry+0x1c>
  4010a4:	20000604 	.word	0x20000604
  4010a8:	00402ed8 	.word	0x00402ed8
  4010ac:	00402a09 	.word	0x00402a09

004010b0 <vQueueWaitForMessageRestricted>:
    {
  4010b0:	b570      	push	{r4, r5, r6, lr}
  4010b2:	4604      	mov	r4, r0
  4010b4:	460d      	mov	r5, r1
  4010b6:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
  4010b8:	4b11      	ldr	r3, [pc, #68]	; (401100 <vQueueWaitForMessageRestricted+0x50>)
  4010ba:	4798      	blx	r3
  4010bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4010c0:	b25b      	sxtb	r3, r3
  4010c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010c6:	bf04      	itt	eq
  4010c8:	2300      	moveq	r3, #0
  4010ca:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  4010ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4010d2:	b25b      	sxtb	r3, r3
  4010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010d8:	bf04      	itt	eq
  4010da:	2300      	moveq	r3, #0
  4010dc:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  4010e0:	4b08      	ldr	r3, [pc, #32]	; (401104 <vQueueWaitForMessageRestricted+0x54>)
  4010e2:	4798      	blx	r3
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4010e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010e6:	b11b      	cbz	r3, 4010f0 <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
  4010e8:	4620      	mov	r0, r4
  4010ea:	4b07      	ldr	r3, [pc, #28]	; (401108 <vQueueWaitForMessageRestricted+0x58>)
  4010ec:	4798      	blx	r3
  4010ee:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4010f0:	4632      	mov	r2, r6
  4010f2:	4629      	mov	r1, r5
  4010f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010f8:	4b04      	ldr	r3, [pc, #16]	; (40110c <vQueueWaitForMessageRestricted+0x5c>)
  4010fa:	4798      	blx	r3
  4010fc:	e7f4      	b.n	4010e8 <vQueueWaitForMessageRestricted+0x38>
  4010fe:	bf00      	nop
  401100:	004002b5 	.word	0x004002b5
  401104:	004002fd 	.word	0x004002fd
  401108:	004009c9 	.word	0x004009c9
  40110c:	00401a1d 	.word	0x00401a1d

00401110 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401110:	4b07      	ldr	r3, [pc, #28]	; (401130 <prvResetNextTaskUnblockTime+0x20>)
  401112:	681b      	ldr	r3, [r3, #0]
  401114:	681b      	ldr	r3, [r3, #0]
  401116:	b133      	cbz	r3, 401126 <prvResetNextTaskUnblockTime+0x16>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  401118:	4b05      	ldr	r3, [pc, #20]	; (401130 <prvResetNextTaskUnblockTime+0x20>)
  40111a:	681b      	ldr	r3, [r3, #0]
  40111c:	68db      	ldr	r3, [r3, #12]
  40111e:	681a      	ldr	r2, [r3, #0]
  401120:	4b04      	ldr	r3, [pc, #16]	; (401134 <prvResetNextTaskUnblockTime+0x24>)
  401122:	601a      	str	r2, [r3, #0]
  401124:	4770      	bx	lr
        xNextTaskUnblockTime = portMAX_DELAY;
  401126:	f04f 32ff 	mov.w	r2, #4294967295
  40112a:	4b02      	ldr	r3, [pc, #8]	; (401134 <prvResetNextTaskUnblockTime+0x24>)
  40112c:	601a      	str	r2, [r3, #0]
  40112e:	4770      	bx	lr
  401130:	2000048c 	.word	0x2000048c
  401134:	20000574 	.word	0x20000574

00401138 <prvIdleTask>:
{
  401138:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40113a:	4d16      	ldr	r5, [pc, #88]	; (401194 <prvIdleTask+0x5c>)
                taskENTER_CRITICAL();
  40113c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4011ac <prvIdleTask+0x74>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401140:	4f15      	ldr	r7, [pc, #84]	; (401198 <prvIdleTask+0x60>)
                    taskYIELD();
  401142:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4011b0 <prvIdleTask+0x78>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401146:	682b      	ldr	r3, [r5, #0]
  401148:	b1bb      	cbz	r3, 40117a <prvIdleTask+0x42>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40114a:	4e14      	ldr	r6, [pc, #80]	; (40119c <prvIdleTask+0x64>)
                taskENTER_CRITICAL();
  40114c:	47c0      	blx	r8
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40114e:	68fb      	ldr	r3, [r7, #12]
  401150:	68dc      	ldr	r4, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401152:	1d20      	adds	r0, r4, #4
  401154:	47b0      	blx	r6
                    --uxCurrentNumberOfTasks;
  401156:	4a12      	ldr	r2, [pc, #72]	; (4011a0 <prvIdleTask+0x68>)
  401158:	6813      	ldr	r3, [r2, #0]
  40115a:	3b01      	subs	r3, #1
  40115c:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
  40115e:	682b      	ldr	r3, [r5, #0]
  401160:	3b01      	subs	r3, #1
  401162:	602b      	str	r3, [r5, #0]
                taskEXIT_CRITICAL();
  401164:	4b0f      	ldr	r3, [pc, #60]	; (4011a4 <prvIdleTask+0x6c>)
  401166:	4798      	blx	r3
                vPortFreeStack( pxTCB->pxStack );
  401168:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40116a:	f8df a048 	ldr.w	sl, [pc, #72]	; 4011b4 <prvIdleTask+0x7c>
  40116e:	47d0      	blx	sl
                vPortFree( pxTCB );
  401170:	4620      	mov	r0, r4
  401172:	47d0      	blx	sl
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401174:	682b      	ldr	r3, [r5, #0]
  401176:	2b00      	cmp	r3, #0
  401178:	d1e8      	bne.n	40114c <prvIdleTask+0x14>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40117a:	4b0b      	ldr	r3, [pc, #44]	; (4011a8 <prvIdleTask+0x70>)
  40117c:	681b      	ldr	r3, [r3, #0]
  40117e:	2b01      	cmp	r3, #1
  401180:	d9e1      	bls.n	401146 <prvIdleTask+0xe>
                    taskYIELD();
  401182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401186:	f8c9 3000 	str.w	r3, [r9]
  40118a:	f3bf 8f4f 	dsb	sy
  40118e:	f3bf 8f6f 	isb	sy
  401192:	e7d8      	b.n	401146 <prvIdleTask+0xe>
  401194:	20000538 	.word	0x20000538
  401198:	200005ac 	.word	0x200005ac
  40119c:	004001b5 	.word	0x004001b5
  4011a0:	20000534 	.word	0x20000534
  4011a4:	004002fd 	.word	0x004002fd
  4011a8:	20000494 	.word	0x20000494
  4011ac:	004002b5 	.word	0x004002b5
  4011b0:	e000ed04 	.word	0xe000ed04
  4011b4:	004006c5 	.word	0x004006c5

004011b8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
  4011b8:	b570      	push	{r4, r5, r6, lr}
  4011ba:	4604      	mov	r4, r0
  4011bc:	460e      	mov	r6, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
  4011be:	4b24      	ldr	r3, [pc, #144]	; (401250 <prvAddCurrentTaskToDelayedList+0x98>)
  4011c0:	681d      	ldr	r5, [r3, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4011c2:	4b24      	ldr	r3, [pc, #144]	; (401254 <prvAddCurrentTaskToDelayedList+0x9c>)
  4011c4:	6818      	ldr	r0, [r3, #0]
  4011c6:	3004      	adds	r0, #4
  4011c8:	4b23      	ldr	r3, [pc, #140]	; (401258 <prvAddCurrentTaskToDelayedList+0xa0>)
  4011ca:	4798      	blx	r3
  4011cc:	b948      	cbnz	r0, 4011e2 <prvAddCurrentTaskToDelayedList+0x2a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  4011ce:	4b21      	ldr	r3, [pc, #132]	; (401254 <prvAddCurrentTaskToDelayedList+0x9c>)
  4011d0:	681a      	ldr	r2, [r3, #0]
  4011d2:	4922      	ldr	r1, [pc, #136]	; (40125c <prvAddCurrentTaskToDelayedList+0xa4>)
  4011d4:	680b      	ldr	r3, [r1, #0]
  4011d6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4011d8:	2201      	movs	r2, #1
  4011da:	4082      	lsls	r2, r0
  4011dc:	ea23 0302 	bic.w	r3, r3, r2
  4011e0:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4011e2:	f1b4 3fff 	cmp.w	r4, #4294967295
  4011e6:	d013      	beq.n	401210 <prvAddCurrentTaskToDelayedList+0x58>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
  4011e8:	442c      	add	r4, r5

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  4011ea:	4b1a      	ldr	r3, [pc, #104]	; (401254 <prvAddCurrentTaskToDelayedList+0x9c>)
  4011ec:	681b      	ldr	r3, [r3, #0]
  4011ee:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
  4011f0:	42a5      	cmp	r5, r4
  4011f2:	d824      	bhi.n	40123e <prvAddCurrentTaskToDelayedList+0x86>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4011f4:	4b1a      	ldr	r3, [pc, #104]	; (401260 <prvAddCurrentTaskToDelayedList+0xa8>)
  4011f6:	6818      	ldr	r0, [r3, #0]
  4011f8:	4b16      	ldr	r3, [pc, #88]	; (401254 <prvAddCurrentTaskToDelayedList+0x9c>)
  4011fa:	6819      	ldr	r1, [r3, #0]
  4011fc:	3104      	adds	r1, #4
  4011fe:	4b19      	ldr	r3, [pc, #100]	; (401264 <prvAddCurrentTaskToDelayedList+0xac>)
  401200:	4798      	blx	r3

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
  401202:	4b19      	ldr	r3, [pc, #100]	; (401268 <prvAddCurrentTaskToDelayedList+0xb0>)
  401204:	681b      	ldr	r3, [r3, #0]
  401206:	429c      	cmp	r4, r3
                    {
                        xNextTaskUnblockTime = xTimeToWake;
  401208:	bf3c      	itt	cc
  40120a:	4b17      	ldrcc	r3, [pc, #92]	; (401268 <prvAddCurrentTaskToDelayedList+0xb0>)
  40120c:	601c      	strcc	r4, [r3, #0]
  40120e:	bd70      	pop	{r4, r5, r6, pc}
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401210:	2e00      	cmp	r6, #0
  401212:	d0e9      	beq.n	4011e8 <prvAddCurrentTaskToDelayedList+0x30>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401214:	4a15      	ldr	r2, [pc, #84]	; (40126c <prvAddCurrentTaskToDelayedList+0xb4>)
  401216:	6851      	ldr	r1, [r2, #4]
  401218:	4b0e      	ldr	r3, [pc, #56]	; (401254 <prvAddCurrentTaskToDelayedList+0x9c>)
  40121a:	6818      	ldr	r0, [r3, #0]
  40121c:	6081      	str	r1, [r0, #8]
  40121e:	6818      	ldr	r0, [r3, #0]
  401220:	688c      	ldr	r4, [r1, #8]
  401222:	60c4      	str	r4, [r0, #12]
  401224:	688c      	ldr	r4, [r1, #8]
  401226:	6818      	ldr	r0, [r3, #0]
  401228:	3004      	adds	r0, #4
  40122a:	6060      	str	r0, [r4, #4]
  40122c:	6818      	ldr	r0, [r3, #0]
  40122e:	3004      	adds	r0, #4
  401230:	6088      	str	r0, [r1, #8]
  401232:	681b      	ldr	r3, [r3, #0]
  401234:	615a      	str	r2, [r3, #20]
  401236:	6813      	ldr	r3, [r2, #0]
  401238:	3301      	adds	r3, #1
  40123a:	6013      	str	r3, [r2, #0]
  40123c:	bd70      	pop	{r4, r5, r6, pc}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40123e:	4b0c      	ldr	r3, [pc, #48]	; (401270 <prvAddCurrentTaskToDelayedList+0xb8>)
  401240:	6818      	ldr	r0, [r3, #0]
  401242:	4b04      	ldr	r3, [pc, #16]	; (401254 <prvAddCurrentTaskToDelayedList+0x9c>)
  401244:	6819      	ldr	r1, [r3, #0]
  401246:	3104      	adds	r1, #4
  401248:	4b06      	ldr	r3, [pc, #24]	; (401264 <prvAddCurrentTaskToDelayedList+0xac>)
  40124a:	4798      	blx	r3
  40124c:	bd70      	pop	{r4, r5, r6, pc}
  40124e:	bf00      	nop
  401250:	200005c0 	.word	0x200005c0
  401254:	20000488 	.word	0x20000488
  401258:	004001b5 	.word	0x004001b5
  40125c:	20000544 	.word	0x20000544
  401260:	2000048c 	.word	0x2000048c
  401264:	00400181 	.word	0x00400181
  401268:	20000574 	.word	0x20000574
  40126c:	20000598 	.word	0x20000598
  401270:	20000490 	.word	0x20000490

00401274 <xTaskCreate>:
    {
  401274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401278:	b083      	sub	sp, #12
  40127a:	4683      	mov	fp, r0
  40127c:	460e      	mov	r6, r1
  40127e:	9301      	str	r3, [sp, #4]
  401280:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401282:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  401286:	0097      	lsls	r7, r2, #2
  401288:	4638      	mov	r0, r7
  40128a:	4b6e      	ldr	r3, [pc, #440]	; (401444 <xTaskCreate+0x1d0>)
  40128c:	4798      	blx	r3
                if( pxStack != NULL )
  40128e:	2800      	cmp	r0, #0
  401290:	f000 80a5 	beq.w	4013de <xTaskCreate+0x16a>
  401294:	4680      	mov	r8, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  401296:	2064      	movs	r0, #100	; 0x64
  401298:	4b6a      	ldr	r3, [pc, #424]	; (401444 <xTaskCreate+0x1d0>)
  40129a:	4798      	blx	r3
                    if( pxNewTCB != NULL )
  40129c:	4604      	mov	r4, r0
  40129e:	2800      	cmp	r0, #0
  4012a0:	f000 809a 	beq.w	4013d8 <xTaskCreate+0x164>
                        pxNewTCB->pxStack = pxStack;
  4012a4:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  4012a8:	463a      	mov	r2, r7
  4012aa:	21a5      	movs	r1, #165	; 0xa5
  4012ac:	4640      	mov	r0, r8
  4012ae:	4b66      	ldr	r3, [pc, #408]	; (401448 <xTaskCreate+0x1d4>)
  4012b0:	4798      	blx	r3
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  4012b2:	3f04      	subs	r7, #4
  4012b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4012b6:	441f      	add	r7, r3
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  4012b8:	f027 0707 	bic.w	r7, r7, #7
    if( pcName != NULL )
  4012bc:	2e00      	cmp	r6, #0
  4012be:	f000 8091 	beq.w	4013e4 <xTaskCreate+0x170>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4012c2:	7833      	ldrb	r3, [r6, #0]
  4012c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            if( pcName[ x ] == ( char ) 0x00 )
  4012c8:	7833      	ldrb	r3, [r6, #0]
  4012ca:	b15b      	cbz	r3, 4012e4 <xTaskCreate+0x70>
  4012cc:	4633      	mov	r3, r6
  4012ce:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4012d2:	3613      	adds	r6, #19
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4012d4:	7859      	ldrb	r1, [r3, #1]
  4012d6:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
  4012da:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4012de:	b109      	cbz	r1, 4012e4 <xTaskCreate+0x70>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4012e0:	42b3      	cmp	r3, r6
  4012e2:	d1f7      	bne.n	4012d4 <xTaskCreate+0x60>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4012e4:	2300      	movs	r3, #0
  4012e6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    configASSERT( uxPriority < configMAX_PRIORITIES );
  4012ea:	2d07      	cmp	r5, #7
  4012ec:	d87e      	bhi.n	4013ec <xTaskCreate+0x178>
  4012ee:	2d07      	cmp	r5, #7
  4012f0:	bf28      	it	cs
  4012f2:	2507      	movcs	r5, #7
    pxNewTCB->uxPriority = uxPriority;
  4012f4:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
  4012f6:	64a5      	str	r5, [r4, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
  4012f8:	2600      	movs	r6, #0
  4012fa:	64e6      	str	r6, [r4, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  4012fc:	f104 0804 	add.w	r8, r4, #4
  401300:	4640      	mov	r0, r8
  401302:	f8df 919c 	ldr.w	r9, [pc, #412]	; 4014a0 <xTaskCreate+0x22c>
  401306:	47c8      	blx	r9
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401308:	f104 0018 	add.w	r0, r4, #24
  40130c:	47c8      	blx	r9
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40130e:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401310:	f1c5 0508 	rsb	r5, r5, #8
  401314:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401316:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
  401318:	6526      	str	r6, [r4, #80]	; 0x50
  40131a:	6566      	str	r6, [r4, #84]	; 0x54
  40131c:	65a6      	str	r6, [r4, #88]	; 0x58
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
  40131e:	65e6      	str	r6, [r4, #92]	; 0x5c
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
  401320:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401324:	9a01      	ldr	r2, [sp, #4]
  401326:	4659      	mov	r1, fp
  401328:	4638      	mov	r0, r7
  40132a:	4b48      	ldr	r3, [pc, #288]	; (40144c <xTaskCreate+0x1d8>)
  40132c:	4798      	blx	r3
  40132e:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
  401330:	f1ba 0f00 	cmp.w	sl, #0
  401334:	d001      	beq.n	40133a <xTaskCreate+0xc6>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401336:	f8ca 4000 	str.w	r4, [sl]
    taskENTER_CRITICAL();
  40133a:	4b45      	ldr	r3, [pc, #276]	; (401450 <xTaskCreate+0x1dc>)
  40133c:	4798      	blx	r3
        uxCurrentNumberOfTasks++;
  40133e:	4a45      	ldr	r2, [pc, #276]	; (401454 <xTaskCreate+0x1e0>)
  401340:	6813      	ldr	r3, [r2, #0]
  401342:	3301      	adds	r3, #1
  401344:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
  401346:	4b44      	ldr	r3, [pc, #272]	; (401458 <xTaskCreate+0x1e4>)
  401348:	681b      	ldr	r3, [r3, #0]
  40134a:	2b00      	cmp	r3, #0
  40134c:	d054      	beq.n	4013f8 <xTaskCreate+0x184>
            if( xSchedulerRunning == pdFALSE )
  40134e:	4b43      	ldr	r3, [pc, #268]	; (40145c <xTaskCreate+0x1e8>)
  401350:	681b      	ldr	r3, [r3, #0]
  401352:	b93b      	cbnz	r3, 401364 <xTaskCreate+0xf0>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401354:	4b40      	ldr	r3, [pc, #256]	; (401458 <xTaskCreate+0x1e4>)
  401356:	681b      	ldr	r3, [r3, #0]
  401358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40135a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40135c:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
  40135e:	bf9c      	itt	ls
  401360:	4b3d      	ldrls	r3, [pc, #244]	; (401458 <xTaskCreate+0x1e4>)
  401362:	601c      	strls	r4, [r3, #0]
        uxTaskNumber++;
  401364:	4a3e      	ldr	r2, [pc, #248]	; (401460 <xTaskCreate+0x1ec>)
  401366:	6813      	ldr	r3, [r2, #0]
  401368:	3301      	adds	r3, #1
  40136a:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
  40136c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40136e:	493d      	ldr	r1, [pc, #244]	; (401464 <xTaskCreate+0x1f0>)
  401370:	6808      	ldr	r0, [r1, #0]
  401372:	2201      	movs	r2, #1
  401374:	409a      	lsls	r2, r3
  401376:	4302      	orrs	r2, r0
  401378:	600a      	str	r2, [r1, #0]
  40137a:	4a3b      	ldr	r2, [pc, #236]	; (401468 <xTaskCreate+0x1f4>)
  40137c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401380:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401384:	685b      	ldr	r3, [r3, #4]
  401386:	60a3      	str	r3, [r4, #8]
  401388:	6899      	ldr	r1, [r3, #8]
  40138a:	60e1      	str	r1, [r4, #12]
  40138c:	6899      	ldr	r1, [r3, #8]
  40138e:	f8c1 8004 	str.w	r8, [r1, #4]
  401392:	f8c3 8008 	str.w	r8, [r3, #8]
  401396:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401398:	0083      	lsls	r3, r0, #2
  40139a:	1819      	adds	r1, r3, r0
  40139c:	0089      	lsls	r1, r1, #2
  40139e:	1855      	adds	r5, r2, r1
  4013a0:	6165      	str	r5, [r4, #20]
  4013a2:	5851      	ldr	r1, [r2, r1]
  4013a4:	3101      	adds	r1, #1
  4013a6:	4403      	add	r3, r0
  4013a8:	009b      	lsls	r3, r3, #2
  4013aa:	50d1      	str	r1, [r2, r3]
    taskEXIT_CRITICAL();
  4013ac:	4b2f      	ldr	r3, [pc, #188]	; (40146c <xTaskCreate+0x1f8>)
  4013ae:	4798      	blx	r3
    if( xSchedulerRunning != pdFALSE )
  4013b0:	4b2a      	ldr	r3, [pc, #168]	; (40145c <xTaskCreate+0x1e8>)
  4013b2:	681b      	ldr	r3, [r3, #0]
  4013b4:	2b00      	cmp	r3, #0
  4013b6:	d03f      	beq.n	401438 <xTaskCreate+0x1c4>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4013b8:	4b27      	ldr	r3, [pc, #156]	; (401458 <xTaskCreate+0x1e4>)
  4013ba:	681b      	ldr	r3, [r3, #0]
  4013bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4013be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4013c0:	429a      	cmp	r2, r3
  4013c2:	d23d      	bcs.n	401440 <xTaskCreate+0x1cc>
            taskYIELD_IF_USING_PREEMPTION();
  4013c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013c8:	4b29      	ldr	r3, [pc, #164]	; (401470 <xTaskCreate+0x1fc>)
  4013ca:	601a      	str	r2, [r3, #0]
  4013cc:	f3bf 8f4f 	dsb	sy
  4013d0:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
  4013d4:	2001      	movs	r0, #1
  4013d6:	e030      	b.n	40143a <xTaskCreate+0x1c6>
                        vPortFreeStack( pxStack );
  4013d8:	4640      	mov	r0, r8
  4013da:	4b26      	ldr	r3, [pc, #152]	; (401474 <xTaskCreate+0x200>)
  4013dc:	4798      	blx	r3
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4013de:	f04f 30ff 	mov.w	r0, #4294967295
  4013e2:	e02a      	b.n	40143a <xTaskCreate+0x1c6>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
  4013e4:	2300      	movs	r3, #0
  4013e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  4013ea:	e77e      	b.n	4012ea <xTaskCreate+0x76>
    configASSERT( uxPriority < configMAX_PRIORITIES );
  4013ec:	f240 3197 	movw	r1, #919	; 0x397
  4013f0:	4821      	ldr	r0, [pc, #132]	; (401478 <xTaskCreate+0x204>)
  4013f2:	4b22      	ldr	r3, [pc, #136]	; (40147c <xTaskCreate+0x208>)
  4013f4:	4798      	blx	r3
  4013f6:	e77a      	b.n	4012ee <xTaskCreate+0x7a>
            pxCurrentTCB = pxNewTCB;
  4013f8:	4b17      	ldr	r3, [pc, #92]	; (401458 <xTaskCreate+0x1e4>)
  4013fa:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4013fc:	6813      	ldr	r3, [r2, #0]
  4013fe:	2b01      	cmp	r3, #1
  401400:	d1b0      	bne.n	401364 <xTaskCreate+0xf0>
  401402:	4d19      	ldr	r5, [pc, #100]	; (401468 <xTaskCreate+0x1f4>)
  401404:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401408:	4e1d      	ldr	r6, [pc, #116]	; (401480 <xTaskCreate+0x20c>)
  40140a:	4628      	mov	r0, r5
  40140c:	47b0      	blx	r6
  40140e:	3514      	adds	r5, #20
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401410:	42af      	cmp	r7, r5
  401412:	d1fa      	bne.n	40140a <xTaskCreate+0x196>
    vListInitialise( &xDelayedTaskList1 );
  401414:	4f1b      	ldr	r7, [pc, #108]	; (401484 <xTaskCreate+0x210>)
  401416:	4638      	mov	r0, r7
  401418:	4d19      	ldr	r5, [pc, #100]	; (401480 <xTaskCreate+0x20c>)
  40141a:	47a8      	blx	r5
    vListInitialise( &xDelayedTaskList2 );
  40141c:	4e1a      	ldr	r6, [pc, #104]	; (401488 <xTaskCreate+0x214>)
  40141e:	4630      	mov	r0, r6
  401420:	47a8      	blx	r5
    vListInitialise( &xPendingReadyList );
  401422:	481a      	ldr	r0, [pc, #104]	; (40148c <xTaskCreate+0x218>)
  401424:	47a8      	blx	r5
            vListInitialise( &xTasksWaitingTermination );
  401426:	481a      	ldr	r0, [pc, #104]	; (401490 <xTaskCreate+0x21c>)
  401428:	47a8      	blx	r5
            vListInitialise( &xSuspendedTaskList );
  40142a:	481a      	ldr	r0, [pc, #104]	; (401494 <xTaskCreate+0x220>)
  40142c:	47a8      	blx	r5
    pxDelayedTaskList = &xDelayedTaskList1;
  40142e:	4b1a      	ldr	r3, [pc, #104]	; (401498 <xTaskCreate+0x224>)
  401430:	601f      	str	r7, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401432:	4b1a      	ldr	r3, [pc, #104]	; (40149c <xTaskCreate+0x228>)
  401434:	601e      	str	r6, [r3, #0]
  401436:	e795      	b.n	401364 <xTaskCreate+0xf0>
            xReturn = pdPASS;
  401438:	2001      	movs	r0, #1
    }
  40143a:	b003      	add	sp, #12
  40143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            xReturn = pdPASS;
  401440:	2001      	movs	r0, #1
        return xReturn;
  401442:	e7fa      	b.n	40143a <xTaskCreate+0x1c6>
  401444:	004005d1 	.word	0x004005d1
  401448:	00402be1 	.word	0x00402be1
  40144c:	0040025d 	.word	0x0040025d
  401450:	004002b5 	.word	0x004002b5
  401454:	20000534 	.word	0x20000534
  401458:	20000488 	.word	0x20000488
  40145c:	20000594 	.word	0x20000594
  401460:	20000540 	.word	0x20000540
  401464:	20000544 	.word	0x20000544
  401468:	20000494 	.word	0x20000494
  40146c:	004002fd 	.word	0x004002fd
  401470:	e000ed04 	.word	0xe000ed04
  401474:	004006c5 	.word	0x004006c5
  401478:	00402ef0 	.word	0x00402ef0
  40147c:	00402a09 	.word	0x00402a09
  401480:	00400165 	.word	0x00400165
  401484:	20000548 	.word	0x20000548
  401488:	2000055c 	.word	0x2000055c
  40148c:	20000580 	.word	0x20000580
  401490:	200005ac 	.word	0x200005ac
  401494:	20000598 	.word	0x20000598
  401498:	2000048c 	.word	0x2000048c
  40149c:	20000490 	.word	0x20000490
  4014a0:	0040017b 	.word	0x0040017b

004014a4 <vTaskStartScheduler>:
{
  4014a4:	b510      	push	{r4, lr}
  4014a6:	b082      	sub	sp, #8
            xReturn = xTaskCreate( prvIdleTask,
  4014a8:	4b18      	ldr	r3, [pc, #96]	; (40150c <vTaskStartScheduler+0x68>)
  4014aa:	9301      	str	r3, [sp, #4]
  4014ac:	2300      	movs	r3, #0
  4014ae:	9300      	str	r3, [sp, #0]
  4014b0:	2282      	movs	r2, #130	; 0x82
  4014b2:	4917      	ldr	r1, [pc, #92]	; (401510 <vTaskStartScheduler+0x6c>)
  4014b4:	4817      	ldr	r0, [pc, #92]	; (401514 <vTaskStartScheduler+0x70>)
  4014b6:	4c18      	ldr	r4, [pc, #96]	; (401518 <vTaskStartScheduler+0x74>)
  4014b8:	47a0      	blx	r4
            if( xReturn == pdPASS )
  4014ba:	2801      	cmp	r0, #1
  4014bc:	d006      	beq.n	4014cc <vTaskStartScheduler+0x28>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4014be:	f1b0 3fff 	cmp.w	r0, #4294967295
  4014c2:	d01c      	beq.n	4014fe <vTaskStartScheduler+0x5a>
    ( void ) uxTopUsedPriority;
  4014c4:	4b15      	ldr	r3, [pc, #84]	; (40151c <vTaskStartScheduler+0x78>)
  4014c6:	681b      	ldr	r3, [r3, #0]
}
  4014c8:	b002      	add	sp, #8
  4014ca:	bd10      	pop	{r4, pc}
                xReturn = xTimerCreateTimerTask();
  4014cc:	4b14      	ldr	r3, [pc, #80]	; (401520 <vTaskStartScheduler+0x7c>)
  4014ce:	4798      	blx	r3
    if( xReturn == pdPASS )
  4014d0:	2801      	cmp	r0, #1
  4014d2:	d1f4      	bne.n	4014be <vTaskStartScheduler+0x1a>
        __asm volatile
  4014d4:	f04f 0350 	mov.w	r3, #80	; 0x50
  4014d8:	f383 8811 	msr	BASEPRI, r3
  4014dc:	f3bf 8f6f 	isb	sy
  4014e0:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
  4014e4:	f04f 32ff 	mov.w	r2, #4294967295
  4014e8:	4b0e      	ldr	r3, [pc, #56]	; (401524 <vTaskStartScheduler+0x80>)
  4014ea:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
  4014ec:	2201      	movs	r2, #1
  4014ee:	4b0e      	ldr	r3, [pc, #56]	; (401528 <vTaskStartScheduler+0x84>)
  4014f0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  4014f2:	2200      	movs	r2, #0
  4014f4:	4b0d      	ldr	r3, [pc, #52]	; (40152c <vTaskStartScheduler+0x88>)
  4014f6:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
  4014f8:	4b0d      	ldr	r3, [pc, #52]	; (401530 <vTaskStartScheduler+0x8c>)
  4014fa:	4798      	blx	r3
  4014fc:	e7e2      	b.n	4014c4 <vTaskStartScheduler+0x20>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4014fe:	f44f 6104 	mov.w	r1, #2112	; 0x840
  401502:	480c      	ldr	r0, [pc, #48]	; (401534 <vTaskStartScheduler+0x90>)
  401504:	4b0c      	ldr	r3, [pc, #48]	; (401538 <vTaskStartScheduler+0x94>)
  401506:	4798      	blx	r3
  401508:	e7dc      	b.n	4014c4 <vTaskStartScheduler+0x20>
  40150a:	bf00      	nop
  40150c:	20000570 	.word	0x20000570
  401510:	00402f08 	.word	0x00402f08
  401514:	00401139 	.word	0x00401139
  401518:	00401275 	.word	0x00401275
  40151c:	20000004 	.word	0x20000004
  401520:	0040205d 	.word	0x0040205d
  401524:	20000574 	.word	0x20000574
  401528:	20000594 	.word	0x20000594
  40152c:	200005c0 	.word	0x200005c0
  401530:	004003fd 	.word	0x004003fd
  401534:	00402ef0 	.word	0x00402ef0
  401538:	00402a09 	.word	0x00402a09

0040153c <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
  40153c:	4a02      	ldr	r2, [pc, #8]	; (401548 <vTaskSuspendAll+0xc>)
  40153e:	6813      	ldr	r3, [r2, #0]
  401540:	3301      	adds	r3, #1
  401542:	6013      	str	r3, [r2, #0]
    portMEMORY_BARRIER();
  401544:	4770      	bx	lr
  401546:	bf00      	nop
  401548:	2000053c 	.word	0x2000053c

0040154c <xTaskGetTickCount>:
        xTicks = xTickCount;
  40154c:	4b01      	ldr	r3, [pc, #4]	; (401554 <xTaskGetTickCount+0x8>)
  40154e:	6818      	ldr	r0, [r3, #0]
}
  401550:	4770      	bx	lr
  401552:	bf00      	nop
  401554:	200005c0 	.word	0x200005c0

00401558 <xTaskIncrementTick>:
{
  401558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40155c:	4b5f      	ldr	r3, [pc, #380]	; (4016dc <xTaskIncrementTick+0x184>)
  40155e:	681b      	ldr	r3, [r3, #0]
  401560:	2b00      	cmp	r3, #0
  401562:	f040 80b3 	bne.w	4016cc <xTaskIncrementTick+0x174>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  401566:	4b5e      	ldr	r3, [pc, #376]	; (4016e0 <xTaskIncrementTick+0x188>)
  401568:	681c      	ldr	r4, [r3, #0]
  40156a:	f104 0b01 	add.w	fp, r4, #1
        xTickCount = xConstTickCount;
  40156e:	f8c3 b000 	str.w	fp, [r3]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401572:	f1bb 0f00 	cmp.w	fp, #0
  401576:	d10f      	bne.n	401598 <xTaskIncrementTick+0x40>
            taskSWITCH_DELAYED_LISTS();
  401578:	4b5a      	ldr	r3, [pc, #360]	; (4016e4 <xTaskIncrementTick+0x18c>)
  40157a:	681b      	ldr	r3, [r3, #0]
  40157c:	681b      	ldr	r3, [r3, #0]
  40157e:	bb13      	cbnz	r3, 4015c6 <xTaskIncrementTick+0x6e>
  401580:	4a58      	ldr	r2, [pc, #352]	; (4016e4 <xTaskIncrementTick+0x18c>)
  401582:	6811      	ldr	r1, [r2, #0]
  401584:	4b58      	ldr	r3, [pc, #352]	; (4016e8 <xTaskIncrementTick+0x190>)
  401586:	6818      	ldr	r0, [r3, #0]
  401588:	6010      	str	r0, [r2, #0]
  40158a:	6019      	str	r1, [r3, #0]
  40158c:	4a57      	ldr	r2, [pc, #348]	; (4016ec <xTaskIncrementTick+0x194>)
  40158e:	6813      	ldr	r3, [r2, #0]
  401590:	3301      	adds	r3, #1
  401592:	6013      	str	r3, [r2, #0]
  401594:	4b56      	ldr	r3, [pc, #344]	; (4016f0 <xTaskIncrementTick+0x198>)
  401596:	4798      	blx	r3
        if( xConstTickCount >= xNextTaskUnblockTime )
  401598:	4b56      	ldr	r3, [pc, #344]	; (4016f4 <xTaskIncrementTick+0x19c>)
  40159a:	681b      	ldr	r3, [r3, #0]
  40159c:	459b      	cmp	fp, r3
  40159e:	d218      	bcs.n	4015d2 <xTaskIncrementTick+0x7a>
    BaseType_t xSwitchRequired = pdFALSE;
  4015a0:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4015a2:	4b55      	ldr	r3, [pc, #340]	; (4016f8 <xTaskIncrementTick+0x1a0>)
  4015a4:	681b      	ldr	r3, [r3, #0]
  4015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4015ac:	009b      	lsls	r3, r3, #2
  4015ae:	4a53      	ldr	r2, [pc, #332]	; (4016fc <xTaskIncrementTick+0x1a4>)
  4015b0:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
  4015b2:	2b02      	cmp	r3, #2
  4015b4:	bf28      	it	cs
  4015b6:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
  4015b8:	4b51      	ldr	r3, [pc, #324]	; (401700 <xTaskIncrementTick+0x1a8>)
  4015ba:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
  4015bc:	2b00      	cmp	r3, #0
  4015be:	bf18      	it	ne
  4015c0:	2001      	movne	r0, #1
  4015c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
  4015c6:	f640 21c7 	movw	r1, #2759	; 0xac7
  4015ca:	484e      	ldr	r0, [pc, #312]	; (401704 <xTaskIncrementTick+0x1ac>)
  4015cc:	4b4e      	ldr	r3, [pc, #312]	; (401708 <xTaskIncrementTick+0x1b0>)
  4015ce:	4798      	blx	r3
  4015d0:	e7d6      	b.n	401580 <xTaskIncrementTick+0x28>
  4015d2:	2000      	movs	r0, #0
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015d4:	4943      	ldr	r1, [pc, #268]	; (4016e4 <xTaskIncrementTick+0x18c>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  4015d6:	4607      	mov	r7, r0
                    prvAddTaskToReadyList( pxTCB );
  4015d8:	4d4c      	ldr	r5, [pc, #304]	; (40170c <xTaskIncrementTick+0x1b4>)
  4015da:	f04f 0e01 	mov.w	lr, #1
  4015de:	4a47      	ldr	r2, [pc, #284]	; (4016fc <xTaskIncrementTick+0x1a4>)
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4015e0:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4016f8 <xTaskIncrementTick+0x1a0>
  4015e4:	e036      	b.n	401654 <xTaskIncrementTick+0xfc>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4015e6:	f04f 32ff 	mov.w	r2, #4294967295
  4015ea:	4b42      	ldr	r3, [pc, #264]	; (4016f4 <xTaskIncrementTick+0x19c>)
  4015ec:	601a      	str	r2, [r3, #0]
                    break;
  4015ee:	e7d8      	b.n	4015a2 <xTaskIncrementTick+0x4a>
                        xNextTaskUnblockTime = xItemValue;
  4015f0:	4b40      	ldr	r3, [pc, #256]	; (4016f4 <xTaskIncrementTick+0x19c>)
  4015f2:	601e      	str	r6, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
  4015f4:	e7d5      	b.n	4015a2 <xTaskIncrementTick+0x4a>
                    prvAddTaskToReadyList( pxTCB );
  4015f6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  4015f8:	f8d5 a000 	ldr.w	sl, [r5]
  4015fc:	fa0e f906 	lsl.w	r9, lr, r6
  401600:	ea49 090a 	orr.w	r9, r9, sl
  401604:	f8c5 9000 	str.w	r9, [r5]
  401608:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40160c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  401610:	6876      	ldr	r6, [r6, #4]
  401612:	609e      	str	r6, [r3, #8]
  401614:	68b4      	ldr	r4, [r6, #8]
  401616:	60dc      	str	r4, [r3, #12]
  401618:	68b4      	ldr	r4, [r6, #8]
  40161a:	f8c4 c004 	str.w	ip, [r4, #4]
  40161e:	f8c6 c008 	str.w	ip, [r6, #8]
  401622:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
  401626:	ea4f 0689 	mov.w	r6, r9, lsl #2
  40162a:	eb06 0c09 	add.w	ip, r6, r9
  40162e:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
  401632:	f8c3 a014 	str.w	sl, [r3, #20]
  401636:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
  40163a:	f10c 0c01 	add.w	ip, ip, #1
  40163e:	444e      	add	r6, r9
  401640:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401644:	f8d8 c000 	ldr.w	ip, [r8]
  401648:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  40164a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
  40164e:	429e      	cmp	r6, r3
  401650:	bf28      	it	cs
  401652:	2001      	movcs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401654:	680b      	ldr	r3, [r1, #0]
  401656:	681b      	ldr	r3, [r3, #0]
  401658:	2b00      	cmp	r3, #0
  40165a:	d0c4      	beq.n	4015e6 <xTaskIncrementTick+0x8e>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40165c:	680b      	ldr	r3, [r1, #0]
  40165e:	68db      	ldr	r3, [r3, #12]
  401660:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401662:	685e      	ldr	r6, [r3, #4]
                    if( xConstTickCount < xItemValue )
  401664:	45b3      	cmp	fp, r6
  401666:	d3c3      	bcc.n	4015f0 <xTaskIncrementTick+0x98>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401668:	f8d3 9014 	ldr.w	r9, [r3, #20]
  40166c:	689e      	ldr	r6, [r3, #8]
  40166e:	68dc      	ldr	r4, [r3, #12]
  401670:	60b4      	str	r4, [r6, #8]
  401672:	68de      	ldr	r6, [r3, #12]
  401674:	689c      	ldr	r4, [r3, #8]
  401676:	6074      	str	r4, [r6, #4]
  401678:	f103 0c04 	add.w	ip, r3, #4
  40167c:	f8d9 6004 	ldr.w	r6, [r9, #4]
  401680:	4566      	cmp	r6, ip
  401682:	bf04      	itt	eq
  401684:	68de      	ldreq	r6, [r3, #12]
  401686:	f8c9 6004 	streq.w	r6, [r9, #4]
  40168a:	615f      	str	r7, [r3, #20]
  40168c:	f8d9 6000 	ldr.w	r6, [r9]
  401690:	3e01      	subs	r6, #1
  401692:	f8c9 6000 	str.w	r6, [r9]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401696:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
  40169a:	f1b9 0f00 	cmp.w	r9, #0
  40169e:	d0aa      	beq.n	4015f6 <xTaskIncrementTick+0x9e>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  4016a0:	69de      	ldr	r6, [r3, #28]
  4016a2:	6a1c      	ldr	r4, [r3, #32]
  4016a4:	60b4      	str	r4, [r6, #8]
  4016a6:	6a1e      	ldr	r6, [r3, #32]
  4016a8:	69dc      	ldr	r4, [r3, #28]
  4016aa:	6074      	str	r4, [r6, #4]
  4016ac:	f103 0a18 	add.w	sl, r3, #24
  4016b0:	f8d9 6004 	ldr.w	r6, [r9, #4]
  4016b4:	4556      	cmp	r6, sl
  4016b6:	bf04      	itt	eq
  4016b8:	6a1e      	ldreq	r6, [r3, #32]
  4016ba:	f8c9 6004 	streq.w	r6, [r9, #4]
  4016be:	629f      	str	r7, [r3, #40]	; 0x28
  4016c0:	f8d9 6000 	ldr.w	r6, [r9]
  4016c4:	3e01      	subs	r6, #1
  4016c6:	f8c9 6000 	str.w	r6, [r9]
  4016ca:	e794      	b.n	4015f6 <xTaskIncrementTick+0x9e>
        ++xPendedTicks;
  4016cc:	4a10      	ldr	r2, [pc, #64]	; (401710 <xTaskIncrementTick+0x1b8>)
  4016ce:	6813      	ldr	r3, [r2, #0]
  4016d0:	3301      	adds	r3, #1
  4016d2:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
  4016d4:	2000      	movs	r0, #0
}
  4016d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016da:	bf00      	nop
  4016dc:	2000053c 	.word	0x2000053c
  4016e0:	200005c0 	.word	0x200005c0
  4016e4:	2000048c 	.word	0x2000048c
  4016e8:	20000490 	.word	0x20000490
  4016ec:	20000578 	.word	0x20000578
  4016f0:	00401111 	.word	0x00401111
  4016f4:	20000574 	.word	0x20000574
  4016f8:	20000488 	.word	0x20000488
  4016fc:	20000494 	.word	0x20000494
  401700:	200005c4 	.word	0x200005c4
  401704:	00402ef0 	.word	0x00402ef0
  401708:	00402a09 	.word	0x00402a09
  40170c:	20000544 	.word	0x20000544
  401710:	2000057c 	.word	0x2000057c

00401714 <xTaskResumeAll>:
{
  401714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    configASSERT( uxSchedulerSuspended );
  401718:	4b57      	ldr	r3, [pc, #348]	; (401878 <xTaskResumeAll+0x164>)
  40171a:	681b      	ldr	r3, [r3, #0]
  40171c:	2b00      	cmp	r3, #0
  40171e:	d07a      	beq.n	401816 <xTaskResumeAll+0x102>
    taskENTER_CRITICAL();
  401720:	4b56      	ldr	r3, [pc, #344]	; (40187c <xTaskResumeAll+0x168>)
  401722:	4798      	blx	r3
        --uxSchedulerSuspended;
  401724:	4b54      	ldr	r3, [pc, #336]	; (401878 <xTaskResumeAll+0x164>)
  401726:	681a      	ldr	r2, [r3, #0]
  401728:	3a01      	subs	r2, #1
  40172a:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40172c:	681b      	ldr	r3, [r3, #0]
  40172e:	2b00      	cmp	r3, #0
  401730:	f040 809a 	bne.w	401868 <xTaskResumeAll+0x154>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401734:	4b52      	ldr	r3, [pc, #328]	; (401880 <xTaskResumeAll+0x16c>)
  401736:	681b      	ldr	r3, [r3, #0]
  401738:	2b00      	cmp	r3, #0
  40173a:	d072      	beq.n	401822 <xTaskResumeAll+0x10e>
  40173c:	2300      	movs	r3, #0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40173e:	4951      	ldr	r1, [pc, #324]	; (401884 <xTaskResumeAll+0x170>)
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401740:	461c      	mov	r4, r3
                    prvAddTaskToReadyList( pxTCB );
  401742:	4851      	ldr	r0, [pc, #324]	; (401888 <xTaskResumeAll+0x174>)
  401744:	2601      	movs	r6, #1
  401746:	4a51      	ldr	r2, [pc, #324]	; (40188c <xTaskResumeAll+0x178>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401748:	f8df a164 	ldr.w	sl, [pc, #356]	; 4018b0 <xTaskResumeAll+0x19c>
                        xYieldPending = pdTRUE;
  40174c:	f8df e154 	ldr.w	lr, [pc, #340]	; 4018a4 <xTaskResumeAll+0x190>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401750:	680d      	ldr	r5, [r1, #0]
  401752:	2d00      	cmp	r5, #0
  401754:	d067      	beq.n	401826 <xTaskResumeAll+0x112>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401756:	68cb      	ldr	r3, [r1, #12]
  401758:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  40175a:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
  40175e:	69dd      	ldr	r5, [r3, #28]
  401760:	6a1f      	ldr	r7, [r3, #32]
  401762:	60af      	str	r7, [r5, #8]
  401764:	6a1d      	ldr	r5, [r3, #32]
  401766:	69df      	ldr	r7, [r3, #28]
  401768:	606f      	str	r7, [r5, #4]
  40176a:	f103 0818 	add.w	r8, r3, #24
  40176e:	f8dc 5004 	ldr.w	r5, [ip, #4]
  401772:	4545      	cmp	r5, r8
  401774:	bf04      	itt	eq
  401776:	6a1d      	ldreq	r5, [r3, #32]
  401778:	f8cc 5004 	streq.w	r5, [ip, #4]
  40177c:	629c      	str	r4, [r3, #40]	; 0x28
  40177e:	f8dc 5000 	ldr.w	r5, [ip]
  401782:	3d01      	subs	r5, #1
  401784:	f8cc 5000 	str.w	r5, [ip]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401788:	f8d3 c014 	ldr.w	ip, [r3, #20]
  40178c:	689d      	ldr	r5, [r3, #8]
  40178e:	68df      	ldr	r7, [r3, #12]
  401790:	60af      	str	r7, [r5, #8]
  401792:	68dd      	ldr	r5, [r3, #12]
  401794:	689f      	ldr	r7, [r3, #8]
  401796:	606f      	str	r7, [r5, #4]
  401798:	f103 0804 	add.w	r8, r3, #4
  40179c:	f8dc 5004 	ldr.w	r5, [ip, #4]
  4017a0:	4545      	cmp	r5, r8
  4017a2:	bf04      	itt	eq
  4017a4:	68dd      	ldreq	r5, [r3, #12]
  4017a6:	f8cc 5004 	streq.w	r5, [ip, #4]
  4017aa:	615c      	str	r4, [r3, #20]
  4017ac:	f8dc 5000 	ldr.w	r5, [ip]
  4017b0:	3d01      	subs	r5, #1
  4017b2:	f8cc 5000 	str.w	r5, [ip]
                    prvAddTaskToReadyList( pxTCB );
  4017b6:	6add      	ldr	r5, [r3, #44]	; 0x2c
  4017b8:	f8d0 9000 	ldr.w	r9, [r0]
  4017bc:	fa06 fc05 	lsl.w	ip, r6, r5
  4017c0:	ea4c 0c09 	orr.w	ip, ip, r9
  4017c4:	f8c0 c000 	str.w	ip, [r0]
  4017c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4017cc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
  4017d0:	686d      	ldr	r5, [r5, #4]
  4017d2:	609d      	str	r5, [r3, #8]
  4017d4:	68af      	ldr	r7, [r5, #8]
  4017d6:	60df      	str	r7, [r3, #12]
  4017d8:	68af      	ldr	r7, [r5, #8]
  4017da:	f8c7 8004 	str.w	r8, [r7, #4]
  4017de:	f8c5 8008 	str.w	r8, [r5, #8]
  4017e2:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
  4017e6:	ea4f 0588 	mov.w	r5, r8, lsl #2
  4017ea:	eb05 0c08 	add.w	ip, r5, r8
  4017ee:	eb02 098c 	add.w	r9, r2, ip, lsl #2
  4017f2:	f8c3 9014 	str.w	r9, [r3, #20]
  4017f6:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
  4017fa:	f10c 0c01 	add.w	ip, ip, #1
  4017fe:	4445      	add	r5, r8
  401800:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401804:	f8da 5000 	ldr.w	r5, [sl]
  401808:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  40180a:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  40180c:	42af      	cmp	r7, r5
  40180e:	d39f      	bcc.n	401750 <xTaskResumeAll+0x3c>
                        xYieldPending = pdTRUE;
  401810:	f8ce 6000 	str.w	r6, [lr]
  401814:	e79c      	b.n	401750 <xTaskResumeAll+0x3c>
    configASSERT( uxSchedulerSuspended );
  401816:	f640 01b3 	movw	r1, #2227	; 0x8b3
  40181a:	481d      	ldr	r0, [pc, #116]	; (401890 <xTaskResumeAll+0x17c>)
  40181c:	4b1d      	ldr	r3, [pc, #116]	; (401894 <xTaskResumeAll+0x180>)
  40181e:	4798      	blx	r3
  401820:	e77e      	b.n	401720 <xTaskResumeAll+0xc>
    BaseType_t xAlreadyYielded = pdFALSE;
  401822:	2400      	movs	r4, #0
  401824:	e021      	b.n	40186a <xTaskResumeAll+0x156>
                if( pxTCB != NULL )
  401826:	b10b      	cbz	r3, 40182c <xTaskResumeAll+0x118>
                    prvResetNextTaskUnblockTime();
  401828:	4b1b      	ldr	r3, [pc, #108]	; (401898 <xTaskResumeAll+0x184>)
  40182a:	4798      	blx	r3
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
  40182c:	4b1b      	ldr	r3, [pc, #108]	; (40189c <xTaskResumeAll+0x188>)
  40182e:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
  401830:	b16c      	cbz	r4, 40184e <xTaskResumeAll+0x13a>
                            if( xTaskIncrementTick() != pdFALSE )
  401832:	4d1b      	ldr	r5, [pc, #108]	; (4018a0 <xTaskResumeAll+0x18c>)
                                xYieldPending = pdTRUE;
  401834:	4f1b      	ldr	r7, [pc, #108]	; (4018a4 <xTaskResumeAll+0x190>)
  401836:	2601      	movs	r6, #1
  401838:	e001      	b.n	40183e <xTaskResumeAll+0x12a>
                        } while( xPendedCounts > ( TickType_t ) 0U );
  40183a:	3c01      	subs	r4, #1
  40183c:	d004      	beq.n	401848 <xTaskResumeAll+0x134>
                            if( xTaskIncrementTick() != pdFALSE )
  40183e:	47a8      	blx	r5
  401840:	2800      	cmp	r0, #0
  401842:	d0fa      	beq.n	40183a <xTaskResumeAll+0x126>
                                xYieldPending = pdTRUE;
  401844:	603e      	str	r6, [r7, #0]
  401846:	e7f8      	b.n	40183a <xTaskResumeAll+0x126>
                        xPendedTicks = 0;
  401848:	2200      	movs	r2, #0
  40184a:	4b14      	ldr	r3, [pc, #80]	; (40189c <xTaskResumeAll+0x188>)
  40184c:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
  40184e:	4b15      	ldr	r3, [pc, #84]	; (4018a4 <xTaskResumeAll+0x190>)
  401850:	681b      	ldr	r3, [r3, #0]
  401852:	b17b      	cbz	r3, 401874 <xTaskResumeAll+0x160>
                    taskYIELD_IF_USING_PREEMPTION();
  401854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401858:	4b13      	ldr	r3, [pc, #76]	; (4018a8 <xTaskResumeAll+0x194>)
  40185a:	601a      	str	r2, [r3, #0]
  40185c:	f3bf 8f4f 	dsb	sy
  401860:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
  401864:	2401      	movs	r4, #1
  401866:	e000      	b.n	40186a <xTaskResumeAll+0x156>
    BaseType_t xAlreadyYielded = pdFALSE;
  401868:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
  40186a:	4b10      	ldr	r3, [pc, #64]	; (4018ac <xTaskResumeAll+0x198>)
  40186c:	4798      	blx	r3
}
  40186e:	4620      	mov	r0, r4
  401870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
  401874:	2400      	movs	r4, #0
  401876:	e7f8      	b.n	40186a <xTaskResumeAll+0x156>
  401878:	2000053c 	.word	0x2000053c
  40187c:	004002b5 	.word	0x004002b5
  401880:	20000534 	.word	0x20000534
  401884:	20000580 	.word	0x20000580
  401888:	20000544 	.word	0x20000544
  40188c:	20000494 	.word	0x20000494
  401890:	00402ef0 	.word	0x00402ef0
  401894:	00402a09 	.word	0x00402a09
  401898:	00401111 	.word	0x00401111
  40189c:	2000057c 	.word	0x2000057c
  4018a0:	00401559 	.word	0x00401559
  4018a4:	200005c4 	.word	0x200005c4
  4018a8:	e000ed04 	.word	0xe000ed04
  4018ac:	004002fd 	.word	0x004002fd
  4018b0:	20000488 	.word	0x20000488

004018b4 <vTaskDelay>:
    {
  4018b4:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
  4018b6:	b160      	cbz	r0, 4018d2 <vTaskDelay+0x1e>
  4018b8:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
  4018ba:	4b0d      	ldr	r3, [pc, #52]	; (4018f0 <vTaskDelay+0x3c>)
  4018bc:	681b      	ldr	r3, [r3, #0]
  4018be:	b98b      	cbnz	r3, 4018e4 <vTaskDelay+0x30>
            vTaskSuspendAll();
  4018c0:	4b0c      	ldr	r3, [pc, #48]	; (4018f4 <vTaskDelay+0x40>)
  4018c2:	4798      	blx	r3
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  4018c4:	2100      	movs	r1, #0
  4018c6:	4620      	mov	r0, r4
  4018c8:	4b0b      	ldr	r3, [pc, #44]	; (4018f8 <vTaskDelay+0x44>)
  4018ca:	4798      	blx	r3
            xAlreadyYielded = xTaskResumeAll();
  4018cc:	4b0b      	ldr	r3, [pc, #44]	; (4018fc <vTaskDelay+0x48>)
  4018ce:	4798      	blx	r3
        if( xAlreadyYielded == pdFALSE )
  4018d0:	b938      	cbnz	r0, 4018e2 <vTaskDelay+0x2e>
            portYIELD_WITHIN_API();
  4018d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018d6:	4b0a      	ldr	r3, [pc, #40]	; (401900 <vTaskDelay+0x4c>)
  4018d8:	601a      	str	r2, [r3, #0]
  4018da:	f3bf 8f4f 	dsb	sy
  4018de:	f3bf 8f6f 	isb	sy
  4018e2:	bd10      	pop	{r4, pc}
            configASSERT( uxSchedulerSuspended == 0 );
  4018e4:	f240 5149 	movw	r1, #1353	; 0x549
  4018e8:	4806      	ldr	r0, [pc, #24]	; (401904 <vTaskDelay+0x50>)
  4018ea:	4b07      	ldr	r3, [pc, #28]	; (401908 <vTaskDelay+0x54>)
  4018ec:	4798      	blx	r3
  4018ee:	e7e7      	b.n	4018c0 <vTaskDelay+0xc>
  4018f0:	2000053c 	.word	0x2000053c
  4018f4:	0040153d 	.word	0x0040153d
  4018f8:	004011b9 	.word	0x004011b9
  4018fc:	00401715 	.word	0x00401715
  401900:	e000ed04 	.word	0xe000ed04
  401904:	00402ef0 	.word	0x00402ef0
  401908:	00402a09 	.word	0x00402a09

0040190c <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40190c:	4b2b      	ldr	r3, [pc, #172]	; (4019bc <vTaskSwitchContext+0xb0>)
  40190e:	681b      	ldr	r3, [r3, #0]
  401910:	2b00      	cmp	r3, #0
  401912:	d134      	bne.n	40197e <vTaskSwitchContext+0x72>
{
  401914:	b510      	push	{r4, lr}
        xYieldPending = pdFALSE;
  401916:	2200      	movs	r2, #0
  401918:	4b29      	ldr	r3, [pc, #164]	; (4019c0 <vTaskSwitchContext+0xb4>)
  40191a:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
  40191c:	4b29      	ldr	r3, [pc, #164]	; (4019c4 <vTaskSwitchContext+0xb8>)
  40191e:	681b      	ldr	r3, [r3, #0]
  401920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401922:	681a      	ldr	r2, [r3, #0]
  401924:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401928:	d02d      	beq.n	401986 <vTaskSwitchContext+0x7a>
  40192a:	4b26      	ldr	r3, [pc, #152]	; (4019c4 <vTaskSwitchContext+0xb8>)
  40192c:	6818      	ldr	r0, [r3, #0]
  40192e:	6819      	ldr	r1, [r3, #0]
  401930:	3134      	adds	r1, #52	; 0x34
  401932:	4b25      	ldr	r3, [pc, #148]	; (4019c8 <vTaskSwitchContext+0xbc>)
  401934:	4798      	blx	r3
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401936:	4b25      	ldr	r3, [pc, #148]	; (4019cc <vTaskSwitchContext+0xc0>)
  401938:	681c      	ldr	r4, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  40193a:	fab4 f484 	clz	r4, r4
  40193e:	b2e4      	uxtb	r4, r4
  401940:	f1c4 041f 	rsb	r4, r4, #31
  401944:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401948:	009b      	lsls	r3, r3, #2
  40194a:	4a21      	ldr	r2, [pc, #132]	; (4019d0 <vTaskSwitchContext+0xc4>)
  40194c:	58d3      	ldr	r3, [r2, r3]
  40194e:	b33b      	cbz	r3, 4019a0 <vTaskSwitchContext+0x94>
  401950:	4b1f      	ldr	r3, [pc, #124]	; (4019d0 <vTaskSwitchContext+0xc4>)
  401952:	00a2      	lsls	r2, r4, #2
  401954:	1911      	adds	r1, r2, r4
  401956:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40195a:	6848      	ldr	r0, [r1, #4]
  40195c:	6840      	ldr	r0, [r0, #4]
  40195e:	6048      	str	r0, [r1, #4]
  401960:	4422      	add	r2, r4
  401962:	460b      	mov	r3, r1
  401964:	3308      	adds	r3, #8
  401966:	4298      	cmp	r0, r3
  401968:	d020      	beq.n	4019ac <vTaskSwitchContext+0xa0>
  40196a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40196e:	4b18      	ldr	r3, [pc, #96]	; (4019d0 <vTaskSwitchContext+0xc4>)
  401970:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401974:	6863      	ldr	r3, [r4, #4]
  401976:	68da      	ldr	r2, [r3, #12]
  401978:	4b12      	ldr	r3, [pc, #72]	; (4019c4 <vTaskSwitchContext+0xb8>)
  40197a:	601a      	str	r2, [r3, #0]
  40197c:	bd10      	pop	{r4, pc}
        xYieldPending = pdTRUE;
  40197e:	2201      	movs	r2, #1
  401980:	4b0f      	ldr	r3, [pc, #60]	; (4019c0 <vTaskSwitchContext+0xb4>)
  401982:	601a      	str	r2, [r3, #0]
  401984:	4770      	bx	lr
        taskCHECK_FOR_STACK_OVERFLOW();
  401986:	685a      	ldr	r2, [r3, #4]
  401988:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40198c:	d1cd      	bne.n	40192a <vTaskSwitchContext+0x1e>
  40198e:	689a      	ldr	r2, [r3, #8]
  401990:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401994:	d1c9      	bne.n	40192a <vTaskSwitchContext+0x1e>
  401996:	68db      	ldr	r3, [r3, #12]
  401998:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40199c:	d1c5      	bne.n	40192a <vTaskSwitchContext+0x1e>
  40199e:	e7ca      	b.n	401936 <vTaskSwitchContext+0x2a>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4019a0:	f640 4102 	movw	r1, #3074	; 0xc02
  4019a4:	480b      	ldr	r0, [pc, #44]	; (4019d4 <vTaskSwitchContext+0xc8>)
  4019a6:	4b0c      	ldr	r3, [pc, #48]	; (4019d8 <vTaskSwitchContext+0xcc>)
  4019a8:	4798      	blx	r3
  4019aa:	e7d1      	b.n	401950 <vTaskSwitchContext+0x44>
  4019ac:	6841      	ldr	r1, [r0, #4]
  4019ae:	4613      	mov	r3, r2
  4019b0:	4a07      	ldr	r2, [pc, #28]	; (4019d0 <vTaskSwitchContext+0xc4>)
  4019b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4019b6:	6059      	str	r1, [r3, #4]
  4019b8:	e7d7      	b.n	40196a <vTaskSwitchContext+0x5e>
  4019ba:	bf00      	nop
  4019bc:	2000053c 	.word	0x2000053c
  4019c0:	200005c4 	.word	0x200005c4
  4019c4:	20000488 	.word	0x20000488
  4019c8:	00402a49 	.word	0x00402a49
  4019cc:	20000544 	.word	0x20000544
  4019d0:	20000494 	.word	0x20000494
  4019d4:	00402ef0 	.word	0x00402ef0
  4019d8:	00402a09 	.word	0x00402a09

004019dc <vTaskPlaceOnEventList>:
{
  4019dc:	b538      	push	{r3, r4, r5, lr}
  4019de:	460c      	mov	r4, r1
    configASSERT( pxEventList );
  4019e0:	4605      	mov	r5, r0
  4019e2:	b150      	cbz	r0, 4019fa <vTaskPlaceOnEventList+0x1e>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4019e4:	4b08      	ldr	r3, [pc, #32]	; (401a08 <vTaskPlaceOnEventList+0x2c>)
  4019e6:	6819      	ldr	r1, [r3, #0]
  4019e8:	3118      	adds	r1, #24
  4019ea:	4628      	mov	r0, r5
  4019ec:	4b07      	ldr	r3, [pc, #28]	; (401a0c <vTaskPlaceOnEventList+0x30>)
  4019ee:	4798      	blx	r3
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  4019f0:	2101      	movs	r1, #1
  4019f2:	4620      	mov	r0, r4
  4019f4:	4b06      	ldr	r3, [pc, #24]	; (401a10 <vTaskPlaceOnEventList+0x34>)
  4019f6:	4798      	blx	r3
  4019f8:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxEventList );
  4019fa:	f640 411c 	movw	r1, #3100	; 0xc1c
  4019fe:	4805      	ldr	r0, [pc, #20]	; (401a14 <vTaskPlaceOnEventList+0x38>)
  401a00:	4b05      	ldr	r3, [pc, #20]	; (401a18 <vTaskPlaceOnEventList+0x3c>)
  401a02:	4798      	blx	r3
  401a04:	e7ee      	b.n	4019e4 <vTaskPlaceOnEventList+0x8>
  401a06:	bf00      	nop
  401a08:	20000488 	.word	0x20000488
  401a0c:	00400181 	.word	0x00400181
  401a10:	004011b9 	.word	0x004011b9
  401a14:	00402ef0 	.word	0x00402ef0
  401a18:	00402a09 	.word	0x00402a09

00401a1c <vTaskPlaceOnEventListRestricted>:
    {
  401a1c:	b570      	push	{r4, r5, r6, lr}
  401a1e:	460e      	mov	r6, r1
  401a20:	4615      	mov	r5, r2
        configASSERT( pxEventList );
  401a22:	4604      	mov	r4, r0
  401a24:	b1d8      	cbz	r0, 401a5e <vTaskPlaceOnEventListRestricted+0x42>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a26:	6862      	ldr	r2, [r4, #4]
  401a28:	4b10      	ldr	r3, [pc, #64]	; (401a6c <vTaskPlaceOnEventListRestricted+0x50>)
  401a2a:	6819      	ldr	r1, [r3, #0]
  401a2c:	61ca      	str	r2, [r1, #28]
  401a2e:	6819      	ldr	r1, [r3, #0]
  401a30:	6890      	ldr	r0, [r2, #8]
  401a32:	6208      	str	r0, [r1, #32]
  401a34:	6890      	ldr	r0, [r2, #8]
  401a36:	6819      	ldr	r1, [r3, #0]
  401a38:	3118      	adds	r1, #24
  401a3a:	6041      	str	r1, [r0, #4]
  401a3c:	6819      	ldr	r1, [r3, #0]
  401a3e:	3118      	adds	r1, #24
  401a40:	6091      	str	r1, [r2, #8]
  401a42:	681b      	ldr	r3, [r3, #0]
  401a44:	629c      	str	r4, [r3, #40]	; 0x28
  401a46:	6823      	ldr	r3, [r4, #0]
  401a48:	3301      	adds	r3, #1
  401a4a:	6023      	str	r3, [r4, #0]
            xTicksToWait = portMAX_DELAY;
  401a4c:	2d00      	cmp	r5, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401a4e:	4629      	mov	r1, r5
  401a50:	bf0c      	ite	eq
  401a52:	4630      	moveq	r0, r6
  401a54:	f04f 30ff 	movne.w	r0, #4294967295
  401a58:	4b05      	ldr	r3, [pc, #20]	; (401a70 <vTaskPlaceOnEventListRestricted+0x54>)
  401a5a:	4798      	blx	r3
  401a5c:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxEventList );
  401a5e:	f640 4152 	movw	r1, #3154	; 0xc52
  401a62:	4804      	ldr	r0, [pc, #16]	; (401a74 <vTaskPlaceOnEventListRestricted+0x58>)
  401a64:	4b04      	ldr	r3, [pc, #16]	; (401a78 <vTaskPlaceOnEventListRestricted+0x5c>)
  401a66:	4798      	blx	r3
  401a68:	e7dd      	b.n	401a26 <vTaskPlaceOnEventListRestricted+0xa>
  401a6a:	bf00      	nop
  401a6c:	20000488 	.word	0x20000488
  401a70:	004011b9 	.word	0x004011b9
  401a74:	00402ef0 	.word	0x00402ef0
  401a78:	00402a09 	.word	0x00402a09

00401a7c <xTaskRemoveFromEventList>:
{
  401a7c:	b538      	push	{r3, r4, r5, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401a7e:	68c3      	ldr	r3, [r0, #12]
  401a80:	68dc      	ldr	r4, [r3, #12]
    configASSERT( pxUnblockedTCB );
  401a82:	2c00      	cmp	r4, #0
  401a84:	d051      	beq.n	401b2a <xTaskRemoveFromEventList+0xae>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
  401a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401a88:	69e2      	ldr	r2, [r4, #28]
  401a8a:	6a21      	ldr	r1, [r4, #32]
  401a8c:	6091      	str	r1, [r2, #8]
  401a8e:	6a22      	ldr	r2, [r4, #32]
  401a90:	69e1      	ldr	r1, [r4, #28]
  401a92:	6051      	str	r1, [r2, #4]
  401a94:	f104 0118 	add.w	r1, r4, #24
  401a98:	685a      	ldr	r2, [r3, #4]
  401a9a:	428a      	cmp	r2, r1
  401a9c:	bf04      	itt	eq
  401a9e:	6a22      	ldreq	r2, [r4, #32]
  401aa0:	605a      	streq	r2, [r3, #4]
  401aa2:	2200      	movs	r2, #0
  401aa4:	62a2      	str	r2, [r4, #40]	; 0x28
  401aa6:	681a      	ldr	r2, [r3, #0]
  401aa8:	3a01      	subs	r2, #1
  401aaa:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401aac:	4b28      	ldr	r3, [pc, #160]	; (401b50 <xTaskRemoveFromEventList+0xd4>)
  401aae:	681b      	ldr	r3, [r3, #0]
  401ab0:	2b00      	cmp	r3, #0
  401ab2:	d140      	bne.n	401b36 <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
  401ab4:	6963      	ldr	r3, [r4, #20]
  401ab6:	68a2      	ldr	r2, [r4, #8]
  401ab8:	68e1      	ldr	r1, [r4, #12]
  401aba:	6091      	str	r1, [r2, #8]
  401abc:	68e2      	ldr	r2, [r4, #12]
  401abe:	68a1      	ldr	r1, [r4, #8]
  401ac0:	6051      	str	r1, [r2, #4]
  401ac2:	1d21      	adds	r1, r4, #4
  401ac4:	685a      	ldr	r2, [r3, #4]
  401ac6:	428a      	cmp	r2, r1
  401ac8:	bf04      	itt	eq
  401aca:	68e2      	ldreq	r2, [r4, #12]
  401acc:	605a      	streq	r2, [r3, #4]
  401ace:	2200      	movs	r2, #0
  401ad0:	6162      	str	r2, [r4, #20]
  401ad2:	681a      	ldr	r2, [r3, #0]
  401ad4:	3a01      	subs	r2, #1
  401ad6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
  401ad8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401ada:	481e      	ldr	r0, [pc, #120]	; (401b54 <xTaskRemoveFromEventList+0xd8>)
  401adc:	6805      	ldr	r5, [r0, #0]
  401ade:	2201      	movs	r2, #1
  401ae0:	409a      	lsls	r2, r3
  401ae2:	432a      	orrs	r2, r5
  401ae4:	6002      	str	r2, [r0, #0]
  401ae6:	4a1c      	ldr	r2, [pc, #112]	; (401b58 <xTaskRemoveFromEventList+0xdc>)
  401ae8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401aec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401af0:	685b      	ldr	r3, [r3, #4]
  401af2:	60a3      	str	r3, [r4, #8]
  401af4:	6898      	ldr	r0, [r3, #8]
  401af6:	60e0      	str	r0, [r4, #12]
  401af8:	6898      	ldr	r0, [r3, #8]
  401afa:	6041      	str	r1, [r0, #4]
  401afc:	6099      	str	r1, [r3, #8]
  401afe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401b00:	0083      	lsls	r3, r0, #2
  401b02:	1819      	adds	r1, r3, r0
  401b04:	0089      	lsls	r1, r1, #2
  401b06:	1855      	adds	r5, r2, r1
  401b08:	6165      	str	r5, [r4, #20]
  401b0a:	5851      	ldr	r1, [r2, r1]
  401b0c:	3101      	adds	r1, #1
  401b0e:	4403      	add	r3, r0
  401b10:	009b      	lsls	r3, r3, #2
  401b12:	50d1      	str	r1, [r2, r3]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401b14:	4b11      	ldr	r3, [pc, #68]	; (401b5c <xTaskRemoveFromEventList+0xe0>)
  401b16:	681b      	ldr	r3, [r3, #0]
  401b18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b1c:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
  401b1e:	bf83      	ittte	hi
  401b20:	2001      	movhi	r0, #1
  401b22:	4b0f      	ldrhi	r3, [pc, #60]	; (401b60 <xTaskRemoveFromEventList+0xe4>)
  401b24:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
  401b26:	2000      	movls	r0, #0
}
  401b28:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxUnblockedTCB );
  401b2a:	f640 4182 	movw	r1, #3202	; 0xc82
  401b2e:	480d      	ldr	r0, [pc, #52]	; (401b64 <xTaskRemoveFromEventList+0xe8>)
  401b30:	4b0d      	ldr	r3, [pc, #52]	; (401b68 <xTaskRemoveFromEventList+0xec>)
  401b32:	4798      	blx	r3
  401b34:	e7a7      	b.n	401a86 <xTaskRemoveFromEventList+0xa>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b36:	4b0d      	ldr	r3, [pc, #52]	; (401b6c <xTaskRemoveFromEventList+0xf0>)
  401b38:	685a      	ldr	r2, [r3, #4]
  401b3a:	61e2      	str	r2, [r4, #28]
  401b3c:	6890      	ldr	r0, [r2, #8]
  401b3e:	6220      	str	r0, [r4, #32]
  401b40:	6890      	ldr	r0, [r2, #8]
  401b42:	6041      	str	r1, [r0, #4]
  401b44:	6091      	str	r1, [r2, #8]
  401b46:	62a3      	str	r3, [r4, #40]	; 0x28
  401b48:	681a      	ldr	r2, [r3, #0]
  401b4a:	3201      	adds	r2, #1
  401b4c:	601a      	str	r2, [r3, #0]
  401b4e:	e7e1      	b.n	401b14 <xTaskRemoveFromEventList+0x98>
  401b50:	2000053c 	.word	0x2000053c
  401b54:	20000544 	.word	0x20000544
  401b58:	20000494 	.word	0x20000494
  401b5c:	20000488 	.word	0x20000488
  401b60:	200005c4 	.word	0x200005c4
  401b64:	00402ef0 	.word	0x00402ef0
  401b68:	00402a09 	.word	0x00402a09
  401b6c:	20000580 	.word	0x20000580

00401b70 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
  401b70:	4b03      	ldr	r3, [pc, #12]	; (401b80 <vTaskInternalSetTimeOutState+0x10>)
  401b72:	681b      	ldr	r3, [r3, #0]
  401b74:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
  401b76:	4b03      	ldr	r3, [pc, #12]	; (401b84 <vTaskInternalSetTimeOutState+0x14>)
  401b78:	681b      	ldr	r3, [r3, #0]
  401b7a:	6043      	str	r3, [r0, #4]
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop
  401b80:	20000578 	.word	0x20000578
  401b84:	200005c0 	.word	0x200005c0

00401b88 <xTaskCheckForTimeOut>:
{
  401b88:	b570      	push	{r4, r5, r6, lr}
  401b8a:	460c      	mov	r4, r1
    configASSERT( pxTimeOut );
  401b8c:	4605      	mov	r5, r0
  401b8e:	b1d0      	cbz	r0, 401bc6 <xTaskCheckForTimeOut+0x3e>
    configASSERT( pxTicksToWait );
  401b90:	b1fc      	cbz	r4, 401bd2 <xTaskCheckForTimeOut+0x4a>
    taskENTER_CRITICAL();
  401b92:	4b19      	ldr	r3, [pc, #100]	; (401bf8 <xTaskCheckForTimeOut+0x70>)
  401b94:	4798      	blx	r3
        const TickType_t xConstTickCount = xTickCount;
  401b96:	4b19      	ldr	r3, [pc, #100]	; (401bfc <xTaskCheckForTimeOut+0x74>)
  401b98:	681b      	ldr	r3, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
  401b9a:	6822      	ldr	r2, [r4, #0]
  401b9c:	f1b2 3fff 	cmp.w	r2, #4294967295
  401ba0:	d028      	beq.n	401bf4 <xTaskCheckForTimeOut+0x6c>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401ba2:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401ba4:	4816      	ldr	r0, [pc, #88]	; (401c00 <xTaskCheckForTimeOut+0x78>)
  401ba6:	6800      	ldr	r0, [r0, #0]
  401ba8:	682e      	ldr	r6, [r5, #0]
  401baa:	4286      	cmp	r6, r0
  401bac:	d001      	beq.n	401bb2 <xTaskCheckForTimeOut+0x2a>
  401bae:	428b      	cmp	r3, r1
  401bb0:	d215      	bcs.n	401bde <xTaskCheckForTimeOut+0x56>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401bb2:	1a5b      	subs	r3, r3, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401bb4:	4293      	cmp	r3, r2
  401bb6:	d316      	bcc.n	401be6 <xTaskCheckForTimeOut+0x5e>
            *pxTicksToWait = ( TickType_t ) 0;
  401bb8:	2300      	movs	r3, #0
  401bba:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401bbc:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
  401bbe:	4b11      	ldr	r3, [pc, #68]	; (401c04 <xTaskCheckForTimeOut+0x7c>)
  401bc0:	4798      	blx	r3
}
  401bc2:	4620      	mov	r0, r4
  401bc4:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( pxTimeOut );
  401bc6:	f640 41fd 	movw	r1, #3325	; 0xcfd
  401bca:	480f      	ldr	r0, [pc, #60]	; (401c08 <xTaskCheckForTimeOut+0x80>)
  401bcc:	4b0f      	ldr	r3, [pc, #60]	; (401c0c <xTaskCheckForTimeOut+0x84>)
  401bce:	4798      	blx	r3
  401bd0:	e7de      	b.n	401b90 <xTaskCheckForTimeOut+0x8>
    configASSERT( pxTicksToWait );
  401bd2:	f640 41fe 	movw	r1, #3326	; 0xcfe
  401bd6:	480c      	ldr	r0, [pc, #48]	; (401c08 <xTaskCheckForTimeOut+0x80>)
  401bd8:	4b0c      	ldr	r3, [pc, #48]	; (401c0c <xTaskCheckForTimeOut+0x84>)
  401bda:	4798      	blx	r3
  401bdc:	e7d9      	b.n	401b92 <xTaskCheckForTimeOut+0xa>
            *pxTicksToWait = ( TickType_t ) 0;
  401bde:	2300      	movs	r3, #0
  401be0:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401be2:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
  401be4:	e7eb      	b.n	401bbe <xTaskCheckForTimeOut+0x36>
            *pxTicksToWait -= xElapsedTime;
  401be6:	1ad3      	subs	r3, r2, r3
  401be8:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
  401bea:	4628      	mov	r0, r5
  401bec:	4b08      	ldr	r3, [pc, #32]	; (401c10 <xTaskCheckForTimeOut+0x88>)
  401bee:	4798      	blx	r3
            xReturn = pdFALSE;
  401bf0:	2400      	movs	r4, #0
  401bf2:	e7e4      	b.n	401bbe <xTaskCheckForTimeOut+0x36>
                xReturn = pdFALSE;
  401bf4:	2400      	movs	r4, #0
  401bf6:	e7e2      	b.n	401bbe <xTaskCheckForTimeOut+0x36>
  401bf8:	004002b5 	.word	0x004002b5
  401bfc:	200005c0 	.word	0x200005c0
  401c00:	20000578 	.word	0x20000578
  401c04:	004002fd 	.word	0x004002fd
  401c08:	00402ef0 	.word	0x00402ef0
  401c0c:	00402a09 	.word	0x00402a09
  401c10:	00401b71 	.word	0x00401b71

00401c14 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
  401c14:	2201      	movs	r2, #1
  401c16:	4b01      	ldr	r3, [pc, #4]	; (401c1c <vTaskMissedYield+0x8>)
  401c18:	601a      	str	r2, [r3, #0]
  401c1a:	4770      	bx	lr
  401c1c:	200005c4 	.word	0x200005c4

00401c20 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
  401c20:	4b05      	ldr	r3, [pc, #20]	; (401c38 <xTaskGetSchedulerState+0x18>)
  401c22:	681b      	ldr	r3, [r3, #0]
  401c24:	b133      	cbz	r3, 401c34 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c26:	4b05      	ldr	r3, [pc, #20]	; (401c3c <xTaskGetSchedulerState+0x1c>)
  401c28:	681b      	ldr	r3, [r3, #0]
                xReturn = taskSCHEDULER_SUSPENDED;
  401c2a:	2b00      	cmp	r3, #0
  401c2c:	bf0c      	ite	eq
  401c2e:	2002      	moveq	r0, #2
  401c30:	2000      	movne	r0, #0
  401c32:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
  401c34:	2001      	movs	r0, #1
    }
  401c36:	4770      	bx	lr
  401c38:	20000594 	.word	0x20000594
  401c3c:	2000053c 	.word	0x2000053c

00401c40 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
  401c40:	2800      	cmp	r0, #0
  401c42:	d04d      	beq.n	401ce0 <xTaskPriorityDisinherit+0xa0>
    {
  401c44:	b570      	push	{r4, r5, r6, lr}
  401c46:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
  401c48:	4b27      	ldr	r3, [pc, #156]	; (401ce8 <xTaskPriorityDisinherit+0xa8>)
  401c4a:	681b      	ldr	r3, [r3, #0]
  401c4c:	4298      	cmp	r0, r3
  401c4e:	d004      	beq.n	401c5a <xTaskPriorityDisinherit+0x1a>
  401c50:	f241 014f 	movw	r1, #4175	; 0x104f
  401c54:	4825      	ldr	r0, [pc, #148]	; (401cec <xTaskPriorityDisinherit+0xac>)
  401c56:	4b26      	ldr	r3, [pc, #152]	; (401cf0 <xTaskPriorityDisinherit+0xb0>)
  401c58:	4798      	blx	r3
            configASSERT( pxTCB->uxMutexesHeld );
  401c5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401c5c:	b14b      	cbz	r3, 401c72 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
  401c5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401c60:	3b01      	subs	r3, #1
  401c62:	64e3      	str	r3, [r4, #76]	; 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401c64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401c66:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  401c68:	4291      	cmp	r1, r2
  401c6a:	d03b      	beq.n	401ce4 <xTaskPriorityDisinherit+0xa4>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401c6c:	b13b      	cbz	r3, 401c7e <xTaskPriorityDisinherit+0x3e>
        BaseType_t xReturn = pdFALSE;
  401c6e:	2000      	movs	r0, #0
    }
  401c70:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB->uxMutexesHeld );
  401c72:	f241 0150 	movw	r1, #4176	; 0x1050
  401c76:	481d      	ldr	r0, [pc, #116]	; (401cec <xTaskPriorityDisinherit+0xac>)
  401c78:	4b1d      	ldr	r3, [pc, #116]	; (401cf0 <xTaskPriorityDisinherit+0xb0>)
  401c7a:	4798      	blx	r3
  401c7c:	e7ef      	b.n	401c5e <xTaskPriorityDisinherit+0x1e>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401c7e:	1d25      	adds	r5, r4, #4
  401c80:	4628      	mov	r0, r5
  401c82:	4b1c      	ldr	r3, [pc, #112]	; (401cf4 <xTaskPriorityDisinherit+0xb4>)
  401c84:	4798      	blx	r3
  401c86:	b938      	cbnz	r0, 401c98 <xTaskPriorityDisinherit+0x58>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
  401c88:	491b      	ldr	r1, [pc, #108]	; (401cf8 <xTaskPriorityDisinherit+0xb8>)
  401c8a:	680b      	ldr	r3, [r1, #0]
  401c8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c8e:	2201      	movs	r2, #1
  401c90:	4082      	lsls	r2, r0
  401c92:	ea23 0302 	bic.w	r3, r3, r2
  401c96:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
  401c98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c9c:	f1c3 0208 	rsb	r2, r3, #8
  401ca0:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
  401ca2:	4915      	ldr	r1, [pc, #84]	; (401cf8 <xTaskPriorityDisinherit+0xb8>)
  401ca4:	680e      	ldr	r6, [r1, #0]
  401ca6:	2001      	movs	r0, #1
  401ca8:	fa00 f203 	lsl.w	r2, r0, r3
  401cac:	4332      	orrs	r2, r6
  401cae:	600a      	str	r2, [r1, #0]
  401cb0:	4a12      	ldr	r2, [pc, #72]	; (401cfc <xTaskPriorityDisinherit+0xbc>)
  401cb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401cb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401cba:	685b      	ldr	r3, [r3, #4]
  401cbc:	60a3      	str	r3, [r4, #8]
  401cbe:	6899      	ldr	r1, [r3, #8]
  401cc0:	60e1      	str	r1, [r4, #12]
  401cc2:	6899      	ldr	r1, [r3, #8]
  401cc4:	604d      	str	r5, [r1, #4]
  401cc6:	609d      	str	r5, [r3, #8]
  401cc8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  401cca:	00ab      	lsls	r3, r5, #2
  401ccc:	1959      	adds	r1, r3, r5
  401cce:	0089      	lsls	r1, r1, #2
  401cd0:	1856      	adds	r6, r2, r1
  401cd2:	6166      	str	r6, [r4, #20]
  401cd4:	5851      	ldr	r1, [r2, r1]
  401cd6:	4401      	add	r1, r0
  401cd8:	442b      	add	r3, r5
  401cda:	009b      	lsls	r3, r3, #2
  401cdc:	50d1      	str	r1, [r2, r3]
  401cde:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xReturn = pdFALSE;
  401ce0:	2000      	movs	r0, #0
  401ce2:	4770      	bx	lr
  401ce4:	2000      	movs	r0, #0
  401ce6:	bd70      	pop	{r4, r5, r6, pc}
  401ce8:	20000488 	.word	0x20000488
  401cec:	00402ef0 	.word	0x00402ef0
  401cf0:	00402a09 	.word	0x00402a09
  401cf4:	004001b5 	.word	0x004001b5
  401cf8:	20000544 	.word	0x20000544
  401cfc:	20000494 	.word	0x20000494

00401d00 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
  401d00:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401d02:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401d04:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
  401d06:	4291      	cmp	r1, r2
  401d08:	d80c      	bhi.n	401d24 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d0a:	1ad2      	subs	r2, r2, r3
  401d0c:	6983      	ldr	r3, [r0, #24]
  401d0e:	429a      	cmp	r2, r3
  401d10:	d301      	bcc.n	401d16 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
  401d12:	2001      	movs	r0, #1
  401d14:	bd08      	pop	{r3, pc}
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401d16:	1d01      	adds	r1, r0, #4
  401d18:	4b09      	ldr	r3, [pc, #36]	; (401d40 <prvInsertTimerInActiveList+0x40>)
  401d1a:	6818      	ldr	r0, [r3, #0]
  401d1c:	4b09      	ldr	r3, [pc, #36]	; (401d44 <prvInsertTimerInActiveList+0x44>)
  401d1e:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  401d20:	2000      	movs	r0, #0
  401d22:	bd08      	pop	{r3, pc}
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401d24:	429a      	cmp	r2, r3
  401d26:	d201      	bcs.n	401d2c <prvInsertTimerInActiveList+0x2c>
  401d28:	4299      	cmp	r1, r3
  401d2a:	d206      	bcs.n	401d3a <prvInsertTimerInActiveList+0x3a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401d2c:	1d01      	adds	r1, r0, #4
  401d2e:	4b06      	ldr	r3, [pc, #24]	; (401d48 <prvInsertTimerInActiveList+0x48>)
  401d30:	6818      	ldr	r0, [r3, #0]
  401d32:	4b04      	ldr	r3, [pc, #16]	; (401d44 <prvInsertTimerInActiveList+0x44>)
  401d34:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  401d36:	2000      	movs	r0, #0
  401d38:	bd08      	pop	{r3, pc}
                xProcessTimerNow = pdTRUE;
  401d3a:	2001      	movs	r0, #1
            }
        }

        return xProcessTimerNow;
    }
  401d3c:	bd08      	pop	{r3, pc}
  401d3e:	bf00      	nop
  401d40:	200005cc 	.word	0x200005cc
  401d44:	00400181 	.word	0x00400181
  401d48:	200005c8 	.word	0x200005c8

00401d4c <prvReloadTimer>:
    {
  401d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d4e:	4604      	mov	r4, r0
  401d50:	460d      	mov	r5, r1
  401d52:	4617      	mov	r7, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401d54:	4e07      	ldr	r6, [pc, #28]	; (401d74 <prvReloadTimer+0x28>)
  401d56:	e004      	b.n	401d62 <prvReloadTimer+0x16>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
  401d58:	69a3      	ldr	r3, [r4, #24]
  401d5a:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d5c:	6a23      	ldr	r3, [r4, #32]
  401d5e:	4620      	mov	r0, r4
  401d60:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401d62:	69a1      	ldr	r1, [r4, #24]
  401d64:	462b      	mov	r3, r5
  401d66:	463a      	mov	r2, r7
  401d68:	4429      	add	r1, r5
  401d6a:	4620      	mov	r0, r4
  401d6c:	47b0      	blx	r6
  401d6e:	2800      	cmp	r0, #0
  401d70:	d1f2      	bne.n	401d58 <prvReloadTimer+0xc>
    }
  401d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d74:	00401d01 	.word	0x00401d01

00401d78 <prvProcessExpiredTimer>:
    {
  401d78:	b570      	push	{r4, r5, r6, lr}
  401d7a:	4605      	mov	r5, r0
  401d7c:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401d7e:	4b0d      	ldr	r3, [pc, #52]	; (401db4 <prvProcessExpiredTimer+0x3c>)
  401d80:	681b      	ldr	r3, [r3, #0]
  401d82:	68db      	ldr	r3, [r3, #12]
  401d84:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d86:	1d20      	adds	r0, r4, #4
  401d88:	4b0b      	ldr	r3, [pc, #44]	; (401db8 <prvProcessExpiredTimer+0x40>)
  401d8a:	4798      	blx	r3
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401d8c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401d90:	f013 0f04 	tst.w	r3, #4
  401d94:	d107      	bne.n	401da6 <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401d96:	f023 0301 	bic.w	r3, r3, #1
  401d9a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d9e:	6a23      	ldr	r3, [r4, #32]
  401da0:	4620      	mov	r0, r4
  401da2:	4798      	blx	r3
  401da4:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
  401da6:	4632      	mov	r2, r6
  401da8:	4629      	mov	r1, r5
  401daa:	4620      	mov	r0, r4
  401dac:	4b03      	ldr	r3, [pc, #12]	; (401dbc <prvProcessExpiredTimer+0x44>)
  401dae:	4798      	blx	r3
  401db0:	e7f5      	b.n	401d9e <prvProcessExpiredTimer+0x26>
  401db2:	bf00      	nop
  401db4:	200005c8 	.word	0x200005c8
  401db8:	004001b5 	.word	0x004001b5
  401dbc:	00401d4d 	.word	0x00401d4d

00401dc0 <prvSampleTimeNow>:
    {
  401dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401dc4:	4680      	mov	r8, r0
        xTimeNow = xTaskGetTickCount();
  401dc6:	4b14      	ldr	r3, [pc, #80]	; (401e18 <prvSampleTimeNow+0x58>)
  401dc8:	4798      	blx	r3
  401dca:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
  401dcc:	4b13      	ldr	r3, [pc, #76]	; (401e1c <prvSampleTimeNow+0x5c>)
  401dce:	681b      	ldr	r3, [r3, #0]
  401dd0:	4298      	cmp	r0, r3
  401dd2:	d307      	bcc.n	401de4 <prvSampleTimeNow+0x24>
            *pxTimerListsWereSwitched = pdFALSE;
  401dd4:	2300      	movs	r3, #0
  401dd6:	f8c8 3000 	str.w	r3, [r8]
        xLastTime = xTimeNow;
  401dda:	4b10      	ldr	r3, [pc, #64]	; (401e1c <prvSampleTimeNow+0x5c>)
  401ddc:	601c      	str	r4, [r3, #0]
    }
  401dde:	4620      	mov	r0, r4
  401de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401de4:	4b0e      	ldr	r3, [pc, #56]	; (401e20 <prvSampleTimeNow+0x60>)
  401de6:	681b      	ldr	r3, [r3, #0]
  401de8:	681a      	ldr	r2, [r3, #0]
  401dea:	b15a      	cbz	r2, 401e04 <prvSampleTimeNow+0x44>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401dec:	f04f 37ff 	mov.w	r7, #4294967295
  401df0:	4e0c      	ldr	r6, [pc, #48]	; (401e24 <prvSampleTimeNow+0x64>)
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401df2:	4d0b      	ldr	r5, [pc, #44]	; (401e20 <prvSampleTimeNow+0x60>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401df4:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401df6:	4639      	mov	r1, r7
  401df8:	6818      	ldr	r0, [r3, #0]
  401dfa:	47b0      	blx	r6
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401dfc:	682b      	ldr	r3, [r5, #0]
  401dfe:	681a      	ldr	r2, [r3, #0]
  401e00:	2a00      	cmp	r2, #0
  401e02:	d1f7      	bne.n	401df4 <prvSampleTimeNow+0x34>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
  401e04:	4a08      	ldr	r2, [pc, #32]	; (401e28 <prvSampleTimeNow+0x68>)
  401e06:	6810      	ldr	r0, [r2, #0]
  401e08:	4905      	ldr	r1, [pc, #20]	; (401e20 <prvSampleTimeNow+0x60>)
  401e0a:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
  401e0c:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
  401e0e:	2301      	movs	r3, #1
  401e10:	f8c8 3000 	str.w	r3, [r8]
  401e14:	e7e1      	b.n	401dda <prvSampleTimeNow+0x1a>
  401e16:	bf00      	nop
  401e18:	0040154d 	.word	0x0040154d
  401e1c:	200005f8 	.word	0x200005f8
  401e20:	200005c8 	.word	0x200005c8
  401e24:	00401d79 	.word	0x00401d79
  401e28:	200005cc 	.word	0x200005cc

00401e2c <prvTimerTask>:
    {
  401e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e30:	b087      	sub	sp, #28
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401e32:	4e5e      	ldr	r6, [pc, #376]	; (401fac <prvTimerTask+0x180>)
                ( void ) xTaskResumeAll();
  401e34:	4f5e      	ldr	r7, [pc, #376]	; (401fb0 <prvTimerTask+0x184>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401e36:	4d5f      	ldr	r5, [pc, #380]	; (401fb4 <prvTimerTask+0x188>)
                        portYIELD_WITHIN_API();
  401e38:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 401fe4 <prvTimerTask+0x1b8>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401e3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 401fe8 <prvTimerTask+0x1bc>
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401e40:	6833      	ldr	r3, [r6, #0]
  401e42:	681a      	ldr	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
  401e44:	b192      	cbz	r2, 401e6c <prvTimerTask+0x40>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401e46:	68db      	ldr	r3, [r3, #12]
  401e48:	f8d3 a000 	ldr.w	sl, [r3]
        vTaskSuspendAll();
  401e4c:	4b5a      	ldr	r3, [pc, #360]	; (401fb8 <prvTimerTask+0x18c>)
  401e4e:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e50:	a802      	add	r0, sp, #8
  401e52:	4b5a      	ldr	r3, [pc, #360]	; (401fbc <prvTimerTask+0x190>)
  401e54:	4798      	blx	r3
  401e56:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401e58:	9a02      	ldr	r2, [sp, #8]
  401e5a:	bb42      	cbnz	r2, 401eae <prvTimerTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401e5c:	4550      	cmp	r0, sl
  401e5e:	d315      	bcc.n	401e8c <prvTimerTask+0x60>
                    ( void ) xTaskResumeAll();
  401e60:	47b8      	blx	r7
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401e62:	4621      	mov	r1, r4
  401e64:	4650      	mov	r0, sl
  401e66:	4b56      	ldr	r3, [pc, #344]	; (401fc0 <prvTimerTask+0x194>)
  401e68:	4798      	blx	r3
  401e6a:	e01e      	b.n	401eaa <prvTimerTask+0x7e>
        vTaskSuspendAll();
  401e6c:	4b52      	ldr	r3, [pc, #328]	; (401fb8 <prvTimerTask+0x18c>)
  401e6e:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e70:	a802      	add	r0, sp, #8
  401e72:	4b52      	ldr	r3, [pc, #328]	; (401fbc <prvTimerTask+0x190>)
  401e74:	4798      	blx	r3
  401e76:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401e78:	9b02      	ldr	r3, [sp, #8]
  401e7a:	b9c3      	cbnz	r3, 401eae <prvTimerTask+0x82>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401e7c:	4b51      	ldr	r3, [pc, #324]	; (401fc4 <prvTimerTask+0x198>)
  401e7e:	681b      	ldr	r3, [r3, #0]
  401e80:	681a      	ldr	r2, [r3, #0]
  401e82:	fab2 f282 	clz	r2, r2
  401e86:	0952      	lsrs	r2, r2, #5
            xNextExpireTime = ( TickType_t ) 0U;
  401e88:	f04f 0a00 	mov.w	sl, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401e8c:	ebaa 0104 	sub.w	r1, sl, r4
  401e90:	6828      	ldr	r0, [r5, #0]
  401e92:	4b4d      	ldr	r3, [pc, #308]	; (401fc8 <prvTimerTask+0x19c>)
  401e94:	4798      	blx	r3
                    if( xTaskResumeAll() == pdFALSE )
  401e96:	47b8      	blx	r7
  401e98:	b938      	cbnz	r0, 401eaa <prvTimerTask+0x7e>
                        portYIELD_WITHIN_API();
  401e9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401e9e:	f8c9 3000 	str.w	r3, [r9]
  401ea2:	f3bf 8f4f 	dsb	sy
  401ea6:	f3bf 8f6f 	isb	sy
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401eaa:	4c48      	ldr	r4, [pc, #288]	; (401fcc <prvTimerTask+0x1a0>)
  401eac:	e008      	b.n	401ec0 <prvTimerTask+0x94>
                ( void ) xTaskResumeAll();
  401eae:	47b8      	blx	r7
  401eb0:	e7fb      	b.n	401eaa <prvTimerTask+0x7e>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401eb2:	9905      	ldr	r1, [sp, #20]
  401eb4:	9804      	ldr	r0, [sp, #16]
  401eb6:	9b03      	ldr	r3, [sp, #12]
  401eb8:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401eba:	9b02      	ldr	r3, [sp, #8]
  401ebc:	2b00      	cmp	r3, #0
  401ebe:	da08      	bge.n	401ed2 <prvTimerTask+0xa6>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401ec0:	2200      	movs	r2, #0
  401ec2:	a902      	add	r1, sp, #8
  401ec4:	6828      	ldr	r0, [r5, #0]
  401ec6:	47a0      	blx	r4
  401ec8:	2800      	cmp	r0, #0
  401eca:	d0b9      	beq.n	401e40 <prvTimerTask+0x14>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401ecc:	9b02      	ldr	r3, [sp, #8]
  401ece:	2b00      	cmp	r3, #0
  401ed0:	dbef      	blt.n	401eb2 <prvTimerTask+0x86>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401ed2:	f8dd a010 	ldr.w	sl, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  401ed6:	f8da 3014 	ldr.w	r3, [sl, #20]
  401eda:	b113      	cbz	r3, 401ee2 <prvTimerTask+0xb6>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401edc:	f10a 0004 	add.w	r0, sl, #4
  401ee0:	47c0      	blx	r8
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401ee2:	a801      	add	r0, sp, #4
  401ee4:	4b35      	ldr	r3, [pc, #212]	; (401fbc <prvTimerTask+0x190>)
  401ee6:	4798      	blx	r3
  401ee8:	4683      	mov	fp, r0
                switch( xMessage.xMessageID )
  401eea:	9b02      	ldr	r3, [sp, #8]
  401eec:	3b01      	subs	r3, #1
  401eee:	2b08      	cmp	r3, #8
  401ef0:	d8e6      	bhi.n	401ec0 <prvTimerTask+0x94>
  401ef2:	e8df f003 	tbb	[pc, r3]
  401ef6:	0505      	.short	0x0505
  401ef8:	054d342d 	.word	0x054d342d
  401efc:	2d05      	.short	0x2d05
  401efe:	34          	.byte	0x34
  401eff:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401f00:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401f04:	f043 0301 	orr.w	r3, r3, #1
  401f08:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  401f0c:	9903      	ldr	r1, [sp, #12]
  401f0e:	f8da 0018 	ldr.w	r0, [sl, #24]
  401f12:	460b      	mov	r3, r1
  401f14:	465a      	mov	r2, fp
  401f16:	4401      	add	r1, r0
  401f18:	4650      	mov	r0, sl
  401f1a:	4c2d      	ldr	r4, [pc, #180]	; (401fd0 <prvTimerTask+0x1a4>)
  401f1c:	47a0      	blx	r4
  401f1e:	2800      	cmp	r0, #0
  401f20:	d0c3      	beq.n	401eaa <prvTimerTask+0x7e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401f22:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401f26:	f013 0f04 	tst.w	r3, #4
  401f2a:	d108      	bne.n	401f3e <prvTimerTask+0x112>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401f2c:	f023 0301 	bic.w	r3, r3, #1
  401f30:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401f34:	f8da 3020 	ldr.w	r3, [sl, #32]
  401f38:	4650      	mov	r0, sl
  401f3a:	4798      	blx	r3
  401f3c:	e7b5      	b.n	401eaa <prvTimerTask+0x7e>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
  401f3e:	f8da 3018 	ldr.w	r3, [sl, #24]
  401f42:	465a      	mov	r2, fp
  401f44:	9903      	ldr	r1, [sp, #12]
  401f46:	4419      	add	r1, r3
  401f48:	4650      	mov	r0, sl
  401f4a:	4b22      	ldr	r3, [pc, #136]	; (401fd4 <prvTimerTask+0x1a8>)
  401f4c:	4798      	blx	r3
  401f4e:	e7f1      	b.n	401f34 <prvTimerTask+0x108>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401f50:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401f54:	f023 0301 	bic.w	r3, r3, #1
  401f58:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  401f5c:	e7a5      	b.n	401eaa <prvTimerTask+0x7e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401f5e:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401f62:	f043 0301 	orr.w	r3, r3, #1
  401f66:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401f6a:	9b03      	ldr	r3, [sp, #12]
  401f6c:	f8ca 3018 	str.w	r3, [sl, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401f70:	b143      	cbz	r3, 401f84 <prvTimerTask+0x158>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401f72:	f8da 1018 	ldr.w	r1, [sl, #24]
  401f76:	465b      	mov	r3, fp
  401f78:	465a      	mov	r2, fp
  401f7a:	4459      	add	r1, fp
  401f7c:	4650      	mov	r0, sl
  401f7e:	4c14      	ldr	r4, [pc, #80]	; (401fd0 <prvTimerTask+0x1a4>)
  401f80:	47a0      	blx	r4
  401f82:	e792      	b.n	401eaa <prvTimerTask+0x7e>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401f84:	f240 3159 	movw	r1, #857	; 0x359
  401f88:	4813      	ldr	r0, [pc, #76]	; (401fd8 <prvTimerTask+0x1ac>)
  401f8a:	4b14      	ldr	r3, [pc, #80]	; (401fdc <prvTimerTask+0x1b0>)
  401f8c:	4798      	blx	r3
  401f8e:	e7f0      	b.n	401f72 <prvTimerTask+0x146>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  401f90:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401f94:	f013 0f02 	tst.w	r3, #2
  401f98:	d004      	beq.n	401fa4 <prvTimerTask+0x178>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401f9a:	f023 0301 	bic.w	r3, r3, #1
  401f9e:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  401fa2:	e782      	b.n	401eaa <prvTimerTask+0x7e>
                                    vPortFree( pxTimer );
  401fa4:	4650      	mov	r0, sl
  401fa6:	4b0e      	ldr	r3, [pc, #56]	; (401fe0 <prvTimerTask+0x1b4>)
  401fa8:	4798      	blx	r3
  401faa:	e77e      	b.n	401eaa <prvTimerTask+0x7e>
  401fac:	200005c8 	.word	0x200005c8
  401fb0:	00401715 	.word	0x00401715
  401fb4:	200005fc 	.word	0x200005fc
  401fb8:	0040153d 	.word	0x0040153d
  401fbc:	00401dc1 	.word	0x00401dc1
  401fc0:	00401d79 	.word	0x00401d79
  401fc4:	200005cc 	.word	0x200005cc
  401fc8:	004010b1 	.word	0x004010b1
  401fcc:	00400e99 	.word	0x00400e99
  401fd0:	00401d01 	.word	0x00401d01
  401fd4:	00401d4d 	.word	0x00401d4d
  401fd8:	00402f18 	.word	0x00402f18
  401fdc:	00402a09 	.word	0x00402a09
  401fe0:	004006c5 	.word	0x004006c5
  401fe4:	e000ed04 	.word	0xe000ed04
  401fe8:	004001b5 	.word	0x004001b5

00401fec <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
  401fec:	b570      	push	{r4, r5, r6, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
  401fee:	4b10      	ldr	r3, [pc, #64]	; (402030 <prvCheckForValidListAndQueue+0x44>)
  401ff0:	4798      	blx	r3
        {
            if( xTimerQueue == NULL )
  401ff2:	4b10      	ldr	r3, [pc, #64]	; (402034 <prvCheckForValidListAndQueue+0x48>)
  401ff4:	681b      	ldr	r3, [r3, #0]
  401ff6:	b113      	cbz	r3, 401ffe <prvCheckForValidListAndQueue+0x12>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
  401ff8:	4b0f      	ldr	r3, [pc, #60]	; (402038 <prvCheckForValidListAndQueue+0x4c>)
  401ffa:	4798      	blx	r3
  401ffc:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &xActiveTimerList1 );
  401ffe:	4d0f      	ldr	r5, [pc, #60]	; (40203c <prvCheckForValidListAndQueue+0x50>)
  402000:	4628      	mov	r0, r5
  402002:	4e0f      	ldr	r6, [pc, #60]	; (402040 <prvCheckForValidListAndQueue+0x54>)
  402004:	47b0      	blx	r6
                vListInitialise( &xActiveTimerList2 );
  402006:	4c0f      	ldr	r4, [pc, #60]	; (402044 <prvCheckForValidListAndQueue+0x58>)
  402008:	4620      	mov	r0, r4
  40200a:	47b0      	blx	r6
                pxCurrentTimerList = &xActiveTimerList1;
  40200c:	4b0e      	ldr	r3, [pc, #56]	; (402048 <prvCheckForValidListAndQueue+0x5c>)
  40200e:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
  402010:	4b0e      	ldr	r3, [pc, #56]	; (40204c <prvCheckForValidListAndQueue+0x60>)
  402012:	601c      	str	r4, [r3, #0]
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402014:	2200      	movs	r2, #0
  402016:	2110      	movs	r1, #16
  402018:	2005      	movs	r0, #5
  40201a:	4b0d      	ldr	r3, [pc, #52]	; (402050 <prvCheckForValidListAndQueue+0x64>)
  40201c:	4798      	blx	r3
  40201e:	4b05      	ldr	r3, [pc, #20]	; (402034 <prvCheckForValidListAndQueue+0x48>)
  402020:	6018      	str	r0, [r3, #0]
                        if( xTimerQueue != NULL )
  402022:	2800      	cmp	r0, #0
  402024:	d0e8      	beq.n	401ff8 <prvCheckForValidListAndQueue+0xc>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402026:	490b      	ldr	r1, [pc, #44]	; (402054 <prvCheckForValidListAndQueue+0x68>)
  402028:	4b0b      	ldr	r3, [pc, #44]	; (402058 <prvCheckForValidListAndQueue+0x6c>)
  40202a:	4798      	blx	r3
  40202c:	e7e4      	b.n	401ff8 <prvCheckForValidListAndQueue+0xc>
  40202e:	bf00      	nop
  402030:	004002b5 	.word	0x004002b5
  402034:	200005fc 	.word	0x200005fc
  402038:	004002fd 	.word	0x004002fd
  40203c:	200005d0 	.word	0x200005d0
  402040:	00400165 	.word	0x00400165
  402044:	200005e4 	.word	0x200005e4
  402048:	200005c8 	.word	0x200005c8
  40204c:	200005cc 	.word	0x200005cc
  402050:	00400b25 	.word	0x00400b25
  402054:	00402f10 	.word	0x00402f10
  402058:	00401051 	.word	0x00401051

0040205c <xTimerCreateTimerTask>:
    {
  40205c:	b510      	push	{r4, lr}
  40205e:	b082      	sub	sp, #8
        prvCheckForValidListAndQueue();
  402060:	4b0d      	ldr	r3, [pc, #52]	; (402098 <xTimerCreateTimerTask+0x3c>)
  402062:	4798      	blx	r3
        if( xTimerQueue != NULL )
  402064:	4b0d      	ldr	r3, [pc, #52]	; (40209c <xTimerCreateTimerTask+0x40>)
  402066:	681b      	ldr	r3, [r3, #0]
  402068:	b17b      	cbz	r3, 40208a <xTimerCreateTimerTask+0x2e>
                    xReturn = xTaskCreate( prvTimerTask,
  40206a:	4b0d      	ldr	r3, [pc, #52]	; (4020a0 <xTimerCreateTimerTask+0x44>)
  40206c:	9301      	str	r3, [sp, #4]
  40206e:	2307      	movs	r3, #7
  402070:	9300      	str	r3, [sp, #0]
  402072:	2300      	movs	r3, #0
  402074:	f44f 7282 	mov.w	r2, #260	; 0x104
  402078:	490a      	ldr	r1, [pc, #40]	; (4020a4 <xTimerCreateTimerTask+0x48>)
  40207a:	480b      	ldr	r0, [pc, #44]	; (4020a8 <xTimerCreateTimerTask+0x4c>)
  40207c:	4c0b      	ldr	r4, [pc, #44]	; (4020ac <xTimerCreateTimerTask+0x50>)
  40207e:	47a0      	blx	r4
        configASSERT( xReturn );
  402080:	4603      	mov	r3, r0
  402082:	b110      	cbz	r0, 40208a <xTimerCreateTimerTask+0x2e>
    }
  402084:	4618      	mov	r0, r3
  402086:	b002      	add	sp, #8
  402088:	bd10      	pop	{r4, pc}
        configASSERT( xReturn );
  40208a:	f240 1119 	movw	r1, #281	; 0x119
  40208e:	4808      	ldr	r0, [pc, #32]	; (4020b0 <xTimerCreateTimerTask+0x54>)
  402090:	4b08      	ldr	r3, [pc, #32]	; (4020b4 <xTimerCreateTimerTask+0x58>)
  402092:	4798      	blx	r3
  402094:	2300      	movs	r3, #0
        return xReturn;
  402096:	e7f5      	b.n	402084 <xTimerCreateTimerTask+0x28>
  402098:	00401fed 	.word	0x00401fed
  40209c:	200005fc 	.word	0x200005fc
  4020a0:	20000600 	.word	0x20000600
  4020a4:	00402f34 	.word	0x00402f34
  4020a8:	00401e2d 	.word	0x00401e2d
  4020ac:	00401275 	.word	0x00401275
  4020b0:	00402f18 	.word	0x00402f18
  4020b4:	00402a09 	.word	0x00402a09

004020b8 <toggleLED>:
}

// 
uint8_t toggleLED(uint8_t uiLedNum)
{
	ioport_set_pin_level(decLED[uiLedNum], !ioport_get_pin_level(decLED[uiLedNum]));
  4020b8:	4b09      	ldr	r3, [pc, #36]	; (4020e0 <toggleLED+0x28>)
  4020ba:	5c1a      	ldrb	r2, [r3, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4020bc:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4020be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4020c2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4020c6:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4020c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4020ca:	f002 011f 	and.w	r1, r2, #31
  4020ce:	2201      	movs	r2, #1
  4020d0:	408a      	lsls	r2, r1
	if (level) {
  4020d2:	4210      	tst	r0, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4020d4:	bf0c      	ite	eq
  4020d6:	631a      	streq	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4020d8:	635a      	strne	r2, [r3, #52]	; 0x34

	return SUCCESS; // dummy return
}
  4020da:	4b02      	ldr	r3, [pc, #8]	; (4020e4 <toggleLED+0x2c>)
  4020dc:	7818      	ldrb	r0, [r3, #0]
  4020de:	4770      	bx	lr
  4020e0:	2000000c 	.word	0x2000000c
  4020e4:	20000008 	.word	0x20000008

004020e8 <taskHeartbeat>:
// heartbeat task created up to four times: 
//     *    1 onboard LED uncontrolled
//     *	3 extension board LEDs controlled by button functions
void 
taskHeartbeat (void* pvParameters)
{
  4020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Block for 500ms. */
	const TickType_t xDelay = 500 / portTICK_PERIOD_MS;	// SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ = 4MHz

	// casting sent parameter back to what it was originally
	const uint8_t* ledNum = (uint8_t*) pvParameters;
	const uint8_t led = *ledNum;
  4020ea:	7807      	ldrb	r7, [r0, #0]

	while(FOREVER)
	{	// actual task
		toggleLED(led);		// toggle LED state
  4020ec:	4e04      	ldr	r6, [pc, #16]	; (402100 <taskHeartbeat+0x18>)
		vTaskDelay( xDelay );	// then wait 0.5 
  4020ee:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  4020f2:	4c04      	ldr	r4, [pc, #16]	; (402104 <taskHeartbeat+0x1c>)
		toggleLED(led);		// toggle LED state
  4020f4:	4638      	mov	r0, r7
  4020f6:	47b0      	blx	r6
		vTaskDelay( xDelay );	// then wait 0.5 
  4020f8:	4628      	mov	r0, r5
  4020fa:	47a0      	blx	r4
  4020fc:	e7fa      	b.n	4020f4 <taskHeartbeat+0xc>
  4020fe:	bf00      	nop
  402100:	004020b9 	.word	0x004020b9
  402104:	004018b5 	.word	0x004018b5

00402108 <taskUART_TX>:
}

//
void 
taskUART_TX (void* pvParameters)
{
  402108:	b580      	push	{r7, lr}
  40210a:	b08e      	sub	sp, #56	; 0x38
	char					message[50];
	const struct UARTData	data = *(struct UARTData*) pvParameters;
  40210c:	6806      	ldr	r6, [r0, #0]
	
	while (FOREVER)
	{	
		if (xQueueReceive(data.uart_tx_queue_handle, &message, portMAX_DELAY) == pdTRUE)
  40210e:	4d09      	ldr	r5, [pc, #36]	; (402134 <taskUART_TX+0x2c>)
		{
			UARTPutStr(EDBG_UART, message, strlen(message));
  402110:	4f09      	ldr	r7, [pc, #36]	; (402138 <taskUART_TX+0x30>)
		if (xQueueReceive(data.uart_tx_queue_handle, &message, portMAX_DELAY) == pdTRUE)
  402112:	f04f 34ff 	mov.w	r4, #4294967295
  402116:	4622      	mov	r2, r4
  402118:	a901      	add	r1, sp, #4
  40211a:	4630      	mov	r0, r6
  40211c:	47a8      	blx	r5
  40211e:	2801      	cmp	r0, #1
  402120:	d1f9      	bne.n	402116 <taskUART_TX+0xe>
			UARTPutStr(EDBG_UART, message, strlen(message));
  402122:	a801      	add	r0, sp, #4
  402124:	4b05      	ldr	r3, [pc, #20]	; (40213c <taskUART_TX+0x34>)
  402126:	4798      	blx	r3
  402128:	b2c2      	uxtb	r2, r0
  40212a:	a901      	add	r1, sp, #4
  40212c:	4638      	mov	r0, r7
  40212e:	4b04      	ldr	r3, [pc, #16]	; (402140 <taskUART_TX+0x38>)
  402130:	4798      	blx	r3
  402132:	e7ee      	b.n	402112 <taskUART_TX+0xa>
  402134:	00400e99 	.word	0x00400e99
  402138:	400e0600 	.word	0x400e0600
  40213c:	00402c81 	.word	0x00402c81
  402140:	004023ed 	.word	0x004023ed

00402144 <taskUART_RX>:
}

//
void 
taskUART_RX (void* pvParameters)
{
  402144:	b580      	push	{r7, lr}
  402146:	b08e      	sub	sp, #56	; 0x38
	const struct UARTData data = *(struct UARTData*) pvParameters;
  402148:	f8d0 9000 	ldr.w	r9, [r0]
  40214c:	6846      	ldr	r6, [r0, #4]
  40214e:	f8d0 a008 	ldr.w	sl, [r0, #8]
	char rx_message;
	char tx_message[50];
	
	while (FOREVER)
	{
		if (xQueueReceive(data.uart_rx_queue_handle, &rx_message, portMAX_DELAY) == pdTRUE)
  402152:	4d1d      	ldr	r5, [pc, #116]	; (4021c8 <taskUART_RX+0x84>)
				case 'u':
				strcpy(tx_message, "Michael Kearton");
				break;
				default:
				tx_message[0] = rx_message;
				tx_message[1] = '\0';
  402154:	2700      	movs	r7, #0
				xQueueSendToBack(data.led_queue_handle, (void*) &rx_message, (TickType_t) 10);
  402156:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4021d0 <taskUART_RX+0x8c>
  40215a:	e016      	b.n	40218a <taskUART_RX+0x46>
			switch (rx_message)
  40215c:	2b75      	cmp	r3, #117	; 0x75
  40215e:	d12e      	bne.n	4021be <taskUART_RX+0x7a>
				strcpy(tx_message, "Michael Kearton");
  402160:	ac01      	add	r4, sp, #4
  402162:	4b1a      	ldr	r3, [pc, #104]	; (4021cc <taskUART_RX+0x88>)
  402164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				break;
  40216a:	e009      	b.n	402180 <taskUART_RX+0x3c>
				tx_message[0] = rx_message;
  40216c:	f88d 3004 	strb.w	r3, [sp, #4]
				tx_message[1] = '\0';
  402170:	f88d 7005 	strb.w	r7, [sp, #5]
				xQueueSendToBack(data.led_queue_handle, (void*) &rx_message, (TickType_t) 10);
  402174:	463b      	mov	r3, r7
  402176:	220a      	movs	r2, #10
  402178:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40217c:	4650      	mov	r0, sl
  40217e:	47c0      	blx	r8
				break;
			}
			
			xQueueSendToBack(data.uart_tx_queue_handle, (void*) &tx_message, (TickType_t) 10);
  402180:	463b      	mov	r3, r7
  402182:	220a      	movs	r2, #10
  402184:	a901      	add	r1, sp, #4
  402186:	4648      	mov	r0, r9
  402188:	47c0      	blx	r8
		if (xQueueReceive(data.uart_rx_queue_handle, &rx_message, portMAX_DELAY) == pdTRUE)
  40218a:	f04f 34ff 	mov.w	r4, #4294967295
  40218e:	4622      	mov	r2, r4
  402190:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402194:	4630      	mov	r0, r6
  402196:	47a8      	blx	r5
  402198:	2801      	cmp	r0, #1
  40219a:	d1f8      	bne.n	40218e <taskUART_RX+0x4a>
			switch (rx_message)
  40219c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  4021a0:	2b33      	cmp	r3, #51	; 0x33
  4021a2:	d8db      	bhi.n	40215c <taskUART_RX+0x18>
  4021a4:	2b31      	cmp	r3, #49	; 0x31
  4021a6:	d2e1      	bcs.n	40216c <taskUART_RX+0x28>
  4021a8:	2b0d      	cmp	r3, #13
  4021aa:	d108      	bne.n	4021be <taskUART_RX+0x7a>
				tx_message[0] = '\r';
  4021ac:	230d      	movs	r3, #13
  4021ae:	f88d 3004 	strb.w	r3, [sp, #4]
				tx_message[1] = '\n';
  4021b2:	230a      	movs	r3, #10
  4021b4:	f88d 3005 	strb.w	r3, [sp, #5]
				tx_message[2] = '\0';
  4021b8:	f88d 7006 	strb.w	r7, [sp, #6]
				break;
  4021bc:	e7e0      	b.n	402180 <taskUART_RX+0x3c>
				tx_message[0] = rx_message;
  4021be:	f88d 3004 	strb.w	r3, [sp, #4]
				tx_message[1] = '\0';
  4021c2:	f88d 7005 	strb.w	r7, [sp, #5]
				break;
  4021c6:	e7db      	b.n	402180 <taskUART_RX+0x3c>
  4021c8:	00400e99 	.word	0x00400e99
  4021cc:	00402f3c 	.word	0x00402f3c
  4021d0:	00400b8d 	.word	0x00400b8d

004021d4 <getLED>:
getLED (char led)
{
	uint8_t led_num = 0;
	
	// returns next LED given current, rotating through
	switch (led)
  4021d4:	2832      	cmp	r0, #50	; 0x32
  4021d6:	d006      	beq.n	4021e6 <getLED+0x12>
  4021d8:	2833      	cmp	r0, #51	; 0x33
  4021da:	d006      	beq.n	4021ea <getLED+0x16>
	uint8_t led_num = 0;
  4021dc:	2831      	cmp	r0, #49	; 0x31
  4021de:	bf14      	ite	ne
  4021e0:	2000      	movne	r0, #0
  4021e2:	2001      	moveq	r0, #1
  4021e4:	4770      	bx	lr
	{
		case '1':
			led_num = 1;
			break;
		case '2':
			led_num = 2;
  4021e6:	2002      	movs	r0, #2
			break;
  4021e8:	4770      	bx	lr
		case '3':
			led_num = 3;
  4021ea:	2003      	movs	r0, #3
			break;
		default:
			break;
	}
	return led_num;
}
  4021ec:	4770      	bx	lr
	...

004021f0 <taskBlinkLED>:
{
  4021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021f2:	b083      	sub	sp, #12
	const struct DataBlinkLED data = *(struct DataBlinkLED*) pvParameters;
  4021f4:	6804      	ldr	r4, [r0, #0]
	char message = '\0';
  4021f6:	2300      	movs	r3, #0
  4021f8:	f88d 3007 	strb.w	r3, [sp, #7]
		if (uxQueueMessagesWaiting(data.led_queue_handle))
  4021fc:	4d0a      	ldr	r5, [pc, #40]	; (402228 <taskBlinkLED+0x38>)
			xQueueReceive(data.led_queue_handle, &message, 0);
  4021fe:	4f0b      	ldr	r7, [pc, #44]	; (40222c <taskBlinkLED+0x3c>)
			led_num = getLED(message);
  402200:	4e0b      	ldr	r6, [pc, #44]	; (402230 <taskBlinkLED+0x40>)
  402202:	e002      	b.n	40220a <taskBlinkLED+0x1a>
		vTaskDelay(xDelay);
  402204:	200a      	movs	r0, #10
  402206:	4b0b      	ldr	r3, [pc, #44]	; (402234 <taskBlinkLED+0x44>)
  402208:	4798      	blx	r3
		if (uxQueueMessagesWaiting(data.led_queue_handle))
  40220a:	4620      	mov	r0, r4
  40220c:	47a8      	blx	r5
  40220e:	2800      	cmp	r0, #0
  402210:	d0f8      	beq.n	402204 <taskBlinkLED+0x14>
			xQueueReceive(data.led_queue_handle, &message, 0);
  402212:	2200      	movs	r2, #0
  402214:	f10d 0107 	add.w	r1, sp, #7
  402218:	4620      	mov	r0, r4
  40221a:	47b8      	blx	r7
			led_num = getLED(message);
  40221c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  402220:	47b0      	blx	r6
			toggleLED(led_num);				// toggle LED state
  402222:	4b05      	ldr	r3, [pc, #20]	; (402238 <taskBlinkLED+0x48>)
  402224:	4798      	blx	r3
  402226:	e7ed      	b.n	402204 <taskBlinkLED+0x14>
  402228:	00401021 	.word	0x00401021
  40222c:	00400e99 	.word	0x00400e99
  402230:	004021d5 	.word	0x004021d5
  402234:	004018b5 	.word	0x004018b5
  402238:	004020b9 	.word	0x004020b9

0040223c <OITExpansionBoardInit>:
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)


void OITExpansionBoardInit(void)
{
  40223c:	b410      	push	{r4}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40223e:	4a44      	ldr	r2, [pc, #272]	; (402350 <OITExpansionBoardInit+0x114>)
  402240:	2304      	movs	r3, #4
  402242:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402244:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402248:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40224a:	2308      	movs	r3, #8
  40224c:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40224e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402252:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402254:	4b3f      	ldr	r3, [pc, #252]	; (402354 <OITExpansionBoardInit+0x118>)
  402256:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  40225a:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40225c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402260:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402262:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402266:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402268:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40226c:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40226e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  402272:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402274:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402278:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40227a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  40227e:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402280:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402284:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402286:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40228a:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40228c:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  40228e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402292:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  402294:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  402298:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40229a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40229c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  4022a0:	675c      	str	r4, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4022a2:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4022a6:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4022aa:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4022b2:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022b4:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4022b8:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4022ba:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4022be:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4022c0:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  4022c2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4022c6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4022c8:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  4022cc:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4022ce:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4022d0:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  4022d4:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4022d6:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4022da:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4022de:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022e2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4022e6:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022e8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4022ec:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4022ee:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4022f2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4022f4:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4022f6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4022fa:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4022fc:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  402300:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402302:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402304:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  402308:	6758      	str	r0, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40230a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40230e:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402312:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402316:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40231a:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40231c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  402320:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  402326:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  402328:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  40232a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40232e:	6f11      	ldr	r1, [r2, #112]	; 0x70
  402330:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  402334:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402336:	6f51      	ldr	r1, [r2, #116]	; 0x74
  402338:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  40233c:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_ESR = mask;
  40233e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402342:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402346:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	Init4Led5BtnBoardExt1();
#endif
#ifdef OIT_4LED_5BTN_BOARD_EXT3
	Init4Led5BtnBoardExt3();
#endif
}
  40234a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40234e:	4770      	bx	lr
  402350:	400e1000 	.word	0x400e1000
  402354:	400e0e00 	.word	0x400e0e00

00402358 <initUART>:
// 
// 
//
uint8_t
initUART (Uart * pUart)
{
  402358:	b510      	push	{r4, lr}
  40235a:	4604      	mov	r4, r0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40235c:	4b16      	ldr	r3, [pc, #88]	; (4023b8 <initUART+0x60>)
  40235e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  402362:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402368:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40236a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40236c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402370:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402372:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  402376:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402378:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40237a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40237e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402380:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402382:	2007      	movs	r0, #7
  402384:	4b0d      	ldr	r3, [pc, #52]	; (4023bc <initUART+0x64>)
  402386:	4798      	blx	r3
	ioport_disable_port(IOPORT_PIOA, PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
	sysclk_enable_peripheral_clock(ID_UART0);

	// Configure UART Control Registers
	// Reset and Disable RX and TX
	pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
  402388:	23ac      	movs	r3, #172	; 0xac
  40238a:	6023      	str	r3, [r4, #0]
	}
       
	if(retVal != 1)
	{
		// Set The Actual BAUD to Control Register
		pUart->UART_BRGR = cd;
  40238c:	2334      	movs	r3, #52	; 0x34
  40238e:	6223      	str	r3, [r4, #32]

		// Configure Mode
		pUart->UART_MR = UART_SERIAL_PARITY;
  402390:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402394:	6063      	str	r3, [r4, #4]
	       
		// Disable PDC Channel
		pUart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402396:	f240 2302 	movw	r3, #514	; 0x202
  40239a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	       
		// Enable RX and TX
		pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40239e:	2350      	movs	r3, #80	; 0x50
  4023a0:	6023      	str	r3, [r4, #0]
	}
	
	// Enable RX Interrupt
	pUart->UART_IER = UART_IER_RXRDY;
  4023a2:	2301      	movs	r3, #1
  4023a4:	60a3      	str	r3, [r4, #8]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4023a6:	4b06      	ldr	r3, [pc, #24]	; (4023c0 <initUART+0x68>)
  4023a8:	2260      	movs	r2, #96	; 0x60
  4023aa:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4023ae:	2280      	movs	r2, #128	; 0x80
  4023b0:	601a      	str	r2, [r3, #0]
	// value defined in FreeRTOSConfig.h == 5
	NVIC_SetPriority(UART0_IRQn, 6);
	NVIC_EnableIRQ(UART0_IRQn);
       
	return retVal;
}
  4023b2:	2000      	movs	r0, #0
  4023b4:	bd10      	pop	{r4, pc}
  4023b6:	bf00      	nop
  4023b8:	400e0e00 	.word	0x400e0e00
  4023bc:	0040262d 	.word	0x0040262d
  4023c0:	e000e100 	.word	0xe000e100

004023c4 <UARTPutC>:
//
//
//
void
UARTPutC (Uart * pUart, char data)
{	
  4023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023c6:	4604      	mov	r4, r0
  4023c8:	460f      	mov	r7, r1
	const TickType_t		xDelay = 10 / portTICK_PERIOD_MS;
	
	// Wait for Transmitter to be Ready
	while((pUart->UART_SR & UART_SR_TXRDY) == 0)
  4023ca:	6943      	ldr	r3, [r0, #20]
  4023cc:	f013 0f02 	tst.w	r3, #2
  4023d0:	d107      	bne.n	4023e2 <UARTPutC+0x1e>
	{
		vTaskDelay(xDelay);
  4023d2:	260a      	movs	r6, #10
  4023d4:	4d04      	ldr	r5, [pc, #16]	; (4023e8 <UARTPutC+0x24>)
  4023d6:	4630      	mov	r0, r6
  4023d8:	47a8      	blx	r5
	while((pUart->UART_SR & UART_SR_TXRDY) == 0)
  4023da:	6963      	ldr	r3, [r4, #20]
  4023dc:	f013 0f02 	tst.w	r3, #2
  4023e0:	d0f9      	beq.n	4023d6 <UARTPutC+0x12>
	}
	if (data != 0)
  4023e2:	b107      	cbz	r7, 4023e6 <UARTPutC+0x22>
		pUart->UART_THR = data;
  4023e4:	61e7      	str	r7, [r4, #28]
  4023e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023e8:	004018b5 	.word	0x004018b5

004023ec <UARTPutStr>:
}

void
UARTPutStr (Uart * pUart, char * data, uint8_t len)
{	
	for (int i = 0; i < len; ++i)
  4023ec:	b162      	cbz	r2, 402408 <UARTPutStr+0x1c>
{	
  4023ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023f0:	4615      	mov	r5, r2
  4023f2:	4606      	mov	r6, r0
  4023f4:	460c      	mov	r4, r1
  4023f6:	440d      	add	r5, r1
	{
		UARTPutC(pUart, data[i]);
  4023f8:	4f04      	ldr	r7, [pc, #16]	; (40240c <UARTPutStr+0x20>)
  4023fa:	f814 1b01 	ldrb.w	r1, [r4], #1
  4023fe:	4630      	mov	r0, r6
  402400:	47b8      	blx	r7
	for (int i = 0; i < len; ++i)
  402402:	42ac      	cmp	r4, r5
  402404:	d1f9      	bne.n	4023fa <UARTPutStr+0xe>
  402406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402408:	4770      	bx	lr
  40240a:	bf00      	nop
  40240c:	004023c5 	.word	0x004023c5

00402410 <UART0_Handler>:
	}
}

void UART0_Handler (void)
{
  402410:	b510      	push	{r4, lr}
  402412:	b082      	sub	sp, #8
	uint8_t data = '\0';
  402414:	2300      	movs	r3, #0
  402416:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t uiStatus = EDBG_UART->UART_SR;
  40241a:	4b0f      	ldr	r3, [pc, #60]	; (402458 <UART0_Handler+0x48>)
  40241c:	695b      	ldr	r3, [r3, #20]
	BaseType_t xHigherPriorityTaskWoken;

	if(uiStatus & UART_SR_RXRDY)
  40241e:	f013 0f01 	tst.w	r3, #1
  402422:	d10b      	bne.n	40243c <UART0_Handler+0x2c>
		
		xQueueSendToBackFromISR(qhUART_RX,  (void*) &data, &xHigherPriorityTaskWoken);
		
	}
	// Send Queue message to task
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
  402424:	9b00      	ldr	r3, [sp, #0]
  402426:	b13b      	cbz	r3, 402438 <UART0_Handler+0x28>
  402428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40242c:	4b0b      	ldr	r3, [pc, #44]	; (40245c <UART0_Handler+0x4c>)
  40242e:	601a      	str	r2, [r3, #0]
  402430:	f3bf 8f4f 	dsb	sy
  402434:	f3bf 8f6f 	isb	sy
}
  402438:	b002      	add	sp, #8
  40243a:	bd10      	pop	{r4, pc}
		data = (uint8_t) EDBG_UART->UART_RHR;
  40243c:	4b06      	ldr	r3, [pc, #24]	; (402458 <UART0_Handler+0x48>)
  40243e:	699b      	ldr	r3, [r3, #24]
  402440:	f88d 3007 	strb.w	r3, [sp, #7]
		xQueueSendToBackFromISR(qhUART_RX,  (void*) &data, &xHigherPriorityTaskWoken);
  402444:	2300      	movs	r3, #0
  402446:	466a      	mov	r2, sp
  402448:	f10d 0107 	add.w	r1, sp, #7
  40244c:	4804      	ldr	r0, [pc, #16]	; (402460 <UART0_Handler+0x50>)
  40244e:	6800      	ldr	r0, [r0, #0]
  402450:	4c04      	ldr	r4, [pc, #16]	; (402464 <UART0_Handler+0x54>)
  402452:	47a0      	blx	r4
  402454:	e7e6      	b.n	402424 <UART0_Handler+0x14>
  402456:	bf00      	nop
  402458:	400e0600 	.word	0x400e0600
  40245c:	e000ed04 	.word	0xe000ed04
  402460:	20000644 	.word	0x20000644
  402464:	00400d81 	.word	0x00400d81

00402468 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402468:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40246a:	480e      	ldr	r0, [pc, #56]	; (4024a4 <sysclk_init+0x3c>)
  40246c:	4b0e      	ldr	r3, [pc, #56]	; (4024a8 <sysclk_init+0x40>)
  40246e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402470:	213e      	movs	r1, #62	; 0x3e
  402472:	2000      	movs	r0, #0
  402474:	4b0d      	ldr	r3, [pc, #52]	; (4024ac <sysclk_init+0x44>)
  402476:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402478:	4c0d      	ldr	r4, [pc, #52]	; (4024b0 <sysclk_init+0x48>)
  40247a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40247c:	2800      	cmp	r0, #0
  40247e:	d0fc      	beq.n	40247a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402480:	4b0c      	ldr	r3, [pc, #48]	; (4024b4 <sysclk_init+0x4c>)
  402482:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402484:	4a0c      	ldr	r2, [pc, #48]	; (4024b8 <sysclk_init+0x50>)
  402486:	4b0d      	ldr	r3, [pc, #52]	; (4024bc <sysclk_init+0x54>)
  402488:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40248a:	4c0d      	ldr	r4, [pc, #52]	; (4024c0 <sysclk_init+0x58>)
  40248c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40248e:	2800      	cmp	r0, #0
  402490:	d0fc      	beq.n	40248c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402492:	2010      	movs	r0, #16
  402494:	4b0b      	ldr	r3, [pc, #44]	; (4024c4 <sysclk_init+0x5c>)
  402496:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402498:	4b0b      	ldr	r3, [pc, #44]	; (4024c8 <sysclk_init+0x60>)
  40249a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40249c:	480b      	ldr	r0, [pc, #44]	; (4024cc <sysclk_init+0x64>)
  40249e:	4b02      	ldr	r3, [pc, #8]	; (4024a8 <sysclk_init+0x40>)
  4024a0:	4798      	blx	r3
  4024a2:	bd10      	pop	{r4, pc}
  4024a4:	07270e00 	.word	0x07270e00
  4024a8:	00402859 	.word	0x00402859
  4024ac:	004025a9 	.word	0x004025a9
  4024b0:	004025fd 	.word	0x004025fd
  4024b4:	0040260d 	.word	0x0040260d
  4024b8:	200f3f01 	.word	0x200f3f01
  4024bc:	400e0400 	.word	0x400e0400
  4024c0:	0040261d 	.word	0x0040261d
  4024c4:	00402545 	.word	0x00402545
  4024c8:	0040274d 	.word	0x0040274d
  4024cc:	05b8d800 	.word	0x05b8d800

004024d0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4024d0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4024d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4024d6:	4b18      	ldr	r3, [pc, #96]	; (402538 <board_init+0x68>)
  4024d8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4024da:	2009      	movs	r0, #9
  4024dc:	4c17      	ldr	r4, [pc, #92]	; (40253c <board_init+0x6c>)
  4024de:	47a0      	blx	r4
  4024e0:	200a      	movs	r0, #10
  4024e2:	47a0      	blx	r4
  4024e4:	200b      	movs	r0, #11
  4024e6:	47a0      	blx	r4
  4024e8:	200c      	movs	r0, #12
  4024ea:	47a0      	blx	r4
  4024ec:	200d      	movs	r0, #13
  4024ee:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4024f0:	4b13      	ldr	r3, [pc, #76]	; (402540 <board_init+0x70>)
  4024f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4024f6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4024f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4024fc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4024fe:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  402502:	2204      	movs	r2, #4
  402504:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402506:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40250a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40250c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402510:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402512:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402518:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40251a:	f021 0104 	bic.w	r1, r1, #4
  40251e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402520:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402522:	f021 0104 	bic.w	r1, r1, #4
  402526:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  402528:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40252c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402530:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402534:	bd10      	pop	{r4, pc}
  402536:	bf00      	nop
  402538:	400e1850 	.word	0x400e1850
  40253c:	0040262d 	.word	0x0040262d
  402540:	400e1400 	.word	0x400e1400

00402544 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402544:	4a17      	ldr	r2, [pc, #92]	; (4025a4 <pmc_switch_mck_to_pllack+0x60>)
  402546:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40254c:	4318      	orrs	r0, r3
  40254e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402550:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402552:	f013 0f08 	tst.w	r3, #8
  402556:	d10a      	bne.n	40256e <pmc_switch_mck_to_pllack+0x2a>
  402558:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40255c:	4911      	ldr	r1, [pc, #68]	; (4025a4 <pmc_switch_mck_to_pllack+0x60>)
  40255e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402560:	f012 0f08 	tst.w	r2, #8
  402564:	d103      	bne.n	40256e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402566:	3b01      	subs	r3, #1
  402568:	d1f9      	bne.n	40255e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40256a:	2001      	movs	r0, #1
  40256c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40256e:	4a0d      	ldr	r2, [pc, #52]	; (4025a4 <pmc_switch_mck_to_pllack+0x60>)
  402570:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402572:	f023 0303 	bic.w	r3, r3, #3
  402576:	f043 0302 	orr.w	r3, r3, #2
  40257a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40257c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40257e:	f013 0f08 	tst.w	r3, #8
  402582:	d10a      	bne.n	40259a <pmc_switch_mck_to_pllack+0x56>
  402584:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402588:	4906      	ldr	r1, [pc, #24]	; (4025a4 <pmc_switch_mck_to_pllack+0x60>)
  40258a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40258c:	f012 0f08 	tst.w	r2, #8
  402590:	d105      	bne.n	40259e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402592:	3b01      	subs	r3, #1
  402594:	d1f9      	bne.n	40258a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402596:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402598:	4770      	bx	lr
	return 0;
  40259a:	2000      	movs	r0, #0
  40259c:	4770      	bx	lr
  40259e:	2000      	movs	r0, #0
  4025a0:	4770      	bx	lr
  4025a2:	bf00      	nop
  4025a4:	400e0400 	.word	0x400e0400

004025a8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4025a8:	b9c8      	cbnz	r0, 4025de <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4025aa:	4a11      	ldr	r2, [pc, #68]	; (4025f0 <pmc_switch_mainck_to_xtal+0x48>)
  4025ac:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4025ae:	0209      	lsls	r1, r1, #8
  4025b0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4025b2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4025b6:	f023 0303 	bic.w	r3, r3, #3
  4025ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4025be:	f043 0301 	orr.w	r3, r3, #1
  4025c2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4025c4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4025c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4025c8:	f013 0f01 	tst.w	r3, #1
  4025cc:	d0fb      	beq.n	4025c6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4025ce:	4a08      	ldr	r2, [pc, #32]	; (4025f0 <pmc_switch_mainck_to_xtal+0x48>)
  4025d0:	6a13      	ldr	r3, [r2, #32]
  4025d2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4025da:	6213      	str	r3, [r2, #32]
  4025dc:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4025de:	4904      	ldr	r1, [pc, #16]	; (4025f0 <pmc_switch_mainck_to_xtal+0x48>)
  4025e0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4025e2:	4a04      	ldr	r2, [pc, #16]	; (4025f4 <pmc_switch_mainck_to_xtal+0x4c>)
  4025e4:	401a      	ands	r2, r3
  4025e6:	4b04      	ldr	r3, [pc, #16]	; (4025f8 <pmc_switch_mainck_to_xtal+0x50>)
  4025e8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4025ea:	620b      	str	r3, [r1, #32]
  4025ec:	4770      	bx	lr
  4025ee:	bf00      	nop
  4025f0:	400e0400 	.word	0x400e0400
  4025f4:	fec8fffc 	.word	0xfec8fffc
  4025f8:	01370002 	.word	0x01370002

004025fc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4025fc:	4b02      	ldr	r3, [pc, #8]	; (402608 <pmc_osc_is_ready_mainck+0xc>)
  4025fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402600:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402604:	4770      	bx	lr
  402606:	bf00      	nop
  402608:	400e0400 	.word	0x400e0400

0040260c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40260c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402610:	4b01      	ldr	r3, [pc, #4]	; (402618 <pmc_disable_pllack+0xc>)
  402612:	629a      	str	r2, [r3, #40]	; 0x28
  402614:	4770      	bx	lr
  402616:	bf00      	nop
  402618:	400e0400 	.word	0x400e0400

0040261c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40261c:	4b02      	ldr	r3, [pc, #8]	; (402628 <pmc_is_locked_pllack+0xc>)
  40261e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402620:	f000 0002 	and.w	r0, r0, #2
  402624:	4770      	bx	lr
  402626:	bf00      	nop
  402628:	400e0400 	.word	0x400e0400

0040262c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40262c:	282f      	cmp	r0, #47	; 0x2f
  40262e:	d81e      	bhi.n	40266e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402630:	281f      	cmp	r0, #31
  402632:	d80c      	bhi.n	40264e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402634:	4b11      	ldr	r3, [pc, #68]	; (40267c <pmc_enable_periph_clk+0x50>)
  402636:	699a      	ldr	r2, [r3, #24]
  402638:	2301      	movs	r3, #1
  40263a:	4083      	lsls	r3, r0
  40263c:	4393      	bics	r3, r2
  40263e:	d018      	beq.n	402672 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402640:	2301      	movs	r3, #1
  402642:	fa03 f000 	lsl.w	r0, r3, r0
  402646:	4b0d      	ldr	r3, [pc, #52]	; (40267c <pmc_enable_periph_clk+0x50>)
  402648:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40264a:	2000      	movs	r0, #0
  40264c:	4770      	bx	lr
		ul_id -= 32;
  40264e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402650:	4b0a      	ldr	r3, [pc, #40]	; (40267c <pmc_enable_periph_clk+0x50>)
  402652:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402656:	2301      	movs	r3, #1
  402658:	4083      	lsls	r3, r0
  40265a:	4393      	bics	r3, r2
  40265c:	d00b      	beq.n	402676 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40265e:	2301      	movs	r3, #1
  402660:	fa03 f000 	lsl.w	r0, r3, r0
  402664:	4b05      	ldr	r3, [pc, #20]	; (40267c <pmc_enable_periph_clk+0x50>)
  402666:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40266a:	2000      	movs	r0, #0
  40266c:	4770      	bx	lr
		return 1;
  40266e:	2001      	movs	r0, #1
  402670:	4770      	bx	lr
	return 0;
  402672:	2000      	movs	r0, #0
  402674:	4770      	bx	lr
  402676:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402678:	4770      	bx	lr
  40267a:	bf00      	nop
  40267c:	400e0400 	.word	0x400e0400

00402680 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402680:	e7fe      	b.n	402680 <Dummy_Handler>
	...

00402684 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402684:	b500      	push	{lr}
  402686:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  402688:	4b25      	ldr	r3, [pc, #148]	; (402720 <Reset_Handler+0x9c>)
  40268a:	4a26      	ldr	r2, [pc, #152]	; (402724 <Reset_Handler+0xa0>)
  40268c:	429a      	cmp	r2, r3
  40268e:	d010      	beq.n	4026b2 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  402690:	4b25      	ldr	r3, [pc, #148]	; (402728 <Reset_Handler+0xa4>)
  402692:	4a23      	ldr	r2, [pc, #140]	; (402720 <Reset_Handler+0x9c>)
  402694:	429a      	cmp	r2, r3
  402696:	d20c      	bcs.n	4026b2 <Reset_Handler+0x2e>
  402698:	3b01      	subs	r3, #1
  40269a:	1a9b      	subs	r3, r3, r2
  40269c:	f023 0303 	bic.w	r3, r3, #3
  4026a0:	3304      	adds	r3, #4
  4026a2:	4413      	add	r3, r2
  4026a4:	491f      	ldr	r1, [pc, #124]	; (402724 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  4026a6:	f851 0b04 	ldr.w	r0, [r1], #4
  4026aa:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4026ae:	429a      	cmp	r2, r3
  4026b0:	d1f9      	bne.n	4026a6 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4026b2:	4b1e      	ldr	r3, [pc, #120]	; (40272c <Reset_Handler+0xa8>)
  4026b4:	4a1e      	ldr	r2, [pc, #120]	; (402730 <Reset_Handler+0xac>)
  4026b6:	429a      	cmp	r2, r3
  4026b8:	d20a      	bcs.n	4026d0 <Reset_Handler+0x4c>
  4026ba:	3b01      	subs	r3, #1
  4026bc:	1a9b      	subs	r3, r3, r2
  4026be:	f023 0303 	bic.w	r3, r3, #3
  4026c2:	3304      	adds	r3, #4
  4026c4:	4413      	add	r3, r2
		*pDest++ = 0;
  4026c6:	2100      	movs	r1, #0
  4026c8:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4026cc:	4293      	cmp	r3, r2
  4026ce:	d1fb      	bne.n	4026c8 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4026d0:	4a18      	ldr	r2, [pc, #96]	; (402734 <Reset_Handler+0xb0>)
  4026d2:	4b19      	ldr	r3, [pc, #100]	; (402738 <Reset_Handler+0xb4>)
  4026d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4026d8:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4026da:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4026de:	fab3 f383 	clz	r3, r3
  4026e2:	095b      	lsrs	r3, r3, #5
  4026e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4026e6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4026e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4026ec:	2200      	movs	r2, #0
  4026ee:	4b13      	ldr	r3, [pc, #76]	; (40273c <Reset_Handler+0xb8>)
  4026f0:	701a      	strb	r2, [r3, #0]
	return flags;
  4026f2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4026f4:	4a12      	ldr	r2, [pc, #72]	; (402740 <Reset_Handler+0xbc>)
  4026f6:	6813      	ldr	r3, [r2, #0]
  4026f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4026fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4026fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402702:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402706:	b129      	cbz	r1, 402714 <Reset_Handler+0x90>
		cpu_irq_enable();
  402708:	2201      	movs	r2, #1
  40270a:	4b0c      	ldr	r3, [pc, #48]	; (40273c <Reset_Handler+0xb8>)
  40270c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40270e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402712:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  402714:	4b0b      	ldr	r3, [pc, #44]	; (402744 <Reset_Handler+0xc0>)
  402716:	4798      	blx	r3

	/* Branch to main function */
	main();
  402718:	4b0b      	ldr	r3, [pc, #44]	; (402748 <Reset_Handler+0xc4>)
  40271a:	4798      	blx	r3
  40271c:	e7fe      	b.n	40271c <Reset_Handler+0x98>
  40271e:	bf00      	nop
  402720:	20000000 	.word	0x20000000
  402724:	00402fbc 	.word	0x00402fbc
  402728:	20000444 	.word	0x20000444
  40272c:	2000066c 	.word	0x2000066c
  402730:	20000444 	.word	0x20000444
  402734:	e000ed00 	.word	0xe000ed00
  402738:	00400000 	.word	0x00400000
  40273c:	20000010 	.word	0x20000010
  402740:	e000ed88 	.word	0xe000ed88
  402744:	00402a5d 	.word	0x00402a5d
  402748:	004028cd 	.word	0x004028cd

0040274c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  40274c:	4b3b      	ldr	r3, [pc, #236]	; (40283c <SystemCoreClockUpdate+0xf0>)
  40274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402750:	f003 0303 	and.w	r3, r3, #3
  402754:	2b01      	cmp	r3, #1
  402756:	d01d      	beq.n	402794 <SystemCoreClockUpdate+0x48>
  402758:	b183      	cbz	r3, 40277c <SystemCoreClockUpdate+0x30>
  40275a:	2b02      	cmp	r3, #2
  40275c:	d036      	beq.n	4027cc <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40275e:	4b37      	ldr	r3, [pc, #220]	; (40283c <SystemCoreClockUpdate+0xf0>)
  402760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402762:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402766:	2b70      	cmp	r3, #112	; 0x70
  402768:	d05f      	beq.n	40282a <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40276a:	4b34      	ldr	r3, [pc, #208]	; (40283c <SystemCoreClockUpdate+0xf0>)
  40276c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40276e:	4934      	ldr	r1, [pc, #208]	; (402840 <SystemCoreClockUpdate+0xf4>)
  402770:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402774:	680b      	ldr	r3, [r1, #0]
  402776:	40d3      	lsrs	r3, r2
  402778:	600b      	str	r3, [r1, #0]
  40277a:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40277c:	4b31      	ldr	r3, [pc, #196]	; (402844 <SystemCoreClockUpdate+0xf8>)
  40277e:	695b      	ldr	r3, [r3, #20]
  402780:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402784:	bf14      	ite	ne
  402786:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40278a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40278e:	4b2c      	ldr	r3, [pc, #176]	; (402840 <SystemCoreClockUpdate+0xf4>)
  402790:	601a      	str	r2, [r3, #0]
  402792:	e7e4      	b.n	40275e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402794:	4b29      	ldr	r3, [pc, #164]	; (40283c <SystemCoreClockUpdate+0xf0>)
  402796:	6a1b      	ldr	r3, [r3, #32]
  402798:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40279c:	d003      	beq.n	4027a6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40279e:	4a2a      	ldr	r2, [pc, #168]	; (402848 <SystemCoreClockUpdate+0xfc>)
  4027a0:	4b27      	ldr	r3, [pc, #156]	; (402840 <SystemCoreClockUpdate+0xf4>)
  4027a2:	601a      	str	r2, [r3, #0]
  4027a4:	e7db      	b.n	40275e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4027a6:	4a29      	ldr	r2, [pc, #164]	; (40284c <SystemCoreClockUpdate+0x100>)
  4027a8:	4b25      	ldr	r3, [pc, #148]	; (402840 <SystemCoreClockUpdate+0xf4>)
  4027aa:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4027ac:	4b23      	ldr	r3, [pc, #140]	; (40283c <SystemCoreClockUpdate+0xf0>)
  4027ae:	6a1b      	ldr	r3, [r3, #32]
  4027b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027b4:	2b10      	cmp	r3, #16
  4027b6:	d005      	beq.n	4027c4 <SystemCoreClockUpdate+0x78>
  4027b8:	2b20      	cmp	r3, #32
  4027ba:	d1d0      	bne.n	40275e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  4027bc:	4a22      	ldr	r2, [pc, #136]	; (402848 <SystemCoreClockUpdate+0xfc>)
  4027be:	4b20      	ldr	r3, [pc, #128]	; (402840 <SystemCoreClockUpdate+0xf4>)
  4027c0:	601a      	str	r2, [r3, #0]
				break;
  4027c2:	e7cc      	b.n	40275e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  4027c4:	4a22      	ldr	r2, [pc, #136]	; (402850 <SystemCoreClockUpdate+0x104>)
  4027c6:	4b1e      	ldr	r3, [pc, #120]	; (402840 <SystemCoreClockUpdate+0xf4>)
  4027c8:	601a      	str	r2, [r3, #0]
				break;
  4027ca:	e7c8      	b.n	40275e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4027cc:	4b1b      	ldr	r3, [pc, #108]	; (40283c <SystemCoreClockUpdate+0xf0>)
  4027ce:	6a1b      	ldr	r3, [r3, #32]
  4027d0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4027d4:	d016      	beq.n	402804 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4027d6:	4a1c      	ldr	r2, [pc, #112]	; (402848 <SystemCoreClockUpdate+0xfc>)
  4027d8:	4b19      	ldr	r3, [pc, #100]	; (402840 <SystemCoreClockUpdate+0xf4>)
  4027da:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4027dc:	4b17      	ldr	r3, [pc, #92]	; (40283c <SystemCoreClockUpdate+0xf0>)
  4027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027e0:	f003 0303 	and.w	r3, r3, #3
  4027e4:	2b02      	cmp	r3, #2
  4027e6:	d1ba      	bne.n	40275e <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4027e8:	4a14      	ldr	r2, [pc, #80]	; (40283c <SystemCoreClockUpdate+0xf0>)
  4027ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4027ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4027ee:	4814      	ldr	r0, [pc, #80]	; (402840 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4027f0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4027f4:	6803      	ldr	r3, [r0, #0]
  4027f6:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4027fa:	b2d2      	uxtb	r2, r2
  4027fc:	fbb3 f3f2 	udiv	r3, r3, r2
  402800:	6003      	str	r3, [r0, #0]
  402802:	e7ac      	b.n	40275e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402804:	4a11      	ldr	r2, [pc, #68]	; (40284c <SystemCoreClockUpdate+0x100>)
  402806:	4b0e      	ldr	r3, [pc, #56]	; (402840 <SystemCoreClockUpdate+0xf4>)
  402808:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40280a:	4b0c      	ldr	r3, [pc, #48]	; (40283c <SystemCoreClockUpdate+0xf0>)
  40280c:	6a1b      	ldr	r3, [r3, #32]
  40280e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402812:	2b10      	cmp	r3, #16
  402814:	d005      	beq.n	402822 <SystemCoreClockUpdate+0xd6>
  402816:	2b20      	cmp	r3, #32
  402818:	d1e0      	bne.n	4027dc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  40281a:	4a0b      	ldr	r2, [pc, #44]	; (402848 <SystemCoreClockUpdate+0xfc>)
  40281c:	4b08      	ldr	r3, [pc, #32]	; (402840 <SystemCoreClockUpdate+0xf4>)
  40281e:	601a      	str	r2, [r3, #0]
				break;
  402820:	e7dc      	b.n	4027dc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  402822:	4a0b      	ldr	r2, [pc, #44]	; (402850 <SystemCoreClockUpdate+0x104>)
  402824:	4b06      	ldr	r3, [pc, #24]	; (402840 <SystemCoreClockUpdate+0xf4>)
  402826:	601a      	str	r2, [r3, #0]
				break;
  402828:	e7d8      	b.n	4027dc <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40282a:	4a05      	ldr	r2, [pc, #20]	; (402840 <SystemCoreClockUpdate+0xf4>)
  40282c:	6813      	ldr	r3, [r2, #0]
  40282e:	4909      	ldr	r1, [pc, #36]	; (402854 <SystemCoreClockUpdate+0x108>)
  402830:	fba1 1303 	umull	r1, r3, r1, r3
  402834:	085b      	lsrs	r3, r3, #1
  402836:	6013      	str	r3, [r2, #0]
  402838:	4770      	bx	lr
  40283a:	bf00      	nop
  40283c:	400e0400 	.word	0x400e0400
  402840:	20000014 	.word	0x20000014
  402844:	400e1810 	.word	0x400e1810
  402848:	00b71b00 	.word	0x00b71b00
  40284c:	003d0900 	.word	0x003d0900
  402850:	007a1200 	.word	0x007a1200
  402854:	aaaaaaab 	.word	0xaaaaaaab

00402858 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402858:	4b12      	ldr	r3, [pc, #72]	; (4028a4 <system_init_flash+0x4c>)
  40285a:	4298      	cmp	r0, r3
  40285c:	d911      	bls.n	402882 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  40285e:	4b12      	ldr	r3, [pc, #72]	; (4028a8 <system_init_flash+0x50>)
  402860:	4298      	cmp	r0, r3
  402862:	d913      	bls.n	40288c <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  402864:	4b11      	ldr	r3, [pc, #68]	; (4028ac <system_init_flash+0x54>)
  402866:	4298      	cmp	r0, r3
  402868:	d914      	bls.n	402894 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40286a:	4b11      	ldr	r3, [pc, #68]	; (4028b0 <system_init_flash+0x58>)
  40286c:	4298      	cmp	r0, r3
  40286e:	d915      	bls.n	40289c <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402870:	4b10      	ldr	r3, [pc, #64]	; (4028b4 <system_init_flash+0x5c>)
  402872:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402874:	bf94      	ite	ls
  402876:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40287a:	4a0f      	ldrhi	r2, [pc, #60]	; (4028b8 <system_init_flash+0x60>)
  40287c:	4b0f      	ldr	r3, [pc, #60]	; (4028bc <system_init_flash+0x64>)
  40287e:	601a      	str	r2, [r3, #0]
  402880:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402882:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402886:	4b0d      	ldr	r3, [pc, #52]	; (4028bc <system_init_flash+0x64>)
  402888:	601a      	str	r2, [r3, #0]
  40288a:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40288c:	4a0c      	ldr	r2, [pc, #48]	; (4028c0 <system_init_flash+0x68>)
  40288e:	4b0b      	ldr	r3, [pc, #44]	; (4028bc <system_init_flash+0x64>)
  402890:	601a      	str	r2, [r3, #0]
  402892:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402894:	4a0b      	ldr	r2, [pc, #44]	; (4028c4 <system_init_flash+0x6c>)
  402896:	4b09      	ldr	r3, [pc, #36]	; (4028bc <system_init_flash+0x64>)
  402898:	601a      	str	r2, [r3, #0]
  40289a:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40289c:	4a0a      	ldr	r2, [pc, #40]	; (4028c8 <system_init_flash+0x70>)
  40289e:	4b07      	ldr	r3, [pc, #28]	; (4028bc <system_init_flash+0x64>)
  4028a0:	601a      	str	r2, [r3, #0]
  4028a2:	4770      	bx	lr
  4028a4:	01312cff 	.word	0x01312cff
  4028a8:	026259ff 	.word	0x026259ff
  4028ac:	039386ff 	.word	0x039386ff
  4028b0:	04c4b3ff 	.word	0x04c4b3ff
  4028b4:	05f5e0ff 	.word	0x05f5e0ff
  4028b8:	04000500 	.word	0x04000500
  4028bc:	400e0a00 	.word	0x400e0a00
  4028c0:	04000100 	.word	0x04000100
  4028c4:	04000200 	.word	0x04000200
  4028c8:	04000300 	.word	0x04000300

004028cc <main>:
/************************************************************
	main: LED Control Application	

*************************************************************/
int main (void)
{
  4028cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4028d0:	b093      	sub	sp, #76	; 0x4c
}

static void prvMiscInitialisation( void )
{
       /* Initialize the SAM system */
       sysclk_init();
  4028d2:	4b39      	ldr	r3, [pc, #228]	; (4029b8 <main+0xec>)
  4028d4:	4798      	blx	r3
       board_init();
  4028d6:	4b39      	ldr	r3, [pc, #228]	; (4029bc <main+0xf0>)
  4028d8:	4798      	blx	r3
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  4028da:	4a39      	ldr	r2, [pc, #228]	; (4029c0 <main+0xf4>)
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  4028dc:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
  4028e0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  4028e4:	f023 0307 	bic.w	r3, r3, #7
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  4028e8:	3207      	adds	r2, #7
  4028ea:	f022 0207 	bic.w	r2, r2, #7
       HeapRegion_t xHeapRegions[] = {
  4028ee:	9202      	str	r2, [sp, #8]
       ulHeapSize -= 1024;
  4028f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  4028f4:	9303      	str	r3, [sp, #12]
  4028f6:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4028fa:	9304      	str	r3, [sp, #16]
  4028fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402900:	9305      	str	r3, [sp, #20]
  402902:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  402906:	9206      	str	r2, [sp, #24]
  402908:	9307      	str	r3, [sp, #28]
  40290a:	2400      	movs	r4, #0
  40290c:	9408      	str	r4, [sp, #32]
  40290e:	9409      	str	r4, [sp, #36]	; 0x24
       vPortDefineHeapRegions( xHeapRegions );
  402910:	a802      	add	r0, sp, #8
  402912:	4b2c      	ldr	r3, [pc, #176]	; (4029c4 <main+0xf8>)
  402914:	4798      	blx	r3
       prvInitialiseHeap();
       pmc_enable_periph_clk(ID_PIOA);
  402916:	2009      	movs	r0, #9
  402918:	4d2b      	ldr	r5, [pc, #172]	; (4029c8 <main+0xfc>)
  40291a:	47a8      	blx	r5
       pmc_enable_periph_clk(ID_PIOB);
  40291c:	200a      	movs	r0, #10
  40291e:	47a8      	blx	r5
	   OITExpansionBoardInit();
  402920:	4b2a      	ldr	r3, [pc, #168]	; (4029cc <main+0x100>)
  402922:	4798      	blx	r3
	   initUART(EDBG_UART);
  402924:	482a      	ldr	r0, [pc, #168]	; (4029d0 <main+0x104>)
  402926:	4b2b      	ldr	r3, [pc, #172]	; (4029d4 <main+0x108>)
  402928:	4798      	blx	r3
	uint8_t onboard_LED = 0; // shorthand for onboard LED referenced by taskHeartbeat
  40292a:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
	struct DataBlinkLED led_blink_data = {NULL};
  40292e:	9410      	str	r4, [sp, #64]	; 0x40
	struct UARTData uart_data_tx = {NULL, NULL, NULL}; // data for UART TX task
  402930:	940d      	str	r4, [sp, #52]	; 0x34
  402932:	940e      	str	r4, [sp, #56]	; 0x38
  402934:	940f      	str	r4, [sp, #60]	; 0x3c
	struct UARTData uart_data_rx = {NULL, NULL, NULL}; // data for UART RX task
  402936:	940a      	str	r4, [sp, #40]	; 0x28
  402938:	940b      	str	r4, [sp, #44]	; 0x2c
  40293a:	940c      	str	r4, [sp, #48]	; 0x30
	xTaskCreate(taskHeartbeat,
  40293c:	9401      	str	r4, [sp, #4]
  40293e:	2701      	movs	r7, #1
  402940:	9700      	str	r7, [sp, #0]
  402942:	f10d 0347 	add.w	r3, sp, #71	; 0x47
  402946:	2282      	movs	r2, #130	; 0x82
  402948:	4923      	ldr	r1, [pc, #140]	; (4029d8 <main+0x10c>)
  40294a:	4824      	ldr	r0, [pc, #144]	; (4029dc <main+0x110>)
  40294c:	4d24      	ldr	r5, [pc, #144]	; (4029e0 <main+0x114>)
  40294e:	47a8      	blx	r5
	qhLED = xQueueCreate(5, 1);
  402950:	4622      	mov	r2, r4
  402952:	4639      	mov	r1, r7
  402954:	2005      	movs	r0, #5
  402956:	4e23      	ldr	r6, [pc, #140]	; (4029e4 <main+0x118>)
  402958:	47b0      	blx	r6
  40295a:	4680      	mov	r8, r0
	led_blink_data.led_queue_handle = qhLED;
  40295c:	9010      	str	r0, [sp, #64]	; 0x40
	qhUART_TX = xQueueCreate(20, 50);
  40295e:	4622      	mov	r2, r4
  402960:	2132      	movs	r1, #50	; 0x32
  402962:	2014      	movs	r0, #20
  402964:	47b0      	blx	r6
  402966:	4681      	mov	r9, r0
	qhUART_RX = xQueueCreate(20, 1);
  402968:	4622      	mov	r2, r4
  40296a:	4639      	mov	r1, r7
  40296c:	2014      	movs	r0, #20
  40296e:	47b0      	blx	r6
  402970:	4b1d      	ldr	r3, [pc, #116]	; (4029e8 <main+0x11c>)
  402972:	6018      	str	r0, [r3, #0]
	uart_data_tx.uart_tx_queue_handle = qhUART_TX;
  402974:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	uart_data_rx.uart_tx_queue_handle = qhUART_TX;
  402978:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
	uart_data_rx.uart_rx_queue_handle = qhUART_RX;
  40297c:	900b      	str	r0, [sp, #44]	; 0x2c
	uart_data_rx.led_queue_handle = qhLED;
  40297e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
	xTaskCreate(taskUART_TX,
  402982:	9401      	str	r4, [sp, #4]
  402984:	2303      	movs	r3, #3
  402986:	9300      	str	r3, [sp, #0]
  402988:	ab0d      	add	r3, sp, #52	; 0x34
  40298a:	2282      	movs	r2, #130	; 0x82
  40298c:	4917      	ldr	r1, [pc, #92]	; (4029ec <main+0x120>)
  40298e:	4818      	ldr	r0, [pc, #96]	; (4029f0 <main+0x124>)
  402990:	47a8      	blx	r5
	xTaskCreate(taskUART_RX,
  402992:	9401      	str	r4, [sp, #4]
  402994:	2304      	movs	r3, #4
  402996:	9300      	str	r3, [sp, #0]
  402998:	ab0a      	add	r3, sp, #40	; 0x28
  40299a:	2282      	movs	r2, #130	; 0x82
  40299c:	4915      	ldr	r1, [pc, #84]	; (4029f4 <main+0x128>)
  40299e:	4816      	ldr	r0, [pc, #88]	; (4029f8 <main+0x12c>)
  4029a0:	47a8      	blx	r5
	xTaskCreate(taskBlinkLED,
  4029a2:	9401      	str	r4, [sp, #4]
  4029a4:	2302      	movs	r3, #2
  4029a6:	9300      	str	r3, [sp, #0]
  4029a8:	ab10      	add	r3, sp, #64	; 0x40
  4029aa:	2282      	movs	r2, #130	; 0x82
  4029ac:	4913      	ldr	r1, [pc, #76]	; (4029fc <main+0x130>)
  4029ae:	4814      	ldr	r0, [pc, #80]	; (402a00 <main+0x134>)
  4029b0:	47a8      	blx	r5
	vTaskStartScheduler();
  4029b2:	4b14      	ldr	r3, [pc, #80]	; (402a04 <main+0x138>)
  4029b4:	4798      	blx	r3
  4029b6:	e7fe      	b.n	4029b6 <main+0xea>
  4029b8:	00402469 	.word	0x00402469
  4029bc:	004024d1 	.word	0x004024d1
  4029c0:	20003670 	.word	0x20003670
  4029c4:	00400775 	.word	0x00400775
  4029c8:	0040262d 	.word	0x0040262d
  4029cc:	0040223d 	.word	0x0040223d
  4029d0:	400e0600 	.word	0x400e0600
  4029d4:	00402359 	.word	0x00402359
  4029d8:	00402f4c 	.word	0x00402f4c
  4029dc:	004020e9 	.word	0x004020e9
  4029e0:	00401275 	.word	0x00401275
  4029e4:	00400b25 	.word	0x00400b25
  4029e8:	20000644 	.word	0x20000644
  4029ec:	00402f5c 	.word	0x00402f5c
  4029f0:	00402109 	.word	0x00402109
  4029f4:	00402f68 	.word	0x00402f68
  4029f8:	00402145 	.word	0x00402145
  4029fc:	00402f74 	.word	0x00402f74
  402a00:	004021f1 	.word	0x004021f1
  402a04:	004014a5 	.word	0x004014a5

00402a08 <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  402a08:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  402a0a:	2300      	movs	r3, #0
  402a0c:	9301      	str	r3, [sp, #4]
        __asm volatile
  402a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
  402a12:	f383 8811 	msr	BASEPRI, r3
  402a16:	f3bf 8f6f 	isb	sy
  402a1a:	f3bf 8f4f 	dsb	sy

       /* Setting ulBlockVariable to a non-zero value in the debugger will allow
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
  402a1e:	9b01      	ldr	r3, [sp, #4]
  402a20:	b91b      	cbnz	r3, 402a2a <vAssertCalled+0x22>
              {
                     __asm volatile( "NOP" );
  402a22:	bf00      	nop
              while( ulBlockVariable == 0UL )
  402a24:	9b01      	ldr	r3, [sp, #4]
  402a26:	2b00      	cmp	r3, #0
  402a28:	d0fb      	beq.n	402a22 <vAssertCalled+0x1a>
        __asm volatile
  402a2a:	2300      	movs	r3, #0
  402a2c:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  402a30:	b002      	add	sp, #8
  402a32:	4770      	bx	lr

00402a34 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  402a34:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  402a36:	21bc      	movs	r1, #188	; 0xbc
  402a38:	4801      	ldr	r0, [pc, #4]	; (402a40 <vApplicationMallocFailedHook+0xc>)
  402a3a:	4b02      	ldr	r3, [pc, #8]	; (402a44 <vApplicationMallocFailedHook+0x10>)
  402a3c:	4798      	blx	r3
  402a3e:	bd08      	pop	{r3, pc}
  402a40:	00402f84 	.word	0x00402f84
  402a44:	00402a09 	.word	0x00402a09

00402a48 <vApplicationStackOverflowHook>:
        __asm volatile
  402a48:	f04f 0350 	mov.w	r3, #80	; 0x50
  402a4c:	f383 8811 	msr	BASEPRI, r3
  402a50:	f3bf 8f6f 	isb	sy
  402a54:	f3bf 8f4f 	dsb	sy
  402a58:	e7fe      	b.n	402a58 <vApplicationStackOverflowHook+0x10>
	...

00402a5c <__libc_init_array>:
  402a5c:	b570      	push	{r4, r5, r6, lr}
  402a5e:	4e0f      	ldr	r6, [pc, #60]	; (402a9c <__libc_init_array+0x40>)
  402a60:	4d0f      	ldr	r5, [pc, #60]	; (402aa0 <__libc_init_array+0x44>)
  402a62:	1b76      	subs	r6, r6, r5
  402a64:	10b6      	asrs	r6, r6, #2
  402a66:	bf18      	it	ne
  402a68:	2400      	movne	r4, #0
  402a6a:	d005      	beq.n	402a78 <__libc_init_array+0x1c>
  402a6c:	3401      	adds	r4, #1
  402a6e:	f855 3b04 	ldr.w	r3, [r5], #4
  402a72:	4798      	blx	r3
  402a74:	42a6      	cmp	r6, r4
  402a76:	d1f9      	bne.n	402a6c <__libc_init_array+0x10>
  402a78:	4e0a      	ldr	r6, [pc, #40]	; (402aa4 <__libc_init_array+0x48>)
  402a7a:	4d0b      	ldr	r5, [pc, #44]	; (402aa8 <__libc_init_array+0x4c>)
  402a7c:	1b76      	subs	r6, r6, r5
  402a7e:	f000 fa8b 	bl	402f98 <_init>
  402a82:	10b6      	asrs	r6, r6, #2
  402a84:	bf18      	it	ne
  402a86:	2400      	movne	r4, #0
  402a88:	d006      	beq.n	402a98 <__libc_init_array+0x3c>
  402a8a:	3401      	adds	r4, #1
  402a8c:	f855 3b04 	ldr.w	r3, [r5], #4
  402a90:	4798      	blx	r3
  402a92:	42a6      	cmp	r6, r4
  402a94:	d1f9      	bne.n	402a8a <__libc_init_array+0x2e>
  402a96:	bd70      	pop	{r4, r5, r6, pc}
  402a98:	bd70      	pop	{r4, r5, r6, pc}
  402a9a:	bf00      	nop
  402a9c:	00402fa4 	.word	0x00402fa4
  402aa0:	00402fa4 	.word	0x00402fa4
  402aa4:	00402fac 	.word	0x00402fac
  402aa8:	00402fa4 	.word	0x00402fa4

00402aac <memcpy>:
  402aac:	4684      	mov	ip, r0
  402aae:	ea41 0300 	orr.w	r3, r1, r0
  402ab2:	f013 0303 	ands.w	r3, r3, #3
  402ab6:	d16d      	bne.n	402b94 <memcpy+0xe8>
  402ab8:	3a40      	subs	r2, #64	; 0x40
  402aba:	d341      	bcc.n	402b40 <memcpy+0x94>
  402abc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ac0:	f840 3b04 	str.w	r3, [r0], #4
  402ac4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ac8:	f840 3b04 	str.w	r3, [r0], #4
  402acc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ad0:	f840 3b04 	str.w	r3, [r0], #4
  402ad4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ad8:	f840 3b04 	str.w	r3, [r0], #4
  402adc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ae0:	f840 3b04 	str.w	r3, [r0], #4
  402ae4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ae8:	f840 3b04 	str.w	r3, [r0], #4
  402aec:	f851 3b04 	ldr.w	r3, [r1], #4
  402af0:	f840 3b04 	str.w	r3, [r0], #4
  402af4:	f851 3b04 	ldr.w	r3, [r1], #4
  402af8:	f840 3b04 	str.w	r3, [r0], #4
  402afc:	f851 3b04 	ldr.w	r3, [r1], #4
  402b00:	f840 3b04 	str.w	r3, [r0], #4
  402b04:	f851 3b04 	ldr.w	r3, [r1], #4
  402b08:	f840 3b04 	str.w	r3, [r0], #4
  402b0c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b10:	f840 3b04 	str.w	r3, [r0], #4
  402b14:	f851 3b04 	ldr.w	r3, [r1], #4
  402b18:	f840 3b04 	str.w	r3, [r0], #4
  402b1c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b20:	f840 3b04 	str.w	r3, [r0], #4
  402b24:	f851 3b04 	ldr.w	r3, [r1], #4
  402b28:	f840 3b04 	str.w	r3, [r0], #4
  402b2c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b30:	f840 3b04 	str.w	r3, [r0], #4
  402b34:	f851 3b04 	ldr.w	r3, [r1], #4
  402b38:	f840 3b04 	str.w	r3, [r0], #4
  402b3c:	3a40      	subs	r2, #64	; 0x40
  402b3e:	d2bd      	bcs.n	402abc <memcpy+0x10>
  402b40:	3230      	adds	r2, #48	; 0x30
  402b42:	d311      	bcc.n	402b68 <memcpy+0xbc>
  402b44:	f851 3b04 	ldr.w	r3, [r1], #4
  402b48:	f840 3b04 	str.w	r3, [r0], #4
  402b4c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b50:	f840 3b04 	str.w	r3, [r0], #4
  402b54:	f851 3b04 	ldr.w	r3, [r1], #4
  402b58:	f840 3b04 	str.w	r3, [r0], #4
  402b5c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b60:	f840 3b04 	str.w	r3, [r0], #4
  402b64:	3a10      	subs	r2, #16
  402b66:	d2ed      	bcs.n	402b44 <memcpy+0x98>
  402b68:	320c      	adds	r2, #12
  402b6a:	d305      	bcc.n	402b78 <memcpy+0xcc>
  402b6c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b70:	f840 3b04 	str.w	r3, [r0], #4
  402b74:	3a04      	subs	r2, #4
  402b76:	d2f9      	bcs.n	402b6c <memcpy+0xc0>
  402b78:	3204      	adds	r2, #4
  402b7a:	d008      	beq.n	402b8e <memcpy+0xe2>
  402b7c:	07d2      	lsls	r2, r2, #31
  402b7e:	bf1c      	itt	ne
  402b80:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402b84:	f800 3b01 	strbne.w	r3, [r0], #1
  402b88:	d301      	bcc.n	402b8e <memcpy+0xe2>
  402b8a:	880b      	ldrh	r3, [r1, #0]
  402b8c:	8003      	strh	r3, [r0, #0]
  402b8e:	4660      	mov	r0, ip
  402b90:	4770      	bx	lr
  402b92:	bf00      	nop
  402b94:	2a08      	cmp	r2, #8
  402b96:	d313      	bcc.n	402bc0 <memcpy+0x114>
  402b98:	078b      	lsls	r3, r1, #30
  402b9a:	d08d      	beq.n	402ab8 <memcpy+0xc>
  402b9c:	f010 0303 	ands.w	r3, r0, #3
  402ba0:	d08a      	beq.n	402ab8 <memcpy+0xc>
  402ba2:	f1c3 0304 	rsb	r3, r3, #4
  402ba6:	1ad2      	subs	r2, r2, r3
  402ba8:	07db      	lsls	r3, r3, #31
  402baa:	bf1c      	itt	ne
  402bac:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402bb0:	f800 3b01 	strbne.w	r3, [r0], #1
  402bb4:	d380      	bcc.n	402ab8 <memcpy+0xc>
  402bb6:	f831 3b02 	ldrh.w	r3, [r1], #2
  402bba:	f820 3b02 	strh.w	r3, [r0], #2
  402bbe:	e77b      	b.n	402ab8 <memcpy+0xc>
  402bc0:	3a04      	subs	r2, #4
  402bc2:	d3d9      	bcc.n	402b78 <memcpy+0xcc>
  402bc4:	3a01      	subs	r2, #1
  402bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
  402bca:	f800 3b01 	strb.w	r3, [r0], #1
  402bce:	d2f9      	bcs.n	402bc4 <memcpy+0x118>
  402bd0:	780b      	ldrb	r3, [r1, #0]
  402bd2:	7003      	strb	r3, [r0, #0]
  402bd4:	784b      	ldrb	r3, [r1, #1]
  402bd6:	7043      	strb	r3, [r0, #1]
  402bd8:	788b      	ldrb	r3, [r1, #2]
  402bda:	7083      	strb	r3, [r0, #2]
  402bdc:	4660      	mov	r0, ip
  402bde:	4770      	bx	lr

00402be0 <memset>:
  402be0:	b470      	push	{r4, r5, r6}
  402be2:	0786      	lsls	r6, r0, #30
  402be4:	d046      	beq.n	402c74 <memset+0x94>
  402be6:	1e54      	subs	r4, r2, #1
  402be8:	2a00      	cmp	r2, #0
  402bea:	d041      	beq.n	402c70 <memset+0x90>
  402bec:	b2ca      	uxtb	r2, r1
  402bee:	4603      	mov	r3, r0
  402bf0:	e002      	b.n	402bf8 <memset+0x18>
  402bf2:	f114 34ff 	adds.w	r4, r4, #4294967295
  402bf6:	d33b      	bcc.n	402c70 <memset+0x90>
  402bf8:	f803 2b01 	strb.w	r2, [r3], #1
  402bfc:	079d      	lsls	r5, r3, #30
  402bfe:	d1f8      	bne.n	402bf2 <memset+0x12>
  402c00:	2c03      	cmp	r4, #3
  402c02:	d92e      	bls.n	402c62 <memset+0x82>
  402c04:	b2cd      	uxtb	r5, r1
  402c06:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402c0a:	2c0f      	cmp	r4, #15
  402c0c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402c10:	d919      	bls.n	402c46 <memset+0x66>
  402c12:	f103 0210 	add.w	r2, r3, #16
  402c16:	4626      	mov	r6, r4
  402c18:	3e10      	subs	r6, #16
  402c1a:	2e0f      	cmp	r6, #15
  402c1c:	f842 5c10 	str.w	r5, [r2, #-16]
  402c20:	f842 5c0c 	str.w	r5, [r2, #-12]
  402c24:	f842 5c08 	str.w	r5, [r2, #-8]
  402c28:	f842 5c04 	str.w	r5, [r2, #-4]
  402c2c:	f102 0210 	add.w	r2, r2, #16
  402c30:	d8f2      	bhi.n	402c18 <memset+0x38>
  402c32:	f1a4 0210 	sub.w	r2, r4, #16
  402c36:	f022 020f 	bic.w	r2, r2, #15
  402c3a:	f004 040f 	and.w	r4, r4, #15
  402c3e:	3210      	adds	r2, #16
  402c40:	2c03      	cmp	r4, #3
  402c42:	4413      	add	r3, r2
  402c44:	d90d      	bls.n	402c62 <memset+0x82>
  402c46:	461e      	mov	r6, r3
  402c48:	4622      	mov	r2, r4
  402c4a:	3a04      	subs	r2, #4
  402c4c:	2a03      	cmp	r2, #3
  402c4e:	f846 5b04 	str.w	r5, [r6], #4
  402c52:	d8fa      	bhi.n	402c4a <memset+0x6a>
  402c54:	1f22      	subs	r2, r4, #4
  402c56:	f022 0203 	bic.w	r2, r2, #3
  402c5a:	3204      	adds	r2, #4
  402c5c:	4413      	add	r3, r2
  402c5e:	f004 0403 	and.w	r4, r4, #3
  402c62:	b12c      	cbz	r4, 402c70 <memset+0x90>
  402c64:	b2c9      	uxtb	r1, r1
  402c66:	441c      	add	r4, r3
  402c68:	f803 1b01 	strb.w	r1, [r3], #1
  402c6c:	429c      	cmp	r4, r3
  402c6e:	d1fb      	bne.n	402c68 <memset+0x88>
  402c70:	bc70      	pop	{r4, r5, r6}
  402c72:	4770      	bx	lr
  402c74:	4614      	mov	r4, r2
  402c76:	4603      	mov	r3, r0
  402c78:	e7c2      	b.n	402c00 <memset+0x20>
  402c7a:	bf00      	nop
  402c7c:	0000      	movs	r0, r0
	...

00402c80 <strlen>:
  402c80:	f890 f000 	pld	[r0]
  402c84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402c88:	f020 0107 	bic.w	r1, r0, #7
  402c8c:	f06f 0c00 	mvn.w	ip, #0
  402c90:	f010 0407 	ands.w	r4, r0, #7
  402c94:	f891 f020 	pld	[r1, #32]
  402c98:	f040 8049 	bne.w	402d2e <strlen+0xae>
  402c9c:	f04f 0400 	mov.w	r4, #0
  402ca0:	f06f 0007 	mvn.w	r0, #7
  402ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402ca8:	f891 f040 	pld	[r1, #64]	; 0x40
  402cac:	f100 0008 	add.w	r0, r0, #8
  402cb0:	fa82 f24c 	uadd8	r2, r2, ip
  402cb4:	faa4 f28c 	sel	r2, r4, ip
  402cb8:	fa83 f34c 	uadd8	r3, r3, ip
  402cbc:	faa2 f38c 	sel	r3, r2, ip
  402cc0:	bb4b      	cbnz	r3, 402d16 <strlen+0x96>
  402cc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402cc6:	fa82 f24c 	uadd8	r2, r2, ip
  402cca:	f100 0008 	add.w	r0, r0, #8
  402cce:	faa4 f28c 	sel	r2, r4, ip
  402cd2:	fa83 f34c 	uadd8	r3, r3, ip
  402cd6:	faa2 f38c 	sel	r3, r2, ip
  402cda:	b9e3      	cbnz	r3, 402d16 <strlen+0x96>
  402cdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402ce0:	fa82 f24c 	uadd8	r2, r2, ip
  402ce4:	f100 0008 	add.w	r0, r0, #8
  402ce8:	faa4 f28c 	sel	r2, r4, ip
  402cec:	fa83 f34c 	uadd8	r3, r3, ip
  402cf0:	faa2 f38c 	sel	r3, r2, ip
  402cf4:	b97b      	cbnz	r3, 402d16 <strlen+0x96>
  402cf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402cfa:	f101 0120 	add.w	r1, r1, #32
  402cfe:	fa82 f24c 	uadd8	r2, r2, ip
  402d02:	f100 0008 	add.w	r0, r0, #8
  402d06:	faa4 f28c 	sel	r2, r4, ip
  402d0a:	fa83 f34c 	uadd8	r3, r3, ip
  402d0e:	faa2 f38c 	sel	r3, r2, ip
  402d12:	2b00      	cmp	r3, #0
  402d14:	d0c6      	beq.n	402ca4 <strlen+0x24>
  402d16:	2a00      	cmp	r2, #0
  402d18:	bf04      	itt	eq
  402d1a:	3004      	addeq	r0, #4
  402d1c:	461a      	moveq	r2, r3
  402d1e:	ba12      	rev	r2, r2
  402d20:	fab2 f282 	clz	r2, r2
  402d24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402d28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402d2c:	4770      	bx	lr
  402d2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402d32:	f004 0503 	and.w	r5, r4, #3
  402d36:	f1c4 0000 	rsb	r0, r4, #0
  402d3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402d3e:	f014 0f04 	tst.w	r4, #4
  402d42:	f891 f040 	pld	[r1, #64]	; 0x40
  402d46:	fa0c f505 	lsl.w	r5, ip, r5
  402d4a:	ea62 0205 	orn	r2, r2, r5
  402d4e:	bf1c      	itt	ne
  402d50:	ea63 0305 	ornne	r3, r3, r5
  402d54:	4662      	movne	r2, ip
  402d56:	f04f 0400 	mov.w	r4, #0
  402d5a:	e7a9      	b.n	402cb0 <strlen+0x30>

00402d5c <register_fini>:
  402d5c:	4b02      	ldr	r3, [pc, #8]	; (402d68 <register_fini+0xc>)
  402d5e:	b113      	cbz	r3, 402d66 <register_fini+0xa>
  402d60:	4802      	ldr	r0, [pc, #8]	; (402d6c <register_fini+0x10>)
  402d62:	f000 b805 	b.w	402d70 <atexit>
  402d66:	4770      	bx	lr
  402d68:	00000000 	.word	0x00000000
  402d6c:	00402d7d 	.word	0x00402d7d

00402d70 <atexit>:
  402d70:	2300      	movs	r3, #0
  402d72:	4601      	mov	r1, r0
  402d74:	461a      	mov	r2, r3
  402d76:	4618      	mov	r0, r3
  402d78:	f000 b81e 	b.w	402db8 <__register_exitproc>

00402d7c <__libc_fini_array>:
  402d7c:	b538      	push	{r3, r4, r5, lr}
  402d7e:	4c0a      	ldr	r4, [pc, #40]	; (402da8 <__libc_fini_array+0x2c>)
  402d80:	4d0a      	ldr	r5, [pc, #40]	; (402dac <__libc_fini_array+0x30>)
  402d82:	1b64      	subs	r4, r4, r5
  402d84:	10a4      	asrs	r4, r4, #2
  402d86:	d00a      	beq.n	402d9e <__libc_fini_array+0x22>
  402d88:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402d8c:	3b01      	subs	r3, #1
  402d8e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402d92:	3c01      	subs	r4, #1
  402d94:	f855 3904 	ldr.w	r3, [r5], #-4
  402d98:	4798      	blx	r3
  402d9a:	2c00      	cmp	r4, #0
  402d9c:	d1f9      	bne.n	402d92 <__libc_fini_array+0x16>
  402d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402da2:	f000 b903 	b.w	402fac <_fini>
  402da6:	bf00      	nop
  402da8:	00402fbc 	.word	0x00402fbc
  402dac:	00402fb8 	.word	0x00402fb8

00402db0 <__retarget_lock_acquire_recursive>:
  402db0:	4770      	bx	lr
  402db2:	bf00      	nop

00402db4 <__retarget_lock_release_recursive>:
  402db4:	4770      	bx	lr
  402db6:	bf00      	nop

00402db8 <__register_exitproc>:
  402db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402dbc:	4d2c      	ldr	r5, [pc, #176]	; (402e70 <__register_exitproc+0xb8>)
  402dbe:	4606      	mov	r6, r0
  402dc0:	6828      	ldr	r0, [r5, #0]
  402dc2:	4698      	mov	r8, r3
  402dc4:	460f      	mov	r7, r1
  402dc6:	4691      	mov	r9, r2
  402dc8:	f7ff fff2 	bl	402db0 <__retarget_lock_acquire_recursive>
  402dcc:	4b29      	ldr	r3, [pc, #164]	; (402e74 <__register_exitproc+0xbc>)
  402dce:	681c      	ldr	r4, [r3, #0]
  402dd0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402dd4:	2b00      	cmp	r3, #0
  402dd6:	d03e      	beq.n	402e56 <__register_exitproc+0x9e>
  402dd8:	685a      	ldr	r2, [r3, #4]
  402dda:	2a1f      	cmp	r2, #31
  402ddc:	dc1c      	bgt.n	402e18 <__register_exitproc+0x60>
  402dde:	f102 0e01 	add.w	lr, r2, #1
  402de2:	b176      	cbz	r6, 402e02 <__register_exitproc+0x4a>
  402de4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402de8:	2401      	movs	r4, #1
  402dea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402dee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402df2:	4094      	lsls	r4, r2
  402df4:	4320      	orrs	r0, r4
  402df6:	2e02      	cmp	r6, #2
  402df8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402dfc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402e00:	d023      	beq.n	402e4a <__register_exitproc+0x92>
  402e02:	3202      	adds	r2, #2
  402e04:	f8c3 e004 	str.w	lr, [r3, #4]
  402e08:	6828      	ldr	r0, [r5, #0]
  402e0a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402e0e:	f7ff ffd1 	bl	402db4 <__retarget_lock_release_recursive>
  402e12:	2000      	movs	r0, #0
  402e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402e18:	4b17      	ldr	r3, [pc, #92]	; (402e78 <__register_exitproc+0xc0>)
  402e1a:	b30b      	cbz	r3, 402e60 <__register_exitproc+0xa8>
  402e1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402e20:	f3af 8000 	nop.w
  402e24:	4603      	mov	r3, r0
  402e26:	b1d8      	cbz	r0, 402e60 <__register_exitproc+0xa8>
  402e28:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402e2c:	6002      	str	r2, [r0, #0]
  402e2e:	2100      	movs	r1, #0
  402e30:	6041      	str	r1, [r0, #4]
  402e32:	460a      	mov	r2, r1
  402e34:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402e38:	f04f 0e01 	mov.w	lr, #1
  402e3c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402e40:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402e44:	2e00      	cmp	r6, #0
  402e46:	d0dc      	beq.n	402e02 <__register_exitproc+0x4a>
  402e48:	e7cc      	b.n	402de4 <__register_exitproc+0x2c>
  402e4a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402e4e:	430c      	orrs	r4, r1
  402e50:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402e54:	e7d5      	b.n	402e02 <__register_exitproc+0x4a>
  402e56:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402e5a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402e5e:	e7bb      	b.n	402dd8 <__register_exitproc+0x20>
  402e60:	6828      	ldr	r0, [r5, #0]
  402e62:	f7ff ffa7 	bl	402db4 <__retarget_lock_release_recursive>
  402e66:	f04f 30ff 	mov.w	r0, #4294967295
  402e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402e6e:	bf00      	nop
  402e70:	20000440 	.word	0x20000440
  402e74:	00402f94 	.word	0x00402f94
  402e78:	00000000 	.word	0x00000000
  402e7c:	732f2e2e 	.word	0x732f2e2e
  402e80:	462f6372 	.word	0x462f6372
  402e84:	52656572 	.word	0x52656572
  402e88:	2f534f54 	.word	0x2f534f54
  402e8c:	74726f70 	.word	0x74726f70
  402e90:	656c6261 	.word	0x656c6261
  402e94:	4343472f 	.word	0x4343472f
  402e98:	4d52412f 	.word	0x4d52412f
  402e9c:	344d435f 	.word	0x344d435f
  402ea0:	6f702f46 	.word	0x6f702f46
  402ea4:	632e7472 	.word	0x632e7472
  402ea8:	00000000 	.word	0x00000000
  402eac:	732f2e2e 	.word	0x732f2e2e
  402eb0:	462f6372 	.word	0x462f6372
  402eb4:	52656572 	.word	0x52656572
  402eb8:	2f534f54 	.word	0x2f534f54
  402ebc:	74726f70 	.word	0x74726f70
  402ec0:	656c6261 	.word	0x656c6261
  402ec4:	6d654d2f 	.word	0x6d654d2f
  402ec8:	676e614d 	.word	0x676e614d
  402ecc:	6165682f 	.word	0x6165682f
  402ed0:	2e355f70 	.word	0x2e355f70
  402ed4:	00000063 	.word	0x00000063
  402ed8:	732f2e2e 	.word	0x732f2e2e
  402edc:	462f6372 	.word	0x462f6372
  402ee0:	52656572 	.word	0x52656572
  402ee4:	2f534f54 	.word	0x2f534f54
  402ee8:	75657571 	.word	0x75657571
  402eec:	00632e65 	.word	0x00632e65
  402ef0:	732f2e2e 	.word	0x732f2e2e
  402ef4:	462f6372 	.word	0x462f6372
  402ef8:	52656572 	.word	0x52656572
  402efc:	2f534f54 	.word	0x2f534f54
  402f00:	6b736174 	.word	0x6b736174
  402f04:	00632e73 	.word	0x00632e73
  402f08:	454c4449 	.word	0x454c4449
  402f0c:	00000000 	.word	0x00000000
  402f10:	51726d54 	.word	0x51726d54
  402f14:	00000000 	.word	0x00000000
  402f18:	732f2e2e 	.word	0x732f2e2e
  402f1c:	462f6372 	.word	0x462f6372
  402f20:	52656572 	.word	0x52656572
  402f24:	2f534f54 	.word	0x2f534f54
  402f28:	656d6974 	.word	0x656d6974
  402f2c:	632e7372 	.word	0x632e7372
  402f30:	00000000 	.word	0x00000000
  402f34:	20726d54 	.word	0x20726d54
  402f38:	00637653 	.word	0x00637653
  402f3c:	6863694d 	.word	0x6863694d
  402f40:	206c6561 	.word	0x206c6561
  402f44:	7261654b 	.word	0x7261654b
  402f48:	006e6f74 	.word	0x006e6f74
  402f4c:	6b736154 	.word	0x6b736154
  402f50:	72616548 	.word	0x72616548
  402f54:	61656274 	.word	0x61656274
  402f58:	00000074 	.word	0x00000074
  402f5c:	6b736154 	.word	0x6b736154
  402f60:	54524155 	.word	0x54524155
  402f64:	0058545f 	.word	0x0058545f
  402f68:	6b736154 	.word	0x6b736154
  402f6c:	54524155 	.word	0x54524155
  402f70:	0058525f 	.word	0x0058525f
  402f74:	6b736154 	.word	0x6b736154
  402f78:	6e696c42 	.word	0x6e696c42
  402f7c:	44454c6b 	.word	0x44454c6b
  402f80:	00000031 	.word	0x00000031
  402f84:	732f2e2e 	.word	0x732f2e2e
  402f88:	6d2f6372 	.word	0x6d2f6372
  402f8c:	2e6e6961 	.word	0x2e6e6961
  402f90:	00000063 	.word	0x00000063

00402f94 <_global_impure_ptr>:
  402f94:	20000018                                ... 

00402f98 <_init>:
  402f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402f9a:	bf00      	nop
  402f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402f9e:	bc08      	pop	{r3}
  402fa0:	469e      	mov	lr, r3
  402fa2:	4770      	bx	lr

00402fa4 <__init_array_start>:
  402fa4:	00402d5d 	.word	0x00402d5d

00402fa8 <__frame_dummy_init_array_entry>:
  402fa8:	0040011d                                ..@.

00402fac <_fini>:
  402fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402fae:	bf00      	nop
  402fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402fb2:	bc08      	pop	{r3}
  402fb4:	469e      	mov	lr, r3
  402fb6:	4770      	bx	lr

00402fb8 <__fini_array_start>:
  402fb8:	004000f9 	.word	0x004000f9
