
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000885c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040885c  0040885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20000000  00408864  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004b0  200009d0  00409234  000209d0  2**2
                  ALLOC
  4 .stack        00003000  20000e80  004096e4  000209d0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001db05  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004108  00000000  00000000  0003e55c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009c9f  00000000  00000000  00042664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ba0  00000000  00000000  0004c303  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e00  00000000  00000000  0004cea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000185a8  00000000  00000000  0004dca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d8ee  00000000  00000000  0006624b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006d8a4  00000000  00000000  00073b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002ad4  00000000  00000000  000e13e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 3e 00 20 51 30 40 00 4d 30 40 00 4d 30 40 00     .>. Q0@.M0@.M0@.
  400010:	4d 30 40 00 4d 30 40 00 4d 30 40 00 00 00 00 00     M0@.M0@.M0@.....
	...
  40002c:	51 07 40 00 4d 30 40 00 00 00 00 00 f1 07 40 00     Q.@.M0@.......@.
  40003c:	55 08 40 00 4d 30 40 00 4d 30 40 00 4d 30 40 00     U.@.M0@.M0@.M0@.
  40004c:	4d 30 40 00 4d 30 40 00 4d 30 40 00 4d 30 40 00     M0@.M0@.M0@.M0@.
  40005c:	dd 2d 40 00 4d 30 40 00 d5 01 40 00 e9 01 40 00     .-@.M0@...@...@.
  40006c:	fd 01 40 00 11 02 40 00 25 02 40 00 4d 30 40 00     ..@...@.%.@.M0@.
  40007c:	4d 30 40 00 4d 30 40 00 4d 30 40 00 4d 30 40 00     M0@.M0@.M0@.M0@.
  40008c:	4d 30 40 00 4d 30 40 00 4d 30 40 00 4d 30 40 00     M0@.M0@.M0@.M0@.
  40009c:	4d 30 40 00 4d 30 40 00 4d 30 40 00 4d 30 40 00     M0@.M0@.M0@.M0@.
  4000ac:	4d 30 40 00 4d 30 40 00 4d 30 40 00 4d 30 40 00     M0@.M0@.M0@.M0@.
  4000bc:	4d 30 40 00 4d 30 40 00 4d 30 40 00 4d 30 40 00     M0@.M0@.M0@.M0@.
  4000cc:	4d 30 40 00 4d 30 40 00 4d 30 40 00 4d 30 40 00     M0@.M0@.M0@.M0@.
  4000dc:	4d 30 40 00 4d 30 40 00 4d 30 40 00 4d 30 40 00     M0@.M0@.M0@.M0@.
  4000ec:	4d 30 40 00 4d 30 40 00 4d 30 40 00                 M0@.M0@.M0@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009d0 	.word	0x200009d0
  400114:	00000000 	.word	0x00000000
  400118:	00408864 	.word	0x00408864

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00408864 	.word	0x00408864
  400158:	200009d4 	.word	0x200009d4
  40015c:	00408864 	.word	0x00408864
  400160:	00000000 	.word	0x00000000

00400164 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400164:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400166:	4770      	bx	lr

00400168 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400168:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40016a:	4770      	bx	lr

0040016c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40016c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400170:	4681      	mov	r9, r0
  400172:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400174:	4b12      	ldr	r3, [pc, #72]	; (4001c0 <pio_handler_process+0x54>)
  400176:	4798      	blx	r3
  400178:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40017a:	4648      	mov	r0, r9
  40017c:	4b11      	ldr	r3, [pc, #68]	; (4001c4 <pio_handler_process+0x58>)
  40017e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400180:	4005      	ands	r5, r0
  400182:	d013      	beq.n	4001ac <pio_handler_process+0x40>
  400184:	4c10      	ldr	r4, [pc, #64]	; (4001c8 <pio_handler_process+0x5c>)
  400186:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40018a:	e003      	b.n	400194 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40018c:	42b4      	cmp	r4, r6
  40018e:	d00d      	beq.n	4001ac <pio_handler_process+0x40>
  400190:	3410      	adds	r4, #16
		while (status != 0) {
  400192:	b15d      	cbz	r5, 4001ac <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400194:	6820      	ldr	r0, [r4, #0]
  400196:	42b8      	cmp	r0, r7
  400198:	d1f8      	bne.n	40018c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40019a:	6861      	ldr	r1, [r4, #4]
  40019c:	4229      	tst	r1, r5
  40019e:	d0f5      	beq.n	40018c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4001a0:	68e3      	ldr	r3, [r4, #12]
  4001a2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4001a4:	6863      	ldr	r3, [r4, #4]
  4001a6:	ea25 0503 	bic.w	r5, r5, r3
  4001aa:	e7ef      	b.n	40018c <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001ac:	4b07      	ldr	r3, [pc, #28]	; (4001cc <pio_handler_process+0x60>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	b123      	cbz	r3, 4001bc <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4001b2:	4b07      	ldr	r3, [pc, #28]	; (4001d0 <pio_handler_process+0x64>)
  4001b4:	681b      	ldr	r3, [r3, #0]
  4001b6:	b10b      	cbz	r3, 4001bc <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4001b8:	4648      	mov	r0, r9
  4001ba:	4798      	blx	r3
  4001bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4001c0:	00400165 	.word	0x00400165
  4001c4:	00400169 	.word	0x00400169
  4001c8:	200009ec 	.word	0x200009ec
  4001cc:	20000de0 	.word	0x20000de0
  4001d0:	20000a5c 	.word	0x20000a5c

004001d4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4001d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4001d6:	2109      	movs	r1, #9
  4001d8:	4801      	ldr	r0, [pc, #4]	; (4001e0 <PIOA_Handler+0xc>)
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <PIOA_Handler+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	400e0e00 	.word	0x400e0e00
  4001e4:	0040016d 	.word	0x0040016d

004001e8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4001e8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4001ea:	210a      	movs	r1, #10
  4001ec:	4801      	ldr	r0, [pc, #4]	; (4001f4 <PIOB_Handler+0xc>)
  4001ee:	4b02      	ldr	r3, [pc, #8]	; (4001f8 <PIOB_Handler+0x10>)
  4001f0:	4798      	blx	r3
  4001f2:	bd08      	pop	{r3, pc}
  4001f4:	400e1000 	.word	0x400e1000
  4001f8:	0040016d 	.word	0x0040016d

004001fc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4001fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4001fe:	210b      	movs	r1, #11
  400200:	4801      	ldr	r0, [pc, #4]	; (400208 <PIOC_Handler+0xc>)
  400202:	4b02      	ldr	r3, [pc, #8]	; (40020c <PIOC_Handler+0x10>)
  400204:	4798      	blx	r3
  400206:	bd08      	pop	{r3, pc}
  400208:	400e1200 	.word	0x400e1200
  40020c:	0040016d 	.word	0x0040016d

00400210 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400210:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400212:	210c      	movs	r1, #12
  400214:	4801      	ldr	r0, [pc, #4]	; (40021c <PIOD_Handler+0xc>)
  400216:	4b02      	ldr	r3, [pc, #8]	; (400220 <PIOD_Handler+0x10>)
  400218:	4798      	blx	r3
  40021a:	bd08      	pop	{r3, pc}
  40021c:	400e1400 	.word	0x400e1400
  400220:	0040016d 	.word	0x0040016d

00400224 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400224:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400226:	210d      	movs	r1, #13
  400228:	4801      	ldr	r0, [pc, #4]	; (400230 <PIOE_Handler+0xc>)
  40022a:	4b02      	ldr	r3, [pc, #8]	; (400234 <PIOE_Handler+0x10>)
  40022c:	4798      	blx	r3
  40022e:	bd08      	pop	{r3, pc}
  400230:	400e1600 	.word	0x400e1600
  400234:	0040016d 	.word	0x0040016d

00400238 <prvChangeLEDCommand>:

//
static BaseType_t prvChangeLEDCommand(char* pcWriteBuffer,
								size_t xWriteBufferLen,
								const char* pcCommandString)
{
  400238:	b5f0      	push	{r4, r5, r6, r7, lr}
  40023a:	b085      	sub	sp, #20
  40023c:	4607      	mov	r7, r0
  40023e:	4616      	mov	r6, r2
	char *LED_int, *DELAY_ms;
	BaseType_t strlenLED_int, strlenDELAY_ms;
	
	LED_int = FreeRTOS_CLIGetParameter(pcCommandString, 1, &strlenLED_int);
  400240:	aa03      	add	r2, sp, #12
  400242:	2101      	movs	r1, #1
  400244:	4630      	mov	r0, r6
  400246:	4d18      	ldr	r5, [pc, #96]	; (4002a8 <prvChangeLEDCommand+0x70>)
  400248:	47a8      	blx	r5
  40024a:	4604      	mov	r4, r0
	DELAY_ms = FreeRTOS_CLIGetParameter(pcCommandString, 2, &strlenDELAY_ms);
  40024c:	aa02      	add	r2, sp, #8
  40024e:	2102      	movs	r1, #2
  400250:	4630      	mov	r0, r6
  400252:	47a8      	blx	r5
  400254:	4605      	mov	r5, r0
	
	LED_int[strlenLED_int] = '\0';
  400256:	2300      	movs	r3, #0
  400258:	9a03      	ldr	r2, [sp, #12]
  40025a:	54a3      	strb	r3, [r4, r2]
	DELAY_ms[strlenDELAY_ms] = '\0';
  40025c:	9a02      	ldr	r2, [sp, #8]
  40025e:	5483      	strb	r3, [r0, r2]
	
	//
	int LED_num = atoi(LED_int);
  400260:	4620      	mov	r0, r4
  400262:	4b12      	ldr	r3, [pc, #72]	; (4002ac <prvChangeLEDCommand+0x74>)
  400264:	4798      	blx	r3
	if (thLEDs[LED_num - 1] == NULL)
  400266:	1e44      	subs	r4, r0, #1
  400268:	4b11      	ldr	r3, [pc, #68]	; (4002b0 <prvChangeLEDCommand+0x78>)
  40026a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  40026e:	b18b      	cbz	r3, 400294 <prvChangeLEDCommand+0x5c>
		// then there is no delay to be changed.
		strcpy(pcWriteBuffer, "LED is stopped\0");
	}
	else // LED blinking task needs to be changed
	{
		int  DELAY_num = atoi(DELAY_ms);
  400270:	4628      	mov	r0, r5
  400272:	4b0e      	ldr	r3, [pc, #56]	; (4002ac <prvChangeLEDCommand+0x74>)
  400274:	4798      	blx	r3
  400276:	a904      	add	r1, sp, #16
  400278:	f841 0d0c 	str.w	r0, [r1, #-12]!
		
		xQueueSendToBack(
  40027c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  400280:	2300      	movs	r3, #0
  400282:	220a      	movs	r2, #10
  400284:	480b      	ldr	r0, [pc, #44]	; (4002b4 <prvChangeLEDCommand+0x7c>)
  400286:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  40028a:	4c0b      	ldr	r4, [pc, #44]	; (4002b8 <prvChangeLEDCommand+0x80>)
  40028c:	47a0      	blx	r4
			(TickType_t) 10
		);
	}
	
	return pdFALSE;
}
  40028e:	2000      	movs	r0, #0
  400290:	b005      	add	sp, #20
  400292:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(pcWriteBuffer, "LED is stopped\0");
  400294:	4b09      	ldr	r3, [pc, #36]	; (4002bc <prvChangeLEDCommand+0x84>)
  400296:	cb07      	ldmia	r3!, {r0, r1, r2}
  400298:	6038      	str	r0, [r7, #0]
  40029a:	6079      	str	r1, [r7, #4]
  40029c:	60ba      	str	r2, [r7, #8]
  40029e:	881a      	ldrh	r2, [r3, #0]
  4002a0:	789b      	ldrb	r3, [r3, #2]
  4002a2:	81ba      	strh	r2, [r7, #12]
  4002a4:	73bb      	strb	r3, [r7, #14]
  4002a6:	e7f2      	b.n	40028e <prvChangeLEDCommand+0x56>
  4002a8:	004005ad 	.word	0x004005ad
  4002ac:	0040347d 	.word	0x0040347d
  4002b0:	20000de4 	.word	0x20000de4
  4002b4:	20000df0 	.word	0x20000df0
  4002b8:	00401051 	.word	0x00401051
  4002bc:	0040815c 	.word	0x0040815c

004002c0 <prvStopLEDCommand>:
{
  4002c0:	b530      	push	{r4, r5, lr}
  4002c2:	b083      	sub	sp, #12
  4002c4:	4605      	mov	r5, r0
  4002c6:	4610      	mov	r0, r2
	LED_int = FreeRTOS_CLIGetParameter(pcCommandString, 1, &strlenLED_int);
  4002c8:	aa01      	add	r2, sp, #4
  4002ca:	2101      	movs	r1, #1
  4002cc:	4b11      	ldr	r3, [pc, #68]	; (400314 <prvStopLEDCommand+0x54>)
  4002ce:	4798      	blx	r3
	LED_int[strlenLED_int] = '\0';
  4002d0:	2100      	movs	r1, #0
  4002d2:	9b01      	ldr	r3, [sp, #4]
  4002d4:	54c1      	strb	r1, [r0, r3]
	int LED_num = atoi(LED_int);
  4002d6:	4b10      	ldr	r3, [pc, #64]	; (400318 <prvStopLEDCommand+0x58>)
  4002d8:	4798      	blx	r3
	if (thLEDs[LED_num - 1] == NULL)
  4002da:	1e44      	subs	r4, r0, #1
  4002dc:	4b0f      	ldr	r3, [pc, #60]	; (40031c <prvStopLEDCommand+0x5c>)
  4002de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4002e2:	b173      	cbz	r3, 400302 <prvStopLEDCommand+0x42>
		setLED(LED_num, 0); // first, set the LED state to zero
  4002e4:	2100      	movs	r1, #0
  4002e6:	b2c0      	uxtb	r0, r0
  4002e8:	4b0d      	ldr	r3, [pc, #52]	; (400320 <prvStopLEDCommand+0x60>)
  4002ea:	4798      	blx	r3
		vTaskDelete(thLEDs[LED_num - 1]);
  4002ec:	4d0b      	ldr	r5, [pc, #44]	; (40031c <prvStopLEDCommand+0x5c>)
  4002ee:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  4002f2:	4b0c      	ldr	r3, [pc, #48]	; (400324 <prvStopLEDCommand+0x64>)
  4002f4:	4798      	blx	r3
		thLEDs[LED_num - 1] = NULL;
  4002f6:	2300      	movs	r3, #0
  4002f8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
  4002fc:	2000      	movs	r0, #0
  4002fe:	b003      	add	sp, #12
  400300:	bd30      	pop	{r4, r5, pc}
		strcpy(pcWriteBuffer, "LED already stopped\0");
  400302:	4c09      	ldr	r4, [pc, #36]	; (400328 <prvStopLEDCommand+0x68>)
  400304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400306:	6028      	str	r0, [r5, #0]
  400308:	6069      	str	r1, [r5, #4]
  40030a:	60aa      	str	r2, [r5, #8]
  40030c:	60eb      	str	r3, [r5, #12]
  40030e:	6820      	ldr	r0, [r4, #0]
  400310:	6128      	str	r0, [r5, #16]
  400312:	e7f3      	b.n	4002fc <prvStopLEDCommand+0x3c>
  400314:	004005ad 	.word	0x004005ad
  400318:	0040347d 	.word	0x0040347d
  40031c:	20000de4 	.word	0x20000de4
  400320:	004029dd 	.word	0x004029dd
  400324:	0040196d 	.word	0x0040196d
  400328:	0040816c 	.word	0x0040816c

0040032c <prvStartLEDCommand>:
{
  40032c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400330:	b084      	sub	sp, #16
  400332:	4607      	mov	r7, r0
  400334:	4688      	mov	r8, r1
  400336:	4616      	mov	r6, r2
	LED_int = FreeRTOS_CLIGetParameter(pcCommandString, 1, &strlenLED_int);
  400338:	aa03      	add	r2, sp, #12
  40033a:	2101      	movs	r1, #1
  40033c:	4630      	mov	r0, r6
  40033e:	4d1b      	ldr	r5, [pc, #108]	; (4003ac <prvStartLEDCommand+0x80>)
  400340:	47a8      	blx	r5
  400342:	4604      	mov	r4, r0
	DELAY_ms = FreeRTOS_CLIGetParameter(pcCommandString, 2, &strlenDELAY_ms);
  400344:	aa02      	add	r2, sp, #8
  400346:	2102      	movs	r1, #2
  400348:	4630      	mov	r0, r6
  40034a:	47a8      	blx	r5
  40034c:	4605      	mov	r5, r0
	LED_int[strlenLED_int] = '\0';
  40034e:	2300      	movs	r3, #0
  400350:	9a03      	ldr	r2, [sp, #12]
  400352:	54a3      	strb	r3, [r4, r2]
	DELAY_ms[strlenDELAY_ms] = '\0';
  400354:	9a02      	ldr	r2, [sp, #8]
  400356:	5483      	strb	r3, [r0, r2]
	int LED_num = atoi(LED_int);
  400358:	4620      	mov	r0, r4
  40035a:	4b15      	ldr	r3, [pc, #84]	; (4003b0 <prvStartLEDCommand+0x84>)
  40035c:	4798      	blx	r3
	if (thLEDs[LED_num - 1] != NULL)
  40035e:	1e44      	subs	r4, r0, #1
  400360:	4b14      	ldr	r3, [pc, #80]	; (4003b4 <prvStartLEDCommand+0x88>)
  400362:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400366:	b143      	cbz	r3, 40037a <prvStartLEDCommand+0x4e>
		snprintf(pcWriteBuffer, xWriteBufferLen, "LED already started\n\0");
  400368:	4a13      	ldr	r2, [pc, #76]	; (4003b8 <prvStartLEDCommand+0x8c>)
  40036a:	4641      	mov	r1, r8
  40036c:	4638      	mov	r0, r7
  40036e:	4b13      	ldr	r3, [pc, #76]	; (4003bc <prvStartLEDCommand+0x90>)
  400370:	4798      	blx	r3
}
  400372:	2000      	movs	r0, #0
  400374:	b004      	add	sp, #16
  400376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int DELAY_num = atoi(DELAY_ms);
  40037a:	4628      	mov	r0, r5
  40037c:	4b0c      	ldr	r3, [pc, #48]	; (4003b0 <prvStartLEDCommand+0x84>)
  40037e:	4798      	blx	r3
		data_LEDs[LED_num - 1].delay = DELAY_num / portTICK_PERIOD_MS;
  400380:	eb04 0244 	add.w	r2, r4, r4, lsl #1
  400384:	4b0e      	ldr	r3, [pc, #56]	; (4003c0 <prvStartLEDCommand+0x94>)
  400386:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40038a:	6098      	str	r0, [r3, #8]
					names_LEDs[LED_num - 1],
  40038c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
		xTaskCreate(taskBlinkLED,
  400390:	4a08      	ldr	r2, [pc, #32]	; (4003b4 <prvStartLEDCommand+0x88>)
  400392:	eb02 0484 	add.w	r4, r2, r4, lsl #2
  400396:	9401      	str	r4, [sp, #4]
  400398:	2202      	movs	r2, #2
  40039a:	9200      	str	r2, [sp, #0]
  40039c:	2282      	movs	r2, #130	; 0x82
  40039e:	4909      	ldr	r1, [pc, #36]	; (4003c4 <prvStartLEDCommand+0x98>)
  4003a0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  4003a4:	4808      	ldr	r0, [pc, #32]	; (4003c8 <prvStartLEDCommand+0x9c>)
  4003a6:	4c09      	ldr	r4, [pc, #36]	; (4003cc <prvStartLEDCommand+0xa0>)
  4003a8:	47a0      	blx	r4
  4003aa:	e7e2      	b.n	400372 <prvStartLEDCommand+0x46>
  4003ac:	004005ad 	.word	0x004005ad
  4003b0:	0040347d 	.word	0x0040347d
  4003b4:	20000de4 	.word	0x20000de4
  4003b8:	00408184 	.word	0x00408184
  4003bc:	004036a5 	.word	0x004036a5
  4003c0:	20000df0 	.word	0x20000df0
  4003c4:	004082fc 	.word	0x004082fc
  4003c8:	00402a69 	.word	0x00402a69
  4003cc:	00401739 	.word	0x00401739

004003d0 <prvTaskStatsCommand>:
{
  4003d0:	b510      	push	{r4, lr}
  4003d2:	4604      	mov	r4, r0
    snprintf(pcWriteBuffer, xWriteBufferLen, taskListHdr);
  4003d4:	4a04      	ldr	r2, [pc, #16]	; (4003e8 <prvTaskStatsCommand+0x18>)
  4003d6:	4b05      	ldr	r3, [pc, #20]	; (4003ec <prvTaskStatsCommand+0x1c>)
  4003d8:	4798      	blx	r3
    vTaskList(pcWriteBuffer);
  4003da:	f104 001d 	add.w	r0, r4, #29
  4003de:	4b04      	ldr	r3, [pc, #16]	; (4003f0 <prvTaskStatsCommand+0x20>)
  4003e0:	4798      	blx	r3
}
  4003e2:	2000      	movs	r0, #0
  4003e4:	bd10      	pop	{r4, pc}
  4003e6:	bf00      	nop
  4003e8:	00408328 	.word	0x00408328
  4003ec:	004036a5 	.word	0x004036a5
  4003f0:	00402529 	.word	0x00402529

004003f4 <register_commands>:

void register_commands(void)
{
  4003f4:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&xTaskStatsCommand);
  4003f6:	4805      	ldr	r0, [pc, #20]	; (40040c <register_commands+0x18>)
  4003f8:	4c05      	ldr	r4, [pc, #20]	; (400410 <register_commands+0x1c>)
  4003fa:	47a0      	blx	r4
	FreeRTOS_CLIRegisterCommand(&xStartLEDCommand);
  4003fc:	4805      	ldr	r0, [pc, #20]	; (400414 <register_commands+0x20>)
  4003fe:	47a0      	blx	r4
	FreeRTOS_CLIRegisterCommand(&xStopLEDCommand);
  400400:	4805      	ldr	r0, [pc, #20]	; (400418 <register_commands+0x24>)
  400402:	47a0      	blx	r4
	FreeRTOS_CLIRegisterCommand(&xChangeLEDCommand);
  400404:	4805      	ldr	r0, [pc, #20]	; (40041c <register_commands+0x28>)
  400406:	47a0      	blx	r4
  400408:	bd10      	pop	{r4, pc}
  40040a:	bf00      	nop
  40040c:	00408378 	.word	0x00408378
  400410:	00400459 	.word	0x00400459
  400414:	00408358 	.word	0x00408358
  400418:	00408368 	.word	0x00408368
  40041c:	00408348 	.word	0x00408348

00400420 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
  400420:	b538      	push	{r3, r4, r5, lr}
  400422:	460a      	mov	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
  400424:	4b09      	ldr	r3, [pc, #36]	; (40044c <prvHelpCommand+0x2c>)
  400426:	681b      	ldr	r3, [r3, #0]
  400428:	b15b      	cbz	r3, 400442 <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
  40042a:	4c08      	ldr	r4, [pc, #32]	; (40044c <prvHelpCommand+0x2c>)
  40042c:	6825      	ldr	r5, [r4, #0]
  40042e:	682b      	ldr	r3, [r5, #0]
  400430:	6859      	ldr	r1, [r3, #4]
  400432:	4b07      	ldr	r3, [pc, #28]	; (400450 <prvHelpCommand+0x30>)
  400434:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
  400436:	6868      	ldr	r0, [r5, #4]
  400438:	6020      	str	r0, [r4, #0]
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
  40043a:	3000      	adds	r0, #0
  40043c:	bf18      	it	ne
  40043e:	2001      	movne	r0, #1
  400440:	bd38      	pop	{r3, r4, r5, pc}
		pxCommand = &xRegisteredCommands;
  400442:	4904      	ldr	r1, [pc, #16]	; (400454 <prvHelpCommand+0x34>)
  400444:	4b01      	ldr	r3, [pc, #4]	; (40044c <prvHelpCommand+0x2c>)
  400446:	6019      	str	r1, [r3, #0]
  400448:	e7ef      	b.n	40042a <prvHelpCommand+0xa>
  40044a:	bf00      	nop
  40044c:	20000a64 	.word	0x20000a64
  400450:	00403a01 	.word	0x00403a01
  400454:	20000004 	.word	0x20000004

00400458 <FreeRTOS_CLIRegisterCommand>:
{
  400458:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxCommandToRegister );
  40045a:	4605      	mov	r5, r0
  40045c:	b188      	cbz	r0, 400482 <FreeRTOS_CLIRegisterCommand+0x2a>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
  40045e:	2008      	movs	r0, #8
  400460:	4b0d      	ldr	r3, [pc, #52]	; (400498 <FreeRTOS_CLIRegisterCommand+0x40>)
  400462:	4798      	blx	r3
	configASSERT( pxNewListItem );
  400464:	4604      	mov	r4, r0
  400466:	b188      	cbz	r0, 40048c <FreeRTOS_CLIRegisterCommand+0x34>
		taskENTER_CRITICAL();
  400468:	4b0c      	ldr	r3, [pc, #48]	; (40049c <FreeRTOS_CLIRegisterCommand+0x44>)
  40046a:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
  40046c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
  40046e:	2300      	movs	r3, #0
  400470:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
  400472:	4b0b      	ldr	r3, [pc, #44]	; (4004a0 <FreeRTOS_CLIRegisterCommand+0x48>)
  400474:	681a      	ldr	r2, [r3, #0]
  400476:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
  400478:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
  40047a:	4b0a      	ldr	r3, [pc, #40]	; (4004a4 <FreeRTOS_CLIRegisterCommand+0x4c>)
  40047c:	4798      	blx	r3
		xReturn = pdPASS;
  40047e:	2001      	movs	r0, #1
}
  400480:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxCommandToRegister );
  400482:	2170      	movs	r1, #112	; 0x70
  400484:	4808      	ldr	r0, [pc, #32]	; (4004a8 <FreeRTOS_CLIRegisterCommand+0x50>)
  400486:	4b09      	ldr	r3, [pc, #36]	; (4004ac <FreeRTOS_CLIRegisterCommand+0x54>)
  400488:	4798      	blx	r3
  40048a:	e7e8      	b.n	40045e <FreeRTOS_CLIRegisterCommand+0x6>
	configASSERT( pxNewListItem );
  40048c:	2174      	movs	r1, #116	; 0x74
  40048e:	4806      	ldr	r0, [pc, #24]	; (4004a8 <FreeRTOS_CLIRegisterCommand+0x50>)
  400490:	4b06      	ldr	r3, [pc, #24]	; (4004ac <FreeRTOS_CLIRegisterCommand+0x54>)
  400492:	4798      	blx	r3
BaseType_t xReturn = pdFAIL;
  400494:	2000      	movs	r0, #0
	return xReturn;
  400496:	bd38      	pop	{r3, r4, r5, pc}
  400498:	00400a91 	.word	0x00400a91
  40049c:	00400775 	.word	0x00400775
  4004a0:	20000000 	.word	0x20000000
  4004a4:	004007bd 	.word	0x004007bd
  4004a8:	00408430 	.word	0x00408430
  4004ac:	00403429 	.word	0x00403429

004004b0 <FreeRTOS_CLIProcessCommand>:
{
  4004b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004b4:	b083      	sub	sp, #12
  4004b6:	4607      	mov	r7, r0
  4004b8:	9100      	str	r1, [sp, #0]
  4004ba:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
  4004bc:	4b34      	ldr	r3, [pc, #208]	; (400590 <FreeRTOS_CLIProcessCommand+0xe0>)
  4004be:	681b      	ldr	r3, [r3, #0]
  4004c0:	b173      	cbz	r3, 4004e0 <FreeRTOS_CLIProcessCommand+0x30>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
  4004c2:	681b      	ldr	r3, [r3, #0]
  4004c4:	689b      	ldr	r3, [r3, #8]
  4004c6:	463a      	mov	r2, r7
  4004c8:	9901      	ldr	r1, [sp, #4]
  4004ca:	9800      	ldr	r0, [sp, #0]
  4004cc:	4798      	blx	r3
		if( xReturn == pdFALSE )
  4004ce:	4603      	mov	r3, r0
  4004d0:	b910      	cbnz	r0, 4004d8 <FreeRTOS_CLIProcessCommand+0x28>
			pxCommand = NULL;
  4004d2:	2100      	movs	r1, #0
  4004d4:	4a2e      	ldr	r2, [pc, #184]	; (400590 <FreeRTOS_CLIProcessCommand+0xe0>)
  4004d6:	6011      	str	r1, [r2, #0]
}
  4004d8:	4618      	mov	r0, r3
  4004da:	b003      	add	sp, #12
  4004dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
  4004e0:	4c2c      	ldr	r4, [pc, #176]	; (400594 <FreeRTOS_CLIProcessCommand+0xe4>)
  4004e2:	4b2b      	ldr	r3, [pc, #172]	; (400590 <FreeRTOS_CLIProcessCommand+0xe0>)
  4004e4:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
  4004e6:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 4005a4 <FreeRTOS_CLIProcessCommand+0xf4>
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
  4004ea:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 4005a8 <FreeRTOS_CLIProcessCommand+0xf8>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
  4004ee:	469b      	mov	fp, r3
  4004f0:	e025      	b.n	40053e <FreeRTOS_CLIProcessCommand+0x8e>
	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
  4004f2:	b949      	cbnz	r1, 400508 <FreeRTOS_CLIProcessCommand+0x58>
			{
				cParameters++;
  4004f4:	3001      	adds	r0, #1
  4004f6:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
  4004f8:	4631      	mov	r1, r6
	while( *pcCommandString != 0x00 )
  4004fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4004fe:	b12b      	cbz	r3, 40050c <FreeRTOS_CLIProcessCommand+0x5c>
		if( ( *pcCommandString ) == ' ' )
  400500:	2b20      	cmp	r3, #32
  400502:	d0f6      	beq.n	4004f2 <FreeRTOS_CLIProcessCommand+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
  400504:	4621      	mov	r1, r4
  400506:	e7f8      	b.n	4004fa <FreeRTOS_CLIProcessCommand+0x4a>
			if( xLastCharacterWasSpace != pdTRUE )
  400508:	4631      	mov	r1, r6
  40050a:	e7f6      	b.n	4004fa <FreeRTOS_CLIProcessCommand+0x4a>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
  40050c:	b971      	cbnz	r1, 40052c <FreeRTOS_CLIProcessCommand+0x7c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
  40050e:	4b20      	ldr	r3, [pc, #128]	; (400590 <FreeRTOS_CLIProcessCommand+0xe0>)
  400510:	681b      	ldr	r3, [r3, #0]
  400512:	2b00      	cmp	r3, #0
  400514:	d034      	beq.n	400580 <FreeRTOS_CLIProcessCommand+0xd0>
  400516:	4285      	cmp	r5, r0
  400518:	d0d3      	beq.n	4004c2 <FreeRTOS_CLIProcessCommand+0x12>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
  40051a:	9a01      	ldr	r2, [sp, #4]
  40051c:	491e      	ldr	r1, [pc, #120]	; (400598 <FreeRTOS_CLIProcessCommand+0xe8>)
  40051e:	9800      	ldr	r0, [sp, #0]
  400520:	4b1e      	ldr	r3, [pc, #120]	; (40059c <FreeRTOS_CLIProcessCommand+0xec>)
  400522:	4798      	blx	r3
		pxCommand = NULL;
  400524:	2300      	movs	r3, #0
  400526:	4a1a      	ldr	r2, [pc, #104]	; (400590 <FreeRTOS_CLIProcessCommand+0xe0>)
  400528:	6013      	str	r3, [r2, #0]
  40052a:	e7d5      	b.n	4004d8 <FreeRTOS_CLIProcessCommand+0x28>
	{
		cParameters--;
  40052c:	3801      	subs	r0, #1
  40052e:	b240      	sxtb	r0, r0
  400530:	e7ed      	b.n	40050e <FreeRTOS_CLIProcessCommand+0x5e>
	while( *pcCommandString != 0x00 )
  400532:	2000      	movs	r0, #0
  400534:	e7eb      	b.n	40050e <FreeRTOS_CLIProcessCommand+0x5e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
  400536:	6864      	ldr	r4, [r4, #4]
  400538:	f8cb 4000 	str.w	r4, [fp]
  40053c:	b304      	cbz	r4, 400580 <FreeRTOS_CLIProcessCommand+0xd0>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
  40053e:	f8d4 8000 	ldr.w	r8, [r4]
  400542:	f8d8 5000 	ldr.w	r5, [r8]
			xCommandStringLength = strlen( pcRegisteredCommandString );
  400546:	4628      	mov	r0, r5
  400548:	47d0      	blx	sl
  40054a:	4606      	mov	r6, r0
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
  40054c:	4602      	mov	r2, r0
  40054e:	4629      	mov	r1, r5
  400550:	4638      	mov	r0, r7
  400552:	47c8      	blx	r9
  400554:	2800      	cmp	r0, #0
  400556:	d1ee      	bne.n	400536 <FreeRTOS_CLIProcessCommand+0x86>
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
  400558:	5dbb      	ldrb	r3, [r7, r6]
  40055a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
  40055e:	d1ea      	bne.n	400536 <FreeRTOS_CLIProcessCommand+0x86>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
  400560:	f998 500c 	ldrsb.w	r5, [r8, #12]
  400564:	2d00      	cmp	r5, #0
  400566:	db07      	blt.n	400578 <FreeRTOS_CLIProcessCommand+0xc8>
	while( *pcCommandString != 0x00 )
  400568:	783b      	ldrb	r3, [r7, #0]
  40056a:	2b00      	cmp	r3, #0
  40056c:	d0e1      	beq.n	400532 <FreeRTOS_CLIProcessCommand+0x82>
  40056e:	463a      	mov	r2, r7
  400570:	4601      	mov	r1, r0
			xLastCharacterWasSpace = pdFALSE;
  400572:	4604      	mov	r4, r0
			if( xLastCharacterWasSpace != pdTRUE )
  400574:	2601      	movs	r6, #1
  400576:	e7c3      	b.n	400500 <FreeRTOS_CLIProcessCommand+0x50>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
  400578:	4b05      	ldr	r3, [pc, #20]	; (400590 <FreeRTOS_CLIProcessCommand+0xe0>)
  40057a:	681b      	ldr	r3, [r3, #0]
  40057c:	2b00      	cmp	r3, #0
  40057e:	d1a0      	bne.n	4004c2 <FreeRTOS_CLIProcessCommand+0x12>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
  400580:	9a01      	ldr	r2, [sp, #4]
  400582:	4907      	ldr	r1, [pc, #28]	; (4005a0 <FreeRTOS_CLIProcessCommand+0xf0>)
  400584:	9800      	ldr	r0, [sp, #0]
  400586:	4b05      	ldr	r3, [pc, #20]	; (40059c <FreeRTOS_CLIProcessCommand+0xec>)
  400588:	4798      	blx	r3
		xReturn = pdFALSE;
  40058a:	2300      	movs	r3, #0
	return xReturn;
  40058c:	e7a4      	b.n	4004d8 <FreeRTOS_CLIProcessCommand+0x28>
  40058e:	bf00      	nop
  400590:	20000a60 	.word	0x20000a60
  400594:	20000004 	.word	0x20000004
  400598:	00408388 	.word	0x00408388
  40059c:	00403a01 	.word	0x00403a01
  4005a0:	004083e0 	.word	0x004083e0
  4005a4:	00403881 	.word	0x00403881
  4005a8:	0040395d 	.word	0x0040395d

004005ac <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
  4005ac:	2300      	movs	r3, #0
  4005ae:	6013      	str	r3, [r2, #0]
	while( uxParametersFound < uxWantedParameter )
  4005b0:	b119      	cbz	r1, 4005ba <FreeRTOS_CLIGetParameter+0xe>
{
  4005b2:	b410      	push	{r4}
  4005b4:	460c      	mov	r4, r1
	while( uxParametersFound < uxWantedParameter )
  4005b6:	2100      	movs	r1, #0
  4005b8:	e009      	b.n	4005ce <FreeRTOS_CLIGetParameter+0x22>
const char *pcReturn = NULL;
  4005ba:	4618      	mov	r0, r3
  4005bc:	4770      	bx	lr
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
  4005be:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4005c2:	2b20      	cmp	r3, #32
  4005c4:	d0fb      	beq.n	4005be <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
  4005c6:	b1eb      	cbz	r3, 400604 <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
  4005c8:	3101      	adds	r1, #1
			if( uxParametersFound == uxWantedParameter )
  4005ca:	428c      	cmp	r4, r1
  4005cc:	d009      	beq.n	4005e2 <FreeRTOS_CLIGetParameter+0x36>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
  4005ce:	7803      	ldrb	r3, [r0, #0]
  4005d0:	b1f3      	cbz	r3, 400610 <FreeRTOS_CLIGetParameter+0x64>
  4005d2:	2b20      	cmp	r3, #32
  4005d4:	d0f3      	beq.n	4005be <FreeRTOS_CLIGetParameter+0x12>
  4005d6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4005da:	b1cb      	cbz	r3, 400610 <FreeRTOS_CLIGetParameter+0x64>
  4005dc:	2b20      	cmp	r3, #32
  4005de:	d1fa      	bne.n	4005d6 <FreeRTOS_CLIGetParameter+0x2a>
  4005e0:	e7ed      	b.n	4005be <FreeRTOS_CLIGetParameter+0x12>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
  4005e2:	7803      	ldrb	r3, [r0, #0]
  4005e4:	f013 0fdf 	tst.w	r3, #223	; 0xdf
  4005e8:	d010      	beq.n	40060c <FreeRTOS_CLIGetParameter+0x60>
  4005ea:	4601      	mov	r1, r0
					( *pxParameterStringLength )++;
  4005ec:	6813      	ldr	r3, [r2, #0]
  4005ee:	3301      	adds	r3, #1
  4005f0:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
  4005f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  4005f6:	f014 0fdf 	tst.w	r4, #223	; 0xdf
  4005fa:	d1f7      	bne.n	4005ec <FreeRTOS_CLIGetParameter+0x40>
					pcReturn = NULL;
  4005fc:	2b00      	cmp	r3, #0
  4005fe:	bf08      	it	eq
  400600:	2000      	moveq	r0, #0
  400602:	e000      	b.n	400606 <FreeRTOS_CLIGetParameter+0x5a>
const char *pcReturn = NULL;
  400604:	2000      	movs	r0, #0
}
  400606:	f85d 4b04 	ldr.w	r4, [sp], #4
  40060a:	4770      	bx	lr
					pcReturn = NULL;
  40060c:	2000      	movs	r0, #0
  40060e:	e7fa      	b.n	400606 <FreeRTOS_CLIGetParameter+0x5a>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
  400610:	7803      	ldrb	r3, [r0, #0]
  400612:	e7d8      	b.n	4005c6 <FreeRTOS_CLIGetParameter+0x1a>

00400614 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400614:	f100 0308 	add.w	r3, r0, #8
  400618:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
  40061a:	f04f 32ff 	mov.w	r2, #4294967295
  40061e:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400620:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400622:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400624:	2300      	movs	r3, #0
  400626:	6003      	str	r3, [r0, #0]
  400628:	4770      	bx	lr

0040062a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
  40062a:	2300      	movs	r3, #0
  40062c:	6103      	str	r3, [r0, #16]
  40062e:	4770      	bx	lr

00400630 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
  400630:	6843      	ldr	r3, [r0, #4]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
  400632:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400634:	689a      	ldr	r2, [r3, #8]
  400636:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
  400638:	689a      	ldr	r2, [r3, #8]
  40063a:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
  40063c:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
  40063e:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  400640:	6803      	ldr	r3, [r0, #0]
  400642:	3301      	adds	r3, #1
  400644:	6003      	str	r3, [r0, #0]
  400646:	4770      	bx	lr

00400648 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
  400648:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40064a:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
  40064c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400650:	d002      	beq.n	400658 <vListInsert+0x10>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  400652:	f100 0208 	add.w	r2, r0, #8
  400656:	e002      	b.n	40065e <vListInsert+0x16>
        pxIterator = pxList->xListEnd.pxPrevious;
  400658:	6902      	ldr	r2, [r0, #16]
  40065a:	e004      	b.n	400666 <vListInsert+0x1e>
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  40065c:	461a      	mov	r2, r3
  40065e:	6853      	ldr	r3, [r2, #4]
  400660:	681c      	ldr	r4, [r3, #0]
  400662:	42a5      	cmp	r5, r4
  400664:	d2fa      	bcs.n	40065c <vListInsert+0x14>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
  400666:	6853      	ldr	r3, [r2, #4]
  400668:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40066a:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
  40066c:	608a      	str	r2, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
  40066e:	6051      	str	r1, [r2, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
  400670:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  400672:	6803      	ldr	r3, [r0, #0]
  400674:	3301      	adds	r3, #1
  400676:	6003      	str	r3, [r0, #0]
}
  400678:	bc30      	pop	{r4, r5}
  40067a:	4770      	bx	lr

0040067c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
  40067c:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40067e:	6842      	ldr	r2, [r0, #4]
  400680:	6881      	ldr	r1, [r0, #8]
  400682:	6091      	str	r1, [r2, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400684:	6882      	ldr	r2, [r0, #8]
  400686:	6841      	ldr	r1, [r0, #4]
  400688:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
  40068a:	685a      	ldr	r2, [r3, #4]
  40068c:	4290      	cmp	r0, r2
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
  40068e:	bf04      	itt	eq
  400690:	6882      	ldreq	r2, [r0, #8]
  400692:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
  400694:	2200      	movs	r2, #0
  400696:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
  400698:	681a      	ldr	r2, [r3, #0]
  40069a:	3a01      	subs	r2, #1
  40069c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
  40069e:	6818      	ldr	r0, [r3, #0]
}
  4006a0:	4770      	bx	lr
	...

004006a4 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
  4006a4:	4808      	ldr	r0, [pc, #32]	; (4006c8 <prvPortStartFirstTask+0x24>)
  4006a6:	6800      	ldr	r0, [r0, #0]
  4006a8:	6800      	ldr	r0, [r0, #0]
  4006aa:	f380 8808 	msr	MSP, r0
  4006ae:	f04f 0000 	mov.w	r0, #0
  4006b2:	f380 8814 	msr	CONTROL, r0
  4006b6:	b662      	cpsie	i
  4006b8:	b661      	cpsie	f
  4006ba:	f3bf 8f4f 	dsb	sy
  4006be:	f3bf 8f6f 	isb	sy
  4006c2:	df00      	svc	0
  4006c4:	bf00      	nop
  4006c6:	0000      	.short	0x0000
  4006c8:	e000ed08 	.word	0xe000ed08

004006cc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
  4006cc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4006dc <vPortEnableVFP+0x10>
  4006d0:	6801      	ldr	r1, [r0, #0]
  4006d2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4006d6:	6001      	str	r1, [r0, #0]
  4006d8:	4770      	bx	lr
  4006da:	0000      	.short	0x0000
  4006dc:	e000ed88 	.word	0xe000ed88

004006e0 <prvTaskExitError>:
{
  4006e0:	b500      	push	{lr}
  4006e2:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0;
  4006e4:	2300      	movs	r3, #0
  4006e6:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
  4006e8:	4b0b      	ldr	r3, [pc, #44]	; (400718 <prvTaskExitError+0x38>)
  4006ea:	681b      	ldr	r3, [r3, #0]
  4006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4006f0:	d003      	beq.n	4006fa <prvTaskExitError+0x1a>
  4006f2:	21e7      	movs	r1, #231	; 0xe7
  4006f4:	4809      	ldr	r0, [pc, #36]	; (40071c <prvTaskExitError+0x3c>)
  4006f6:	4b0a      	ldr	r3, [pc, #40]	; (400720 <prvTaskExitError+0x40>)
  4006f8:	4798      	blx	r3

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
  4006fa:	f04f 0350 	mov.w	r3, #80	; 0x50
  4006fe:	f383 8811 	msr	BASEPRI, r3
  400702:	f3bf 8f6f 	isb	sy
  400706:	f3bf 8f4f 	dsb	sy
    while( ulDummy == 0 )
  40070a:	9b01      	ldr	r3, [sp, #4]
  40070c:	2b00      	cmp	r3, #0
  40070e:	d0fc      	beq.n	40070a <prvTaskExitError+0x2a>
}
  400710:	b003      	add	sp, #12
  400712:	f85d fb04 	ldr.w	pc, [sp], #4
  400716:	bf00      	nop
  400718:	2000000c 	.word	0x2000000c
  40071c:	004084a0 	.word	0x004084a0
  400720:	00403429 	.word	0x00403429

00400724 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
  400724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400728:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
  40072c:	f021 0101 	bic.w	r1, r1, #1
  400730:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
  400734:	4b05      	ldr	r3, [pc, #20]	; (40074c <pxPortInitialiseStack+0x28>)
  400736:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
  40073a:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
  40073e:	f06f 0302 	mvn.w	r3, #2
  400742:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400746:	3844      	subs	r0, #68	; 0x44
  400748:	4770      	bx	lr
  40074a:	bf00      	nop
  40074c:	004006e1 	.word	0x004006e1

00400750 <SVC_Handler>:
    __asm volatile (
  400750:	4b07      	ldr	r3, [pc, #28]	; (400770 <pxCurrentTCBConst2>)
  400752:	6819      	ldr	r1, [r3, #0]
  400754:	6808      	ldr	r0, [r1, #0]
  400756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40075a:	f380 8809 	msr	PSP, r0
  40075e:	f3bf 8f6f 	isb	sy
  400762:	f04f 0000 	mov.w	r0, #0
  400766:	f380 8811 	msr	BASEPRI, r0
  40076a:	4770      	bx	lr
  40076c:	f3af 8000 	nop.w

00400770 <pxCurrentTCBConst2>:
  400770:	20000a90 	.word	0x20000a90

00400774 <vPortEnterCritical>:
{
  400774:	b508      	push	{r3, lr}
  400776:	f04f 0350 	mov.w	r3, #80	; 0x50
  40077a:	f383 8811 	msr	BASEPRI, r3
  40077e:	f3bf 8f6f 	isb	sy
  400782:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
  400786:	4a09      	ldr	r2, [pc, #36]	; (4007ac <vPortEnterCritical+0x38>)
  400788:	6813      	ldr	r3, [r2, #0]
  40078a:	3301      	adds	r3, #1
  40078c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
  40078e:	2b01      	cmp	r3, #1
  400790:	d000      	beq.n	400794 <vPortEnterCritical+0x20>
  400792:	bd08      	pop	{r3, pc}
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400794:	4b06      	ldr	r3, [pc, #24]	; (4007b0 <vPortEnterCritical+0x3c>)
  400796:	681b      	ldr	r3, [r3, #0]
  400798:	f013 0fff 	tst.w	r3, #255	; 0xff
  40079c:	d0f9      	beq.n	400792 <vPortEnterCritical+0x1e>
  40079e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  4007a2:	4804      	ldr	r0, [pc, #16]	; (4007b4 <vPortEnterCritical+0x40>)
  4007a4:	4b04      	ldr	r3, [pc, #16]	; (4007b8 <vPortEnterCritical+0x44>)
  4007a6:	4798      	blx	r3
}
  4007a8:	e7f3      	b.n	400792 <vPortEnterCritical+0x1e>
  4007aa:	bf00      	nop
  4007ac:	2000000c 	.word	0x2000000c
  4007b0:	e000ed04 	.word	0xe000ed04
  4007b4:	004084a0 	.word	0x004084a0
  4007b8:	00403429 	.word	0x00403429

004007bc <vPortExitCritical>:
{
  4007bc:	b508      	push	{r3, lr}
    configASSERT( uxCriticalNesting );
  4007be:	4b08      	ldr	r3, [pc, #32]	; (4007e0 <vPortExitCritical+0x24>)
  4007c0:	681b      	ldr	r3, [r3, #0]
  4007c2:	b13b      	cbz	r3, 4007d4 <vPortExitCritical+0x18>
    uxCriticalNesting--;
  4007c4:	4a06      	ldr	r2, [pc, #24]	; (4007e0 <vPortExitCritical+0x24>)
  4007c6:	6813      	ldr	r3, [r2, #0]
  4007c8:	3b01      	subs	r3, #1
  4007ca:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
  4007cc:	b90b      	cbnz	r3, 4007d2 <vPortExitCritical+0x16>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
  4007ce:	f383 8811 	msr	BASEPRI, r3
  4007d2:	bd08      	pop	{r3, pc}
    configASSERT( uxCriticalNesting );
  4007d4:	f240 11ad 	movw	r1, #429	; 0x1ad
  4007d8:	4802      	ldr	r0, [pc, #8]	; (4007e4 <vPortExitCritical+0x28>)
  4007da:	4b03      	ldr	r3, [pc, #12]	; (4007e8 <vPortExitCritical+0x2c>)
  4007dc:	4798      	blx	r3
  4007de:	e7f1      	b.n	4007c4 <vPortExitCritical+0x8>
  4007e0:	2000000c 	.word	0x2000000c
  4007e4:	004084a0 	.word	0x004084a0
  4007e8:	00403429 	.word	0x00403429
  4007ec:	00000000 	.word	0x00000000

004007f0 <PendSV_Handler>:
    __asm volatile
  4007f0:	f3ef 8009 	mrs	r0, PSP
  4007f4:	f3bf 8f6f 	isb	sy
  4007f8:	4b15      	ldr	r3, [pc, #84]	; (400850 <pxCurrentTCBConst>)
  4007fa:	681a      	ldr	r2, [r3, #0]
  4007fc:	f01e 0f10 	tst.w	lr, #16
  400800:	bf08      	it	eq
  400802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40080a:	6010      	str	r0, [r2, #0]
  40080c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400810:	f04f 0050 	mov.w	r0, #80	; 0x50
  400814:	f380 8811 	msr	BASEPRI, r0
  400818:	f3bf 8f4f 	dsb	sy
  40081c:	f3bf 8f6f 	isb	sy
  400820:	f001 fba8 	bl	401f74 <vTaskSwitchContext>
  400824:	f04f 0000 	mov.w	r0, #0
  400828:	f380 8811 	msr	BASEPRI, r0
  40082c:	bc09      	pop	{r0, r3}
  40082e:	6819      	ldr	r1, [r3, #0]
  400830:	6808      	ldr	r0, [r1, #0]
  400832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400836:	f01e 0f10 	tst.w	lr, #16
  40083a:	bf08      	it	eq
  40083c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400840:	f380 8809 	msr	PSP, r0
  400844:	f3bf 8f6f 	isb	sy
  400848:	4770      	bx	lr
  40084a:	bf00      	nop
  40084c:	f3af 8000 	nop.w

00400850 <pxCurrentTCBConst>:
  400850:	20000a90 	.word	0x20000a90

00400854 <SysTick_Handler>:
{
  400854:	b508      	push	{r3, lr}
        __asm volatile
  400856:	f04f 0350 	mov.w	r3, #80	; 0x50
  40085a:	f383 8811 	msr	BASEPRI, r3
  40085e:	f3bf 8f6f 	isb	sy
  400862:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
  400866:	4b05      	ldr	r3, [pc, #20]	; (40087c <SysTick_Handler+0x28>)
  400868:	4798      	blx	r3
  40086a:	b118      	cbz	r0, 400874 <SysTick_Handler+0x20>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40086c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400870:	4b03      	ldr	r3, [pc, #12]	; (400880 <SysTick_Handler+0x2c>)
  400872:	601a      	str	r2, [r3, #0]
        __asm volatile
  400874:	2300      	movs	r3, #0
  400876:	f383 8811 	msr	BASEPRI, r3
  40087a:	bd08      	pop	{r3, pc}
  40087c:	00401bc1 	.word	0x00401bc1
  400880:	e000ed04 	.word	0xe000ed04

00400884 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
  400884:	4a08      	ldr	r2, [pc, #32]	; (4008a8 <vPortSetupTimerInterrupt+0x24>)
  400886:	2300      	movs	r3, #0
  400888:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  40088a:	4908      	ldr	r1, [pc, #32]	; (4008ac <vPortSetupTimerInterrupt+0x28>)
  40088c:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  40088e:	4b08      	ldr	r3, [pc, #32]	; (4008b0 <vPortSetupTimerInterrupt+0x2c>)
  400890:	681b      	ldr	r3, [r3, #0]
  400892:	4908      	ldr	r1, [pc, #32]	; (4008b4 <vPortSetupTimerInterrupt+0x30>)
  400894:	fba1 1303 	umull	r1, r3, r1, r3
  400898:	099b      	lsrs	r3, r3, #6
  40089a:	3b01      	subs	r3, #1
  40089c:	4906      	ldr	r1, [pc, #24]	; (4008b8 <vPortSetupTimerInterrupt+0x34>)
  40089e:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4008a0:	2307      	movs	r3, #7
  4008a2:	6013      	str	r3, [r2, #0]
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	e000e010 	.word	0xe000e010
  4008ac:	e000e018 	.word	0xe000e018
  4008b0:	20000020 	.word	0x20000020
  4008b4:	10624dd3 	.word	0x10624dd3
  4008b8:	e000e014 	.word	0xe000e014

004008bc <xPortStartScheduler>:
{
  4008bc:	b510      	push	{r4, lr}
  4008be:	b082      	sub	sp, #8
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  4008c0:	4b36      	ldr	r3, [pc, #216]	; (40099c <xPortStartScheduler+0xe0>)
  4008c2:	681a      	ldr	r2, [r3, #0]
  4008c4:	4b36      	ldr	r3, [pc, #216]	; (4009a0 <xPortStartScheduler+0xe4>)
  4008c6:	429a      	cmp	r2, r3
  4008c8:	d01e      	beq.n	400908 <xPortStartScheduler+0x4c>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  4008ca:	4b34      	ldr	r3, [pc, #208]	; (40099c <xPortStartScheduler+0xe0>)
  4008cc:	681a      	ldr	r2, [r3, #0]
  4008ce:	4b35      	ldr	r3, [pc, #212]	; (4009a4 <xPortStartScheduler+0xe8>)
  4008d0:	429a      	cmp	r2, r3
  4008d2:	d01f      	beq.n	400914 <xPortStartScheduler+0x58>
            ulOriginalPriority = *pucFirstUserPriorityRegister;
  4008d4:	4b34      	ldr	r3, [pc, #208]	; (4009a8 <xPortStartScheduler+0xec>)
  4008d6:	781a      	ldrb	r2, [r3, #0]
  4008d8:	b2d2      	uxtb	r2, r2
  4008da:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4008dc:	22ff      	movs	r2, #255	; 0xff
  4008de:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4008e0:	781b      	ldrb	r3, [r3, #0]
  4008e2:	b2db      	uxtb	r3, r3
  4008e4:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4008e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4008ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
  4008f0:	4a2e      	ldr	r2, [pc, #184]	; (4009ac <xPortStartScheduler+0xf0>)
  4008f2:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4008f4:	2207      	movs	r2, #7
  4008f6:	4b2e      	ldr	r3, [pc, #184]	; (4009b0 <xPortStartScheduler+0xf4>)
  4008f8:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4008fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4008fe:	f013 0f80 	tst.w	r3, #128	; 0x80
  400902:	d01e      	beq.n	400942 <xPortStartScheduler+0x86>
  400904:	2206      	movs	r2, #6
  400906:	e00c      	b.n	400922 <xPortStartScheduler+0x66>
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400908:	f44f 7197 	mov.w	r1, #302	; 0x12e
  40090c:	4829      	ldr	r0, [pc, #164]	; (4009b4 <xPortStartScheduler+0xf8>)
  40090e:	4b2a      	ldr	r3, [pc, #168]	; (4009b8 <xPortStartScheduler+0xfc>)
  400910:	4798      	blx	r3
  400912:	e7da      	b.n	4008ca <xPortStartScheduler+0xe>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400914:	f240 112f 	movw	r1, #303	; 0x12f
  400918:	4826      	ldr	r0, [pc, #152]	; (4009b4 <xPortStartScheduler+0xf8>)
  40091a:	4b27      	ldr	r3, [pc, #156]	; (4009b8 <xPortStartScheduler+0xfc>)
  40091c:	4798      	blx	r3
  40091e:	e7d9      	b.n	4008d4 <xPortStartScheduler+0x18>
  400920:	460a      	mov	r2, r1
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400922:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400926:	005b      	lsls	r3, r3, #1
  400928:	b2db      	uxtb	r3, r3
  40092a:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40092e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400932:	1e51      	subs	r1, r2, #1
  400934:	f013 0f80 	tst.w	r3, #128	; 0x80
  400938:	d1f2      	bne.n	400920 <xPortStartScheduler+0x64>
  40093a:	4b1d      	ldr	r3, [pc, #116]	; (4009b0 <xPortStartScheduler+0xf4>)
  40093c:	601a      	str	r2, [r3, #0]
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  40093e:	2a03      	cmp	r2, #3
  400940:	d004      	beq.n	40094c <xPortStartScheduler+0x90>
  400942:	f240 1161 	movw	r1, #353	; 0x161
  400946:	481b      	ldr	r0, [pc, #108]	; (4009b4 <xPortStartScheduler+0xf8>)
  400948:	4b1b      	ldr	r3, [pc, #108]	; (4009b8 <xPortStartScheduler+0xfc>)
  40094a:	4798      	blx	r3
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40094c:	4a18      	ldr	r2, [pc, #96]	; (4009b0 <xPortStartScheduler+0xf4>)
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  40094e:	6813      	ldr	r3, [r2, #0]
  400950:	021b      	lsls	r3, r3, #8
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400952:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400956:	6013      	str	r3, [r2, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
  400958:	9b01      	ldr	r3, [sp, #4]
  40095a:	b2db      	uxtb	r3, r3
  40095c:	4a12      	ldr	r2, [pc, #72]	; (4009a8 <xPortStartScheduler+0xec>)
  40095e:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
  400960:	4b16      	ldr	r3, [pc, #88]	; (4009bc <xPortStartScheduler+0x100>)
  400962:	681a      	ldr	r2, [r3, #0]
  400964:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  400968:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
  40096a:	681a      	ldr	r2, [r3, #0]
  40096c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  400970:	601a      	str	r2, [r3, #0]
    vPortSetupTimerInterrupt();
  400972:	4b13      	ldr	r3, [pc, #76]	; (4009c0 <xPortStartScheduler+0x104>)
  400974:	4798      	blx	r3
    uxCriticalNesting = 0;
  400976:	2400      	movs	r4, #0
  400978:	4b12      	ldr	r3, [pc, #72]	; (4009c4 <xPortStartScheduler+0x108>)
  40097a:	601c      	str	r4, [r3, #0]
    vPortEnableVFP();
  40097c:	4b12      	ldr	r3, [pc, #72]	; (4009c8 <xPortStartScheduler+0x10c>)
  40097e:	4798      	blx	r3
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400980:	4a12      	ldr	r2, [pc, #72]	; (4009cc <xPortStartScheduler+0x110>)
  400982:	6813      	ldr	r3, [r2, #0]
  400984:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400988:	6013      	str	r3, [r2, #0]
    prvPortStartFirstTask();
  40098a:	4b11      	ldr	r3, [pc, #68]	; (4009d0 <xPortStartScheduler+0x114>)
  40098c:	4798      	blx	r3
    vTaskSwitchContext();
  40098e:	4b11      	ldr	r3, [pc, #68]	; (4009d4 <xPortStartScheduler+0x118>)
  400990:	4798      	blx	r3
    prvTaskExitError();
  400992:	4b11      	ldr	r3, [pc, #68]	; (4009d8 <xPortStartScheduler+0x11c>)
  400994:	4798      	blx	r3
}
  400996:	4620      	mov	r0, r4
  400998:	b002      	add	sp, #8
  40099a:	bd10      	pop	{r4, pc}
  40099c:	e000ed00 	.word	0xe000ed00
  4009a0:	410fc271 	.word	0x410fc271
  4009a4:	410fc270 	.word	0x410fc270
  4009a8:	e000e400 	.word	0xe000e400
  4009ac:	20000a68 	.word	0x20000a68
  4009b0:	20000a6c 	.word	0x20000a6c
  4009b4:	004084a0 	.word	0x004084a0
  4009b8:	00403429 	.word	0x00403429
  4009bc:	e000ed20 	.word	0xe000ed20
  4009c0:	00400885 	.word	0x00400885
  4009c4:	2000000c 	.word	0x2000000c
  4009c8:	004006cd 	.word	0x004006cd
  4009cc:	e000ef34 	.word	0xe000ef34
  4009d0:	004006a5 	.word	0x004006a5
  4009d4:	00401f75 	.word	0x00401f75
  4009d8:	004006e1 	.word	0x004006e1

004009dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
  4009dc:	b508      	push	{r3, lr}
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
  4009de:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4009e2:	2b0f      	cmp	r3, #15
  4009e4:	d906      	bls.n	4009f4 <vPortValidateInterruptPriority+0x18>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4009e6:	4a0e      	ldr	r2, [pc, #56]	; (400a20 <vPortValidateInterruptPriority+0x44>)
  4009e8:	5c9b      	ldrb	r3, [r3, r2]
  4009ea:	b2db      	uxtb	r3, r3
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4009ec:	4a0d      	ldr	r2, [pc, #52]	; (400a24 <vPortValidateInterruptPriority+0x48>)
  4009ee:	7812      	ldrb	r2, [r2, #0]
  4009f0:	429a      	cmp	r2, r3
  4009f2:	d808      	bhi.n	400a06 <vPortValidateInterruptPriority+0x2a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4009f4:	4b0c      	ldr	r3, [pc, #48]	; (400a28 <vPortValidateInterruptPriority+0x4c>)
  4009f6:	681b      	ldr	r3, [r3, #0]
  4009f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4009fc:	4a0b      	ldr	r2, [pc, #44]	; (400a2c <vPortValidateInterruptPriority+0x50>)
  4009fe:	6812      	ldr	r2, [r2, #0]
  400a00:	4293      	cmp	r3, r2
  400a02:	d806      	bhi.n	400a12 <vPortValidateInterruptPriority+0x36>
  400a04:	bd08      	pop	{r3, pc}
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400a06:	f240 21fe 	movw	r1, #766	; 0x2fe
  400a0a:	4809      	ldr	r0, [pc, #36]	; (400a30 <vPortValidateInterruptPriority+0x54>)
  400a0c:	4b09      	ldr	r3, [pc, #36]	; (400a34 <vPortValidateInterruptPriority+0x58>)
  400a0e:	4798      	blx	r3
  400a10:	e7f0      	b.n	4009f4 <vPortValidateInterruptPriority+0x18>
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400a12:	f240 310e 	movw	r1, #782	; 0x30e
  400a16:	4806      	ldr	r0, [pc, #24]	; (400a30 <vPortValidateInterruptPriority+0x54>)
  400a18:	4b06      	ldr	r3, [pc, #24]	; (400a34 <vPortValidateInterruptPriority+0x58>)
  400a1a:	4798      	blx	r3
    }
  400a1c:	e7f2      	b.n	400a04 <vPortValidateInterruptPriority+0x28>
  400a1e:	bf00      	nop
  400a20:	e000e3f0 	.word	0xe000e3f0
  400a24:	20000a68 	.word	0x20000a68
  400a28:	e000ed0c 	.word	0xe000ed0c
  400a2c:	20000a6c 	.word	0x20000a6c
  400a30:	004084a0 	.word	0x004084a0
  400a34:	00403429 	.word	0x00403429

00400a38 <prvInsertBlockIntoFreeList>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert )
{
  400a38:	b410      	push	{r4}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400a3a:	4a13      	ldr	r2, [pc, #76]	; (400a88 <prvInsertBlockIntoFreeList+0x50>)
  400a3c:	e000      	b.n	400a40 <prvInsertBlockIntoFreeList+0x8>
  400a3e:	461a      	mov	r2, r3
  400a40:	6813      	ldr	r3, [r2, #0]
  400a42:	4283      	cmp	r3, r0
  400a44:	d3fb      	bcc.n	400a3e <prvInsertBlockIntoFreeList+0x6>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  400a46:	6851      	ldr	r1, [r2, #4]
  400a48:	1854      	adds	r4, r2, r1
  400a4a:	42a0      	cmp	r0, r4
  400a4c:	d00a      	beq.n	400a64 <prvInsertBlockIntoFreeList+0x2c>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  400a4e:	6841      	ldr	r1, [r0, #4]
  400a50:	1844      	adds	r4, r0, r1
  400a52:	42a3      	cmp	r3, r4
  400a54:	d00b      	beq.n	400a6e <prvInsertBlockIntoFreeList+0x36>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  400a56:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
  400a58:	4290      	cmp	r0, r2
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
  400a5a:	bf18      	it	ne
  400a5c:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
  400a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a62:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400a64:	6840      	ldr	r0, [r0, #4]
  400a66:	4401      	add	r1, r0
  400a68:	6051      	str	r1, [r2, #4]
  400a6a:	4610      	mov	r0, r2
  400a6c:	e7ef      	b.n	400a4e <prvInsertBlockIntoFreeList+0x16>
        if( pxIterator->pxNextFreeBlock != pxEnd )
  400a6e:	4c07      	ldr	r4, [pc, #28]	; (400a8c <prvInsertBlockIntoFreeList+0x54>)
  400a70:	6824      	ldr	r4, [r4, #0]
  400a72:	42a3      	cmp	r3, r4
  400a74:	d006      	beq.n	400a84 <prvInsertBlockIntoFreeList+0x4c>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  400a76:	685b      	ldr	r3, [r3, #4]
  400a78:	4419      	add	r1, r3
  400a7a:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400a7c:	6813      	ldr	r3, [r2, #0]
  400a7e:	681b      	ldr	r3, [r3, #0]
  400a80:	6003      	str	r3, [r0, #0]
  400a82:	e7e9      	b.n	400a58 <prvInsertBlockIntoFreeList+0x20>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  400a84:	6003      	str	r3, [r0, #0]
  400a86:	e7e7      	b.n	400a58 <prvInsertBlockIntoFreeList+0x20>
  400a88:	20000a88 	.word	0x20000a88
  400a8c:	20000a70 	.word	0x20000a70

00400a90 <pvPortMalloc>:
{
  400a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a92:	4604      	mov	r4, r0
    configASSERT( pxEnd );
  400a94:	4b2f      	ldr	r3, [pc, #188]	; (400b54 <pvPortMalloc+0xc4>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	b1eb      	cbz	r3, 400ad6 <pvPortMalloc+0x46>
    vTaskSuspendAll();
  400a9a:	4b2f      	ldr	r3, [pc, #188]	; (400b58 <pvPortMalloc+0xc8>)
  400a9c:	4798      	blx	r3
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  400a9e:	4b2f      	ldr	r3, [pc, #188]	; (400b5c <pvPortMalloc+0xcc>)
  400aa0:	681d      	ldr	r5, [r3, #0]
  400aa2:	4225      	tst	r5, r4
  400aa4:	d14d      	bne.n	400b42 <pvPortMalloc+0xb2>
            if( ( xWantedSize > 0 ) &&
  400aa6:	2c00      	cmp	r4, #0
  400aa8:	d04e      	beq.n	400b48 <pvPortMalloc+0xb8>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
  400aaa:	f104 0108 	add.w	r1, r4, #8
            if( ( xWantedSize > 0 ) &&
  400aae:	428c      	cmp	r4, r1
  400ab0:	d24a      	bcs.n	400b48 <pvPortMalloc+0xb8>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  400ab2:	f011 0f07 	tst.w	r1, #7
  400ab6:	d005      	beq.n	400ac4 <pvPortMalloc+0x34>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) >
  400ab8:	f021 0307 	bic.w	r3, r1, #7
  400abc:	3308      	adds	r3, #8
  400abe:	4299      	cmp	r1, r3
  400ac0:	d242      	bcs.n	400b48 <pvPortMalloc+0xb8>
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400ac2:	4619      	mov	r1, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  400ac4:	2900      	cmp	r1, #0
  400ac6:	d03c      	beq.n	400b42 <pvPortMalloc+0xb2>
  400ac8:	4b25      	ldr	r3, [pc, #148]	; (400b60 <pvPortMalloc+0xd0>)
  400aca:	681e      	ldr	r6, [r3, #0]
  400acc:	42b1      	cmp	r1, r6
  400ace:	d838      	bhi.n	400b42 <pvPortMalloc+0xb2>
                pxBlock = xStart.pxNextFreeBlock;
  400ad0:	4a24      	ldr	r2, [pc, #144]	; (400b64 <pvPortMalloc+0xd4>)
  400ad2:	6814      	ldr	r4, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400ad4:	e006      	b.n	400ae4 <pvPortMalloc+0x54>
    configASSERT( pxEnd );
  400ad6:	218e      	movs	r1, #142	; 0x8e
  400ad8:	4823      	ldr	r0, [pc, #140]	; (400b68 <pvPortMalloc+0xd8>)
  400ada:	4b24      	ldr	r3, [pc, #144]	; (400b6c <pvPortMalloc+0xdc>)
  400adc:	4798      	blx	r3
  400ade:	e7dc      	b.n	400a9a <pvPortMalloc+0xa>
  400ae0:	4622      	mov	r2, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
  400ae2:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400ae4:	6863      	ldr	r3, [r4, #4]
  400ae6:	4299      	cmp	r1, r3
  400ae8:	d902      	bls.n	400af0 <pvPortMalloc+0x60>
  400aea:	6823      	ldr	r3, [r4, #0]
  400aec:	2b00      	cmp	r3, #0
  400aee:	d1f7      	bne.n	400ae0 <pvPortMalloc+0x50>
                if( pxBlock != pxEnd )
  400af0:	4b18      	ldr	r3, [pc, #96]	; (400b54 <pvPortMalloc+0xc4>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	429c      	cmp	r4, r3
  400af6:	d024      	beq.n	400b42 <pvPortMalloc+0xb2>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  400af8:	6817      	ldr	r7, [r2, #0]
  400afa:	3708      	adds	r7, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400afc:	6823      	ldr	r3, [r4, #0]
  400afe:	6013      	str	r3, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400b00:	6863      	ldr	r3, [r4, #4]
  400b02:	1a5b      	subs	r3, r3, r1
  400b04:	2b10      	cmp	r3, #16
  400b06:	d816      	bhi.n	400b36 <pvPortMalloc+0xa6>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  400b08:	6862      	ldr	r2, [r4, #4]
  400b0a:	1ab6      	subs	r6, r6, r2
  400b0c:	4914      	ldr	r1, [pc, #80]	; (400b60 <pvPortMalloc+0xd0>)
  400b0e:	600e      	str	r6, [r1, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  400b10:	4917      	ldr	r1, [pc, #92]	; (400b70 <pvPortMalloc+0xe0>)
  400b12:	6809      	ldr	r1, [r1, #0]
  400b14:	428e      	cmp	r6, r1
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  400b16:	bf3c      	itt	cc
  400b18:	4915      	ldrcc	r1, [pc, #84]	; (400b70 <pvPortMalloc+0xe0>)
  400b1a:	600e      	strcc	r6, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
  400b1c:	4315      	orrs	r5, r2
  400b1e:	6065      	str	r5, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
  400b20:	2300      	movs	r3, #0
  400b22:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
  400b24:	4a13      	ldr	r2, [pc, #76]	; (400b74 <pvPortMalloc+0xe4>)
  400b26:	6813      	ldr	r3, [r2, #0]
  400b28:	3301      	adds	r3, #1
  400b2a:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
  400b2c:	4b12      	ldr	r3, [pc, #72]	; (400b78 <pvPortMalloc+0xe8>)
  400b2e:	4798      	blx	r3
            if( pvReturn == NULL )
  400b30:	b167      	cbz	r7, 400b4c <pvPortMalloc+0xbc>
}
  400b32:	4638      	mov	r0, r7
  400b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  400b36:	1860      	adds	r0, r4, r1
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400b38:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
  400b3a:	6061      	str	r1, [r4, #4]
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400b3c:	4b0f      	ldr	r3, [pc, #60]	; (400b7c <pvPortMalloc+0xec>)
  400b3e:	4798      	blx	r3
  400b40:	e7e2      	b.n	400b08 <pvPortMalloc+0x78>
    ( void ) xTaskResumeAll();
  400b42:	4b0d      	ldr	r3, [pc, #52]	; (400b78 <pvPortMalloc+0xe8>)
  400b44:	4798      	blx	r3
  400b46:	e001      	b.n	400b4c <pvPortMalloc+0xbc>
  400b48:	4b0b      	ldr	r3, [pc, #44]	; (400b78 <pvPortMalloc+0xe8>)
  400b4a:	4798      	blx	r3
                vApplicationMallocFailedHook();
  400b4c:	4b0c      	ldr	r3, [pc, #48]	; (400b80 <pvPortMalloc+0xf0>)
  400b4e:	4798      	blx	r3
  400b50:	2700      	movs	r7, #0
    return pvReturn;
  400b52:	e7ee      	b.n	400b32 <pvPortMalloc+0xa2>
  400b54:	20000a70 	.word	0x20000a70
  400b58:	00401ba5 	.word	0x00401ba5
  400b5c:	20000a74 	.word	0x20000a74
  400b60:	20000a78 	.word	0x20000a78
  400b64:	20000a88 	.word	0x20000a88
  400b68:	004084d0 	.word	0x004084d0
  400b6c:	00403429 	.word	0x00403429
  400b70:	20000a7c 	.word	0x20000a7c
  400b74:	20000a80 	.word	0x20000a80
  400b78:	00401d7d 	.word	0x00401d7d
  400b7c:	00400a39 	.word	0x00400a39
  400b80:	00403455 	.word	0x00403455

00400b84 <vPortFree>:
    if( pv != NULL )
  400b84:	2800      	cmp	r0, #0
  400b86:	d044      	beq.n	400c12 <vPortFree+0x8e>
{
  400b88:	b510      	push	{r4, lr}
  400b8a:	4604      	mov	r4, r0
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  400b8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  400b90:	4b20      	ldr	r3, [pc, #128]	; (400c14 <vPortFree+0x90>)
  400b92:	681b      	ldr	r3, [r3, #0]
  400b94:	421a      	tst	r2, r3
  400b96:	d011      	beq.n	400bbc <vPortFree+0x38>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  400b98:	f850 3c08 	ldr.w	r3, [r0, #-8]
  400b9c:	b1f3      	cbz	r3, 400bdc <vPortFree+0x58>
  400b9e:	f240 112d 	movw	r1, #301	; 0x12d
  400ba2:	481d      	ldr	r0, [pc, #116]	; (400c18 <vPortFree+0x94>)
  400ba4:	4b1d      	ldr	r3, [pc, #116]	; (400c1c <vPortFree+0x98>)
  400ba6:	4798      	blx	r3
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  400ba8:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400bac:	4a19      	ldr	r2, [pc, #100]	; (400c14 <vPortFree+0x90>)
  400bae:	6812      	ldr	r2, [r2, #0]
  400bb0:	4213      	tst	r3, r2
  400bb2:	d002      	beq.n	400bba <vPortFree+0x36>
            if( pxLink->pxNextFreeBlock == NULL )
  400bb4:	f854 1c08 	ldr.w	r1, [r4, #-8]
  400bb8:	b1a1      	cbz	r1, 400be4 <vPortFree+0x60>
  400bba:	bd10      	pop	{r4, pc}
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  400bbc:	f44f 7196 	mov.w	r1, #300	; 0x12c
  400bc0:	4815      	ldr	r0, [pc, #84]	; (400c18 <vPortFree+0x94>)
  400bc2:	4b16      	ldr	r3, [pc, #88]	; (400c1c <vPortFree+0x98>)
  400bc4:	4798      	blx	r3
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  400bc6:	f854 3c08 	ldr.w	r3, [r4, #-8]
  400bca:	2b00      	cmp	r3, #0
  400bcc:	d1e7      	bne.n	400b9e <vPortFree+0x1a>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  400bce:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400bd2:	4a10      	ldr	r2, [pc, #64]	; (400c14 <vPortFree+0x90>)
  400bd4:	6812      	ldr	r2, [r2, #0]
  400bd6:	4213      	tst	r3, r2
  400bd8:	d0ef      	beq.n	400bba <vPortFree+0x36>
  400bda:	e003      	b.n	400be4 <vPortFree+0x60>
  400bdc:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400be0:	4a0c      	ldr	r2, [pc, #48]	; (400c14 <vPortFree+0x90>)
  400be2:	6812      	ldr	r2, [r2, #0]
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
  400be4:	ea23 0302 	bic.w	r3, r3, r2
  400be8:	f844 3c04 	str.w	r3, [r4, #-4]
                vTaskSuspendAll();
  400bec:	4b0c      	ldr	r3, [pc, #48]	; (400c20 <vPortFree+0x9c>)
  400bee:	4798      	blx	r3
                    xFreeBytesRemaining += pxLink->xBlockSize;
  400bf0:	4a0c      	ldr	r2, [pc, #48]	; (400c24 <vPortFree+0xa0>)
  400bf2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400bf6:	6811      	ldr	r1, [r2, #0]
  400bf8:	440b      	add	r3, r1
  400bfa:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  400bfc:	f1a4 0008 	sub.w	r0, r4, #8
  400c00:	4b09      	ldr	r3, [pc, #36]	; (400c28 <vPortFree+0xa4>)
  400c02:	4798      	blx	r3
                    xNumberOfSuccessfulFrees++;
  400c04:	4a09      	ldr	r2, [pc, #36]	; (400c2c <vPortFree+0xa8>)
  400c06:	6813      	ldr	r3, [r2, #0]
  400c08:	3301      	adds	r3, #1
  400c0a:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
  400c0c:	4b08      	ldr	r3, [pc, #32]	; (400c30 <vPortFree+0xac>)
  400c0e:	4798      	blx	r3
}
  400c10:	bd10      	pop	{r4, pc}
  400c12:	4770      	bx	lr
  400c14:	20000a74 	.word	0x20000a74
  400c18:	004084d0 	.word	0x004084d0
  400c1c:	00403429 	.word	0x00403429
  400c20:	00401ba5 	.word	0x00401ba5
  400c24:	20000a78 	.word	0x20000a78
  400c28:	00400a39 	.word	0x00400a39
  400c2c:	20000a84 	.word	0x20000a84
  400c30:	00401d7d 	.word	0x00401d7d

00400c34 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c38:	4605      	mov	r5, r0
    BaseType_t xDefinedRegions = 0;
    size_t xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
  400c3a:	4b35      	ldr	r3, [pc, #212]	; (400d10 <vPortDefineHeapRegions+0xdc>)
  400c3c:	681b      	ldr	r3, [r3, #0]
  400c3e:	b123      	cbz	r3, 400c4a <vPortDefineHeapRegions+0x16>
  400c40:	f240 11a3 	movw	r1, #419	; 0x1a3
  400c44:	4833      	ldr	r0, [pc, #204]	; (400d14 <vPortDefineHeapRegions+0xe0>)
  400c46:	4b34      	ldr	r3, [pc, #208]	; (400d18 <vPortDefineHeapRegions+0xe4>)
  400c48:	4798      	blx	r3

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

    while( pxHeapRegion->xSizeInBytes > 0 )
  400c4a:	f8d5 b004 	ldr.w	fp, [r5, #4]
  400c4e:	f1bb 0f00 	cmp.w	fp, #0
  400c52:	d052      	beq.n	400cfa <vPortDefineHeapRegions+0xc6>
  400c54:	3508      	adds	r5, #8
  400c56:	2600      	movs	r6, #0
  400c58:	46b0      	mov	r8, r6
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != NULL );
  400c5a:	4f2d      	ldr	r7, [pc, #180]	; (400d10 <vPortDefineHeapRegions+0xdc>)

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( xAddress > ( size_t ) pxEnd );
  400c5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400d14 <vPortDefineHeapRegions+0xe0>
  400c60:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 400d18 <vPortDefineHeapRegions+0xe4>
  400c64:	e01d      	b.n	400ca2 <vPortDefineHeapRegions+0x6e>
            configASSERT( pxEnd != NULL );
  400c66:	683b      	ldr	r3, [r7, #0]
  400c68:	b373      	cbz	r3, 400cc8 <vPortDefineHeapRegions+0x94>
            configASSERT( xAddress > ( size_t ) pxEnd );
  400c6a:	683b      	ldr	r3, [r7, #0]
  400c6c:	42a3      	cmp	r3, r4
  400c6e:	d230      	bcs.n	400cd2 <vPortDefineHeapRegions+0x9e>
        }

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
  400c70:	6839      	ldr	r1, [r7, #0]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + xTotalRegionSize;
  400c72:	eb0b 0304 	add.w	r3, fp, r4
        xAddress -= xHeapStructSize;
  400c76:	3b08      	subs	r3, #8
        xAddress &= ~portBYTE_ALIGNMENT_MASK;
  400c78:	f023 0307 	bic.w	r3, r3, #7
        pxEnd = ( BlockLink_t * ) xAddress;
  400c7c:	603b      	str	r3, [r7, #0]
        pxEnd->xBlockSize = 0;
  400c7e:	2200      	movs	r2, #0
  400c80:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = NULL;
  400c82:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  400c84:	4622      	mov	r2, r4
        pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  400c86:	1b18      	subs	r0, r3, r4
  400c88:	6060      	str	r0, [r4, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  400c8a:	6023      	str	r3, [r4, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
  400c8c:	b101      	cbz	r1, 400c90 <vPortDefineHeapRegions+0x5c>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  400c8e:	600c      	str	r4, [r1, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  400c90:	6853      	ldr	r3, [r2, #4]
  400c92:	4498      	add	r8, r3

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
  400c94:	3601      	adds	r6, #1
  400c96:	3508      	adds	r5, #8
    while( pxHeapRegion->xSizeInBytes > 0 )
  400c98:	f855 bc04 	ldr.w	fp, [r5, #-4]
  400c9c:	f1bb 0f00 	cmp.w	fp, #0
  400ca0:	d01c      	beq.n	400cdc <vPortDefineHeapRegions+0xa8>
        xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  400ca2:	f855 4c08 	ldr.w	r4, [r5, #-8]
        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  400ca6:	f014 0f07 	tst.w	r4, #7
  400caa:	d006      	beq.n	400cba <vPortDefineHeapRegions+0x86>
            xAddress += ( portBYTE_ALIGNMENT - 1 );
  400cac:	1de2      	adds	r2, r4, #7
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  400cae:	f022 0207 	bic.w	r2, r2, #7
            xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  400cb2:	44a3      	add	fp, r4
  400cb4:	ebab 0b02 	sub.w	fp, fp, r2
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  400cb8:	4614      	mov	r4, r2
        if( xDefinedRegions == 0 )
  400cba:	2e00      	cmp	r6, #0
  400cbc:	d1d3      	bne.n	400c66 <vPortDefineHeapRegions+0x32>
            xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  400cbe:	4b17      	ldr	r3, [pc, #92]	; (400d1c <vPortDefineHeapRegions+0xe8>)
  400cc0:	601c      	str	r4, [r3, #0]
            xStart.xBlockSize = ( size_t ) 0;
  400cc2:	2200      	movs	r2, #0
  400cc4:	605a      	str	r2, [r3, #4]
  400cc6:	e7d3      	b.n	400c70 <vPortDefineHeapRegions+0x3c>
            configASSERT( pxEnd != NULL );
  400cc8:	f240 11c5 	movw	r1, #453	; 0x1c5
  400ccc:	4650      	mov	r0, sl
  400cce:	47c8      	blx	r9
  400cd0:	e7cb      	b.n	400c6a <vPortDefineHeapRegions+0x36>
            configASSERT( xAddress > ( size_t ) pxEnd );
  400cd2:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  400cd6:	4650      	mov	r0, sl
  400cd8:	47c8      	blx	r9
  400cda:	e7c9      	b.n	400c70 <vPortDefineHeapRegions+0x3c>
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  400cdc:	4b10      	ldr	r3, [pc, #64]	; (400d20 <vPortDefineHeapRegions+0xec>)
  400cde:	f8c3 8000 	str.w	r8, [r3]
    xFreeBytesRemaining = xTotalHeapSize;
  400ce2:	4b10      	ldr	r3, [pc, #64]	; (400d24 <vPortDefineHeapRegions+0xf0>)
  400ce4:	f8c3 8000 	str.w	r8, [r3]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
  400ce8:	f1b8 0f00 	cmp.w	r8, #0
  400cec:	d00a      	beq.n	400d04 <vPortDefineHeapRegions+0xd0>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  400cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400cf2:	4b0d      	ldr	r3, [pc, #52]	; (400d28 <vPortDefineHeapRegions+0xf4>)
  400cf4:	601a      	str	r2, [r3, #0]
}
  400cf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  400cfa:	2300      	movs	r3, #0
  400cfc:	4a08      	ldr	r2, [pc, #32]	; (400d20 <vPortDefineHeapRegions+0xec>)
  400cfe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
  400d00:	4a08      	ldr	r2, [pc, #32]	; (400d24 <vPortDefineHeapRegions+0xf0>)
  400d02:	6013      	str	r3, [r2, #0]
    configASSERT( xTotalHeapSize );
  400d04:	f240 11f1 	movw	r1, #497	; 0x1f1
  400d08:	4802      	ldr	r0, [pc, #8]	; (400d14 <vPortDefineHeapRegions+0xe0>)
  400d0a:	4b03      	ldr	r3, [pc, #12]	; (400d18 <vPortDefineHeapRegions+0xe4>)
  400d0c:	4798      	blx	r3
  400d0e:	e7ee      	b.n	400cee <vPortDefineHeapRegions+0xba>
  400d10:	20000a70 	.word	0x20000a70
  400d14:	004084d0 	.word	0x004084d0
  400d18:	00403429 	.word	0x00403429
  400d1c:	20000a88 	.word	0x20000a88
  400d20:	20000a7c 	.word	0x20000a7c
  400d24:	20000a78 	.word	0x20000a78
  400d28:	20000a74 	.word	0x20000a74

00400d2c <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
  400d2c:	b510      	push	{r4, lr}
  400d2e:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
  400d30:	4b04      	ldr	r3, [pc, #16]	; (400d44 <prvIsQueueEmpty+0x18>)
  400d32:	4798      	blx	r3
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
  400d34:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
  400d36:	4b04      	ldr	r3, [pc, #16]	; (400d48 <prvIsQueueEmpty+0x1c>)
  400d38:	4798      	blx	r3

    return xReturn;
}
  400d3a:	fab4 f084 	clz	r0, r4
  400d3e:	0940      	lsrs	r0, r0, #5
  400d40:	bd10      	pop	{r4, pc}
  400d42:	bf00      	nop
  400d44:	00400775 	.word	0x00400775
  400d48:	004007bd 	.word	0x004007bd

00400d4c <prvCopyDataToQueue>:
{
  400d4c:	b570      	push	{r4, r5, r6, lr}
  400d4e:	4604      	mov	r4, r0
  400d50:	4616      	mov	r6, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400d52:	6b85      	ldr	r5, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400d54:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400d56:	b95a      	cbnz	r2, 400d70 <prvCopyDataToQueue+0x24>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d58:	6803      	ldr	r3, [r0, #0]
    BaseType_t xReturn = pdFALSE;
  400d5a:	2000      	movs	r0, #0
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d5c:	b113      	cbz	r3, 400d64 <prvCopyDataToQueue+0x18>
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  400d5e:	3501      	adds	r5, #1
  400d60:	63a5      	str	r5, [r4, #56]	; 0x38
}
  400d62:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400d64:	68a0      	ldr	r0, [r4, #8]
  400d66:	4b17      	ldr	r3, [pc, #92]	; (400dc4 <prvCopyDataToQueue+0x78>)
  400d68:	4798      	blx	r3
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
  400d6a:	2300      	movs	r3, #0
  400d6c:	60a3      	str	r3, [r4, #8]
  400d6e:	e7f6      	b.n	400d5e <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
  400d70:	b96e      	cbnz	r6, 400d8e <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400d72:	6840      	ldr	r0, [r0, #4]
  400d74:	4b14      	ldr	r3, [pc, #80]	; (400dc8 <prvCopyDataToQueue+0x7c>)
  400d76:	4798      	blx	r3
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400d78:	6863      	ldr	r3, [r4, #4]
  400d7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400d7c:	4413      	add	r3, r2
  400d7e:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400d80:	68a2      	ldr	r2, [r4, #8]
  400d82:	4293      	cmp	r3, r2
  400d84:	d319      	bcc.n	400dba <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400d86:	6823      	ldr	r3, [r4, #0]
  400d88:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
  400d8a:	2000      	movs	r0, #0
  400d8c:	e7e7      	b.n	400d5e <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  400d8e:	68c0      	ldr	r0, [r0, #12]
  400d90:	4b0d      	ldr	r3, [pc, #52]	; (400dc8 <prvCopyDataToQueue+0x7c>)
  400d92:	4798      	blx	r3
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  400d94:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400d96:	4252      	negs	r2, r2
  400d98:	68e3      	ldr	r3, [r4, #12]
  400d9a:	4413      	add	r3, r2
  400d9c:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400d9e:	6821      	ldr	r1, [r4, #0]
  400da0:	428b      	cmp	r3, r1
  400da2:	d202      	bcs.n	400daa <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  400da4:	68a3      	ldr	r3, [r4, #8]
  400da6:	441a      	add	r2, r3
  400da8:	60e2      	str	r2, [r4, #12]
        if( xPosition == queueOVERWRITE )
  400daa:	2e02      	cmp	r6, #2
  400dac:	d001      	beq.n	400db2 <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
  400dae:	2000      	movs	r0, #0
  400db0:	e7d5      	b.n	400d5e <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400db2:	b125      	cbz	r5, 400dbe <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
  400db4:	3d01      	subs	r5, #1
    BaseType_t xReturn = pdFALSE;
  400db6:	2000      	movs	r0, #0
  400db8:	e7d1      	b.n	400d5e <prvCopyDataToQueue+0x12>
  400dba:	2000      	movs	r0, #0
  400dbc:	e7cf      	b.n	400d5e <prvCopyDataToQueue+0x12>
  400dbe:	2000      	movs	r0, #0
  400dc0:	e7cd      	b.n	400d5e <prvCopyDataToQueue+0x12>
  400dc2:	bf00      	nop
  400dc4:	00402469 	.word	0x00402469
  400dc8:	004034d5 	.word	0x004034d5

00400dcc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
  400dcc:	b570      	push	{r4, r5, r6, lr}
  400dce:	b082      	sub	sp, #8
  400dd0:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400dd2:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400dd4:	b15c      	cbz	r4, 400dee <prvNotifyQueueSetContainer+0x22>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400dd6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400dd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400dda:	429a      	cmp	r2, r3
  400ddc:	d20d      	bcs.n	400dfa <prvNotifyQueueSetContainer+0x2e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400dde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400de0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400de2:	429a      	cmp	r2, r3
  400de4:	d30f      	bcc.n	400e06 <prvNotifyQueueSetContainer+0x3a>
        BaseType_t xReturn = pdFALSE;
  400de6:	2600      	movs	r6, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
  400de8:	4630      	mov	r0, r6
  400dea:	b002      	add	sp, #8
  400dec:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400dee:	f640 31d5 	movw	r1, #3029	; 0xbd5
  400df2:	4817      	ldr	r0, [pc, #92]	; (400e50 <prvNotifyQueueSetContainer+0x84>)
  400df4:	4b17      	ldr	r3, [pc, #92]	; (400e54 <prvNotifyQueueSetContainer+0x88>)
  400df6:	4798      	blx	r3
  400df8:	e7ed      	b.n	400dd6 <prvNotifyQueueSetContainer+0xa>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400dfa:	f640 31d6 	movw	r1, #3030	; 0xbd6
  400dfe:	4814      	ldr	r0, [pc, #80]	; (400e50 <prvNotifyQueueSetContainer+0x84>)
  400e00:	4b14      	ldr	r3, [pc, #80]	; (400e54 <prvNotifyQueueSetContainer+0x88>)
  400e02:	4798      	blx	r3
  400e04:	e7eb      	b.n	400dde <prvNotifyQueueSetContainer+0x12>
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  400e06:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400e0a:	b26d      	sxtb	r5, r5
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
  400e0c:	2200      	movs	r2, #0
  400e0e:	a901      	add	r1, sp, #4
  400e10:	4620      	mov	r0, r4
  400e12:	4b11      	ldr	r3, [pc, #68]	; (400e58 <prvNotifyQueueSetContainer+0x8c>)
  400e14:	4798      	blx	r3
  400e16:	4606      	mov	r6, r0
            if( cTxLock == queueUNLOCKED )
  400e18:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e1c:	d006      	beq.n	400e2c <prvNotifyQueueSetContainer+0x60>
                configASSERT( cTxLock != queueINT8_MAX );
  400e1e:	2d7f      	cmp	r5, #127	; 0x7f
  400e20:	d00f      	beq.n	400e42 <prvNotifyQueueSetContainer+0x76>
                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400e22:	3501      	adds	r5, #1
  400e24:	b26d      	sxtb	r5, r5
  400e26:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  400e2a:	e7dd      	b.n	400de8 <prvNotifyQueueSetContainer+0x1c>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e2e:	2b00      	cmp	r3, #0
  400e30:	d0da      	beq.n	400de8 <prvNotifyQueueSetContainer+0x1c>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400e32:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e36:	4b09      	ldr	r3, [pc, #36]	; (400e5c <prvNotifyQueueSetContainer+0x90>)
  400e38:	4798      	blx	r3
  400e3a:	2800      	cmp	r0, #0
                        xReturn = pdTRUE;
  400e3c:	bf18      	it	ne
  400e3e:	2601      	movne	r6, #1
  400e40:	e7d2      	b.n	400de8 <prvNotifyQueueSetContainer+0x1c>
                configASSERT( cTxLock != queueINT8_MAX );
  400e42:	f640 31f6 	movw	r1, #3062	; 0xbf6
  400e46:	4802      	ldr	r0, [pc, #8]	; (400e50 <prvNotifyQueueSetContainer+0x84>)
  400e48:	4b02      	ldr	r3, [pc, #8]	; (400e54 <prvNotifyQueueSetContainer+0x88>)
  400e4a:	4798      	blx	r3
  400e4c:	e7e9      	b.n	400e22 <prvNotifyQueueSetContainer+0x56>
  400e4e:	bf00      	nop
  400e50:	004084fc 	.word	0x004084fc
  400e54:	00403429 	.word	0x00403429
  400e58:	00400d4d 	.word	0x00400d4d
  400e5c:	004020e5 	.word	0x004020e5

00400e60 <prvCopyDataFromQueue>:
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400e60:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400e62:	b172      	cbz	r2, 400e82 <prvCopyDataFromQueue+0x22>
{
  400e64:	b510      	push	{r4, lr}
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400e66:	68c3      	ldr	r3, [r0, #12]
  400e68:	4413      	add	r3, r2
  400e6a:	60c3      	str	r3, [r0, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400e6c:	6884      	ldr	r4, [r0, #8]
  400e6e:	42a3      	cmp	r3, r4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  400e70:	bf24      	itt	cs
  400e72:	6803      	ldrcs	r3, [r0, #0]
  400e74:	60c3      	strcs	r3, [r0, #12]
  400e76:	460c      	mov	r4, r1
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400e78:	68c1      	ldr	r1, [r0, #12]
  400e7a:	4620      	mov	r0, r4
  400e7c:	4b01      	ldr	r3, [pc, #4]	; (400e84 <prvCopyDataFromQueue+0x24>)
  400e7e:	4798      	blx	r3
  400e80:	bd10      	pop	{r4, pc}
  400e82:	4770      	bx	lr
  400e84:	004034d5 	.word	0x004034d5

00400e88 <prvUnlockQueue>:
{
  400e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e8c:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
  400e8e:	4b23      	ldr	r3, [pc, #140]	; (400f1c <prvUnlockQueue+0x94>)
  400e90:	4798      	blx	r3
        int8_t cTxLock = pxQueue->cTxLock;
  400e92:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  400e96:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  400e98:	2c00      	cmp	r4, #0
  400e9a:	dd18      	ble.n	400ece <prvUnlockQueue+0x46>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400e9c:	4e20      	ldr	r6, [pc, #128]	; (400f20 <prvUnlockQueue+0x98>)
                            vTaskMissedYield();
  400e9e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400f2c <prvUnlockQueue+0xa4>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ea2:	4f20      	ldr	r7, [pc, #128]	; (400f24 <prvUnlockQueue+0x9c>)
  400ea4:	e008      	b.n	400eb8 <prvUnlockQueue+0x30>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ea6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  400ea8:	b18b      	cbz	r3, 400ece <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400eaa:	f105 0024 	add.w	r0, r5, #36	; 0x24
  400eae:	47b8      	blx	r7
  400eb0:	b958      	cbnz	r0, 400eca <prvUnlockQueue+0x42>
  400eb2:	3c01      	subs	r4, #1
  400eb4:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  400eb6:	b154      	cbz	r4, 400ece <prvUnlockQueue+0x46>
                    if( pxQueue->pxQueueSetContainer != NULL )
  400eb8:	6cab      	ldr	r3, [r5, #72]	; 0x48
  400eba:	2b00      	cmp	r3, #0
  400ebc:	d0f3      	beq.n	400ea6 <prvUnlockQueue+0x1e>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400ebe:	4628      	mov	r0, r5
  400ec0:	47b0      	blx	r6
  400ec2:	2800      	cmp	r0, #0
  400ec4:	d0f5      	beq.n	400eb2 <prvUnlockQueue+0x2a>
                            vTaskMissedYield();
  400ec6:	47c0      	blx	r8
  400ec8:	e7f3      	b.n	400eb2 <prvUnlockQueue+0x2a>
                                vTaskMissedYield();
  400eca:	47c0      	blx	r8
  400ecc:	e7f1      	b.n	400eb2 <prvUnlockQueue+0x2a>
        pxQueue->cTxLock = queueUNLOCKED;
  400ece:	23ff      	movs	r3, #255	; 0xff
  400ed0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
  400ed4:	4b14      	ldr	r3, [pc, #80]	; (400f28 <prvUnlockQueue+0xa0>)
  400ed6:	4798      	blx	r3
    taskENTER_CRITICAL();
  400ed8:	4b10      	ldr	r3, [pc, #64]	; (400f1c <prvUnlockQueue+0x94>)
  400eda:	4798      	blx	r3
        int8_t cRxLock = pxQueue->cRxLock;
  400edc:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400ee0:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400ee2:	2c00      	cmp	r4, #0
  400ee4:	dd12      	ble.n	400f0c <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ee6:	692b      	ldr	r3, [r5, #16]
  400ee8:	b183      	cbz	r3, 400f0c <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400eea:	f105 0710 	add.w	r7, r5, #16
  400eee:	4e0d      	ldr	r6, [pc, #52]	; (400f24 <prvUnlockQueue+0x9c>)
                    vTaskMissedYield();
  400ef0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400f2c <prvUnlockQueue+0xa4>
  400ef4:	e004      	b.n	400f00 <prvUnlockQueue+0x78>
  400ef6:	3c01      	subs	r4, #1
  400ef8:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400efa:	b13c      	cbz	r4, 400f0c <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400efc:	692b      	ldr	r3, [r5, #16]
  400efe:	b12b      	cbz	r3, 400f0c <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400f00:	4638      	mov	r0, r7
  400f02:	47b0      	blx	r6
  400f04:	2800      	cmp	r0, #0
  400f06:	d0f6      	beq.n	400ef6 <prvUnlockQueue+0x6e>
                    vTaskMissedYield();
  400f08:	47c0      	blx	r8
  400f0a:	e7f4      	b.n	400ef6 <prvUnlockQueue+0x6e>
        pxQueue->cRxLock = queueUNLOCKED;
  400f0c:	23ff      	movs	r3, #255	; 0xff
  400f0e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
  400f12:	4b05      	ldr	r3, [pc, #20]	; (400f28 <prvUnlockQueue+0xa0>)
  400f14:	4798      	blx	r3
  400f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f1a:	bf00      	nop
  400f1c:	00400775 	.word	0x00400775
  400f20:	00400dcd 	.word	0x00400dcd
  400f24:	004020e5 	.word	0x004020e5
  400f28:	004007bd 	.word	0x004007bd
  400f2c:	0040227d 	.word	0x0040227d

00400f30 <xQueueGenericReset>:
{
  400f30:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
  400f32:	b150      	cbz	r0, 400f4a <xQueueGenericReset+0x1a>
  400f34:	460d      	mov	r5, r1
  400f36:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
  400f38:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
  400f3a:	b963      	cbnz	r3, 400f56 <xQueueGenericReset+0x26>
    configASSERT( xReturn != pdFAIL );
  400f3c:	f240 1145 	movw	r1, #325	; 0x145
  400f40:	4821      	ldr	r0, [pc, #132]	; (400fc8 <xQueueGenericReset+0x98>)
  400f42:	4b22      	ldr	r3, [pc, #136]	; (400fcc <xQueueGenericReset+0x9c>)
  400f44:	4798      	blx	r3
  400f46:	2000      	movs	r0, #0
    return xReturn;
  400f48:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxQueue );
  400f4a:	f44f 7188 	mov.w	r1, #272	; 0x110
  400f4e:	481e      	ldr	r0, [pc, #120]	; (400fc8 <xQueueGenericReset+0x98>)
  400f50:	4b1e      	ldr	r3, [pc, #120]	; (400fcc <xQueueGenericReset+0x9c>)
  400f52:	4798      	blx	r3
  400f54:	e7f2      	b.n	400f3c <xQueueGenericReset+0xc>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
  400f56:	f04f 32ff 	mov.w	r2, #4294967295
  400f5a:	fbb2 f3f3 	udiv	r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
  400f5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400f60:	4293      	cmp	r3, r2
  400f62:	d3eb      	bcc.n	400f3c <xQueueGenericReset+0xc>
        taskENTER_CRITICAL();
  400f64:	4b1a      	ldr	r3, [pc, #104]	; (400fd0 <xQueueGenericReset+0xa0>)
  400f66:	4798      	blx	r3
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400f68:	6822      	ldr	r2, [r4, #0]
  400f6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f6e:	fb03 f301 	mul.w	r3, r3, r1
  400f72:	18d0      	adds	r0, r2, r3
  400f74:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400f76:	2000      	movs	r0, #0
  400f78:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400f7a:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400f7c:	1a5b      	subs	r3, r3, r1
  400f7e:	4413      	add	r3, r2
  400f80:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
  400f82:	23ff      	movs	r3, #255	; 0xff
  400f84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
  400f88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
  400f8c:	b9a5      	cbnz	r5, 400fb8 <xQueueGenericReset+0x88>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400f8e:	6923      	ldr	r3, [r4, #16]
  400f90:	b91b      	cbnz	r3, 400f9a <xQueueGenericReset+0x6a>
        taskEXIT_CRITICAL();
  400f92:	4b10      	ldr	r3, [pc, #64]	; (400fd4 <xQueueGenericReset+0xa4>)
  400f94:	4798      	blx	r3
    BaseType_t xReturn = pdPASS;
  400f96:	2001      	movs	r0, #1
  400f98:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400f9a:	f104 0010 	add.w	r0, r4, #16
  400f9e:	4b0e      	ldr	r3, [pc, #56]	; (400fd8 <xQueueGenericReset+0xa8>)
  400fa0:	4798      	blx	r3
  400fa2:	2800      	cmp	r0, #0
  400fa4:	d0f5      	beq.n	400f92 <xQueueGenericReset+0x62>
                        queueYIELD_IF_USING_PREEMPTION();
  400fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400faa:	4b0c      	ldr	r3, [pc, #48]	; (400fdc <xQueueGenericReset+0xac>)
  400fac:	601a      	str	r2, [r3, #0]
  400fae:	f3bf 8f4f 	dsb	sy
  400fb2:	f3bf 8f6f 	isb	sy
  400fb6:	e7ec      	b.n	400f92 <xQueueGenericReset+0x62>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400fb8:	f104 0010 	add.w	r0, r4, #16
  400fbc:	4d08      	ldr	r5, [pc, #32]	; (400fe0 <xQueueGenericReset+0xb0>)
  400fbe:	47a8      	blx	r5
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400fc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fc4:	47a8      	blx	r5
  400fc6:	e7e4      	b.n	400f92 <xQueueGenericReset+0x62>
  400fc8:	004084fc 	.word	0x004084fc
  400fcc:	00403429 	.word	0x00403429
  400fd0:	00400775 	.word	0x00400775
  400fd4:	004007bd 	.word	0x004007bd
  400fd8:	004020e5 	.word	0x004020e5
  400fdc:	e000ed04 	.word	0xe000ed04
  400fe0:	00400615 	.word	0x00400615

00400fe4 <xQueueGenericCreate>:
    {
  400fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400fe6:	b320      	cbz	r0, 401032 <xQueueGenericCreate+0x4e>
  400fe8:	460d      	mov	r5, r1
  400fea:	4617      	mov	r7, r2
  400fec:	4606      	mov	r6, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400fee:	f04f 33ff 	mov.w	r3, #4294967295
  400ff2:	fbb3 f3f0 	udiv	r3, r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400ff6:	428b      	cmp	r3, r1
  400ff8:	d31b      	bcc.n	401032 <xQueueGenericCreate+0x4e>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
  400ffa:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400ffe:	f110 0f55 	cmn.w	r0, #85	; 0x55
  401002:	d816      	bhi.n	401032 <xQueueGenericCreate+0x4e>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  401004:	3054      	adds	r0, #84	; 0x54
  401006:	4b0e      	ldr	r3, [pc, #56]	; (401040 <xQueueGenericCreate+0x5c>)
  401008:	4798      	blx	r3
            if( pxNewQueue != NULL )
  40100a:	4604      	mov	r4, r0
  40100c:	b168      	cbz	r0, 40102a <xQueueGenericCreate+0x46>
    if( uxItemSize == ( UBaseType_t ) 0 )
  40100e:	b175      	cbz	r5, 40102e <xQueueGenericCreate+0x4a>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  401010:	f100 0354 	add.w	r3, r0, #84	; 0x54
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401014:	6003      	str	r3, [r0, #0]
    pxNewQueue->uxLength = uxQueueLength;
  401016:	63e6      	str	r6, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
  401018:	6425      	str	r5, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40101a:	2101      	movs	r1, #1
  40101c:	4620      	mov	r0, r4
  40101e:	4b09      	ldr	r3, [pc, #36]	; (401044 <xQueueGenericCreate+0x60>)
  401020:	4798      	blx	r3
            pxNewQueue->ucQueueType = ucQueueType;
  401022:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
            pxNewQueue->pxQueueSetContainer = NULL;
  401026:	2300      	movs	r3, #0
  401028:	64a3      	str	r3, [r4, #72]	; 0x48
    }
  40102a:	4620      	mov	r0, r4
  40102c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40102e:	6020      	str	r0, [r4, #0]
  401030:	e7f1      	b.n	401016 <xQueueGenericCreate+0x32>
            configASSERT( pxNewQueue );
  401032:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
  401036:	4804      	ldr	r0, [pc, #16]	; (401048 <xQueueGenericCreate+0x64>)
  401038:	4b04      	ldr	r3, [pc, #16]	; (40104c <xQueueGenericCreate+0x68>)
  40103a:	4798      	blx	r3
        Queue_t * pxNewQueue = NULL;
  40103c:	2400      	movs	r4, #0
        return pxNewQueue;
  40103e:	e7f4      	b.n	40102a <xQueueGenericCreate+0x46>
  401040:	00400a91 	.word	0x00400a91
  401044:	00400f31 	.word	0x00400f31
  401048:	004084fc 	.word	0x004084fc
  40104c:	00403429 	.word	0x00403429

00401050 <xQueueGenericSend>:
{
  401050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401054:	b085      	sub	sp, #20
  401056:	4689      	mov	r9, r1
  401058:	9201      	str	r2, [sp, #4]
  40105a:	461e      	mov	r6, r3
    configASSERT( pxQueue );
  40105c:	4604      	mov	r4, r0
  40105e:	b1a8      	cbz	r0, 40108c <xQueueGenericSend+0x3c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401060:	f1b9 0f00 	cmp.w	r9, #0
  401064:	d018      	beq.n	401098 <xQueueGenericSend+0x48>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401066:	2e02      	cmp	r6, #2
  401068:	d01f      	beq.n	4010aa <xQueueGenericSend+0x5a>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40106a:	4b67      	ldr	r3, [pc, #412]	; (401208 <xQueueGenericSend+0x1b8>)
  40106c:	4798      	blx	r3
  40106e:	b930      	cbnz	r0, 40107e <xQueueGenericSend+0x2e>
  401070:	9b01      	ldr	r3, [sp, #4]
  401072:	b123      	cbz	r3, 40107e <xQueueGenericSend+0x2e>
  401074:	f240 3133 	movw	r1, #819	; 0x333
  401078:	4864      	ldr	r0, [pc, #400]	; (40120c <xQueueGenericSend+0x1bc>)
  40107a:	4b65      	ldr	r3, [pc, #404]	; (401210 <xQueueGenericSend+0x1c0>)
  40107c:	4798      	blx	r3
{
  40107e:	f04f 0a00 	mov.w	sl, #0
        taskENTER_CRITICAL();
  401082:	4d64      	ldr	r5, [pc, #400]	; (401214 <xQueueGenericSend+0x1c4>)
                    vTaskInternalSetTimeOutState( &xTimeOut );
  401084:	4f64      	ldr	r7, [pc, #400]	; (401218 <xQueueGenericSend+0x1c8>)
                    portYIELD_WITHIN_API();
  401086:	f8df 819c 	ldr.w	r8, [pc, #412]	; 401224 <xQueueGenericSend+0x1d4>
  40108a:	e05e      	b.n	40114a <xQueueGenericSend+0xfa>
    configASSERT( pxQueue );
  40108c:	f240 312e 	movw	r1, #814	; 0x32e
  401090:	485e      	ldr	r0, [pc, #376]	; (40120c <xQueueGenericSend+0x1bc>)
  401092:	4b5f      	ldr	r3, [pc, #380]	; (401210 <xQueueGenericSend+0x1c0>)
  401094:	4798      	blx	r3
  401096:	e7e3      	b.n	401060 <xQueueGenericSend+0x10>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401098:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40109a:	2b00      	cmp	r3, #0
  40109c:	d0e3      	beq.n	401066 <xQueueGenericSend+0x16>
  40109e:	f240 312f 	movw	r1, #815	; 0x32f
  4010a2:	485a      	ldr	r0, [pc, #360]	; (40120c <xQueueGenericSend+0x1bc>)
  4010a4:	4b5a      	ldr	r3, [pc, #360]	; (401210 <xQueueGenericSend+0x1c0>)
  4010a6:	4798      	blx	r3
  4010a8:	e7dd      	b.n	401066 <xQueueGenericSend+0x16>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4010aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010ac:	2b01      	cmp	r3, #1
  4010ae:	d0dc      	beq.n	40106a <xQueueGenericSend+0x1a>
  4010b0:	f44f 714c 	mov.w	r1, #816	; 0x330
  4010b4:	4855      	ldr	r0, [pc, #340]	; (40120c <xQueueGenericSend+0x1bc>)
  4010b6:	4b56      	ldr	r3, [pc, #344]	; (401210 <xQueueGenericSend+0x1c0>)
  4010b8:	4798      	blx	r3
  4010ba:	e7d6      	b.n	40106a <xQueueGenericSend+0x1a>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  4010bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4010be:	4632      	mov	r2, r6
  4010c0:	4649      	mov	r1, r9
  4010c2:	4620      	mov	r0, r4
  4010c4:	4b55      	ldr	r3, [pc, #340]	; (40121c <xQueueGenericSend+0x1cc>)
  4010c6:	4798      	blx	r3
                        if( pxQueue->pxQueueSetContainer != NULL )
  4010c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4010ca:	b1a3      	cbz	r3, 4010f6 <xQueueGenericSend+0xa6>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  4010cc:	2e02      	cmp	r6, #2
  4010ce:	f000 8096 	beq.w	4011fe <xQueueGenericSend+0x1ae>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4010d2:	4620      	mov	r0, r4
  4010d4:	4b52      	ldr	r3, [pc, #328]	; (401220 <xQueueGenericSend+0x1d0>)
  4010d6:	4798      	blx	r3
  4010d8:	b138      	cbz	r0, 4010ea <xQueueGenericSend+0x9a>
                                queueYIELD_IF_USING_PREEMPTION();
  4010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010de:	4b51      	ldr	r3, [pc, #324]	; (401224 <xQueueGenericSend+0x1d4>)
  4010e0:	601a      	str	r2, [r3, #0]
  4010e2:	f3bf 8f4f 	dsb	sy
  4010e6:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
  4010ea:	4b4f      	ldr	r3, [pc, #316]	; (401228 <xQueueGenericSend+0x1d8>)
  4010ec:	4798      	blx	r3
                return pdPASS;
  4010ee:	2001      	movs	r0, #1
}
  4010f0:	b005      	add	sp, #20
  4010f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4010f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4010f8:	b953      	cbnz	r3, 401110 <xQueueGenericSend+0xc0>
                            else if( xYieldRequired != pdFALSE )
  4010fa:	2800      	cmp	r0, #0
  4010fc:	d0f5      	beq.n	4010ea <xQueueGenericSend+0x9a>
                                queueYIELD_IF_USING_PREEMPTION();
  4010fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401102:	4b48      	ldr	r3, [pc, #288]	; (401224 <xQueueGenericSend+0x1d4>)
  401104:	601a      	str	r2, [r3, #0]
  401106:	f3bf 8f4f 	dsb	sy
  40110a:	f3bf 8f6f 	isb	sy
  40110e:	e7ec      	b.n	4010ea <xQueueGenericSend+0x9a>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401110:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401114:	4b45      	ldr	r3, [pc, #276]	; (40122c <xQueueGenericSend+0x1dc>)
  401116:	4798      	blx	r3
  401118:	2800      	cmp	r0, #0
  40111a:	d0e6      	beq.n	4010ea <xQueueGenericSend+0x9a>
                                    queueYIELD_IF_USING_PREEMPTION();
  40111c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401120:	4b40      	ldr	r3, [pc, #256]	; (401224 <xQueueGenericSend+0x1d4>)
  401122:	601a      	str	r2, [r3, #0]
  401124:	f3bf 8f4f 	dsb	sy
  401128:	f3bf 8f6f 	isb	sy
  40112c:	e7dd      	b.n	4010ea <xQueueGenericSend+0x9a>
                    taskEXIT_CRITICAL();
  40112e:	4b3e      	ldr	r3, [pc, #248]	; (401228 <xQueueGenericSend+0x1d8>)
  401130:	4798      	blx	r3
                    return errQUEUE_FULL;
  401132:	2000      	movs	r0, #0
  401134:	e7dc      	b.n	4010f0 <xQueueGenericSend+0xa0>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  401136:	a802      	add	r0, sp, #8
  401138:	47b8      	blx	r7
  40113a:	e013      	b.n	401164 <xQueueGenericSend+0x114>
                prvUnlockQueue( pxQueue );
  40113c:	4620      	mov	r0, r4
  40113e:	4b3c      	ldr	r3, [pc, #240]	; (401230 <xQueueGenericSend+0x1e0>)
  401140:	4798      	blx	r3
                ( void ) xTaskResumeAll();
  401142:	4b3c      	ldr	r3, [pc, #240]	; (401234 <xQueueGenericSend+0x1e4>)
  401144:	4798      	blx	r3
  401146:	f04f 0a01 	mov.w	sl, #1
        taskENTER_CRITICAL();
  40114a:	47a8      	blx	r5
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40114c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40114e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401150:	429a      	cmp	r2, r3
  401152:	d3b3      	bcc.n	4010bc <xQueueGenericSend+0x6c>
  401154:	2e02      	cmp	r6, #2
  401156:	d048      	beq.n	4011ea <xQueueGenericSend+0x19a>
                if( xTicksToWait == ( TickType_t ) 0 )
  401158:	9b01      	ldr	r3, [sp, #4]
  40115a:	2b00      	cmp	r3, #0
  40115c:	d0e7      	beq.n	40112e <xQueueGenericSend+0xde>
                else if( xEntryTimeSet == pdFALSE )
  40115e:	f1ba 0f00 	cmp.w	sl, #0
  401162:	d0e8      	beq.n	401136 <xQueueGenericSend+0xe6>
        taskEXIT_CRITICAL();
  401164:	4b30      	ldr	r3, [pc, #192]	; (401228 <xQueueGenericSend+0x1d8>)
  401166:	4798      	blx	r3
        vTaskSuspendAll();
  401168:	4b33      	ldr	r3, [pc, #204]	; (401238 <xQueueGenericSend+0x1e8>)
  40116a:	4798      	blx	r3
        prvLockQueue( pxQueue );
  40116c:	47a8      	blx	r5
  40116e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401172:	b25b      	sxtb	r3, r3
  401174:	f1b3 3fff 	cmp.w	r3, #4294967295
  401178:	bf04      	itt	eq
  40117a:	2300      	moveq	r3, #0
  40117c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  401180:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401184:	b25b      	sxtb	r3, r3
  401186:	f1b3 3fff 	cmp.w	r3, #4294967295
  40118a:	bf04      	itt	eq
  40118c:	2300      	moveq	r3, #0
  40118e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  401192:	4b25      	ldr	r3, [pc, #148]	; (401228 <xQueueGenericSend+0x1d8>)
  401194:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401196:	a901      	add	r1, sp, #4
  401198:	a802      	add	r0, sp, #8
  40119a:	4b28      	ldr	r3, [pc, #160]	; (40123c <xQueueGenericSend+0x1ec>)
  40119c:	4798      	blx	r3
  40119e:	b9e8      	cbnz	r0, 4011dc <xQueueGenericSend+0x18c>
    taskENTER_CRITICAL();
  4011a0:	47a8      	blx	r5
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4011a2:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4011a6:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
    taskEXIT_CRITICAL();
  4011aa:	4b1f      	ldr	r3, [pc, #124]	; (401228 <xQueueGenericSend+0x1d8>)
  4011ac:	4798      	blx	r3
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4011ae:	45d3      	cmp	fp, sl
  4011b0:	d1c4      	bne.n	40113c <xQueueGenericSend+0xec>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4011b2:	9901      	ldr	r1, [sp, #4]
  4011b4:	f104 0010 	add.w	r0, r4, #16
  4011b8:	4b21      	ldr	r3, [pc, #132]	; (401240 <xQueueGenericSend+0x1f0>)
  4011ba:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
  4011bc:	4620      	mov	r0, r4
  4011be:	4b1c      	ldr	r3, [pc, #112]	; (401230 <xQueueGenericSend+0x1e0>)
  4011c0:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
  4011c2:	4b1c      	ldr	r3, [pc, #112]	; (401234 <xQueueGenericSend+0x1e4>)
  4011c4:	4798      	blx	r3
  4011c6:	2800      	cmp	r0, #0
  4011c8:	d1bd      	bne.n	401146 <xQueueGenericSend+0xf6>
                    portYIELD_WITHIN_API();
  4011ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4011ce:	f8c8 3000 	str.w	r3, [r8]
  4011d2:	f3bf 8f4f 	dsb	sy
  4011d6:	f3bf 8f6f 	isb	sy
  4011da:	e7b4      	b.n	401146 <xQueueGenericSend+0xf6>
            prvUnlockQueue( pxQueue );
  4011dc:	4620      	mov	r0, r4
  4011de:	4b14      	ldr	r3, [pc, #80]	; (401230 <xQueueGenericSend+0x1e0>)
  4011e0:	4798      	blx	r3
            ( void ) xTaskResumeAll();
  4011e2:	4b14      	ldr	r3, [pc, #80]	; (401234 <xQueueGenericSend+0x1e4>)
  4011e4:	4798      	blx	r3
            return errQUEUE_FULL;
  4011e6:	2000      	movs	r0, #0
  4011e8:	e782      	b.n	4010f0 <xQueueGenericSend+0xa0>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  4011ea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4011ec:	2202      	movs	r2, #2
  4011ee:	4649      	mov	r1, r9
  4011f0:	4620      	mov	r0, r4
  4011f2:	4b0a      	ldr	r3, [pc, #40]	; (40121c <xQueueGenericSend+0x1cc>)
  4011f4:	4798      	blx	r3
                        if( pxQueue->pxQueueSetContainer != NULL )
  4011f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011f8:	2b00      	cmp	r3, #0
  4011fa:	f43f af7c 	beq.w	4010f6 <xQueueGenericSend+0xa6>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  4011fe:	2d00      	cmp	r5, #0
  401200:	f43f af67 	beq.w	4010d2 <xQueueGenericSend+0x82>
  401204:	e771      	b.n	4010ea <xQueueGenericSend+0x9a>
  401206:	bf00      	nop
  401208:	00402449 	.word	0x00402449
  40120c:	004084fc 	.word	0x004084fc
  401210:	00403429 	.word	0x00403429
  401214:	00400775 	.word	0x00400775
  401218:	004021d9 	.word	0x004021d9
  40121c:	00400d4d 	.word	0x00400d4d
  401220:	00400dcd 	.word	0x00400dcd
  401224:	e000ed04 	.word	0xe000ed04
  401228:	004007bd 	.word	0x004007bd
  40122c:	004020e5 	.word	0x004020e5
  401230:	00400e89 	.word	0x00400e89
  401234:	00401d7d 	.word	0x00401d7d
  401238:	00401ba5 	.word	0x00401ba5
  40123c:	004021f1 	.word	0x004021f1
  401240:	00402045 	.word	0x00402045

00401244 <xQueueGenericSendFromISR>:
{
  401244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401248:	460f      	mov	r7, r1
  40124a:	4691      	mov	r9, r2
  40124c:	461e      	mov	r6, r3
    configASSERT( pxQueue );
  40124e:	4604      	mov	r4, r0
  401250:	b1c8      	cbz	r0, 401286 <xQueueGenericSendFromISR+0x42>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401252:	b1f7      	cbz	r7, 401292 <xQueueGenericSendFromISR+0x4e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401254:	2e02      	cmp	r6, #2
  401256:	d025      	beq.n	4012a4 <xQueueGenericSendFromISR+0x60>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401258:	4b3a      	ldr	r3, [pc, #232]	; (401344 <xQueueGenericSendFromISR+0x100>)
  40125a:	4798      	blx	r3
        __asm volatile
  40125c:	f3ef 8811 	mrs	r8, BASEPRI
  401260:	f04f 0350 	mov.w	r3, #80	; 0x50
  401264:	f383 8811 	msr	BASEPRI, r3
  401268:	f3bf 8f6f 	isb	sy
  40126c:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401270:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401272:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401274:	429a      	cmp	r2, r3
  401276:	d31e      	bcc.n	4012b6 <xQueueGenericSendFromISR+0x72>
  401278:	2e02      	cmp	r6, #2
  40127a:	d01c      	beq.n	4012b6 <xQueueGenericSendFromISR+0x72>
            xReturn = errQUEUE_FULL;
  40127c:	2000      	movs	r0, #0
        __asm volatile
  40127e:	f388 8811 	msr	BASEPRI, r8
}
  401282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    configASSERT( pxQueue );
  401286:	f240 4102 	movw	r1, #1026	; 0x402
  40128a:	482f      	ldr	r0, [pc, #188]	; (401348 <xQueueGenericSendFromISR+0x104>)
  40128c:	4b2f      	ldr	r3, [pc, #188]	; (40134c <xQueueGenericSendFromISR+0x108>)
  40128e:	4798      	blx	r3
  401290:	e7df      	b.n	401252 <xQueueGenericSendFromISR+0xe>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401292:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401294:	2b00      	cmp	r3, #0
  401296:	d0dd      	beq.n	401254 <xQueueGenericSendFromISR+0x10>
  401298:	f240 4103 	movw	r1, #1027	; 0x403
  40129c:	482a      	ldr	r0, [pc, #168]	; (401348 <xQueueGenericSendFromISR+0x104>)
  40129e:	4b2b      	ldr	r3, [pc, #172]	; (40134c <xQueueGenericSendFromISR+0x108>)
  4012a0:	4798      	blx	r3
  4012a2:	e7d7      	b.n	401254 <xQueueGenericSendFromISR+0x10>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4012a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4012a6:	2b01      	cmp	r3, #1
  4012a8:	d0d6      	beq.n	401258 <xQueueGenericSendFromISR+0x14>
  4012aa:	f240 4104 	movw	r1, #1028	; 0x404
  4012ae:	4826      	ldr	r0, [pc, #152]	; (401348 <xQueueGenericSendFromISR+0x104>)
  4012b0:	4b26      	ldr	r3, [pc, #152]	; (40134c <xQueueGenericSendFromISR+0x108>)
  4012b2:	4798      	blx	r3
  4012b4:	e7d0      	b.n	401258 <xQueueGenericSendFromISR+0x14>
            const int8_t cTxLock = pxQueue->cTxLock;
  4012b6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4012ba:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  4012bc:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4012c0:	4632      	mov	r2, r6
  4012c2:	4639      	mov	r1, r7
  4012c4:	4620      	mov	r0, r4
  4012c6:	4b22      	ldr	r3, [pc, #136]	; (401350 <xQueueGenericSendFromISR+0x10c>)
  4012c8:	4798      	blx	r3
            if( cTxLock == queueUNLOCKED )
  4012ca:	f1b5 3fff 	cmp.w	r5, #4294967295
  4012ce:	d007      	beq.n	4012e0 <xQueueGenericSendFromISR+0x9c>
                configASSERT( cTxLock != queueINT8_MAX );
  4012d0:	2d7f      	cmp	r5, #127	; 0x7f
  4012d2:	d029      	beq.n	401328 <xQueueGenericSendFromISR+0xe4>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4012d4:	3501      	adds	r5, #1
  4012d6:	b26d      	sxtb	r5, r5
  4012d8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
            xReturn = pdPASS;
  4012dc:	2001      	movs	r0, #1
  4012de:	e7ce      	b.n	40127e <xQueueGenericSendFromISR+0x3a>
                        if( pxQueue->pxQueueSetContainer != NULL )
  4012e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012e2:	b18b      	cbz	r3, 401308 <xQueueGenericSendFromISR+0xc4>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  4012e4:	2e02      	cmp	r6, #2
  4012e6:	d00a      	beq.n	4012fe <xQueueGenericSendFromISR+0xba>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4012e8:	4620      	mov	r0, r4
  4012ea:	4b1a      	ldr	r3, [pc, #104]	; (401354 <xQueueGenericSendFromISR+0x110>)
  4012ec:	4798      	blx	r3
  4012ee:	b308      	cbz	r0, 401334 <xQueueGenericSendFromISR+0xf0>
                                if( pxHigherPriorityTaskWoken != NULL )
  4012f0:	f1b9 0f00 	cmp.w	r9, #0
  4012f4:	d020      	beq.n	401338 <xQueueGenericSendFromISR+0xf4>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
  4012f6:	2001      	movs	r0, #1
  4012f8:	f8c9 0000 	str.w	r0, [r9]
  4012fc:	e7bf      	b.n	40127e <xQueueGenericSendFromISR+0x3a>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  4012fe:	f1ba 0f00 	cmp.w	sl, #0
  401302:	d0f1      	beq.n	4012e8 <xQueueGenericSendFromISR+0xa4>
            xReturn = pdPASS;
  401304:	2001      	movs	r0, #1
  401306:	e7ba      	b.n	40127e <xQueueGenericSendFromISR+0x3a>
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401308:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40130a:	b90b      	cbnz	r3, 401310 <xQueueGenericSendFromISR+0xcc>
            xReturn = pdPASS;
  40130c:	2001      	movs	r0, #1
  40130e:	e7b6      	b.n	40127e <xQueueGenericSendFromISR+0x3a>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401310:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401314:	4b10      	ldr	r3, [pc, #64]	; (401358 <xQueueGenericSendFromISR+0x114>)
  401316:	4798      	blx	r3
  401318:	b180      	cbz	r0, 40133c <xQueueGenericSendFromISR+0xf8>
                                    if( pxHigherPriorityTaskWoken != NULL )
  40131a:	f1b9 0f00 	cmp.w	r9, #0
  40131e:	d00f      	beq.n	401340 <xQueueGenericSendFromISR+0xfc>
                                        *pxHigherPriorityTaskWoken = pdTRUE;
  401320:	2001      	movs	r0, #1
  401322:	f8c9 0000 	str.w	r0, [r9]
  401326:	e7aa      	b.n	40127e <xQueueGenericSendFromISR+0x3a>
                configASSERT( cTxLock != queueINT8_MAX );
  401328:	f240 418d 	movw	r1, #1165	; 0x48d
  40132c:	4806      	ldr	r0, [pc, #24]	; (401348 <xQueueGenericSendFromISR+0x104>)
  40132e:	4b07      	ldr	r3, [pc, #28]	; (40134c <xQueueGenericSendFromISR+0x108>)
  401330:	4798      	blx	r3
  401332:	e7cf      	b.n	4012d4 <xQueueGenericSendFromISR+0x90>
            xReturn = pdPASS;
  401334:	2001      	movs	r0, #1
  401336:	e7a2      	b.n	40127e <xQueueGenericSendFromISR+0x3a>
  401338:	2001      	movs	r0, #1
  40133a:	e7a0      	b.n	40127e <xQueueGenericSendFromISR+0x3a>
  40133c:	2001      	movs	r0, #1
  40133e:	e79e      	b.n	40127e <xQueueGenericSendFromISR+0x3a>
  401340:	2001      	movs	r0, #1
  401342:	e79c      	b.n	40127e <xQueueGenericSendFromISR+0x3a>
  401344:	004009dd 	.word	0x004009dd
  401348:	004084fc 	.word	0x004084fc
  40134c:	00403429 	.word	0x00403429
  401350:	00400d4d 	.word	0x00400d4d
  401354:	00400dcd 	.word	0x00400dcd
  401358:	004020e5 	.word	0x004020e5

0040135c <xQueueReceive>:
{
  40135c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401360:	b084      	sub	sp, #16
  401362:	4688      	mov	r8, r1
  401364:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
  401366:	4604      	mov	r4, r0
  401368:	b198      	cbz	r0, 401392 <xQueueReceive+0x36>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40136a:	f1b8 0f00 	cmp.w	r8, #0
  40136e:	d016      	beq.n	40139e <xQueueReceive+0x42>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401370:	4b4d      	ldr	r3, [pc, #308]	; (4014a8 <xQueueReceive+0x14c>)
  401372:	4798      	blx	r3
  401374:	b930      	cbnz	r0, 401384 <xQueueReceive+0x28>
  401376:	9b01      	ldr	r3, [sp, #4]
  401378:	b123      	cbz	r3, 401384 <xQueueReceive+0x28>
  40137a:	f240 515a 	movw	r1, #1370	; 0x55a
  40137e:	484b      	ldr	r0, [pc, #300]	; (4014ac <xQueueReceive+0x150>)
  401380:	4b4b      	ldr	r3, [pc, #300]	; (4014b0 <xQueueReceive+0x154>)
  401382:	4798      	blx	r3
{
  401384:	f04f 0a00 	mov.w	sl, #0
        taskENTER_CRITICAL();
  401388:	4d4a      	ldr	r5, [pc, #296]	; (4014b4 <xQueueReceive+0x158>)
                    vTaskInternalSetTimeOutState( &xTimeOut );
  40138a:	4e4b      	ldr	r6, [pc, #300]	; (4014b8 <xQueueReceive+0x15c>)
                    portYIELD_WITHIN_API();
  40138c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 4014c8 <xQueueReceive+0x16c>
  401390:	e044      	b.n	40141c <xQueueReceive+0xc0>
    configASSERT( ( pxQueue ) );
  401392:	f240 5151 	movw	r1, #1361	; 0x551
  401396:	4845      	ldr	r0, [pc, #276]	; (4014ac <xQueueReceive+0x150>)
  401398:	4b45      	ldr	r3, [pc, #276]	; (4014b0 <xQueueReceive+0x154>)
  40139a:	4798      	blx	r3
  40139c:	e7e5      	b.n	40136a <xQueueReceive+0xe>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40139e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4013a0:	2b00      	cmp	r3, #0
  4013a2:	d0e5      	beq.n	401370 <xQueueReceive+0x14>
  4013a4:	f240 5155 	movw	r1, #1365	; 0x555
  4013a8:	4840      	ldr	r0, [pc, #256]	; (4014ac <xQueueReceive+0x150>)
  4013aa:	4b41      	ldr	r3, [pc, #260]	; (4014b0 <xQueueReceive+0x154>)
  4013ac:	4798      	blx	r3
  4013ae:	e7df      	b.n	401370 <xQueueReceive+0x14>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
  4013b0:	4641      	mov	r1, r8
  4013b2:	4620      	mov	r0, r4
  4013b4:	4b41      	ldr	r3, [pc, #260]	; (4014bc <xQueueReceive+0x160>)
  4013b6:	4798      	blx	r3
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  4013b8:	1e7b      	subs	r3, r7, #1
  4013ba:	63a3      	str	r3, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4013bc:	6923      	ldr	r3, [r4, #16]
  4013be:	b92b      	cbnz	r3, 4013cc <xQueueReceive+0x70>
                taskEXIT_CRITICAL();
  4013c0:	4b3f      	ldr	r3, [pc, #252]	; (4014c0 <xQueueReceive+0x164>)
  4013c2:	4798      	blx	r3
                return pdPASS;
  4013c4:	2001      	movs	r0, #1
}
  4013c6:	b004      	add	sp, #16
  4013c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4013cc:	f104 0010 	add.w	r0, r4, #16
  4013d0:	4b3c      	ldr	r3, [pc, #240]	; (4014c4 <xQueueReceive+0x168>)
  4013d2:	4798      	blx	r3
  4013d4:	2800      	cmp	r0, #0
  4013d6:	d0f3      	beq.n	4013c0 <xQueueReceive+0x64>
                        queueYIELD_IF_USING_PREEMPTION();
  4013d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013dc:	4b3a      	ldr	r3, [pc, #232]	; (4014c8 <xQueueReceive+0x16c>)
  4013de:	601a      	str	r2, [r3, #0]
  4013e0:	f3bf 8f4f 	dsb	sy
  4013e4:	f3bf 8f6f 	isb	sy
  4013e8:	e7ea      	b.n	4013c0 <xQueueReceive+0x64>
                    taskEXIT_CRITICAL();
  4013ea:	4b35      	ldr	r3, [pc, #212]	; (4014c0 <xQueueReceive+0x164>)
  4013ec:	4798      	blx	r3
                    return errQUEUE_EMPTY;
  4013ee:	2000      	movs	r0, #0
  4013f0:	e7e9      	b.n	4013c6 <xQueueReceive+0x6a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  4013f2:	a802      	add	r0, sp, #8
  4013f4:	47b0      	blx	r6
  4013f6:	e01b      	b.n	401430 <xQueueReceive+0xd4>
                prvUnlockQueue( pxQueue );
  4013f8:	4620      	mov	r0, r4
  4013fa:	4b34      	ldr	r3, [pc, #208]	; (4014cc <xQueueReceive+0x170>)
  4013fc:	4798      	blx	r3
                ( void ) xTaskResumeAll();
  4013fe:	4b34      	ldr	r3, [pc, #208]	; (4014d0 <xQueueReceive+0x174>)
  401400:	4798      	blx	r3
  401402:	e009      	b.n	401418 <xQueueReceive+0xbc>
            prvUnlockQueue( pxQueue );
  401404:	4620      	mov	r0, r4
  401406:	4b31      	ldr	r3, [pc, #196]	; (4014cc <xQueueReceive+0x170>)
  401408:	4798      	blx	r3
            ( void ) xTaskResumeAll();
  40140a:	4b31      	ldr	r3, [pc, #196]	; (4014d0 <xQueueReceive+0x174>)
  40140c:	4798      	blx	r3
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40140e:	4620      	mov	r0, r4
  401410:	4b30      	ldr	r3, [pc, #192]	; (4014d4 <xQueueReceive+0x178>)
  401412:	4798      	blx	r3
  401414:	2800      	cmp	r0, #0
  401416:	d144      	bne.n	4014a2 <xQueueReceive+0x146>
  401418:	f04f 0a01 	mov.w	sl, #1
        taskENTER_CRITICAL();
  40141c:	47a8      	blx	r5
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40141e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401420:	2f00      	cmp	r7, #0
  401422:	d1c5      	bne.n	4013b0 <xQueueReceive+0x54>
                if( xTicksToWait == ( TickType_t ) 0 )
  401424:	9b01      	ldr	r3, [sp, #4]
  401426:	2b00      	cmp	r3, #0
  401428:	d0df      	beq.n	4013ea <xQueueReceive+0x8e>
                else if( xEntryTimeSet == pdFALSE )
  40142a:	f1ba 0f00 	cmp.w	sl, #0
  40142e:	d0e0      	beq.n	4013f2 <xQueueReceive+0x96>
        taskEXIT_CRITICAL();
  401430:	4b23      	ldr	r3, [pc, #140]	; (4014c0 <xQueueReceive+0x164>)
  401432:	4798      	blx	r3
        vTaskSuspendAll();
  401434:	4b28      	ldr	r3, [pc, #160]	; (4014d8 <xQueueReceive+0x17c>)
  401436:	4798      	blx	r3
        prvLockQueue( pxQueue );
  401438:	47a8      	blx	r5
  40143a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40143e:	b25b      	sxtb	r3, r3
  401440:	f1b3 3fff 	cmp.w	r3, #4294967295
  401444:	bf04      	itt	eq
  401446:	2300      	moveq	r3, #0
  401448:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  40144c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401450:	b25b      	sxtb	r3, r3
  401452:	f1b3 3fff 	cmp.w	r3, #4294967295
  401456:	bf04      	itt	eq
  401458:	2300      	moveq	r3, #0
  40145a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  40145e:	4b18      	ldr	r3, [pc, #96]	; (4014c0 <xQueueReceive+0x164>)
  401460:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401462:	a901      	add	r1, sp, #4
  401464:	a802      	add	r0, sp, #8
  401466:	4b1d      	ldr	r3, [pc, #116]	; (4014dc <xQueueReceive+0x180>)
  401468:	4798      	blx	r3
  40146a:	2800      	cmp	r0, #0
  40146c:	d1ca      	bne.n	401404 <xQueueReceive+0xa8>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40146e:	4620      	mov	r0, r4
  401470:	4b18      	ldr	r3, [pc, #96]	; (4014d4 <xQueueReceive+0x178>)
  401472:	4798      	blx	r3
  401474:	2800      	cmp	r0, #0
  401476:	d0bf      	beq.n	4013f8 <xQueueReceive+0x9c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401478:	9901      	ldr	r1, [sp, #4]
  40147a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40147e:	4b18      	ldr	r3, [pc, #96]	; (4014e0 <xQueueReceive+0x184>)
  401480:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
  401482:	4620      	mov	r0, r4
  401484:	4b11      	ldr	r3, [pc, #68]	; (4014cc <xQueueReceive+0x170>)
  401486:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
  401488:	4b11      	ldr	r3, [pc, #68]	; (4014d0 <xQueueReceive+0x174>)
  40148a:	4798      	blx	r3
  40148c:	2800      	cmp	r0, #0
  40148e:	d1c3      	bne.n	401418 <xQueueReceive+0xbc>
                    portYIELD_WITHIN_API();
  401490:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401494:	f8c9 3000 	str.w	r3, [r9]
  401498:	f3bf 8f4f 	dsb	sy
  40149c:	f3bf 8f6f 	isb	sy
  4014a0:	e7ba      	b.n	401418 <xQueueReceive+0xbc>
                return errQUEUE_EMPTY;
  4014a2:	2000      	movs	r0, #0
  4014a4:	e78f      	b.n	4013c6 <xQueueReceive+0x6a>
  4014a6:	bf00      	nop
  4014a8:	00402449 	.word	0x00402449
  4014ac:	004084fc 	.word	0x004084fc
  4014b0:	00403429 	.word	0x00403429
  4014b4:	00400775 	.word	0x00400775
  4014b8:	004021d9 	.word	0x004021d9
  4014bc:	00400e61 	.word	0x00400e61
  4014c0:	004007bd 	.word	0x004007bd
  4014c4:	004020e5 	.word	0x004020e5
  4014c8:	e000ed04 	.word	0xe000ed04
  4014cc:	00400e89 	.word	0x00400e89
  4014d0:	00401d7d 	.word	0x00401d7d
  4014d4:	00400d2d 	.word	0x00400d2d
  4014d8:	00401ba5 	.word	0x00401ba5
  4014dc:	004021f1 	.word	0x004021f1
  4014e0:	00402045 	.word	0x00402045

004014e4 <uxQueueMessagesWaiting>:
{
  4014e4:	b510      	push	{r4, lr}
    configASSERT( xQueue );
  4014e6:	4604      	mov	r4, r0
  4014e8:	b130      	cbz	r0, 4014f8 <uxQueueMessagesWaiting+0x14>
    taskENTER_CRITICAL();
  4014ea:	4b06      	ldr	r3, [pc, #24]	; (401504 <uxQueueMessagesWaiting+0x20>)
  4014ec:	4798      	blx	r3
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
  4014ee:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    taskEXIT_CRITICAL();
  4014f0:	4b05      	ldr	r3, [pc, #20]	; (401508 <uxQueueMessagesWaiting+0x24>)
  4014f2:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
  4014f4:	4620      	mov	r0, r4
  4014f6:	bd10      	pop	{r4, pc}
    configASSERT( xQueue );
  4014f8:	f240 71e3 	movw	r1, #2019	; 0x7e3
  4014fc:	4803      	ldr	r0, [pc, #12]	; (40150c <uxQueueMessagesWaiting+0x28>)
  4014fe:	4b04      	ldr	r3, [pc, #16]	; (401510 <uxQueueMessagesWaiting+0x2c>)
  401500:	4798      	blx	r3
  401502:	e7f2      	b.n	4014ea <uxQueueMessagesWaiting+0x6>
  401504:	00400775 	.word	0x00400775
  401508:	004007bd 	.word	0x004007bd
  40150c:	004084fc 	.word	0x004084fc
  401510:	00403429 	.word	0x00403429

00401514 <vQueueAddToRegistry>:
    {
  401514:	b570      	push	{r4, r5, r6, lr}
  401516:	460d      	mov	r5, r1
        configASSERT( xQueue );
  401518:	4604      	mov	r4, r0
  40151a:	b1b8      	cbz	r0, 40154c <vQueueAddToRegistry+0x38>
        if( pcQueueName != NULL )
  40151c:	b1ad      	cbz	r5, 40154a <vQueueAddToRegistry+0x36>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  40151e:	4b12      	ldr	r3, [pc, #72]	; (401568 <vQueueAddToRegistry+0x54>)
  401520:	685b      	ldr	r3, [r3, #4]
  401522:	429c      	cmp	r4, r3
  401524:	d018      	beq.n	401558 <vQueueAddToRegistry+0x44>
  401526:	4a10      	ldr	r2, [pc, #64]	; (401568 <vQueueAddToRegistry+0x54>)
  401528:	2100      	movs	r1, #0
  40152a:	460b      	mov	r3, r1
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  40152c:	4616      	mov	r6, r2
  40152e:	b1a9      	cbz	r1, 40155c <vQueueAddToRegistry+0x48>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401530:	3301      	adds	r3, #1
  401532:	2b08      	cmp	r3, #8
  401534:	d006      	beq.n	401544 <vQueueAddToRegistry+0x30>
  401536:	3208      	adds	r2, #8
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  401538:	6850      	ldr	r0, [r2, #4]
  40153a:	4284      	cmp	r4, r0
  40153c:	d1f7      	bne.n	40152e <vQueueAddToRegistry+0x1a>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  40153e:	490a      	ldr	r1, [pc, #40]	; (401568 <vQueueAddToRegistry+0x54>)
  401540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
        if( pxEntryToWrite != NULL )
  401544:	b109      	cbz	r1, 40154a <vQueueAddToRegistry+0x36>
            pxEntryToWrite->pcQueueName = pcQueueName;
  401546:	600d      	str	r5, [r1, #0]
            pxEntryToWrite->xHandle = xQueue;
  401548:	604c      	str	r4, [r1, #4]
  40154a:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( xQueue );
  40154c:	f640 21c8 	movw	r1, #2760	; 0xac8
  401550:	4806      	ldr	r0, [pc, #24]	; (40156c <vQueueAddToRegistry+0x58>)
  401552:	4b07      	ldr	r3, [pc, #28]	; (401570 <vQueueAddToRegistry+0x5c>)
  401554:	4798      	blx	r3
  401556:	e7e1      	b.n	40151c <vQueueAddToRegistry+0x8>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  401558:	2300      	movs	r3, #0
  40155a:	e7f0      	b.n	40153e <vQueueAddToRegistry+0x2a>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  40155c:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  401560:	2800      	cmp	r0, #0
  401562:	bf08      	it	eq
  401564:	4611      	moveq	r1, r2
  401566:	e7e3      	b.n	401530 <vQueueAddToRegistry+0x1c>
  401568:	20000e14 	.word	0x20000e14
  40156c:	004084fc 	.word	0x004084fc
  401570:	00403429 	.word	0x00403429

00401574 <vQueueWaitForMessageRestricted>:
    {
  401574:	b570      	push	{r4, r5, r6, lr}
  401576:	4604      	mov	r4, r0
  401578:	460d      	mov	r5, r1
  40157a:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
  40157c:	4b11      	ldr	r3, [pc, #68]	; (4015c4 <vQueueWaitForMessageRestricted+0x50>)
  40157e:	4798      	blx	r3
  401580:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401584:	b25b      	sxtb	r3, r3
  401586:	f1b3 3fff 	cmp.w	r3, #4294967295
  40158a:	bf04      	itt	eq
  40158c:	2300      	moveq	r3, #0
  40158e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  401592:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401596:	b25b      	sxtb	r3, r3
  401598:	f1b3 3fff 	cmp.w	r3, #4294967295
  40159c:	bf04      	itt	eq
  40159e:	2300      	moveq	r3, #0
  4015a0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  4015a4:	4b08      	ldr	r3, [pc, #32]	; (4015c8 <vQueueWaitForMessageRestricted+0x54>)
  4015a6:	4798      	blx	r3
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4015a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015aa:	b11b      	cbz	r3, 4015b4 <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
  4015ac:	4620      	mov	r0, r4
  4015ae:	4b07      	ldr	r3, [pc, #28]	; (4015cc <vQueueWaitForMessageRestricted+0x58>)
  4015b0:	4798      	blx	r3
  4015b2:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4015b4:	4632      	mov	r2, r6
  4015b6:	4629      	mov	r1, r5
  4015b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015bc:	4b04      	ldr	r3, [pc, #16]	; (4015d0 <vQueueWaitForMessageRestricted+0x5c>)
  4015be:	4798      	blx	r3
  4015c0:	e7f4      	b.n	4015ac <vQueueWaitForMessageRestricted+0x38>
  4015c2:	bf00      	nop
  4015c4:	00400775 	.word	0x00400775
  4015c8:	004007bd 	.word	0x004007bd
  4015cc:	00400e89 	.word	0x00400e89
  4015d0:	00402085 	.word	0x00402085

004015d4 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015d4:	4b07      	ldr	r3, [pc, #28]	; (4015f4 <prvResetNextTaskUnblockTime+0x20>)
  4015d6:	681b      	ldr	r3, [r3, #0]
  4015d8:	681b      	ldr	r3, [r3, #0]
  4015da:	b133      	cbz	r3, 4015ea <prvResetNextTaskUnblockTime+0x16>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  4015dc:	4b05      	ldr	r3, [pc, #20]	; (4015f4 <prvResetNextTaskUnblockTime+0x20>)
  4015de:	681b      	ldr	r3, [r3, #0]
  4015e0:	68db      	ldr	r3, [r3, #12]
  4015e2:	681a      	ldr	r2, [r3, #0]
  4015e4:	4b04      	ldr	r3, [pc, #16]	; (4015f8 <prvResetNextTaskUnblockTime+0x24>)
  4015e6:	601a      	str	r2, [r3, #0]
  4015e8:	4770      	bx	lr
        xNextTaskUnblockTime = portMAX_DELAY;
  4015ea:	f04f 32ff 	mov.w	r2, #4294967295
  4015ee:	4b02      	ldr	r3, [pc, #8]	; (4015f8 <prvResetNextTaskUnblockTime+0x24>)
  4015f0:	601a      	str	r2, [r3, #0]
  4015f2:	4770      	bx	lr
  4015f4:	20000a94 	.word	0x20000a94
  4015f8:	20000b7c 	.word	0x20000b7c

004015fc <prvIdleTask>:
{
  4015fc:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4015fe:	4d16      	ldr	r5, [pc, #88]	; (401658 <prvIdleTask+0x5c>)
                taskENTER_CRITICAL();
  401600:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401670 <prvIdleTask+0x74>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401604:	4f15      	ldr	r7, [pc, #84]	; (40165c <prvIdleTask+0x60>)
                    taskYIELD();
  401606:	f8df 906c 	ldr.w	r9, [pc, #108]	; 401674 <prvIdleTask+0x78>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40160a:	682b      	ldr	r3, [r5, #0]
  40160c:	b1bb      	cbz	r3, 40163e <prvIdleTask+0x42>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40160e:	4e14      	ldr	r6, [pc, #80]	; (401660 <prvIdleTask+0x64>)
                taskENTER_CRITICAL();
  401610:	47c0      	blx	r8
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401612:	68fb      	ldr	r3, [r7, #12]
  401614:	68dc      	ldr	r4, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401616:	1d20      	adds	r0, r4, #4
  401618:	47b0      	blx	r6
                    --uxCurrentNumberOfTasks;
  40161a:	4a12      	ldr	r2, [pc, #72]	; (401664 <prvIdleTask+0x68>)
  40161c:	6813      	ldr	r3, [r2, #0]
  40161e:	3b01      	subs	r3, #1
  401620:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
  401622:	682b      	ldr	r3, [r5, #0]
  401624:	3b01      	subs	r3, #1
  401626:	602b      	str	r3, [r5, #0]
                taskEXIT_CRITICAL();
  401628:	4b0f      	ldr	r3, [pc, #60]	; (401668 <prvIdleTask+0x6c>)
  40162a:	4798      	blx	r3
                vPortFreeStack( pxTCB->pxStack );
  40162c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40162e:	f8df a048 	ldr.w	sl, [pc, #72]	; 401678 <prvIdleTask+0x7c>
  401632:	47d0      	blx	sl
                vPortFree( pxTCB );
  401634:	4620      	mov	r0, r4
  401636:	47d0      	blx	sl
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401638:	682b      	ldr	r3, [r5, #0]
  40163a:	2b00      	cmp	r3, #0
  40163c:	d1e8      	bne.n	401610 <prvIdleTask+0x14>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40163e:	4b0b      	ldr	r3, [pc, #44]	; (40166c <prvIdleTask+0x70>)
  401640:	681b      	ldr	r3, [r3, #0]
  401642:	2b01      	cmp	r3, #1
  401644:	d9e1      	bls.n	40160a <prvIdleTask+0xe>
                    taskYIELD();
  401646:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40164a:	f8c9 3000 	str.w	r3, [r9]
  40164e:	f3bf 8f4f 	dsb	sy
  401652:	f3bf 8f6f 	isb	sy
  401656:	e7d8      	b.n	40160a <prvIdleTask+0xe>
  401658:	20000b40 	.word	0x20000b40
  40165c:	20000bb4 	.word	0x20000bb4
  401660:	0040067d 	.word	0x0040067d
  401664:	20000b3c 	.word	0x20000b3c
  401668:	004007bd 	.word	0x004007bd
  40166c:	20000a9c 	.word	0x20000a9c
  401670:	00400775 	.word	0x00400775
  401674:	e000ed04 	.word	0xe000ed04
  401678:	00400b85 	.word	0x00400b85

0040167c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
  40167c:	b570      	push	{r4, r5, r6, lr}
  40167e:	4604      	mov	r4, r0
  401680:	460e      	mov	r6, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
  401682:	4b24      	ldr	r3, [pc, #144]	; (401714 <prvAddCurrentTaskToDelayedList+0x98>)
  401684:	681d      	ldr	r5, [r3, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401686:	4b24      	ldr	r3, [pc, #144]	; (401718 <prvAddCurrentTaskToDelayedList+0x9c>)
  401688:	6818      	ldr	r0, [r3, #0]
  40168a:	3004      	adds	r0, #4
  40168c:	4b23      	ldr	r3, [pc, #140]	; (40171c <prvAddCurrentTaskToDelayedList+0xa0>)
  40168e:	4798      	blx	r3
  401690:	b948      	cbnz	r0, 4016a6 <prvAddCurrentTaskToDelayedList+0x2a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  401692:	4b21      	ldr	r3, [pc, #132]	; (401718 <prvAddCurrentTaskToDelayedList+0x9c>)
  401694:	681a      	ldr	r2, [r3, #0]
  401696:	4922      	ldr	r1, [pc, #136]	; (401720 <prvAddCurrentTaskToDelayedList+0xa4>)
  401698:	680b      	ldr	r3, [r1, #0]
  40169a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40169c:	2201      	movs	r2, #1
  40169e:	4082      	lsls	r2, r0
  4016a0:	ea23 0302 	bic.w	r3, r3, r2
  4016a4:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4016a6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4016aa:	d013      	beq.n	4016d4 <prvAddCurrentTaskToDelayedList+0x58>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
  4016ac:	442c      	add	r4, r5

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  4016ae:	4b1a      	ldr	r3, [pc, #104]	; (401718 <prvAddCurrentTaskToDelayedList+0x9c>)
  4016b0:	681b      	ldr	r3, [r3, #0]
  4016b2:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
  4016b4:	42a5      	cmp	r5, r4
  4016b6:	d824      	bhi.n	401702 <prvAddCurrentTaskToDelayedList+0x86>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4016b8:	4b1a      	ldr	r3, [pc, #104]	; (401724 <prvAddCurrentTaskToDelayedList+0xa8>)
  4016ba:	6818      	ldr	r0, [r3, #0]
  4016bc:	4b16      	ldr	r3, [pc, #88]	; (401718 <prvAddCurrentTaskToDelayedList+0x9c>)
  4016be:	6819      	ldr	r1, [r3, #0]
  4016c0:	3104      	adds	r1, #4
  4016c2:	4b19      	ldr	r3, [pc, #100]	; (401728 <prvAddCurrentTaskToDelayedList+0xac>)
  4016c4:	4798      	blx	r3

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
  4016c6:	4b19      	ldr	r3, [pc, #100]	; (40172c <prvAddCurrentTaskToDelayedList+0xb0>)
  4016c8:	681b      	ldr	r3, [r3, #0]
  4016ca:	429c      	cmp	r4, r3
                    {
                        xNextTaskUnblockTime = xTimeToWake;
  4016cc:	bf3c      	itt	cc
  4016ce:	4b17      	ldrcc	r3, [pc, #92]	; (40172c <prvAddCurrentTaskToDelayedList+0xb0>)
  4016d0:	601c      	strcc	r4, [r3, #0]
  4016d2:	bd70      	pop	{r4, r5, r6, pc}
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4016d4:	2e00      	cmp	r6, #0
  4016d6:	d0e9      	beq.n	4016ac <prvAddCurrentTaskToDelayedList+0x30>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4016d8:	4a15      	ldr	r2, [pc, #84]	; (401730 <prvAddCurrentTaskToDelayedList+0xb4>)
  4016da:	6851      	ldr	r1, [r2, #4]
  4016dc:	4b0e      	ldr	r3, [pc, #56]	; (401718 <prvAddCurrentTaskToDelayedList+0x9c>)
  4016de:	6818      	ldr	r0, [r3, #0]
  4016e0:	6081      	str	r1, [r0, #8]
  4016e2:	6818      	ldr	r0, [r3, #0]
  4016e4:	688c      	ldr	r4, [r1, #8]
  4016e6:	60c4      	str	r4, [r0, #12]
  4016e8:	688c      	ldr	r4, [r1, #8]
  4016ea:	6818      	ldr	r0, [r3, #0]
  4016ec:	3004      	adds	r0, #4
  4016ee:	6060      	str	r0, [r4, #4]
  4016f0:	6818      	ldr	r0, [r3, #0]
  4016f2:	3004      	adds	r0, #4
  4016f4:	6088      	str	r0, [r1, #8]
  4016f6:	681b      	ldr	r3, [r3, #0]
  4016f8:	615a      	str	r2, [r3, #20]
  4016fa:	6813      	ldr	r3, [r2, #0]
  4016fc:	3301      	adds	r3, #1
  4016fe:	6013      	str	r3, [r2, #0]
  401700:	bd70      	pop	{r4, r5, r6, pc}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401702:	4b0c      	ldr	r3, [pc, #48]	; (401734 <prvAddCurrentTaskToDelayedList+0xb8>)
  401704:	6818      	ldr	r0, [r3, #0]
  401706:	4b04      	ldr	r3, [pc, #16]	; (401718 <prvAddCurrentTaskToDelayedList+0x9c>)
  401708:	6819      	ldr	r1, [r3, #0]
  40170a:	3104      	adds	r1, #4
  40170c:	4b06      	ldr	r3, [pc, #24]	; (401728 <prvAddCurrentTaskToDelayedList+0xac>)
  40170e:	4798      	blx	r3
  401710:	bd70      	pop	{r4, r5, r6, pc}
  401712:	bf00      	nop
  401714:	20000bc8 	.word	0x20000bc8
  401718:	20000a90 	.word	0x20000a90
  40171c:	0040067d 	.word	0x0040067d
  401720:	20000b4c 	.word	0x20000b4c
  401724:	20000a94 	.word	0x20000a94
  401728:	00400649 	.word	0x00400649
  40172c:	20000b7c 	.word	0x20000b7c
  401730:	20000ba0 	.word	0x20000ba0
  401734:	20000a98 	.word	0x20000a98

00401738 <xTaskCreate>:
    {
  401738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40173c:	b083      	sub	sp, #12
  40173e:	4683      	mov	fp, r0
  401740:	460e      	mov	r6, r1
  401742:	9301      	str	r3, [sp, #4]
  401744:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401746:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  40174a:	0097      	lsls	r7, r2, #2
  40174c:	4638      	mov	r0, r7
  40174e:	4b6f      	ldr	r3, [pc, #444]	; (40190c <xTaskCreate+0x1d4>)
  401750:	4798      	blx	r3
                if( pxStack != NULL )
  401752:	2800      	cmp	r0, #0
  401754:	f000 80a6 	beq.w	4018a4 <xTaskCreate+0x16c>
  401758:	4680      	mov	r8, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  40175a:	206c      	movs	r0, #108	; 0x6c
  40175c:	4b6b      	ldr	r3, [pc, #428]	; (40190c <xTaskCreate+0x1d4>)
  40175e:	4798      	blx	r3
                    if( pxNewTCB != NULL )
  401760:	4604      	mov	r4, r0
  401762:	2800      	cmp	r0, #0
  401764:	f000 809b 	beq.w	40189e <xTaskCreate+0x166>
                        pxNewTCB->pxStack = pxStack;
  401768:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  40176c:	463a      	mov	r2, r7
  40176e:	21a5      	movs	r1, #165	; 0xa5
  401770:	4640      	mov	r0, r8
  401772:	4b67      	ldr	r3, [pc, #412]	; (401910 <xTaskCreate+0x1d8>)
  401774:	4798      	blx	r3
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  401776:	3f04      	subs	r7, #4
  401778:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40177a:	441f      	add	r7, r3
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  40177c:	f027 0707 	bic.w	r7, r7, #7
    if( pcName != NULL )
  401780:	2e00      	cmp	r6, #0
  401782:	f000 8092 	beq.w	4018aa <xTaskCreate+0x172>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401786:	7833      	ldrb	r3, [r6, #0]
  401788:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            if( pcName[ x ] == ( char ) 0x00 )
  40178c:	7833      	ldrb	r3, [r6, #0]
  40178e:	b15b      	cbz	r3, 4017a8 <xTaskCreate+0x70>
  401790:	4633      	mov	r3, r6
  401792:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401796:	3613      	adds	r6, #19
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401798:	7859      	ldrb	r1, [r3, #1]
  40179a:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
  40179e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4017a2:	b109      	cbz	r1, 4017a8 <xTaskCreate+0x70>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4017a4:	42b3      	cmp	r3, r6
  4017a6:	d1f7      	bne.n	401798 <xTaskCreate+0x60>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4017a8:	2300      	movs	r3, #0
  4017aa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    configASSERT( uxPriority < configMAX_PRIORITIES );
  4017ae:	2d07      	cmp	r5, #7
  4017b0:	d87f      	bhi.n	4018b2 <xTaskCreate+0x17a>
  4017b2:	2d07      	cmp	r5, #7
  4017b4:	bf28      	it	cs
  4017b6:	2507      	movcs	r5, #7
    pxNewTCB->uxPriority = uxPriority;
  4017b8:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
  4017ba:	6525      	str	r5, [r4, #80]	; 0x50
            pxNewTCB->uxMutexesHeld = 0;
  4017bc:	2600      	movs	r6, #0
  4017be:	6566      	str	r6, [r4, #84]	; 0x54
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  4017c0:	f104 0804 	add.w	r8, r4, #4
  4017c4:	4640      	mov	r0, r8
  4017c6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 401968 <xTaskCreate+0x230>
  4017ca:	47c8      	blx	r9
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  4017cc:	f104 0018 	add.w	r0, r4, #24
  4017d0:	47c8      	blx	r9
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  4017d2:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4017d4:	f1c5 0508 	rsb	r5, r5, #8
  4017d8:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  4017da:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
  4017dc:	65a6      	str	r6, [r4, #88]	; 0x58
  4017de:	65e6      	str	r6, [r4, #92]	; 0x5c
  4017e0:	6626      	str	r6, [r4, #96]	; 0x60
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
  4017e2:	6666      	str	r6, [r4, #100]	; 0x64
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
  4017e4:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4017e8:	9a01      	ldr	r2, [sp, #4]
  4017ea:	4659      	mov	r1, fp
  4017ec:	4638      	mov	r0, r7
  4017ee:	4b49      	ldr	r3, [pc, #292]	; (401914 <xTaskCreate+0x1dc>)
  4017f0:	4798      	blx	r3
  4017f2:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
  4017f4:	f1ba 0f00 	cmp.w	sl, #0
  4017f8:	d001      	beq.n	4017fe <xTaskCreate+0xc6>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4017fa:	f8ca 4000 	str.w	r4, [sl]
    taskENTER_CRITICAL();
  4017fe:	4b46      	ldr	r3, [pc, #280]	; (401918 <xTaskCreate+0x1e0>)
  401800:	4798      	blx	r3
        uxCurrentNumberOfTasks++;
  401802:	4a46      	ldr	r2, [pc, #280]	; (40191c <xTaskCreate+0x1e4>)
  401804:	6813      	ldr	r3, [r2, #0]
  401806:	3301      	adds	r3, #1
  401808:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
  40180a:	4b45      	ldr	r3, [pc, #276]	; (401920 <xTaskCreate+0x1e8>)
  40180c:	681b      	ldr	r3, [r3, #0]
  40180e:	2b00      	cmp	r3, #0
  401810:	d055      	beq.n	4018be <xTaskCreate+0x186>
            if( xSchedulerRunning == pdFALSE )
  401812:	4b44      	ldr	r3, [pc, #272]	; (401924 <xTaskCreate+0x1ec>)
  401814:	681b      	ldr	r3, [r3, #0]
  401816:	b93b      	cbnz	r3, 401828 <xTaskCreate+0xf0>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401818:	4b41      	ldr	r3, [pc, #260]	; (401920 <xTaskCreate+0x1e8>)
  40181a:	681b      	ldr	r3, [r3, #0]
  40181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40181e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401820:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
  401822:	bf9c      	itt	ls
  401824:	4b3e      	ldrls	r3, [pc, #248]	; (401920 <xTaskCreate+0x1e8>)
  401826:	601c      	strls	r4, [r3, #0]
        uxTaskNumber++;
  401828:	4a3f      	ldr	r2, [pc, #252]	; (401928 <xTaskCreate+0x1f0>)
  40182a:	6813      	ldr	r3, [r2, #0]
  40182c:	3301      	adds	r3, #1
  40182e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
  401830:	64a3      	str	r3, [r4, #72]	; 0x48
        prvAddTaskToReadyList( pxNewTCB );
  401832:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401834:	493d      	ldr	r1, [pc, #244]	; (40192c <xTaskCreate+0x1f4>)
  401836:	6808      	ldr	r0, [r1, #0]
  401838:	2201      	movs	r2, #1
  40183a:	409a      	lsls	r2, r3
  40183c:	4302      	orrs	r2, r0
  40183e:	600a      	str	r2, [r1, #0]
  401840:	4a3b      	ldr	r2, [pc, #236]	; (401930 <xTaskCreate+0x1f8>)
  401842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40184a:	685b      	ldr	r3, [r3, #4]
  40184c:	60a3      	str	r3, [r4, #8]
  40184e:	6899      	ldr	r1, [r3, #8]
  401850:	60e1      	str	r1, [r4, #12]
  401852:	6899      	ldr	r1, [r3, #8]
  401854:	f8c1 8004 	str.w	r8, [r1, #4]
  401858:	f8c3 8008 	str.w	r8, [r3, #8]
  40185c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40185e:	0083      	lsls	r3, r0, #2
  401860:	1819      	adds	r1, r3, r0
  401862:	0089      	lsls	r1, r1, #2
  401864:	1855      	adds	r5, r2, r1
  401866:	6165      	str	r5, [r4, #20]
  401868:	5851      	ldr	r1, [r2, r1]
  40186a:	3101      	adds	r1, #1
  40186c:	4403      	add	r3, r0
  40186e:	009b      	lsls	r3, r3, #2
  401870:	50d1      	str	r1, [r2, r3]
    taskEXIT_CRITICAL();
  401872:	4b30      	ldr	r3, [pc, #192]	; (401934 <xTaskCreate+0x1fc>)
  401874:	4798      	blx	r3
    if( xSchedulerRunning != pdFALSE )
  401876:	4b2b      	ldr	r3, [pc, #172]	; (401924 <xTaskCreate+0x1ec>)
  401878:	681b      	ldr	r3, [r3, #0]
  40187a:	2b00      	cmp	r3, #0
  40187c:	d03f      	beq.n	4018fe <xTaskCreate+0x1c6>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  40187e:	4b28      	ldr	r3, [pc, #160]	; (401920 <xTaskCreate+0x1e8>)
  401880:	681b      	ldr	r3, [r3, #0]
  401882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401884:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401886:	429a      	cmp	r2, r3
  401888:	d23d      	bcs.n	401906 <xTaskCreate+0x1ce>
            taskYIELD_IF_USING_PREEMPTION();
  40188a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40188e:	4b2a      	ldr	r3, [pc, #168]	; (401938 <xTaskCreate+0x200>)
  401890:	601a      	str	r2, [r3, #0]
  401892:	f3bf 8f4f 	dsb	sy
  401896:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
  40189a:	2001      	movs	r0, #1
  40189c:	e030      	b.n	401900 <xTaskCreate+0x1c8>
                        vPortFreeStack( pxStack );
  40189e:	4640      	mov	r0, r8
  4018a0:	4b26      	ldr	r3, [pc, #152]	; (40193c <xTaskCreate+0x204>)
  4018a2:	4798      	blx	r3
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4018a4:	f04f 30ff 	mov.w	r0, #4294967295
  4018a8:	e02a      	b.n	401900 <xTaskCreate+0x1c8>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
  4018aa:	2300      	movs	r3, #0
  4018ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  4018b0:	e77d      	b.n	4017ae <xTaskCreate+0x76>
    configASSERT( uxPriority < configMAX_PRIORITIES );
  4018b2:	f240 3197 	movw	r1, #919	; 0x397
  4018b6:	4822      	ldr	r0, [pc, #136]	; (401940 <xTaskCreate+0x208>)
  4018b8:	4b22      	ldr	r3, [pc, #136]	; (401944 <xTaskCreate+0x20c>)
  4018ba:	4798      	blx	r3
  4018bc:	e779      	b.n	4017b2 <xTaskCreate+0x7a>
            pxCurrentTCB = pxNewTCB;
  4018be:	4b18      	ldr	r3, [pc, #96]	; (401920 <xTaskCreate+0x1e8>)
  4018c0:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4018c2:	6813      	ldr	r3, [r2, #0]
  4018c4:	2b01      	cmp	r3, #1
  4018c6:	d1af      	bne.n	401828 <xTaskCreate+0xf0>
  4018c8:	4d19      	ldr	r5, [pc, #100]	; (401930 <xTaskCreate+0x1f8>)
  4018ca:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4018ce:	4e1e      	ldr	r6, [pc, #120]	; (401948 <xTaskCreate+0x210>)
  4018d0:	4628      	mov	r0, r5
  4018d2:	47b0      	blx	r6
  4018d4:	3514      	adds	r5, #20
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4018d6:	42af      	cmp	r7, r5
  4018d8:	d1fa      	bne.n	4018d0 <xTaskCreate+0x198>
    vListInitialise( &xDelayedTaskList1 );
  4018da:	4f1c      	ldr	r7, [pc, #112]	; (40194c <xTaskCreate+0x214>)
  4018dc:	4638      	mov	r0, r7
  4018de:	4d1a      	ldr	r5, [pc, #104]	; (401948 <xTaskCreate+0x210>)
  4018e0:	47a8      	blx	r5
    vListInitialise( &xDelayedTaskList2 );
  4018e2:	4e1b      	ldr	r6, [pc, #108]	; (401950 <xTaskCreate+0x218>)
  4018e4:	4630      	mov	r0, r6
  4018e6:	47a8      	blx	r5
    vListInitialise( &xPendingReadyList );
  4018e8:	481a      	ldr	r0, [pc, #104]	; (401954 <xTaskCreate+0x21c>)
  4018ea:	47a8      	blx	r5
            vListInitialise( &xTasksWaitingTermination );
  4018ec:	481a      	ldr	r0, [pc, #104]	; (401958 <xTaskCreate+0x220>)
  4018ee:	47a8      	blx	r5
            vListInitialise( &xSuspendedTaskList );
  4018f0:	481a      	ldr	r0, [pc, #104]	; (40195c <xTaskCreate+0x224>)
  4018f2:	47a8      	blx	r5
    pxDelayedTaskList = &xDelayedTaskList1;
  4018f4:	4b1a      	ldr	r3, [pc, #104]	; (401960 <xTaskCreate+0x228>)
  4018f6:	601f      	str	r7, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4018f8:	4b1a      	ldr	r3, [pc, #104]	; (401964 <xTaskCreate+0x22c>)
  4018fa:	601e      	str	r6, [r3, #0]
  4018fc:	e794      	b.n	401828 <xTaskCreate+0xf0>
            xReturn = pdPASS;
  4018fe:	2001      	movs	r0, #1
    }
  401900:	b003      	add	sp, #12
  401902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            xReturn = pdPASS;
  401906:	2001      	movs	r0, #1
        return xReturn;
  401908:	e7fa      	b.n	401900 <xTaskCreate+0x1c8>
  40190a:	bf00      	nop
  40190c:	00400a91 	.word	0x00400a91
  401910:	00403609 	.word	0x00403609
  401914:	00400725 	.word	0x00400725
  401918:	00400775 	.word	0x00400775
  40191c:	20000b3c 	.word	0x20000b3c
  401920:	20000a90 	.word	0x20000a90
  401924:	20000b9c 	.word	0x20000b9c
  401928:	20000b48 	.word	0x20000b48
  40192c:	20000b4c 	.word	0x20000b4c
  401930:	20000a9c 	.word	0x20000a9c
  401934:	004007bd 	.word	0x004007bd
  401938:	e000ed04 	.word	0xe000ed04
  40193c:	00400b85 	.word	0x00400b85
  401940:	00408514 	.word	0x00408514
  401944:	00403429 	.word	0x00403429
  401948:	00400615 	.word	0x00400615
  40194c:	20000b50 	.word	0x20000b50
  401950:	20000b64 	.word	0x20000b64
  401954:	20000b88 	.word	0x20000b88
  401958:	20000bb4 	.word	0x20000bb4
  40195c:	20000ba0 	.word	0x20000ba0
  401960:	20000a94 	.word	0x20000a94
  401964:	20000a98 	.word	0x20000a98
  401968:	0040062b 	.word	0x0040062b

0040196c <vTaskDelete>:
    {
  40196c:	b538      	push	{r3, r4, r5, lr}
  40196e:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
  401970:	4b2e      	ldr	r3, [pc, #184]	; (401a2c <vTaskDelete+0xc0>)
  401972:	4798      	blx	r3
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
  401974:	2c00      	cmp	r4, #0
  401976:	d03a      	beq.n	4019ee <vTaskDelete+0x82>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401978:	1d25      	adds	r5, r4, #4
  40197a:	4628      	mov	r0, r5
  40197c:	4b2c      	ldr	r3, [pc, #176]	; (401a30 <vTaskDelete+0xc4>)
  40197e:	4798      	blx	r3
  401980:	b970      	cbnz	r0, 4019a0 <vTaskDelete+0x34>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401982:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401984:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  401988:	009b      	lsls	r3, r3, #2
  40198a:	492a      	ldr	r1, [pc, #168]	; (401a34 <vTaskDelete+0xc8>)
  40198c:	58cb      	ldr	r3, [r1, r3]
  40198e:	b93b      	cbnz	r3, 4019a0 <vTaskDelete+0x34>
  401990:	4829      	ldr	r0, [pc, #164]	; (401a38 <vTaskDelete+0xcc>)
  401992:	6803      	ldr	r3, [r0, #0]
  401994:	2101      	movs	r1, #1
  401996:	fa01 f202 	lsl.w	r2, r1, r2
  40199a:	ea23 0202 	bic.w	r2, r3, r2
  40199e:	6002      	str	r2, [r0, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4019a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4019a2:	b11b      	cbz	r3, 4019ac <vTaskDelete+0x40>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4019a4:	f104 0018 	add.w	r0, r4, #24
  4019a8:	4b21      	ldr	r3, [pc, #132]	; (401a30 <vTaskDelete+0xc4>)
  4019aa:	4798      	blx	r3
            uxTaskNumber++;
  4019ac:	4a23      	ldr	r2, [pc, #140]	; (401a3c <vTaskDelete+0xd0>)
  4019ae:	6813      	ldr	r3, [r2, #0]
  4019b0:	3301      	adds	r3, #1
  4019b2:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
  4019b4:	4b22      	ldr	r3, [pc, #136]	; (401a40 <vTaskDelete+0xd4>)
  4019b6:	681b      	ldr	r3, [r3, #0]
  4019b8:	429c      	cmp	r4, r3
  4019ba:	d01b      	beq.n	4019f4 <vTaskDelete+0x88>
                --uxCurrentNumberOfTasks;
  4019bc:	4a21      	ldr	r2, [pc, #132]	; (401a44 <vTaskDelete+0xd8>)
  4019be:	6813      	ldr	r3, [r2, #0]
  4019c0:	3b01      	subs	r3, #1
  4019c2:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
  4019c4:	4b20      	ldr	r3, [pc, #128]	; (401a48 <vTaskDelete+0xdc>)
  4019c6:	4798      	blx	r3
        taskEXIT_CRITICAL();
  4019c8:	4b20      	ldr	r3, [pc, #128]	; (401a4c <vTaskDelete+0xe0>)
  4019ca:	4798      	blx	r3
        if( pxTCB != pxCurrentTCB )
  4019cc:	4b1c      	ldr	r3, [pc, #112]	; (401a40 <vTaskDelete+0xd4>)
  4019ce:	681b      	ldr	r3, [r3, #0]
  4019d0:	429c      	cmp	r4, r3
  4019d2:	d004      	beq.n	4019de <vTaskDelete+0x72>
                vPortFreeStack( pxTCB->pxStack );
  4019d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4019d6:	4d1e      	ldr	r5, [pc, #120]	; (401a50 <vTaskDelete+0xe4>)
  4019d8:	47a8      	blx	r5
                vPortFree( pxTCB );
  4019da:	4620      	mov	r0, r4
  4019dc:	47a8      	blx	r5
        if( xSchedulerRunning != pdFALSE )
  4019de:	4b1d      	ldr	r3, [pc, #116]	; (401a54 <vTaskDelete+0xe8>)
  4019e0:	681b      	ldr	r3, [r3, #0]
  4019e2:	b11b      	cbz	r3, 4019ec <vTaskDelete+0x80>
            if( pxTCB == pxCurrentTCB )
  4019e4:	4b16      	ldr	r3, [pc, #88]	; (401a40 <vTaskDelete+0xd4>)
  4019e6:	681b      	ldr	r3, [r3, #0]
  4019e8:	429c      	cmp	r4, r3
  4019ea:	d00c      	beq.n	401a06 <vTaskDelete+0x9a>
  4019ec:	bd38      	pop	{r3, r4, r5, pc}
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
  4019ee:	4b14      	ldr	r3, [pc, #80]	; (401a40 <vTaskDelete+0xd4>)
  4019f0:	681c      	ldr	r4, [r3, #0]
  4019f2:	e7c1      	b.n	401978 <vTaskDelete+0xc>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
  4019f4:	4629      	mov	r1, r5
  4019f6:	4818      	ldr	r0, [pc, #96]	; (401a58 <vTaskDelete+0xec>)
  4019f8:	4b18      	ldr	r3, [pc, #96]	; (401a5c <vTaskDelete+0xf0>)
  4019fa:	4798      	blx	r3
                ++uxDeletedTasksWaitingCleanUp;
  4019fc:	4a18      	ldr	r2, [pc, #96]	; (401a60 <vTaskDelete+0xf4>)
  4019fe:	6813      	ldr	r3, [r2, #0]
  401a00:	3301      	adds	r3, #1
  401a02:	6013      	str	r3, [r2, #0]
  401a04:	e7e0      	b.n	4019c8 <vTaskDelete+0x5c>
                configASSERT( uxSchedulerSuspended == 0 );
  401a06:	4b17      	ldr	r3, [pc, #92]	; (401a64 <vTaskDelete+0xf8>)
  401a08:	681b      	ldr	r3, [r3, #0]
  401a0a:	b943      	cbnz	r3, 401a1e <vTaskDelete+0xb2>
                portYIELD_WITHIN_API();
  401a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a10:	4b15      	ldr	r3, [pc, #84]	; (401a68 <vTaskDelete+0xfc>)
  401a12:	601a      	str	r2, [r3, #0]
  401a14:	f3bf 8f4f 	dsb	sy
  401a18:	f3bf 8f6f 	isb	sy
    }
  401a1c:	e7e6      	b.n	4019ec <vTaskDelete+0x80>
                configASSERT( uxSchedulerSuspended == 0 );
  401a1e:	f240 41dc 	movw	r1, #1244	; 0x4dc
  401a22:	4812      	ldr	r0, [pc, #72]	; (401a6c <vTaskDelete+0x100>)
  401a24:	4b12      	ldr	r3, [pc, #72]	; (401a70 <vTaskDelete+0x104>)
  401a26:	4798      	blx	r3
  401a28:	e7f0      	b.n	401a0c <vTaskDelete+0xa0>
  401a2a:	bf00      	nop
  401a2c:	00400775 	.word	0x00400775
  401a30:	0040067d 	.word	0x0040067d
  401a34:	20000a9c 	.word	0x20000a9c
  401a38:	20000b4c 	.word	0x20000b4c
  401a3c:	20000b48 	.word	0x20000b48
  401a40:	20000a90 	.word	0x20000a90
  401a44:	20000b3c 	.word	0x20000b3c
  401a48:	004015d5 	.word	0x004015d5
  401a4c:	004007bd 	.word	0x004007bd
  401a50:	00400b85 	.word	0x00400b85
  401a54:	20000b9c 	.word	0x20000b9c
  401a58:	20000bb4 	.word	0x20000bb4
  401a5c:	00400631 	.word	0x00400631
  401a60:	20000b40 	.word	0x20000b40
  401a64:	20000b44 	.word	0x20000b44
  401a68:	e000ed04 	.word	0xe000ed04
  401a6c:	00408514 	.word	0x00408514
  401a70:	00403429 	.word	0x00403429

00401a74 <eTaskGetState>:
    {
  401a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( pxTCB );
  401a76:	4605      	mov	r5, r0
  401a78:	b1d8      	cbz	r0, 401ab2 <eTaskGetState+0x3e>
        if( pxTCB == pxCurrentTCB )
  401a7a:	4b1b      	ldr	r3, [pc, #108]	; (401ae8 <eTaskGetState+0x74>)
  401a7c:	681b      	ldr	r3, [r3, #0]
  401a7e:	429d      	cmp	r5, r3
  401a80:	d029      	beq.n	401ad6 <eTaskGetState+0x62>
            taskENTER_CRITICAL();
  401a82:	4b1a      	ldr	r3, [pc, #104]	; (401aec <eTaskGetState+0x78>)
  401a84:	4798      	blx	r3
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
  401a86:	696c      	ldr	r4, [r5, #20]
                pxDelayedList = pxDelayedTaskList;
  401a88:	4b19      	ldr	r3, [pc, #100]	; (401af0 <eTaskGetState+0x7c>)
  401a8a:	681e      	ldr	r6, [r3, #0]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
  401a8c:	4b19      	ldr	r3, [pc, #100]	; (401af4 <eTaskGetState+0x80>)
  401a8e:	681f      	ldr	r7, [r3, #0]
            taskEXIT_CRITICAL();
  401a90:	4b19      	ldr	r3, [pc, #100]	; (401af8 <eTaskGetState+0x84>)
  401a92:	4798      	blx	r3
            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
  401a94:	42b4      	cmp	r4, r6
  401a96:	d020      	beq.n	401ada <eTaskGetState+0x66>
  401a98:	42bc      	cmp	r4, r7
  401a9a:	d020      	beq.n	401ade <eTaskGetState+0x6a>
                else if( pxStateList == &xSuspendedTaskList )
  401a9c:	4b17      	ldr	r3, [pc, #92]	; (401afc <eTaskGetState+0x88>)
  401a9e:	429c      	cmp	r4, r3
  401aa0:	d00d      	beq.n	401abe <eTaskGetState+0x4a>
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
  401aa2:	4b17      	ldr	r3, [pc, #92]	; (401b00 <eTaskGetState+0x8c>)
  401aa4:	429c      	cmp	r4, r3
  401aa6:	d01c      	beq.n	401ae2 <eTaskGetState+0x6e>
                eReturn = eReady;
  401aa8:	2c00      	cmp	r4, #0
  401aaa:	bf0c      	ite	eq
  401aac:	2004      	moveq	r0, #4
  401aae:	2001      	movne	r0, #1
  401ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        configASSERT( pxTCB );
  401ab2:	f240 5175 	movw	r1, #1397	; 0x575
  401ab6:	4813      	ldr	r0, [pc, #76]	; (401b04 <eTaskGetState+0x90>)
  401ab8:	4b13      	ldr	r3, [pc, #76]	; (401b08 <eTaskGetState+0x94>)
  401aba:	4798      	blx	r3
  401abc:	e7dd      	b.n	401a7a <eTaskGetState+0x6>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
  401abe:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401ac0:	b10b      	cbz	r3, 401ac6 <eTaskGetState+0x52>
                        eReturn = eBlocked;
  401ac2:	2002      	movs	r0, #2
  401ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
  401ac6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
  401aca:	b2db      	uxtb	r3, r3
                                eReturn = eSuspended;
  401acc:	2b01      	cmp	r3, #1
  401ace:	bf0c      	ite	eq
  401ad0:	2002      	moveq	r0, #2
  401ad2:	2003      	movne	r0, #3
  401ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eReturn = eRunning;
  401ad6:	2000      	movs	r0, #0
  401ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                eReturn = eBlocked;
  401ada:	2002      	movs	r0, #2
  401adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ade:	2002      	movs	r0, #2
  401ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    eReturn = eDeleted;
  401ae2:	2004      	movs	r0, #4
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  401ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ae6:	bf00      	nop
  401ae8:	20000a90 	.word	0x20000a90
  401aec:	00400775 	.word	0x00400775
  401af0:	20000a94 	.word	0x20000a94
  401af4:	20000a98 	.word	0x20000a98
  401af8:	004007bd 	.word	0x004007bd
  401afc:	20000ba0 	.word	0x20000ba0
  401b00:	20000bb4 	.word	0x20000bb4
  401b04:	00408514 	.word	0x00408514
  401b08:	00403429 	.word	0x00403429

00401b0c <vTaskStartScheduler>:
{
  401b0c:	b510      	push	{r4, lr}
  401b0e:	b082      	sub	sp, #8
            xReturn = xTaskCreate( prvIdleTask,
  401b10:	4b18      	ldr	r3, [pc, #96]	; (401b74 <vTaskStartScheduler+0x68>)
  401b12:	9301      	str	r3, [sp, #4]
  401b14:	2300      	movs	r3, #0
  401b16:	9300      	str	r3, [sp, #0]
  401b18:	2282      	movs	r2, #130	; 0x82
  401b1a:	4917      	ldr	r1, [pc, #92]	; (401b78 <vTaskStartScheduler+0x6c>)
  401b1c:	4817      	ldr	r0, [pc, #92]	; (401b7c <vTaskStartScheduler+0x70>)
  401b1e:	4c18      	ldr	r4, [pc, #96]	; (401b80 <vTaskStartScheduler+0x74>)
  401b20:	47a0      	blx	r4
            if( xReturn == pdPASS )
  401b22:	2801      	cmp	r0, #1
  401b24:	d006      	beq.n	401b34 <vTaskStartScheduler+0x28>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401b26:	f1b0 3fff 	cmp.w	r0, #4294967295
  401b2a:	d01c      	beq.n	401b66 <vTaskStartScheduler+0x5a>
    ( void ) uxTopUsedPriority;
  401b2c:	4b15      	ldr	r3, [pc, #84]	; (401b84 <vTaskStartScheduler+0x78>)
  401b2e:	681b      	ldr	r3, [r3, #0]
}
  401b30:	b002      	add	sp, #8
  401b32:	bd10      	pop	{r4, pc}
                xReturn = xTimerCreateTimerTask();
  401b34:	4b14      	ldr	r3, [pc, #80]	; (401b88 <vTaskStartScheduler+0x7c>)
  401b36:	4798      	blx	r3
    if( xReturn == pdPASS )
  401b38:	2801      	cmp	r0, #1
  401b3a:	d1f4      	bne.n	401b26 <vTaskStartScheduler+0x1a>
        __asm volatile
  401b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
  401b40:	f383 8811 	msr	BASEPRI, r3
  401b44:	f3bf 8f6f 	isb	sy
  401b48:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
  401b4c:	f04f 32ff 	mov.w	r2, #4294967295
  401b50:	4b0e      	ldr	r3, [pc, #56]	; (401b8c <vTaskStartScheduler+0x80>)
  401b52:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
  401b54:	2201      	movs	r2, #1
  401b56:	4b0e      	ldr	r3, [pc, #56]	; (401b90 <vTaskStartScheduler+0x84>)
  401b58:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  401b5a:	2200      	movs	r2, #0
  401b5c:	4b0d      	ldr	r3, [pc, #52]	; (401b94 <vTaskStartScheduler+0x88>)
  401b5e:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
  401b60:	4b0d      	ldr	r3, [pc, #52]	; (401b98 <vTaskStartScheduler+0x8c>)
  401b62:	4798      	blx	r3
  401b64:	e7e2      	b.n	401b2c <vTaskStartScheduler+0x20>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401b66:	f44f 6104 	mov.w	r1, #2112	; 0x840
  401b6a:	480c      	ldr	r0, [pc, #48]	; (401b9c <vTaskStartScheduler+0x90>)
  401b6c:	4b0c      	ldr	r3, [pc, #48]	; (401ba0 <vTaskStartScheduler+0x94>)
  401b6e:	4798      	blx	r3
  401b70:	e7dc      	b.n	401b2c <vTaskStartScheduler+0x20>
  401b72:	bf00      	nop
  401b74:	20000b78 	.word	0x20000b78
  401b78:	0040853c 	.word	0x0040853c
  401b7c:	004015fd 	.word	0x004015fd
  401b80:	00401739 	.word	0x00401739
  401b84:	20000010 	.word	0x20000010
  401b88:	00402981 	.word	0x00402981
  401b8c:	20000b7c 	.word	0x20000b7c
  401b90:	20000b9c 	.word	0x20000b9c
  401b94:	20000bc8 	.word	0x20000bc8
  401b98:	004008bd 	.word	0x004008bd
  401b9c:	00408514 	.word	0x00408514
  401ba0:	00403429 	.word	0x00403429

00401ba4 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
  401ba4:	4a02      	ldr	r2, [pc, #8]	; (401bb0 <vTaskSuspendAll+0xc>)
  401ba6:	6813      	ldr	r3, [r2, #0]
  401ba8:	3301      	adds	r3, #1
  401baa:	6013      	str	r3, [r2, #0]
    portMEMORY_BARRIER();
  401bac:	4770      	bx	lr
  401bae:	bf00      	nop
  401bb0:	20000b44 	.word	0x20000b44

00401bb4 <xTaskGetTickCount>:
        xTicks = xTickCount;
  401bb4:	4b01      	ldr	r3, [pc, #4]	; (401bbc <xTaskGetTickCount+0x8>)
  401bb6:	6818      	ldr	r0, [r3, #0]
}
  401bb8:	4770      	bx	lr
  401bba:	bf00      	nop
  401bbc:	20000bc8 	.word	0x20000bc8

00401bc0 <xTaskIncrementTick>:
{
  401bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401bc4:	4b5f      	ldr	r3, [pc, #380]	; (401d44 <xTaskIncrementTick+0x184>)
  401bc6:	681b      	ldr	r3, [r3, #0]
  401bc8:	2b00      	cmp	r3, #0
  401bca:	f040 80b3 	bne.w	401d34 <xTaskIncrementTick+0x174>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  401bce:	4b5e      	ldr	r3, [pc, #376]	; (401d48 <xTaskIncrementTick+0x188>)
  401bd0:	681c      	ldr	r4, [r3, #0]
  401bd2:	f104 0b01 	add.w	fp, r4, #1
        xTickCount = xConstTickCount;
  401bd6:	f8c3 b000 	str.w	fp, [r3]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401bda:	f1bb 0f00 	cmp.w	fp, #0
  401bde:	d10f      	bne.n	401c00 <xTaskIncrementTick+0x40>
            taskSWITCH_DELAYED_LISTS();
  401be0:	4b5a      	ldr	r3, [pc, #360]	; (401d4c <xTaskIncrementTick+0x18c>)
  401be2:	681b      	ldr	r3, [r3, #0]
  401be4:	681b      	ldr	r3, [r3, #0]
  401be6:	bb13      	cbnz	r3, 401c2e <xTaskIncrementTick+0x6e>
  401be8:	4a58      	ldr	r2, [pc, #352]	; (401d4c <xTaskIncrementTick+0x18c>)
  401bea:	6811      	ldr	r1, [r2, #0]
  401bec:	4b58      	ldr	r3, [pc, #352]	; (401d50 <xTaskIncrementTick+0x190>)
  401bee:	6818      	ldr	r0, [r3, #0]
  401bf0:	6010      	str	r0, [r2, #0]
  401bf2:	6019      	str	r1, [r3, #0]
  401bf4:	4a57      	ldr	r2, [pc, #348]	; (401d54 <xTaskIncrementTick+0x194>)
  401bf6:	6813      	ldr	r3, [r2, #0]
  401bf8:	3301      	adds	r3, #1
  401bfa:	6013      	str	r3, [r2, #0]
  401bfc:	4b56      	ldr	r3, [pc, #344]	; (401d58 <xTaskIncrementTick+0x198>)
  401bfe:	4798      	blx	r3
        if( xConstTickCount >= xNextTaskUnblockTime )
  401c00:	4b56      	ldr	r3, [pc, #344]	; (401d5c <xTaskIncrementTick+0x19c>)
  401c02:	681b      	ldr	r3, [r3, #0]
  401c04:	459b      	cmp	fp, r3
  401c06:	d218      	bcs.n	401c3a <xTaskIncrementTick+0x7a>
    BaseType_t xSwitchRequired = pdFALSE;
  401c08:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401c0a:	4b55      	ldr	r3, [pc, #340]	; (401d60 <xTaskIncrementTick+0x1a0>)
  401c0c:	681b      	ldr	r3, [r3, #0]
  401c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401c14:	009b      	lsls	r3, r3, #2
  401c16:	4a53      	ldr	r2, [pc, #332]	; (401d64 <xTaskIncrementTick+0x1a4>)
  401c18:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
  401c1a:	2b02      	cmp	r3, #2
  401c1c:	bf28      	it	cs
  401c1e:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
  401c20:	4b51      	ldr	r3, [pc, #324]	; (401d68 <xTaskIncrementTick+0x1a8>)
  401c22:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
  401c24:	2b00      	cmp	r3, #0
  401c26:	bf18      	it	ne
  401c28:	2001      	movne	r0, #1
  401c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
  401c2e:	f640 21c7 	movw	r1, #2759	; 0xac7
  401c32:	484e      	ldr	r0, [pc, #312]	; (401d6c <xTaskIncrementTick+0x1ac>)
  401c34:	4b4e      	ldr	r3, [pc, #312]	; (401d70 <xTaskIncrementTick+0x1b0>)
  401c36:	4798      	blx	r3
  401c38:	e7d6      	b.n	401be8 <xTaskIncrementTick+0x28>
  401c3a:	2000      	movs	r0, #0
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401c3c:	4943      	ldr	r1, [pc, #268]	; (401d4c <xTaskIncrementTick+0x18c>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401c3e:	4607      	mov	r7, r0
                    prvAddTaskToReadyList( pxTCB );
  401c40:	4d4c      	ldr	r5, [pc, #304]	; (401d74 <xTaskIncrementTick+0x1b4>)
  401c42:	f04f 0e01 	mov.w	lr, #1
  401c46:	4a47      	ldr	r2, [pc, #284]	; (401d64 <xTaskIncrementTick+0x1a4>)
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401c48:	f8df 8114 	ldr.w	r8, [pc, #276]	; 401d60 <xTaskIncrementTick+0x1a0>
  401c4c:	e036      	b.n	401cbc <xTaskIncrementTick+0xfc>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c4e:	f04f 32ff 	mov.w	r2, #4294967295
  401c52:	4b42      	ldr	r3, [pc, #264]	; (401d5c <xTaskIncrementTick+0x19c>)
  401c54:	601a      	str	r2, [r3, #0]
                    break;
  401c56:	e7d8      	b.n	401c0a <xTaskIncrementTick+0x4a>
                        xNextTaskUnblockTime = xItemValue;
  401c58:	4b40      	ldr	r3, [pc, #256]	; (401d5c <xTaskIncrementTick+0x19c>)
  401c5a:	601e      	str	r6, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
  401c5c:	e7d5      	b.n	401c0a <xTaskIncrementTick+0x4a>
                    prvAddTaskToReadyList( pxTCB );
  401c5e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  401c60:	f8d5 a000 	ldr.w	sl, [r5]
  401c64:	fa0e f906 	lsl.w	r9, lr, r6
  401c68:	ea49 090a 	orr.w	r9, r9, sl
  401c6c:	f8c5 9000 	str.w	r9, [r5]
  401c70:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401c74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  401c78:	6876      	ldr	r6, [r6, #4]
  401c7a:	609e      	str	r6, [r3, #8]
  401c7c:	68b4      	ldr	r4, [r6, #8]
  401c7e:	60dc      	str	r4, [r3, #12]
  401c80:	68b4      	ldr	r4, [r6, #8]
  401c82:	f8c4 c004 	str.w	ip, [r4, #4]
  401c86:	f8c6 c008 	str.w	ip, [r6, #8]
  401c8a:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
  401c8e:	ea4f 0689 	mov.w	r6, r9, lsl #2
  401c92:	eb06 0c09 	add.w	ip, r6, r9
  401c96:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
  401c9a:	f8c3 a014 	str.w	sl, [r3, #20]
  401c9e:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
  401ca2:	f10c 0c01 	add.w	ip, ip, #1
  401ca6:	444e      	add	r6, r9
  401ca8:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401cac:	f8d8 c000 	ldr.w	ip, [r8]
  401cb0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  401cb2:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
  401cb6:	429e      	cmp	r6, r3
  401cb8:	bf28      	it	cs
  401cba:	2001      	movcs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401cbc:	680b      	ldr	r3, [r1, #0]
  401cbe:	681b      	ldr	r3, [r3, #0]
  401cc0:	2b00      	cmp	r3, #0
  401cc2:	d0c4      	beq.n	401c4e <xTaskIncrementTick+0x8e>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401cc4:	680b      	ldr	r3, [r1, #0]
  401cc6:	68db      	ldr	r3, [r3, #12]
  401cc8:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401cca:	685e      	ldr	r6, [r3, #4]
                    if( xConstTickCount < xItemValue )
  401ccc:	45b3      	cmp	fp, r6
  401cce:	d3c3      	bcc.n	401c58 <xTaskIncrementTick+0x98>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401cd0:	f8d3 9014 	ldr.w	r9, [r3, #20]
  401cd4:	689e      	ldr	r6, [r3, #8]
  401cd6:	68dc      	ldr	r4, [r3, #12]
  401cd8:	60b4      	str	r4, [r6, #8]
  401cda:	68de      	ldr	r6, [r3, #12]
  401cdc:	689c      	ldr	r4, [r3, #8]
  401cde:	6074      	str	r4, [r6, #4]
  401ce0:	f103 0c04 	add.w	ip, r3, #4
  401ce4:	f8d9 6004 	ldr.w	r6, [r9, #4]
  401ce8:	4566      	cmp	r6, ip
  401cea:	bf04      	itt	eq
  401cec:	68de      	ldreq	r6, [r3, #12]
  401cee:	f8c9 6004 	streq.w	r6, [r9, #4]
  401cf2:	615f      	str	r7, [r3, #20]
  401cf4:	f8d9 6000 	ldr.w	r6, [r9]
  401cf8:	3e01      	subs	r6, #1
  401cfa:	f8c9 6000 	str.w	r6, [r9]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401cfe:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
  401d02:	f1b9 0f00 	cmp.w	r9, #0
  401d06:	d0aa      	beq.n	401c5e <xTaskIncrementTick+0x9e>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401d08:	69de      	ldr	r6, [r3, #28]
  401d0a:	6a1c      	ldr	r4, [r3, #32]
  401d0c:	60b4      	str	r4, [r6, #8]
  401d0e:	6a1e      	ldr	r6, [r3, #32]
  401d10:	69dc      	ldr	r4, [r3, #28]
  401d12:	6074      	str	r4, [r6, #4]
  401d14:	f103 0a18 	add.w	sl, r3, #24
  401d18:	f8d9 6004 	ldr.w	r6, [r9, #4]
  401d1c:	4556      	cmp	r6, sl
  401d1e:	bf04      	itt	eq
  401d20:	6a1e      	ldreq	r6, [r3, #32]
  401d22:	f8c9 6004 	streq.w	r6, [r9, #4]
  401d26:	629f      	str	r7, [r3, #40]	; 0x28
  401d28:	f8d9 6000 	ldr.w	r6, [r9]
  401d2c:	3e01      	subs	r6, #1
  401d2e:	f8c9 6000 	str.w	r6, [r9]
  401d32:	e794      	b.n	401c5e <xTaskIncrementTick+0x9e>
        ++xPendedTicks;
  401d34:	4a10      	ldr	r2, [pc, #64]	; (401d78 <xTaskIncrementTick+0x1b8>)
  401d36:	6813      	ldr	r3, [r2, #0]
  401d38:	3301      	adds	r3, #1
  401d3a:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
  401d3c:	2000      	movs	r0, #0
}
  401d3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d42:	bf00      	nop
  401d44:	20000b44 	.word	0x20000b44
  401d48:	20000bc8 	.word	0x20000bc8
  401d4c:	20000a94 	.word	0x20000a94
  401d50:	20000a98 	.word	0x20000a98
  401d54:	20000b80 	.word	0x20000b80
  401d58:	004015d5 	.word	0x004015d5
  401d5c:	20000b7c 	.word	0x20000b7c
  401d60:	20000a90 	.word	0x20000a90
  401d64:	20000a9c 	.word	0x20000a9c
  401d68:	20000bcc 	.word	0x20000bcc
  401d6c:	00408514 	.word	0x00408514
  401d70:	00403429 	.word	0x00403429
  401d74:	20000b4c 	.word	0x20000b4c
  401d78:	20000b84 	.word	0x20000b84

00401d7c <xTaskResumeAll>:
{
  401d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    configASSERT( uxSchedulerSuspended );
  401d80:	4b57      	ldr	r3, [pc, #348]	; (401ee0 <xTaskResumeAll+0x164>)
  401d82:	681b      	ldr	r3, [r3, #0]
  401d84:	2b00      	cmp	r3, #0
  401d86:	d07a      	beq.n	401e7e <xTaskResumeAll+0x102>
    taskENTER_CRITICAL();
  401d88:	4b56      	ldr	r3, [pc, #344]	; (401ee4 <xTaskResumeAll+0x168>)
  401d8a:	4798      	blx	r3
        --uxSchedulerSuspended;
  401d8c:	4b54      	ldr	r3, [pc, #336]	; (401ee0 <xTaskResumeAll+0x164>)
  401d8e:	681a      	ldr	r2, [r3, #0]
  401d90:	3a01      	subs	r2, #1
  401d92:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401d94:	681b      	ldr	r3, [r3, #0]
  401d96:	2b00      	cmp	r3, #0
  401d98:	f040 809a 	bne.w	401ed0 <xTaskResumeAll+0x154>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401d9c:	4b52      	ldr	r3, [pc, #328]	; (401ee8 <xTaskResumeAll+0x16c>)
  401d9e:	681b      	ldr	r3, [r3, #0]
  401da0:	2b00      	cmp	r3, #0
  401da2:	d072      	beq.n	401e8a <xTaskResumeAll+0x10e>
  401da4:	2300      	movs	r3, #0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401da6:	4951      	ldr	r1, [pc, #324]	; (401eec <xTaskResumeAll+0x170>)
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401da8:	461c      	mov	r4, r3
                    prvAddTaskToReadyList( pxTCB );
  401daa:	4851      	ldr	r0, [pc, #324]	; (401ef0 <xTaskResumeAll+0x174>)
  401dac:	2601      	movs	r6, #1
  401dae:	4a51      	ldr	r2, [pc, #324]	; (401ef4 <xTaskResumeAll+0x178>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401db0:	f8df a164 	ldr.w	sl, [pc, #356]	; 401f18 <xTaskResumeAll+0x19c>
                        xYieldPending = pdTRUE;
  401db4:	f8df e154 	ldr.w	lr, [pc, #340]	; 401f0c <xTaskResumeAll+0x190>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401db8:	680d      	ldr	r5, [r1, #0]
  401dba:	2d00      	cmp	r5, #0
  401dbc:	d067      	beq.n	401e8e <xTaskResumeAll+0x112>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401dbe:	68cb      	ldr	r3, [r1, #12]
  401dc0:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401dc2:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
  401dc6:	69dd      	ldr	r5, [r3, #28]
  401dc8:	6a1f      	ldr	r7, [r3, #32]
  401dca:	60af      	str	r7, [r5, #8]
  401dcc:	6a1d      	ldr	r5, [r3, #32]
  401dce:	69df      	ldr	r7, [r3, #28]
  401dd0:	606f      	str	r7, [r5, #4]
  401dd2:	f103 0818 	add.w	r8, r3, #24
  401dd6:	f8dc 5004 	ldr.w	r5, [ip, #4]
  401dda:	4545      	cmp	r5, r8
  401ddc:	bf04      	itt	eq
  401dde:	6a1d      	ldreq	r5, [r3, #32]
  401de0:	f8cc 5004 	streq.w	r5, [ip, #4]
  401de4:	629c      	str	r4, [r3, #40]	; 0x28
  401de6:	f8dc 5000 	ldr.w	r5, [ip]
  401dea:	3d01      	subs	r5, #1
  401dec:	f8cc 5000 	str.w	r5, [ip]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401df0:	f8d3 c014 	ldr.w	ip, [r3, #20]
  401df4:	689d      	ldr	r5, [r3, #8]
  401df6:	68df      	ldr	r7, [r3, #12]
  401df8:	60af      	str	r7, [r5, #8]
  401dfa:	68dd      	ldr	r5, [r3, #12]
  401dfc:	689f      	ldr	r7, [r3, #8]
  401dfe:	606f      	str	r7, [r5, #4]
  401e00:	f103 0804 	add.w	r8, r3, #4
  401e04:	f8dc 5004 	ldr.w	r5, [ip, #4]
  401e08:	4545      	cmp	r5, r8
  401e0a:	bf04      	itt	eq
  401e0c:	68dd      	ldreq	r5, [r3, #12]
  401e0e:	f8cc 5004 	streq.w	r5, [ip, #4]
  401e12:	615c      	str	r4, [r3, #20]
  401e14:	f8dc 5000 	ldr.w	r5, [ip]
  401e18:	3d01      	subs	r5, #1
  401e1a:	f8cc 5000 	str.w	r5, [ip]
                    prvAddTaskToReadyList( pxTCB );
  401e1e:	6add      	ldr	r5, [r3, #44]	; 0x2c
  401e20:	f8d0 9000 	ldr.w	r9, [r0]
  401e24:	fa06 fc05 	lsl.w	ip, r6, r5
  401e28:	ea4c 0c09 	orr.w	ip, ip, r9
  401e2c:	f8c0 c000 	str.w	ip, [r0]
  401e30:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401e34:	eb02 0585 	add.w	r5, r2, r5, lsl #2
  401e38:	686d      	ldr	r5, [r5, #4]
  401e3a:	609d      	str	r5, [r3, #8]
  401e3c:	68af      	ldr	r7, [r5, #8]
  401e3e:	60df      	str	r7, [r3, #12]
  401e40:	68af      	ldr	r7, [r5, #8]
  401e42:	f8c7 8004 	str.w	r8, [r7, #4]
  401e46:	f8c5 8008 	str.w	r8, [r5, #8]
  401e4a:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
  401e4e:	ea4f 0588 	mov.w	r5, r8, lsl #2
  401e52:	eb05 0c08 	add.w	ip, r5, r8
  401e56:	eb02 098c 	add.w	r9, r2, ip, lsl #2
  401e5a:	f8c3 9014 	str.w	r9, [r3, #20]
  401e5e:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
  401e62:	f10c 0c01 	add.w	ip, ip, #1
  401e66:	4445      	add	r5, r8
  401e68:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401e6c:	f8da 5000 	ldr.w	r5, [sl]
  401e70:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  401e72:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  401e74:	42af      	cmp	r7, r5
  401e76:	d39f      	bcc.n	401db8 <xTaskResumeAll+0x3c>
                        xYieldPending = pdTRUE;
  401e78:	f8ce 6000 	str.w	r6, [lr]
  401e7c:	e79c      	b.n	401db8 <xTaskResumeAll+0x3c>
    configASSERT( uxSchedulerSuspended );
  401e7e:	f640 01b3 	movw	r1, #2227	; 0x8b3
  401e82:	481d      	ldr	r0, [pc, #116]	; (401ef8 <xTaskResumeAll+0x17c>)
  401e84:	4b1d      	ldr	r3, [pc, #116]	; (401efc <xTaskResumeAll+0x180>)
  401e86:	4798      	blx	r3
  401e88:	e77e      	b.n	401d88 <xTaskResumeAll+0xc>
    BaseType_t xAlreadyYielded = pdFALSE;
  401e8a:	2400      	movs	r4, #0
  401e8c:	e021      	b.n	401ed2 <xTaskResumeAll+0x156>
                if( pxTCB != NULL )
  401e8e:	b10b      	cbz	r3, 401e94 <xTaskResumeAll+0x118>
                    prvResetNextTaskUnblockTime();
  401e90:	4b1b      	ldr	r3, [pc, #108]	; (401f00 <xTaskResumeAll+0x184>)
  401e92:	4798      	blx	r3
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
  401e94:	4b1b      	ldr	r3, [pc, #108]	; (401f04 <xTaskResumeAll+0x188>)
  401e96:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
  401e98:	b16c      	cbz	r4, 401eb6 <xTaskResumeAll+0x13a>
                            if( xTaskIncrementTick() != pdFALSE )
  401e9a:	4d1b      	ldr	r5, [pc, #108]	; (401f08 <xTaskResumeAll+0x18c>)
                                xYieldPending = pdTRUE;
  401e9c:	4f1b      	ldr	r7, [pc, #108]	; (401f0c <xTaskResumeAll+0x190>)
  401e9e:	2601      	movs	r6, #1
  401ea0:	e001      	b.n	401ea6 <xTaskResumeAll+0x12a>
                        } while( xPendedCounts > ( TickType_t ) 0U );
  401ea2:	3c01      	subs	r4, #1
  401ea4:	d004      	beq.n	401eb0 <xTaskResumeAll+0x134>
                            if( xTaskIncrementTick() != pdFALSE )
  401ea6:	47a8      	blx	r5
  401ea8:	2800      	cmp	r0, #0
  401eaa:	d0fa      	beq.n	401ea2 <xTaskResumeAll+0x126>
                                xYieldPending = pdTRUE;
  401eac:	603e      	str	r6, [r7, #0]
  401eae:	e7f8      	b.n	401ea2 <xTaskResumeAll+0x126>
                        xPendedTicks = 0;
  401eb0:	2200      	movs	r2, #0
  401eb2:	4b14      	ldr	r3, [pc, #80]	; (401f04 <xTaskResumeAll+0x188>)
  401eb4:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
  401eb6:	4b15      	ldr	r3, [pc, #84]	; (401f0c <xTaskResumeAll+0x190>)
  401eb8:	681b      	ldr	r3, [r3, #0]
  401eba:	b17b      	cbz	r3, 401edc <xTaskResumeAll+0x160>
                    taskYIELD_IF_USING_PREEMPTION();
  401ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ec0:	4b13      	ldr	r3, [pc, #76]	; (401f10 <xTaskResumeAll+0x194>)
  401ec2:	601a      	str	r2, [r3, #0]
  401ec4:	f3bf 8f4f 	dsb	sy
  401ec8:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
  401ecc:	2401      	movs	r4, #1
  401ece:	e000      	b.n	401ed2 <xTaskResumeAll+0x156>
    BaseType_t xAlreadyYielded = pdFALSE;
  401ed0:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
  401ed2:	4b10      	ldr	r3, [pc, #64]	; (401f14 <xTaskResumeAll+0x198>)
  401ed4:	4798      	blx	r3
}
  401ed6:	4620      	mov	r0, r4
  401ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
  401edc:	2400      	movs	r4, #0
  401ede:	e7f8      	b.n	401ed2 <xTaskResumeAll+0x156>
  401ee0:	20000b44 	.word	0x20000b44
  401ee4:	00400775 	.word	0x00400775
  401ee8:	20000b3c 	.word	0x20000b3c
  401eec:	20000b88 	.word	0x20000b88
  401ef0:	20000b4c 	.word	0x20000b4c
  401ef4:	20000a9c 	.word	0x20000a9c
  401ef8:	00408514 	.word	0x00408514
  401efc:	00403429 	.word	0x00403429
  401f00:	004015d5 	.word	0x004015d5
  401f04:	20000b84 	.word	0x20000b84
  401f08:	00401bc1 	.word	0x00401bc1
  401f0c:	20000bcc 	.word	0x20000bcc
  401f10:	e000ed04 	.word	0xe000ed04
  401f14:	004007bd 	.word	0x004007bd
  401f18:	20000a90 	.word	0x20000a90

00401f1c <vTaskDelay>:
    {
  401f1c:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
  401f1e:	b160      	cbz	r0, 401f3a <vTaskDelay+0x1e>
  401f20:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
  401f22:	4b0d      	ldr	r3, [pc, #52]	; (401f58 <vTaskDelay+0x3c>)
  401f24:	681b      	ldr	r3, [r3, #0]
  401f26:	b98b      	cbnz	r3, 401f4c <vTaskDelay+0x30>
            vTaskSuspendAll();
  401f28:	4b0c      	ldr	r3, [pc, #48]	; (401f5c <vTaskDelay+0x40>)
  401f2a:	4798      	blx	r3
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401f2c:	2100      	movs	r1, #0
  401f2e:	4620      	mov	r0, r4
  401f30:	4b0b      	ldr	r3, [pc, #44]	; (401f60 <vTaskDelay+0x44>)
  401f32:	4798      	blx	r3
            xAlreadyYielded = xTaskResumeAll();
  401f34:	4b0b      	ldr	r3, [pc, #44]	; (401f64 <vTaskDelay+0x48>)
  401f36:	4798      	blx	r3
        if( xAlreadyYielded == pdFALSE )
  401f38:	b938      	cbnz	r0, 401f4a <vTaskDelay+0x2e>
            portYIELD_WITHIN_API();
  401f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f3e:	4b0a      	ldr	r3, [pc, #40]	; (401f68 <vTaskDelay+0x4c>)
  401f40:	601a      	str	r2, [r3, #0]
  401f42:	f3bf 8f4f 	dsb	sy
  401f46:	f3bf 8f6f 	isb	sy
  401f4a:	bd10      	pop	{r4, pc}
            configASSERT( uxSchedulerSuspended == 0 );
  401f4c:	f240 5149 	movw	r1, #1353	; 0x549
  401f50:	4806      	ldr	r0, [pc, #24]	; (401f6c <vTaskDelay+0x50>)
  401f52:	4b07      	ldr	r3, [pc, #28]	; (401f70 <vTaskDelay+0x54>)
  401f54:	4798      	blx	r3
  401f56:	e7e7      	b.n	401f28 <vTaskDelay+0xc>
  401f58:	20000b44 	.word	0x20000b44
  401f5c:	00401ba5 	.word	0x00401ba5
  401f60:	0040167d 	.word	0x0040167d
  401f64:	00401d7d 	.word	0x00401d7d
  401f68:	e000ed04 	.word	0xe000ed04
  401f6c:	00408514 	.word	0x00408514
  401f70:	00403429 	.word	0x00403429

00401f74 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401f74:	4b2b      	ldr	r3, [pc, #172]	; (402024 <vTaskSwitchContext+0xb0>)
  401f76:	681b      	ldr	r3, [r3, #0]
  401f78:	2b00      	cmp	r3, #0
  401f7a:	d134      	bne.n	401fe6 <vTaskSwitchContext+0x72>
{
  401f7c:	b510      	push	{r4, lr}
        xYieldPending = pdFALSE;
  401f7e:	2200      	movs	r2, #0
  401f80:	4b29      	ldr	r3, [pc, #164]	; (402028 <vTaskSwitchContext+0xb4>)
  401f82:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
  401f84:	4b29      	ldr	r3, [pc, #164]	; (40202c <vTaskSwitchContext+0xb8>)
  401f86:	681b      	ldr	r3, [r3, #0]
  401f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f8a:	681a      	ldr	r2, [r3, #0]
  401f8c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401f90:	d02d      	beq.n	401fee <vTaskSwitchContext+0x7a>
  401f92:	4b26      	ldr	r3, [pc, #152]	; (40202c <vTaskSwitchContext+0xb8>)
  401f94:	6818      	ldr	r0, [r3, #0]
  401f96:	6819      	ldr	r1, [r3, #0]
  401f98:	3134      	adds	r1, #52	; 0x34
  401f9a:	4b25      	ldr	r3, [pc, #148]	; (402030 <vTaskSwitchContext+0xbc>)
  401f9c:	4798      	blx	r3
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401f9e:	4b25      	ldr	r3, [pc, #148]	; (402034 <vTaskSwitchContext+0xc0>)
  401fa0:	681c      	ldr	r4, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  401fa2:	fab4 f484 	clz	r4, r4
  401fa6:	b2e4      	uxtb	r4, r4
  401fa8:	f1c4 041f 	rsb	r4, r4, #31
  401fac:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401fb0:	009b      	lsls	r3, r3, #2
  401fb2:	4a21      	ldr	r2, [pc, #132]	; (402038 <vTaskSwitchContext+0xc4>)
  401fb4:	58d3      	ldr	r3, [r2, r3]
  401fb6:	b33b      	cbz	r3, 402008 <vTaskSwitchContext+0x94>
  401fb8:	4b1f      	ldr	r3, [pc, #124]	; (402038 <vTaskSwitchContext+0xc4>)
  401fba:	00a2      	lsls	r2, r4, #2
  401fbc:	1911      	adds	r1, r2, r4
  401fbe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401fc2:	6848      	ldr	r0, [r1, #4]
  401fc4:	6840      	ldr	r0, [r0, #4]
  401fc6:	6048      	str	r0, [r1, #4]
  401fc8:	4422      	add	r2, r4
  401fca:	460b      	mov	r3, r1
  401fcc:	3308      	adds	r3, #8
  401fce:	4298      	cmp	r0, r3
  401fd0:	d020      	beq.n	402014 <vTaskSwitchContext+0xa0>
  401fd2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401fd6:	4b18      	ldr	r3, [pc, #96]	; (402038 <vTaskSwitchContext+0xc4>)
  401fd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401fdc:	6863      	ldr	r3, [r4, #4]
  401fde:	68da      	ldr	r2, [r3, #12]
  401fe0:	4b12      	ldr	r3, [pc, #72]	; (40202c <vTaskSwitchContext+0xb8>)
  401fe2:	601a      	str	r2, [r3, #0]
  401fe4:	bd10      	pop	{r4, pc}
        xYieldPending = pdTRUE;
  401fe6:	2201      	movs	r2, #1
  401fe8:	4b0f      	ldr	r3, [pc, #60]	; (402028 <vTaskSwitchContext+0xb4>)
  401fea:	601a      	str	r2, [r3, #0]
  401fec:	4770      	bx	lr
        taskCHECK_FOR_STACK_OVERFLOW();
  401fee:	685a      	ldr	r2, [r3, #4]
  401ff0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401ff4:	d1cd      	bne.n	401f92 <vTaskSwitchContext+0x1e>
  401ff6:	689a      	ldr	r2, [r3, #8]
  401ff8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401ffc:	d1c9      	bne.n	401f92 <vTaskSwitchContext+0x1e>
  401ffe:	68db      	ldr	r3, [r3, #12]
  402000:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402004:	d1c5      	bne.n	401f92 <vTaskSwitchContext+0x1e>
  402006:	e7ca      	b.n	401f9e <vTaskSwitchContext+0x2a>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  402008:	f640 4102 	movw	r1, #3074	; 0xc02
  40200c:	480b      	ldr	r0, [pc, #44]	; (40203c <vTaskSwitchContext+0xc8>)
  40200e:	4b0c      	ldr	r3, [pc, #48]	; (402040 <vTaskSwitchContext+0xcc>)
  402010:	4798      	blx	r3
  402012:	e7d1      	b.n	401fb8 <vTaskSwitchContext+0x44>
  402014:	6841      	ldr	r1, [r0, #4]
  402016:	4613      	mov	r3, r2
  402018:	4a07      	ldr	r2, [pc, #28]	; (402038 <vTaskSwitchContext+0xc4>)
  40201a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40201e:	6059      	str	r1, [r3, #4]
  402020:	e7d7      	b.n	401fd2 <vTaskSwitchContext+0x5e>
  402022:	bf00      	nop
  402024:	20000b44 	.word	0x20000b44
  402028:	20000bcc 	.word	0x20000bcc
  40202c:	20000a90 	.word	0x20000a90
  402030:	00403469 	.word	0x00403469
  402034:	20000b4c 	.word	0x20000b4c
  402038:	20000a9c 	.word	0x20000a9c
  40203c:	00408514 	.word	0x00408514
  402040:	00403429 	.word	0x00403429

00402044 <vTaskPlaceOnEventList>:
{
  402044:	b538      	push	{r3, r4, r5, lr}
  402046:	460c      	mov	r4, r1
    configASSERT( pxEventList );
  402048:	4605      	mov	r5, r0
  40204a:	b150      	cbz	r0, 402062 <vTaskPlaceOnEventList+0x1e>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40204c:	4b08      	ldr	r3, [pc, #32]	; (402070 <vTaskPlaceOnEventList+0x2c>)
  40204e:	6819      	ldr	r1, [r3, #0]
  402050:	3118      	adds	r1, #24
  402052:	4628      	mov	r0, r5
  402054:	4b07      	ldr	r3, [pc, #28]	; (402074 <vTaskPlaceOnEventList+0x30>)
  402056:	4798      	blx	r3
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  402058:	2101      	movs	r1, #1
  40205a:	4620      	mov	r0, r4
  40205c:	4b06      	ldr	r3, [pc, #24]	; (402078 <vTaskPlaceOnEventList+0x34>)
  40205e:	4798      	blx	r3
  402060:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxEventList );
  402062:	f640 411c 	movw	r1, #3100	; 0xc1c
  402066:	4805      	ldr	r0, [pc, #20]	; (40207c <vTaskPlaceOnEventList+0x38>)
  402068:	4b05      	ldr	r3, [pc, #20]	; (402080 <vTaskPlaceOnEventList+0x3c>)
  40206a:	4798      	blx	r3
  40206c:	e7ee      	b.n	40204c <vTaskPlaceOnEventList+0x8>
  40206e:	bf00      	nop
  402070:	20000a90 	.word	0x20000a90
  402074:	00400649 	.word	0x00400649
  402078:	0040167d 	.word	0x0040167d
  40207c:	00408514 	.word	0x00408514
  402080:	00403429 	.word	0x00403429

00402084 <vTaskPlaceOnEventListRestricted>:
    {
  402084:	b570      	push	{r4, r5, r6, lr}
  402086:	460e      	mov	r6, r1
  402088:	4615      	mov	r5, r2
        configASSERT( pxEventList );
  40208a:	4604      	mov	r4, r0
  40208c:	b1d8      	cbz	r0, 4020c6 <vTaskPlaceOnEventListRestricted+0x42>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40208e:	6862      	ldr	r2, [r4, #4]
  402090:	4b10      	ldr	r3, [pc, #64]	; (4020d4 <vTaskPlaceOnEventListRestricted+0x50>)
  402092:	6819      	ldr	r1, [r3, #0]
  402094:	61ca      	str	r2, [r1, #28]
  402096:	6819      	ldr	r1, [r3, #0]
  402098:	6890      	ldr	r0, [r2, #8]
  40209a:	6208      	str	r0, [r1, #32]
  40209c:	6890      	ldr	r0, [r2, #8]
  40209e:	6819      	ldr	r1, [r3, #0]
  4020a0:	3118      	adds	r1, #24
  4020a2:	6041      	str	r1, [r0, #4]
  4020a4:	6819      	ldr	r1, [r3, #0]
  4020a6:	3118      	adds	r1, #24
  4020a8:	6091      	str	r1, [r2, #8]
  4020aa:	681b      	ldr	r3, [r3, #0]
  4020ac:	629c      	str	r4, [r3, #40]	; 0x28
  4020ae:	6823      	ldr	r3, [r4, #0]
  4020b0:	3301      	adds	r3, #1
  4020b2:	6023      	str	r3, [r4, #0]
            xTicksToWait = portMAX_DELAY;
  4020b4:	2d00      	cmp	r5, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  4020b6:	4629      	mov	r1, r5
  4020b8:	bf0c      	ite	eq
  4020ba:	4630      	moveq	r0, r6
  4020bc:	f04f 30ff 	movne.w	r0, #4294967295
  4020c0:	4b05      	ldr	r3, [pc, #20]	; (4020d8 <vTaskPlaceOnEventListRestricted+0x54>)
  4020c2:	4798      	blx	r3
  4020c4:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxEventList );
  4020c6:	f640 4152 	movw	r1, #3154	; 0xc52
  4020ca:	4804      	ldr	r0, [pc, #16]	; (4020dc <vTaskPlaceOnEventListRestricted+0x58>)
  4020cc:	4b04      	ldr	r3, [pc, #16]	; (4020e0 <vTaskPlaceOnEventListRestricted+0x5c>)
  4020ce:	4798      	blx	r3
  4020d0:	e7dd      	b.n	40208e <vTaskPlaceOnEventListRestricted+0xa>
  4020d2:	bf00      	nop
  4020d4:	20000a90 	.word	0x20000a90
  4020d8:	0040167d 	.word	0x0040167d
  4020dc:	00408514 	.word	0x00408514
  4020e0:	00403429 	.word	0x00403429

004020e4 <xTaskRemoveFromEventList>:
{
  4020e4:	b538      	push	{r3, r4, r5, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4020e6:	68c3      	ldr	r3, [r0, #12]
  4020e8:	68dc      	ldr	r4, [r3, #12]
    configASSERT( pxUnblockedTCB );
  4020ea:	2c00      	cmp	r4, #0
  4020ec:	d051      	beq.n	402192 <xTaskRemoveFromEventList+0xae>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
  4020ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4020f0:	69e2      	ldr	r2, [r4, #28]
  4020f2:	6a21      	ldr	r1, [r4, #32]
  4020f4:	6091      	str	r1, [r2, #8]
  4020f6:	6a22      	ldr	r2, [r4, #32]
  4020f8:	69e1      	ldr	r1, [r4, #28]
  4020fa:	6051      	str	r1, [r2, #4]
  4020fc:	f104 0118 	add.w	r1, r4, #24
  402100:	685a      	ldr	r2, [r3, #4]
  402102:	428a      	cmp	r2, r1
  402104:	bf04      	itt	eq
  402106:	6a22      	ldreq	r2, [r4, #32]
  402108:	605a      	streq	r2, [r3, #4]
  40210a:	2200      	movs	r2, #0
  40210c:	62a2      	str	r2, [r4, #40]	; 0x28
  40210e:	681a      	ldr	r2, [r3, #0]
  402110:	3a01      	subs	r2, #1
  402112:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402114:	4b28      	ldr	r3, [pc, #160]	; (4021b8 <xTaskRemoveFromEventList+0xd4>)
  402116:	681b      	ldr	r3, [r3, #0]
  402118:	2b00      	cmp	r3, #0
  40211a:	d140      	bne.n	40219e <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
  40211c:	6963      	ldr	r3, [r4, #20]
  40211e:	68a2      	ldr	r2, [r4, #8]
  402120:	68e1      	ldr	r1, [r4, #12]
  402122:	6091      	str	r1, [r2, #8]
  402124:	68e2      	ldr	r2, [r4, #12]
  402126:	68a1      	ldr	r1, [r4, #8]
  402128:	6051      	str	r1, [r2, #4]
  40212a:	1d21      	adds	r1, r4, #4
  40212c:	685a      	ldr	r2, [r3, #4]
  40212e:	428a      	cmp	r2, r1
  402130:	bf04      	itt	eq
  402132:	68e2      	ldreq	r2, [r4, #12]
  402134:	605a      	streq	r2, [r3, #4]
  402136:	2200      	movs	r2, #0
  402138:	6162      	str	r2, [r4, #20]
  40213a:	681a      	ldr	r2, [r3, #0]
  40213c:	3a01      	subs	r2, #1
  40213e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
  402140:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402142:	481e      	ldr	r0, [pc, #120]	; (4021bc <xTaskRemoveFromEventList+0xd8>)
  402144:	6805      	ldr	r5, [r0, #0]
  402146:	2201      	movs	r2, #1
  402148:	409a      	lsls	r2, r3
  40214a:	432a      	orrs	r2, r5
  40214c:	6002      	str	r2, [r0, #0]
  40214e:	4a1c      	ldr	r2, [pc, #112]	; (4021c0 <xTaskRemoveFromEventList+0xdc>)
  402150:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402154:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402158:	685b      	ldr	r3, [r3, #4]
  40215a:	60a3      	str	r3, [r4, #8]
  40215c:	6898      	ldr	r0, [r3, #8]
  40215e:	60e0      	str	r0, [r4, #12]
  402160:	6898      	ldr	r0, [r3, #8]
  402162:	6041      	str	r1, [r0, #4]
  402164:	6099      	str	r1, [r3, #8]
  402166:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402168:	0083      	lsls	r3, r0, #2
  40216a:	1819      	adds	r1, r3, r0
  40216c:	0089      	lsls	r1, r1, #2
  40216e:	1855      	adds	r5, r2, r1
  402170:	6165      	str	r5, [r4, #20]
  402172:	5851      	ldr	r1, [r2, r1]
  402174:	3101      	adds	r1, #1
  402176:	4403      	add	r3, r0
  402178:	009b      	lsls	r3, r3, #2
  40217a:	50d1      	str	r1, [r2, r3]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40217c:	4b11      	ldr	r3, [pc, #68]	; (4021c4 <xTaskRemoveFromEventList+0xe0>)
  40217e:	681b      	ldr	r3, [r3, #0]
  402180:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402184:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
  402186:	bf83      	ittte	hi
  402188:	2001      	movhi	r0, #1
  40218a:	4b0f      	ldrhi	r3, [pc, #60]	; (4021c8 <xTaskRemoveFromEventList+0xe4>)
  40218c:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
  40218e:	2000      	movls	r0, #0
}
  402190:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxUnblockedTCB );
  402192:	f640 4182 	movw	r1, #3202	; 0xc82
  402196:	480d      	ldr	r0, [pc, #52]	; (4021cc <xTaskRemoveFromEventList+0xe8>)
  402198:	4b0d      	ldr	r3, [pc, #52]	; (4021d0 <xTaskRemoveFromEventList+0xec>)
  40219a:	4798      	blx	r3
  40219c:	e7a7      	b.n	4020ee <xTaskRemoveFromEventList+0xa>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40219e:	4b0d      	ldr	r3, [pc, #52]	; (4021d4 <xTaskRemoveFromEventList+0xf0>)
  4021a0:	685a      	ldr	r2, [r3, #4]
  4021a2:	61e2      	str	r2, [r4, #28]
  4021a4:	6890      	ldr	r0, [r2, #8]
  4021a6:	6220      	str	r0, [r4, #32]
  4021a8:	6890      	ldr	r0, [r2, #8]
  4021aa:	6041      	str	r1, [r0, #4]
  4021ac:	6091      	str	r1, [r2, #8]
  4021ae:	62a3      	str	r3, [r4, #40]	; 0x28
  4021b0:	681a      	ldr	r2, [r3, #0]
  4021b2:	3201      	adds	r2, #1
  4021b4:	601a      	str	r2, [r3, #0]
  4021b6:	e7e1      	b.n	40217c <xTaskRemoveFromEventList+0x98>
  4021b8:	20000b44 	.word	0x20000b44
  4021bc:	20000b4c 	.word	0x20000b4c
  4021c0:	20000a9c 	.word	0x20000a9c
  4021c4:	20000a90 	.word	0x20000a90
  4021c8:	20000bcc 	.word	0x20000bcc
  4021cc:	00408514 	.word	0x00408514
  4021d0:	00403429 	.word	0x00403429
  4021d4:	20000b88 	.word	0x20000b88

004021d8 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
  4021d8:	4b03      	ldr	r3, [pc, #12]	; (4021e8 <vTaskInternalSetTimeOutState+0x10>)
  4021da:	681b      	ldr	r3, [r3, #0]
  4021dc:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
  4021de:	4b03      	ldr	r3, [pc, #12]	; (4021ec <vTaskInternalSetTimeOutState+0x14>)
  4021e0:	681b      	ldr	r3, [r3, #0]
  4021e2:	6043      	str	r3, [r0, #4]
  4021e4:	4770      	bx	lr
  4021e6:	bf00      	nop
  4021e8:	20000b80 	.word	0x20000b80
  4021ec:	20000bc8 	.word	0x20000bc8

004021f0 <xTaskCheckForTimeOut>:
{
  4021f0:	b570      	push	{r4, r5, r6, lr}
  4021f2:	460c      	mov	r4, r1
    configASSERT( pxTimeOut );
  4021f4:	4605      	mov	r5, r0
  4021f6:	b1d0      	cbz	r0, 40222e <xTaskCheckForTimeOut+0x3e>
    configASSERT( pxTicksToWait );
  4021f8:	b1fc      	cbz	r4, 40223a <xTaskCheckForTimeOut+0x4a>
    taskENTER_CRITICAL();
  4021fa:	4b19      	ldr	r3, [pc, #100]	; (402260 <xTaskCheckForTimeOut+0x70>)
  4021fc:	4798      	blx	r3
        const TickType_t xConstTickCount = xTickCount;
  4021fe:	4b19      	ldr	r3, [pc, #100]	; (402264 <xTaskCheckForTimeOut+0x74>)
  402200:	681b      	ldr	r3, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
  402202:	6822      	ldr	r2, [r4, #0]
  402204:	f1b2 3fff 	cmp.w	r2, #4294967295
  402208:	d028      	beq.n	40225c <xTaskCheckForTimeOut+0x6c>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40220a:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40220c:	4816      	ldr	r0, [pc, #88]	; (402268 <xTaskCheckForTimeOut+0x78>)
  40220e:	6800      	ldr	r0, [r0, #0]
  402210:	682e      	ldr	r6, [r5, #0]
  402212:	4286      	cmp	r6, r0
  402214:	d001      	beq.n	40221a <xTaskCheckForTimeOut+0x2a>
  402216:	428b      	cmp	r3, r1
  402218:	d215      	bcs.n	402246 <xTaskCheckForTimeOut+0x56>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40221a:	1a5b      	subs	r3, r3, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  40221c:	4293      	cmp	r3, r2
  40221e:	d316      	bcc.n	40224e <xTaskCheckForTimeOut+0x5e>
            *pxTicksToWait = ( TickType_t ) 0;
  402220:	2300      	movs	r3, #0
  402222:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  402224:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
  402226:	4b11      	ldr	r3, [pc, #68]	; (40226c <xTaskCheckForTimeOut+0x7c>)
  402228:	4798      	blx	r3
}
  40222a:	4620      	mov	r0, r4
  40222c:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( pxTimeOut );
  40222e:	f640 41fd 	movw	r1, #3325	; 0xcfd
  402232:	480f      	ldr	r0, [pc, #60]	; (402270 <xTaskCheckForTimeOut+0x80>)
  402234:	4b0f      	ldr	r3, [pc, #60]	; (402274 <xTaskCheckForTimeOut+0x84>)
  402236:	4798      	blx	r3
  402238:	e7de      	b.n	4021f8 <xTaskCheckForTimeOut+0x8>
    configASSERT( pxTicksToWait );
  40223a:	f640 41fe 	movw	r1, #3326	; 0xcfe
  40223e:	480c      	ldr	r0, [pc, #48]	; (402270 <xTaskCheckForTimeOut+0x80>)
  402240:	4b0c      	ldr	r3, [pc, #48]	; (402274 <xTaskCheckForTimeOut+0x84>)
  402242:	4798      	blx	r3
  402244:	e7d9      	b.n	4021fa <xTaskCheckForTimeOut+0xa>
            *pxTicksToWait = ( TickType_t ) 0;
  402246:	2300      	movs	r3, #0
  402248:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  40224a:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
  40224c:	e7eb      	b.n	402226 <xTaskCheckForTimeOut+0x36>
            *pxTicksToWait -= xElapsedTime;
  40224e:	1ad3      	subs	r3, r2, r3
  402250:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
  402252:	4628      	mov	r0, r5
  402254:	4b08      	ldr	r3, [pc, #32]	; (402278 <xTaskCheckForTimeOut+0x88>)
  402256:	4798      	blx	r3
            xReturn = pdFALSE;
  402258:	2400      	movs	r4, #0
  40225a:	e7e4      	b.n	402226 <xTaskCheckForTimeOut+0x36>
                xReturn = pdFALSE;
  40225c:	2400      	movs	r4, #0
  40225e:	e7e2      	b.n	402226 <xTaskCheckForTimeOut+0x36>
  402260:	00400775 	.word	0x00400775
  402264:	20000bc8 	.word	0x20000bc8
  402268:	20000b80 	.word	0x20000b80
  40226c:	004007bd 	.word	0x004007bd
  402270:	00408514 	.word	0x00408514
  402274:	00403429 	.word	0x00403429
  402278:	004021d9 	.word	0x004021d9

0040227c <vTaskMissedYield>:
    xYieldPending = pdTRUE;
  40227c:	2201      	movs	r2, #1
  40227e:	4b01      	ldr	r3, [pc, #4]	; (402284 <vTaskMissedYield+0x8>)
  402280:	601a      	str	r2, [r3, #0]
  402282:	4770      	bx	lr
  402284:	20000bcc 	.word	0x20000bcc

00402288 <vTaskGetInfo>:
    {
  402288:	b570      	push	{r4, r5, r6, lr}
  40228a:	460c      	mov	r4, r1
  40228c:	4616      	mov	r6, r2
        pxTCB = prvGetTCBFromHandle( xTask );
  40228e:	4605      	mov	r5, r0
  402290:	b1d0      	cbz	r0, 4022c8 <vTaskGetInfo+0x40>
        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
  402292:	6025      	str	r5, [r4, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
  402294:	f105 0234 	add.w	r2, r5, #52	; 0x34
  402298:	6062      	str	r2, [r4, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
  40229a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40229c:	6122      	str	r2, [r4, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
  40229e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  4022a0:	61e2      	str	r2, [r4, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
  4022a2:	6caa      	ldr	r2, [r5, #72]	; 0x48
  4022a4:	60a2      	str	r2, [r4, #8]
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
  4022a6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4022a8:	6162      	str	r2, [r4, #20]
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
  4022aa:	2200      	movs	r2, #0
  4022ac:	61a2      	str	r2, [r4, #24]
        if( eState != eInvalid )
  4022ae:	2b05      	cmp	r3, #5
  4022b0:	d019      	beq.n	4022e6 <vTaskGetInfo+0x5e>
            if( pxTCB == pxCurrentTCB )
  4022b2:	4a17      	ldr	r2, [pc, #92]	; (402310 <vTaskGetInfo+0x88>)
  4022b4:	6812      	ldr	r2, [r2, #0]
  4022b6:	4295      	cmp	r5, r2
  4022b8:	d009      	beq.n	4022ce <vTaskGetInfo+0x46>
                pxTaskStatus->eCurrentState = eState;
  4022ba:	7323      	strb	r3, [r4, #12]
                        if( eState == eSuspended )
  4022bc:	2b03      	cmp	r3, #3
  4022be:	d009      	beq.n	4022d4 <vTaskGetInfo+0x4c>
        if( xGetFreeStackSpace != pdFALSE )
  4022c0:	b9b6      	cbnz	r6, 4022f0 <vTaskGetInfo+0x68>
            pxTaskStatus->usStackHighWaterMark = 0;
  4022c2:	2300      	movs	r3, #0
  4022c4:	8423      	strh	r3, [r4, #32]
  4022c6:	bd70      	pop	{r4, r5, r6, pc}
        pxTCB = prvGetTCBFromHandle( xTask );
  4022c8:	4a11      	ldr	r2, [pc, #68]	; (402310 <vTaskGetInfo+0x88>)
  4022ca:	6815      	ldr	r5, [r2, #0]
  4022cc:	e7e1      	b.n	402292 <vTaskGetInfo+0xa>
                pxTaskStatus->eCurrentState = eRunning;
  4022ce:	2300      	movs	r3, #0
  4022d0:	7323      	strb	r3, [r4, #12]
  4022d2:	e7f5      	b.n	4022c0 <vTaskGetInfo+0x38>
                            vTaskSuspendAll();
  4022d4:	4b0f      	ldr	r3, [pc, #60]	; (402314 <vTaskGetInfo+0x8c>)
  4022d6:	4798      	blx	r3
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4022d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4022da:	b10b      	cbz	r3, 4022e0 <vTaskGetInfo+0x58>
                                    pxTaskStatus->eCurrentState = eBlocked;
  4022dc:	2302      	movs	r3, #2
  4022de:	7323      	strb	r3, [r4, #12]
                            ( void ) xTaskResumeAll();
  4022e0:	4b0d      	ldr	r3, [pc, #52]	; (402318 <vTaskGetInfo+0x90>)
  4022e2:	4798      	blx	r3
  4022e4:	e7ec      	b.n	4022c0 <vTaskGetInfo+0x38>
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
  4022e6:	4628      	mov	r0, r5
  4022e8:	4b0c      	ldr	r3, [pc, #48]	; (40231c <vTaskGetInfo+0x94>)
  4022ea:	4798      	blx	r3
  4022ec:	7320      	strb	r0, [r4, #12]
  4022ee:	e7e7      	b.n	4022c0 <vTaskGetInfo+0x38>
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
  4022f0:	6b28      	ldr	r0, [r5, #48]	; 0x30
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  4022f2:	7803      	ldrb	r3, [r0, #0]
  4022f4:	2ba5      	cmp	r3, #165	; 0xa5
  4022f6:	d108      	bne.n	40230a <vTaskGetInfo+0x82>
  4022f8:	1c43      	adds	r3, r0, #1
  4022fa:	1a19      	subs	r1, r3, r0
  4022fc:	f813 2b01 	ldrb.w	r2, [r3], #1
  402300:	2aa5      	cmp	r2, #165	; 0xa5
  402302:	d0fa      	beq.n	4022fa <vTaskGetInfo+0x72>
        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
  402304:	0889      	lsrs	r1, r1, #2
        return ( configSTACK_DEPTH_TYPE ) ulCount;
  402306:	8421      	strh	r1, [r4, #32]
  402308:	bd70      	pop	{r4, r5, r6, pc}
        uint32_t ulCount = 0U;
  40230a:	2100      	movs	r1, #0
  40230c:	e7fa      	b.n	402304 <vTaskGetInfo+0x7c>
  40230e:	bf00      	nop
  402310:	20000a90 	.word	0x20000a90
  402314:	00401ba5 	.word	0x00401ba5
  402318:	00401d7d 	.word	0x00401d7d
  40231c:	00401a75 	.word	0x00401a75

00402320 <prvListTasksWithinSingleList>:
    {
  402320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402324:	b083      	sub	sp, #12
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  402326:	680b      	ldr	r3, [r1, #0]
  402328:	b34b      	cbz	r3, 40237e <prvListTasksWithinSingleList+0x5e>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40232a:	684b      	ldr	r3, [r1, #4]
  40232c:	685b      	ldr	r3, [r3, #4]
  40232e:	604b      	str	r3, [r1, #4]
  402330:	f101 0808 	add.w	r8, r1, #8
  402334:	4543      	cmp	r3, r8
  402336:	bf04      	itt	eq
  402338:	68cb      	ldreq	r3, [r1, #12]
  40233a:	604b      	streq	r3, [r1, #4]
  40233c:	9201      	str	r2, [sp, #4]
  40233e:	460c      	mov	r4, r1
  402340:	684b      	ldr	r3, [r1, #4]
  402342:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  402346:	4605      	mov	r5, r0
        UBaseType_t uxTask = 0;
  402348:	2700      	movs	r7, #0
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
  40234a:	f04f 0a01 	mov.w	sl, #1
  40234e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 402384 <prvListTasksWithinSingleList+0x64>
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  402352:	6863      	ldr	r3, [r4, #4]
  402354:	685b      	ldr	r3, [r3, #4]
  402356:	6063      	str	r3, [r4, #4]
  402358:	4598      	cmp	r8, r3
  40235a:	bf04      	itt	eq
  40235c:	68e3      	ldreq	r3, [r4, #12]
  40235e:	6063      	streq	r3, [r4, #4]
  402360:	6863      	ldr	r3, [r4, #4]
  402362:	68de      	ldr	r6, [r3, #12]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
  402364:	9b01      	ldr	r3, [sp, #4]
  402366:	4652      	mov	r2, sl
  402368:	4629      	mov	r1, r5
  40236a:	4630      	mov	r0, r6
  40236c:	47c8      	blx	r9
                uxTask++;
  40236e:	3701      	adds	r7, #1
  402370:	3524      	adds	r5, #36	; 0x24
            } while( pxNextTCB != pxFirstTCB );
  402372:	45b3      	cmp	fp, r6
  402374:	d1ed      	bne.n	402352 <prvListTasksWithinSingleList+0x32>
    }
  402376:	4638      	mov	r0, r7
  402378:	b003      	add	sp, #12
  40237a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        UBaseType_t uxTask = 0;
  40237e:	2700      	movs	r7, #0
        return uxTask;
  402380:	e7f9      	b.n	402376 <prvListTasksWithinSingleList+0x56>
  402382:	bf00      	nop
  402384:	00402289 	.word	0x00402289

00402388 <uxTaskGetSystemState>:
    {
  402388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40238c:	4607      	mov	r7, r0
  40238e:	460c      	mov	r4, r1
  402390:	4616      	mov	r6, r2
        vTaskSuspendAll();
  402392:	4b24      	ldr	r3, [pc, #144]	; (402424 <uxTaskGetSystemState+0x9c>)
  402394:	4798      	blx	r3
            if( uxArraySize >= uxCurrentNumberOfTasks )
  402396:	4b24      	ldr	r3, [pc, #144]	; (402428 <uxTaskGetSystemState+0xa0>)
  402398:	681b      	ldr	r3, [r3, #0]
  40239a:	42a3      	cmp	r3, r4
  40239c:	d83f      	bhi.n	40241e <uxTaskGetSystemState+0x96>
  40239e:	4b23      	ldr	r3, [pc, #140]	; (40242c <uxTaskGetSystemState+0xa4>)
  4023a0:	f103 058c 	add.w	r5, r3, #140	; 0x8c
  4023a4:	f1a3 0814 	sub.w	r8, r3, #20
  4023a8:	2400      	movs	r4, #0
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
  4023aa:	f04f 0a01 	mov.w	sl, #1
  4023ae:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402434 <uxTaskGetSystemState+0xac>
  4023b2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4023b6:	4652      	mov	r2, sl
  4023b8:	4629      	mov	r1, r5
  4023ba:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  4023be:	47c8      	blx	r9
  4023c0:	4404      	add	r4, r0
  4023c2:	3d14      	subs	r5, #20
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023c4:	4545      	cmp	r5, r8
  4023c6:	d1f4      	bne.n	4023b2 <uxTaskGetSystemState+0x2a>
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
  4023c8:	4b19      	ldr	r3, [pc, #100]	; (402430 <uxTaskGetSystemState+0xa8>)
  4023ca:	6819      	ldr	r1, [r3, #0]
  4023cc:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4023d0:	2202      	movs	r2, #2
  4023d2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  4023d6:	4d17      	ldr	r5, [pc, #92]	; (402434 <uxTaskGetSystemState+0xac>)
  4023d8:	47a8      	blx	r5
  4023da:	4404      	add	r4, r0
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
  4023dc:	4b16      	ldr	r3, [pc, #88]	; (402438 <uxTaskGetSystemState+0xb0>)
  4023de:	6819      	ldr	r1, [r3, #0]
  4023e0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4023e4:	2202      	movs	r2, #2
  4023e6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  4023ea:	47a8      	blx	r5
  4023ec:	4404      	add	r4, r0
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
  4023ee:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4023f2:	2204      	movs	r2, #4
  4023f4:	4911      	ldr	r1, [pc, #68]	; (40243c <uxTaskGetSystemState+0xb4>)
  4023f6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  4023fa:	47a8      	blx	r5
  4023fc:	4404      	add	r4, r0
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
  4023fe:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  402402:	2203      	movs	r2, #3
  402404:	490e      	ldr	r1, [pc, #56]	; (402440 <uxTaskGetSystemState+0xb8>)
  402406:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  40240a:	47a8      	blx	r5
  40240c:	4404      	add	r4, r0
                        if( pulTotalRunTime != NULL )
  40240e:	b10e      	cbz	r6, 402414 <uxTaskGetSystemState+0x8c>
                            *pulTotalRunTime = 0;
  402410:	2300      	movs	r3, #0
  402412:	6033      	str	r3, [r6, #0]
        ( void ) xTaskResumeAll();
  402414:	4b0b      	ldr	r3, [pc, #44]	; (402444 <uxTaskGetSystemState+0xbc>)
  402416:	4798      	blx	r3
    }
  402418:	4620      	mov	r0, r4
  40241a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
  40241e:	2400      	movs	r4, #0
  402420:	e7f8      	b.n	402414 <uxTaskGetSystemState+0x8c>
  402422:	bf00      	nop
  402424:	00401ba5 	.word	0x00401ba5
  402428:	20000b3c 	.word	0x20000b3c
  40242c:	20000a9c 	.word	0x20000a9c
  402430:	20000a94 	.word	0x20000a94
  402434:	00402321 	.word	0x00402321
  402438:	20000a98 	.word	0x20000a98
  40243c:	20000bb4 	.word	0x20000bb4
  402440:	20000ba0 	.word	0x20000ba0
  402444:	00401d7d 	.word	0x00401d7d

00402448 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
  402448:	4b05      	ldr	r3, [pc, #20]	; (402460 <xTaskGetSchedulerState+0x18>)
  40244a:	681b      	ldr	r3, [r3, #0]
  40244c:	b133      	cbz	r3, 40245c <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40244e:	4b05      	ldr	r3, [pc, #20]	; (402464 <xTaskGetSchedulerState+0x1c>)
  402450:	681b      	ldr	r3, [r3, #0]
                xReturn = taskSCHEDULER_SUSPENDED;
  402452:	2b00      	cmp	r3, #0
  402454:	bf0c      	ite	eq
  402456:	2002      	moveq	r0, #2
  402458:	2000      	movne	r0, #0
  40245a:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
  40245c:	2001      	movs	r0, #1
    }
  40245e:	4770      	bx	lr
  402460:	20000b9c 	.word	0x20000b9c
  402464:	20000b44 	.word	0x20000b44

00402468 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
  402468:	2800      	cmp	r0, #0
  40246a:	d04d      	beq.n	402508 <xTaskPriorityDisinherit+0xa0>
    {
  40246c:	b570      	push	{r4, r5, r6, lr}
  40246e:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
  402470:	4b27      	ldr	r3, [pc, #156]	; (402510 <xTaskPriorityDisinherit+0xa8>)
  402472:	681b      	ldr	r3, [r3, #0]
  402474:	4298      	cmp	r0, r3
  402476:	d004      	beq.n	402482 <xTaskPriorityDisinherit+0x1a>
  402478:	f241 014f 	movw	r1, #4175	; 0x104f
  40247c:	4825      	ldr	r0, [pc, #148]	; (402514 <xTaskPriorityDisinherit+0xac>)
  40247e:	4b26      	ldr	r3, [pc, #152]	; (402518 <xTaskPriorityDisinherit+0xb0>)
  402480:	4798      	blx	r3
            configASSERT( pxTCB->uxMutexesHeld );
  402482:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402484:	b14b      	cbz	r3, 40249a <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
  402486:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402488:	3b01      	subs	r3, #1
  40248a:	6563      	str	r3, [r4, #84]	; 0x54
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40248c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40248e:	6d22      	ldr	r2, [r4, #80]	; 0x50
  402490:	4291      	cmp	r1, r2
  402492:	d03b      	beq.n	40250c <xTaskPriorityDisinherit+0xa4>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402494:	b13b      	cbz	r3, 4024a6 <xTaskPriorityDisinherit+0x3e>
        BaseType_t xReturn = pdFALSE;
  402496:	2000      	movs	r0, #0
    }
  402498:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB->uxMutexesHeld );
  40249a:	f241 0150 	movw	r1, #4176	; 0x1050
  40249e:	481d      	ldr	r0, [pc, #116]	; (402514 <xTaskPriorityDisinherit+0xac>)
  4024a0:	4b1d      	ldr	r3, [pc, #116]	; (402518 <xTaskPriorityDisinherit+0xb0>)
  4024a2:	4798      	blx	r3
  4024a4:	e7ef      	b.n	402486 <xTaskPriorityDisinherit+0x1e>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4024a6:	1d25      	adds	r5, r4, #4
  4024a8:	4628      	mov	r0, r5
  4024aa:	4b1c      	ldr	r3, [pc, #112]	; (40251c <xTaskPriorityDisinherit+0xb4>)
  4024ac:	4798      	blx	r3
  4024ae:	b938      	cbnz	r0, 4024c0 <xTaskPriorityDisinherit+0x58>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
  4024b0:	491b      	ldr	r1, [pc, #108]	; (402520 <xTaskPriorityDisinherit+0xb8>)
  4024b2:	680b      	ldr	r3, [r1, #0]
  4024b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4024b6:	2201      	movs	r2, #1
  4024b8:	4082      	lsls	r2, r0
  4024ba:	ea23 0302 	bic.w	r3, r3, r2
  4024be:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
  4024c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4024c2:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4024c4:	f1c3 0208 	rsb	r2, r3, #8
  4024c8:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
  4024ca:	4915      	ldr	r1, [pc, #84]	; (402520 <xTaskPriorityDisinherit+0xb8>)
  4024cc:	680e      	ldr	r6, [r1, #0]
  4024ce:	2001      	movs	r0, #1
  4024d0:	fa00 f203 	lsl.w	r2, r0, r3
  4024d4:	4332      	orrs	r2, r6
  4024d6:	600a      	str	r2, [r1, #0]
  4024d8:	4a12      	ldr	r2, [pc, #72]	; (402524 <xTaskPriorityDisinherit+0xbc>)
  4024da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4024e2:	685b      	ldr	r3, [r3, #4]
  4024e4:	60a3      	str	r3, [r4, #8]
  4024e6:	6899      	ldr	r1, [r3, #8]
  4024e8:	60e1      	str	r1, [r4, #12]
  4024ea:	6899      	ldr	r1, [r3, #8]
  4024ec:	604d      	str	r5, [r1, #4]
  4024ee:	609d      	str	r5, [r3, #8]
  4024f0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  4024f2:	00ab      	lsls	r3, r5, #2
  4024f4:	1959      	adds	r1, r3, r5
  4024f6:	0089      	lsls	r1, r1, #2
  4024f8:	1856      	adds	r6, r2, r1
  4024fa:	6166      	str	r6, [r4, #20]
  4024fc:	5851      	ldr	r1, [r2, r1]
  4024fe:	4401      	add	r1, r0
  402500:	442b      	add	r3, r5
  402502:	009b      	lsls	r3, r3, #2
  402504:	50d1      	str	r1, [r2, r3]
  402506:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xReturn = pdFALSE;
  402508:	2000      	movs	r0, #0
  40250a:	4770      	bx	lr
  40250c:	2000      	movs	r0, #0
  40250e:	bd70      	pop	{r4, r5, r6, pc}
  402510:	20000a90 	.word	0x20000a90
  402514:	00408514 	.word	0x00408514
  402518:	00403429 	.word	0x00403429
  40251c:	0040067d 	.word	0x0040067d
  402520:	20000b4c 	.word	0x20000b4c
  402524:	20000a9c 	.word	0x20000a9c

00402528 <vTaskList>:
    {
  402528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40252c:	b085      	sub	sp, #20
  40252e:	4604      	mov	r4, r0
        *pcWriteBuffer = ( char ) 0x00;
  402530:	2300      	movs	r3, #0
  402532:	7003      	strb	r3, [r0, #0]
        uxArraySize = uxCurrentNumberOfTasks;
  402534:	4b33      	ldr	r3, [pc, #204]	; (402604 <vTaskList+0xdc>)
  402536:	681d      	ldr	r5, [r3, #0]
        pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
  402538:	6818      	ldr	r0, [r3, #0]
  40253a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  40253e:	0080      	lsls	r0, r0, #2
  402540:	4b31      	ldr	r3, [pc, #196]	; (402608 <vTaskList+0xe0>)
  402542:	4798      	blx	r3
        if( pxTaskStatusArray != NULL )
  402544:	9003      	str	r0, [sp, #12]
  402546:	2800      	cmp	r0, #0
  402548:	d059      	beq.n	4025fe <vTaskList+0xd6>
  40254a:	4606      	mov	r6, r0
            uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
  40254c:	2200      	movs	r2, #0
  40254e:	4629      	mov	r1, r5
  402550:	4b2e      	ldr	r3, [pc, #184]	; (40260c <vTaskList+0xe4>)
  402552:	4798      	blx	r3
            for( x = 0; x < uxArraySize; x++ )
  402554:	4682      	mov	sl, r0
  402556:	2800      	cmp	r0, #0
  402558:	d04e      	beq.n	4025f8 <vTaskList+0xd0>
  40255a:	f04f 0800 	mov.w	r8, #0
                        cStatus = ( char ) 0x00;
  40255e:	46c3      	mov	fp, r8
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402560:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 402620 <vTaskList+0xf8>
  402564:	e036      	b.n	4025d4 <vTaskList+0xac>
                        cStatus = tskREADY_CHAR;
  402566:	2352      	movs	r3, #82	; 0x52
  402568:	9302      	str	r3, [sp, #8]
  40256a:	e00d      	b.n	402588 <vTaskList+0x60>
                        cStatus = tskBLOCKED_CHAR;
  40256c:	2342      	movs	r3, #66	; 0x42
  40256e:	9302      	str	r3, [sp, #8]
                        break;
  402570:	e00a      	b.n	402588 <vTaskList+0x60>
                        cStatus = tskSUSPENDED_CHAR;
  402572:	2353      	movs	r3, #83	; 0x53
  402574:	9302      	str	r3, [sp, #8]
                        break;
  402576:	e007      	b.n	402588 <vTaskList+0x60>
                        cStatus = tskDELETED_CHAR;
  402578:	2344      	movs	r3, #68	; 0x44
  40257a:	9302      	str	r3, [sp, #8]
                        break;
  40257c:	e004      	b.n	402588 <vTaskList+0x60>
                        cStatus = ( char ) 0x00;
  40257e:	f8cd b008 	str.w	fp, [sp, #8]
                        break;
  402582:	e001      	b.n	402588 <vTaskList+0x60>
                        cStatus = tskRUNNING_CHAR;
  402584:	2358      	movs	r3, #88	; 0x58
  402586:	9302      	str	r3, [sp, #8]
        strcpy( pcBuffer, pcTaskName );
  402588:	6869      	ldr	r1, [r5, #4]
  40258a:	4620      	mov	r0, r4
  40258c:	4b20      	ldr	r3, [pc, #128]	; (402610 <vTaskList+0xe8>)
  40258e:	4798      	blx	r3
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402590:	4620      	mov	r0, r4
  402592:	47c8      	blx	r9
  402594:	2812      	cmp	r0, #18
  402596:	d808      	bhi.n	4025aa <vTaskList+0x82>
  402598:	4420      	add	r0, r4
  40259a:	f104 0213 	add.w	r2, r4, #19
            pcBuffer[ x ] = ' ';
  40259e:	2320      	movs	r3, #32
  4025a0:	f800 3b01 	strb.w	r3, [r0], #1
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  4025a4:	4290      	cmp	r0, r2
  4025a6:	d1fb      	bne.n	4025a0 <vTaskList+0x78>
  4025a8:	2013      	movs	r0, #19
        pcBuffer[ x ] = ( char ) 0x00;
  4025aa:	1827      	adds	r7, r4, r0
  4025ac:	f804 b000 	strb.w	fp, [r4, r0]
                sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
  4025b0:	692b      	ldr	r3, [r5, #16]
  4025b2:	68aa      	ldr	r2, [r5, #8]
  4025b4:	9201      	str	r2, [sp, #4]
  4025b6:	8c2a      	ldrh	r2, [r5, #32]
  4025b8:	9200      	str	r2, [sp, #0]
  4025ba:	9a02      	ldr	r2, [sp, #8]
  4025bc:	4915      	ldr	r1, [pc, #84]	; (402614 <vTaskList+0xec>)
  4025be:	4638      	mov	r0, r7
  4025c0:	4c15      	ldr	r4, [pc, #84]	; (402618 <vTaskList+0xf0>)
  4025c2:	47a0      	blx	r4
                pcWriteBuffer += strlen( pcWriteBuffer );                                                                                                                                                                                                /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
  4025c4:	4638      	mov	r0, r7
  4025c6:	47c8      	blx	r9
  4025c8:	183c      	adds	r4, r7, r0
            for( x = 0; x < uxArraySize; x++ )
  4025ca:	f108 0801 	add.w	r8, r8, #1
  4025ce:	3624      	adds	r6, #36	; 0x24
  4025d0:	45c2      	cmp	sl, r8
  4025d2:	d011      	beq.n	4025f8 <vTaskList+0xd0>
  4025d4:	4635      	mov	r5, r6
                switch( pxTaskStatusArray[ x ].eCurrentState )
  4025d6:	7b33      	ldrb	r3, [r6, #12]
  4025d8:	2b04      	cmp	r3, #4
  4025da:	d8d0      	bhi.n	40257e <vTaskList+0x56>
  4025dc:	a201      	add	r2, pc, #4	; (adr r2, 4025e4 <vTaskList+0xbc>)
  4025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4025e2:	bf00      	nop
  4025e4:	00402585 	.word	0x00402585
  4025e8:	00402567 	.word	0x00402567
  4025ec:	0040256d 	.word	0x0040256d
  4025f0:	00402573 	.word	0x00402573
  4025f4:	00402579 	.word	0x00402579
            vPortFree( pxTaskStatusArray );
  4025f8:	9803      	ldr	r0, [sp, #12]
  4025fa:	4b08      	ldr	r3, [pc, #32]	; (40261c <vTaskList+0xf4>)
  4025fc:	4798      	blx	r3
    }
  4025fe:	b005      	add	sp, #20
  402600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402604:	20000b3c 	.word	0x20000b3c
  402608:	00400a91 	.word	0x00400a91
  40260c:	00402389 	.word	0x00402389
  402610:	00403789 	.word	0x00403789
  402614:	0040852c 	.word	0x0040852c
  402618:	0040373d 	.word	0x0040373d
  40261c:	00400b85 	.word	0x00400b85
  402620:	00403881 	.word	0x00403881

00402624 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
  402624:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402626:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402628:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
  40262a:	4291      	cmp	r1, r2
  40262c:	d80c      	bhi.n	402648 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40262e:	1ad2      	subs	r2, r2, r3
  402630:	6983      	ldr	r3, [r0, #24]
  402632:	429a      	cmp	r2, r3
  402634:	d301      	bcc.n	40263a <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
  402636:	2001      	movs	r0, #1
  402638:	bd08      	pop	{r3, pc}
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40263a:	1d01      	adds	r1, r0, #4
  40263c:	4b09      	ldr	r3, [pc, #36]	; (402664 <prvInsertTimerInActiveList+0x40>)
  40263e:	6818      	ldr	r0, [r3, #0]
  402640:	4b09      	ldr	r3, [pc, #36]	; (402668 <prvInsertTimerInActiveList+0x44>)
  402642:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  402644:	2000      	movs	r0, #0
  402646:	bd08      	pop	{r3, pc}
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402648:	429a      	cmp	r2, r3
  40264a:	d201      	bcs.n	402650 <prvInsertTimerInActiveList+0x2c>
  40264c:	4299      	cmp	r1, r3
  40264e:	d206      	bcs.n	40265e <prvInsertTimerInActiveList+0x3a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402650:	1d01      	adds	r1, r0, #4
  402652:	4b06      	ldr	r3, [pc, #24]	; (40266c <prvInsertTimerInActiveList+0x48>)
  402654:	6818      	ldr	r0, [r3, #0]
  402656:	4b04      	ldr	r3, [pc, #16]	; (402668 <prvInsertTimerInActiveList+0x44>)
  402658:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  40265a:	2000      	movs	r0, #0
  40265c:	bd08      	pop	{r3, pc}
                xProcessTimerNow = pdTRUE;
  40265e:	2001      	movs	r0, #1
            }
        }

        return xProcessTimerNow;
    }
  402660:	bd08      	pop	{r3, pc}
  402662:	bf00      	nop
  402664:	20000bd4 	.word	0x20000bd4
  402668:	00400649 	.word	0x00400649
  40266c:	20000bd0 	.word	0x20000bd0

00402670 <prvReloadTimer>:
    {
  402670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402672:	4604      	mov	r4, r0
  402674:	460d      	mov	r5, r1
  402676:	4617      	mov	r7, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  402678:	4e07      	ldr	r6, [pc, #28]	; (402698 <prvReloadTimer+0x28>)
  40267a:	e004      	b.n	402686 <prvReloadTimer+0x16>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
  40267c:	69a3      	ldr	r3, [r4, #24]
  40267e:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402680:	6a23      	ldr	r3, [r4, #32]
  402682:	4620      	mov	r0, r4
  402684:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  402686:	69a1      	ldr	r1, [r4, #24]
  402688:	462b      	mov	r3, r5
  40268a:	463a      	mov	r2, r7
  40268c:	4429      	add	r1, r5
  40268e:	4620      	mov	r0, r4
  402690:	47b0      	blx	r6
  402692:	2800      	cmp	r0, #0
  402694:	d1f2      	bne.n	40267c <prvReloadTimer+0xc>
    }
  402696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402698:	00402625 	.word	0x00402625

0040269c <prvProcessExpiredTimer>:
    {
  40269c:	b570      	push	{r4, r5, r6, lr}
  40269e:	4605      	mov	r5, r0
  4026a0:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4026a2:	4b0d      	ldr	r3, [pc, #52]	; (4026d8 <prvProcessExpiredTimer+0x3c>)
  4026a4:	681b      	ldr	r3, [r3, #0]
  4026a6:	68db      	ldr	r3, [r3, #12]
  4026a8:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4026aa:	1d20      	adds	r0, r4, #4
  4026ac:	4b0b      	ldr	r3, [pc, #44]	; (4026dc <prvProcessExpiredTimer+0x40>)
  4026ae:	4798      	blx	r3
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  4026b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  4026b4:	f013 0f04 	tst.w	r3, #4
  4026b8:	d107      	bne.n	4026ca <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  4026ba:	f023 0301 	bic.w	r3, r3, #1
  4026be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4026c2:	6a23      	ldr	r3, [r4, #32]
  4026c4:	4620      	mov	r0, r4
  4026c6:	4798      	blx	r3
  4026c8:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
  4026ca:	4632      	mov	r2, r6
  4026cc:	4629      	mov	r1, r5
  4026ce:	4620      	mov	r0, r4
  4026d0:	4b03      	ldr	r3, [pc, #12]	; (4026e0 <prvProcessExpiredTimer+0x44>)
  4026d2:	4798      	blx	r3
  4026d4:	e7f5      	b.n	4026c2 <prvProcessExpiredTimer+0x26>
  4026d6:	bf00      	nop
  4026d8:	20000bd0 	.word	0x20000bd0
  4026dc:	0040067d 	.word	0x0040067d
  4026e0:	00402671 	.word	0x00402671

004026e4 <prvSampleTimeNow>:
    {
  4026e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4026e8:	4680      	mov	r8, r0
        xTimeNow = xTaskGetTickCount();
  4026ea:	4b14      	ldr	r3, [pc, #80]	; (40273c <prvSampleTimeNow+0x58>)
  4026ec:	4798      	blx	r3
  4026ee:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
  4026f0:	4b13      	ldr	r3, [pc, #76]	; (402740 <prvSampleTimeNow+0x5c>)
  4026f2:	681b      	ldr	r3, [r3, #0]
  4026f4:	4298      	cmp	r0, r3
  4026f6:	d307      	bcc.n	402708 <prvSampleTimeNow+0x24>
            *pxTimerListsWereSwitched = pdFALSE;
  4026f8:	2300      	movs	r3, #0
  4026fa:	f8c8 3000 	str.w	r3, [r8]
        xLastTime = xTimeNow;
  4026fe:	4b10      	ldr	r3, [pc, #64]	; (402740 <prvSampleTimeNow+0x5c>)
  402700:	601c      	str	r4, [r3, #0]
    }
  402702:	4620      	mov	r0, r4
  402704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402708:	4b0e      	ldr	r3, [pc, #56]	; (402744 <prvSampleTimeNow+0x60>)
  40270a:	681b      	ldr	r3, [r3, #0]
  40270c:	681a      	ldr	r2, [r3, #0]
  40270e:	b15a      	cbz	r2, 402728 <prvSampleTimeNow+0x44>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  402710:	f04f 37ff 	mov.w	r7, #4294967295
  402714:	4e0c      	ldr	r6, [pc, #48]	; (402748 <prvSampleTimeNow+0x64>)
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402716:	4d0b      	ldr	r5, [pc, #44]	; (402744 <prvSampleTimeNow+0x60>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402718:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  40271a:	4639      	mov	r1, r7
  40271c:	6818      	ldr	r0, [r3, #0]
  40271e:	47b0      	blx	r6
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402720:	682b      	ldr	r3, [r5, #0]
  402722:	681a      	ldr	r2, [r3, #0]
  402724:	2a00      	cmp	r2, #0
  402726:	d1f7      	bne.n	402718 <prvSampleTimeNow+0x34>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
  402728:	4a08      	ldr	r2, [pc, #32]	; (40274c <prvSampleTimeNow+0x68>)
  40272a:	6810      	ldr	r0, [r2, #0]
  40272c:	4905      	ldr	r1, [pc, #20]	; (402744 <prvSampleTimeNow+0x60>)
  40272e:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
  402730:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
  402732:	2301      	movs	r3, #1
  402734:	f8c8 3000 	str.w	r3, [r8]
  402738:	e7e1      	b.n	4026fe <prvSampleTimeNow+0x1a>
  40273a:	bf00      	nop
  40273c:	00401bb5 	.word	0x00401bb5
  402740:	20000c00 	.word	0x20000c00
  402744:	20000bd0 	.word	0x20000bd0
  402748:	0040269d 	.word	0x0040269d
  40274c:	20000bd4 	.word	0x20000bd4

00402750 <prvTimerTask>:
    {
  402750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402754:	b087      	sub	sp, #28
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402756:	4e5e      	ldr	r6, [pc, #376]	; (4028d0 <prvTimerTask+0x180>)
                ( void ) xTaskResumeAll();
  402758:	4f5e      	ldr	r7, [pc, #376]	; (4028d4 <prvTimerTask+0x184>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40275a:	4d5f      	ldr	r5, [pc, #380]	; (4028d8 <prvTimerTask+0x188>)
                        portYIELD_WITHIN_API();
  40275c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 402908 <prvTimerTask+0x1b8>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402760:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 40290c <prvTimerTask+0x1bc>
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402764:	6833      	ldr	r3, [r6, #0]
  402766:	681a      	ldr	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
  402768:	b192      	cbz	r2, 402790 <prvTimerTask+0x40>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40276a:	68db      	ldr	r3, [r3, #12]
  40276c:	f8d3 a000 	ldr.w	sl, [r3]
        vTaskSuspendAll();
  402770:	4b5a      	ldr	r3, [pc, #360]	; (4028dc <prvTimerTask+0x18c>)
  402772:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402774:	a802      	add	r0, sp, #8
  402776:	4b5a      	ldr	r3, [pc, #360]	; (4028e0 <prvTimerTask+0x190>)
  402778:	4798      	blx	r3
  40277a:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  40277c:	9a02      	ldr	r2, [sp, #8]
  40277e:	bb42      	cbnz	r2, 4027d2 <prvTimerTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402780:	4550      	cmp	r0, sl
  402782:	d315      	bcc.n	4027b0 <prvTimerTask+0x60>
                    ( void ) xTaskResumeAll();
  402784:	47b8      	blx	r7
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  402786:	4621      	mov	r1, r4
  402788:	4650      	mov	r0, sl
  40278a:	4b56      	ldr	r3, [pc, #344]	; (4028e4 <prvTimerTask+0x194>)
  40278c:	4798      	blx	r3
  40278e:	e01e      	b.n	4027ce <prvTimerTask+0x7e>
        vTaskSuspendAll();
  402790:	4b52      	ldr	r3, [pc, #328]	; (4028dc <prvTimerTask+0x18c>)
  402792:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402794:	a802      	add	r0, sp, #8
  402796:	4b52      	ldr	r3, [pc, #328]	; (4028e0 <prvTimerTask+0x190>)
  402798:	4798      	blx	r3
  40279a:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  40279c:	9b02      	ldr	r3, [sp, #8]
  40279e:	b9c3      	cbnz	r3, 4027d2 <prvTimerTask+0x82>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4027a0:	4b51      	ldr	r3, [pc, #324]	; (4028e8 <prvTimerTask+0x198>)
  4027a2:	681b      	ldr	r3, [r3, #0]
  4027a4:	681a      	ldr	r2, [r3, #0]
  4027a6:	fab2 f282 	clz	r2, r2
  4027aa:	0952      	lsrs	r2, r2, #5
            xNextExpireTime = ( TickType_t ) 0U;
  4027ac:	f04f 0a00 	mov.w	sl, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4027b0:	ebaa 0104 	sub.w	r1, sl, r4
  4027b4:	6828      	ldr	r0, [r5, #0]
  4027b6:	4b4d      	ldr	r3, [pc, #308]	; (4028ec <prvTimerTask+0x19c>)
  4027b8:	4798      	blx	r3
                    if( xTaskResumeAll() == pdFALSE )
  4027ba:	47b8      	blx	r7
  4027bc:	b938      	cbnz	r0, 4027ce <prvTimerTask+0x7e>
                        portYIELD_WITHIN_API();
  4027be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4027c2:	f8c9 3000 	str.w	r3, [r9]
  4027c6:	f3bf 8f4f 	dsb	sy
  4027ca:	f3bf 8f6f 	isb	sy
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4027ce:	4c48      	ldr	r4, [pc, #288]	; (4028f0 <prvTimerTask+0x1a0>)
  4027d0:	e008      	b.n	4027e4 <prvTimerTask+0x94>
                ( void ) xTaskResumeAll();
  4027d2:	47b8      	blx	r7
  4027d4:	e7fb      	b.n	4027ce <prvTimerTask+0x7e>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4027d6:	9905      	ldr	r1, [sp, #20]
  4027d8:	9804      	ldr	r0, [sp, #16]
  4027da:	9b03      	ldr	r3, [sp, #12]
  4027dc:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4027de:	9b02      	ldr	r3, [sp, #8]
  4027e0:	2b00      	cmp	r3, #0
  4027e2:	da08      	bge.n	4027f6 <prvTimerTask+0xa6>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4027e4:	2200      	movs	r2, #0
  4027e6:	a902      	add	r1, sp, #8
  4027e8:	6828      	ldr	r0, [r5, #0]
  4027ea:	47a0      	blx	r4
  4027ec:	2800      	cmp	r0, #0
  4027ee:	d0b9      	beq.n	402764 <prvTimerTask+0x14>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4027f0:	9b02      	ldr	r3, [sp, #8]
  4027f2:	2b00      	cmp	r3, #0
  4027f4:	dbef      	blt.n	4027d6 <prvTimerTask+0x86>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4027f6:	f8dd a010 	ldr.w	sl, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  4027fa:	f8da 3014 	ldr.w	r3, [sl, #20]
  4027fe:	b113      	cbz	r3, 402806 <prvTimerTask+0xb6>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402800:	f10a 0004 	add.w	r0, sl, #4
  402804:	47c0      	blx	r8
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402806:	a801      	add	r0, sp, #4
  402808:	4b35      	ldr	r3, [pc, #212]	; (4028e0 <prvTimerTask+0x190>)
  40280a:	4798      	blx	r3
  40280c:	4683      	mov	fp, r0
                switch( xMessage.xMessageID )
  40280e:	9b02      	ldr	r3, [sp, #8]
  402810:	3b01      	subs	r3, #1
  402812:	2b08      	cmp	r3, #8
  402814:	d8e6      	bhi.n	4027e4 <prvTimerTask+0x94>
  402816:	e8df f003 	tbb	[pc, r3]
  40281a:	0505      	.short	0x0505
  40281c:	054d342d 	.word	0x054d342d
  402820:	2d05      	.short	0x2d05
  402822:	34          	.byte	0x34
  402823:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  402824:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
  402828:	f043 0301 	orr.w	r3, r3, #1
  40282c:	f88a 3028 	strb.w	r3, [sl, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  402830:	9903      	ldr	r1, [sp, #12]
  402832:	f8da 0018 	ldr.w	r0, [sl, #24]
  402836:	460b      	mov	r3, r1
  402838:	465a      	mov	r2, fp
  40283a:	4401      	add	r1, r0
  40283c:	4650      	mov	r0, sl
  40283e:	4c2d      	ldr	r4, [pc, #180]	; (4028f4 <prvTimerTask+0x1a4>)
  402840:	47a0      	blx	r4
  402842:	2800      	cmp	r0, #0
  402844:	d0c3      	beq.n	4027ce <prvTimerTask+0x7e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  402846:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
  40284a:	f013 0f04 	tst.w	r3, #4
  40284e:	d108      	bne.n	402862 <prvTimerTask+0x112>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  402850:	f023 0301 	bic.w	r3, r3, #1
  402854:	f88a 3028 	strb.w	r3, [sl, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402858:	f8da 3020 	ldr.w	r3, [sl, #32]
  40285c:	4650      	mov	r0, sl
  40285e:	4798      	blx	r3
  402860:	e7b5      	b.n	4027ce <prvTimerTask+0x7e>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
  402862:	f8da 3018 	ldr.w	r3, [sl, #24]
  402866:	465a      	mov	r2, fp
  402868:	9903      	ldr	r1, [sp, #12]
  40286a:	4419      	add	r1, r3
  40286c:	4650      	mov	r0, sl
  40286e:	4b22      	ldr	r3, [pc, #136]	; (4028f8 <prvTimerTask+0x1a8>)
  402870:	4798      	blx	r3
  402872:	e7f1      	b.n	402858 <prvTimerTask+0x108>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  402874:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
  402878:	f023 0301 	bic.w	r3, r3, #1
  40287c:	f88a 3028 	strb.w	r3, [sl, #40]	; 0x28
  402880:	e7a5      	b.n	4027ce <prvTimerTask+0x7e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  402882:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
  402886:	f043 0301 	orr.w	r3, r3, #1
  40288a:	f88a 3028 	strb.w	r3, [sl, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40288e:	9b03      	ldr	r3, [sp, #12]
  402890:	f8ca 3018 	str.w	r3, [sl, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402894:	b143      	cbz	r3, 4028a8 <prvTimerTask+0x158>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402896:	f8da 1018 	ldr.w	r1, [sl, #24]
  40289a:	465b      	mov	r3, fp
  40289c:	465a      	mov	r2, fp
  40289e:	4459      	add	r1, fp
  4028a0:	4650      	mov	r0, sl
  4028a2:	4c14      	ldr	r4, [pc, #80]	; (4028f4 <prvTimerTask+0x1a4>)
  4028a4:	47a0      	blx	r4
  4028a6:	e792      	b.n	4027ce <prvTimerTask+0x7e>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4028a8:	f240 3159 	movw	r1, #857	; 0x359
  4028ac:	4813      	ldr	r0, [pc, #76]	; (4028fc <prvTimerTask+0x1ac>)
  4028ae:	4b14      	ldr	r3, [pc, #80]	; (402900 <prvTimerTask+0x1b0>)
  4028b0:	4798      	blx	r3
  4028b2:	e7f0      	b.n	402896 <prvTimerTask+0x146>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  4028b4:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
  4028b8:	f013 0f02 	tst.w	r3, #2
  4028bc:	d004      	beq.n	4028c8 <prvTimerTask+0x178>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  4028be:	f023 0301 	bic.w	r3, r3, #1
  4028c2:	f88a 3028 	strb.w	r3, [sl, #40]	; 0x28
  4028c6:	e782      	b.n	4027ce <prvTimerTask+0x7e>
                                    vPortFree( pxTimer );
  4028c8:	4650      	mov	r0, sl
  4028ca:	4b0e      	ldr	r3, [pc, #56]	; (402904 <prvTimerTask+0x1b4>)
  4028cc:	4798      	blx	r3
  4028ce:	e77e      	b.n	4027ce <prvTimerTask+0x7e>
  4028d0:	20000bd0 	.word	0x20000bd0
  4028d4:	00401d7d 	.word	0x00401d7d
  4028d8:	20000c04 	.word	0x20000c04
  4028dc:	00401ba5 	.word	0x00401ba5
  4028e0:	004026e5 	.word	0x004026e5
  4028e4:	0040269d 	.word	0x0040269d
  4028e8:	20000bd4 	.word	0x20000bd4
  4028ec:	00401575 	.word	0x00401575
  4028f0:	0040135d 	.word	0x0040135d
  4028f4:	00402625 	.word	0x00402625
  4028f8:	00402671 	.word	0x00402671
  4028fc:	0040854c 	.word	0x0040854c
  402900:	00403429 	.word	0x00403429
  402904:	00400b85 	.word	0x00400b85
  402908:	e000ed04 	.word	0xe000ed04
  40290c:	0040067d 	.word	0x0040067d

00402910 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
  402910:	b570      	push	{r4, r5, r6, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
  402912:	4b10      	ldr	r3, [pc, #64]	; (402954 <prvCheckForValidListAndQueue+0x44>)
  402914:	4798      	blx	r3
        {
            if( xTimerQueue == NULL )
  402916:	4b10      	ldr	r3, [pc, #64]	; (402958 <prvCheckForValidListAndQueue+0x48>)
  402918:	681b      	ldr	r3, [r3, #0]
  40291a:	b113      	cbz	r3, 402922 <prvCheckForValidListAndQueue+0x12>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
  40291c:	4b0f      	ldr	r3, [pc, #60]	; (40295c <prvCheckForValidListAndQueue+0x4c>)
  40291e:	4798      	blx	r3
  402920:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &xActiveTimerList1 );
  402922:	4d0f      	ldr	r5, [pc, #60]	; (402960 <prvCheckForValidListAndQueue+0x50>)
  402924:	4628      	mov	r0, r5
  402926:	4e0f      	ldr	r6, [pc, #60]	; (402964 <prvCheckForValidListAndQueue+0x54>)
  402928:	47b0      	blx	r6
                vListInitialise( &xActiveTimerList2 );
  40292a:	4c0f      	ldr	r4, [pc, #60]	; (402968 <prvCheckForValidListAndQueue+0x58>)
  40292c:	4620      	mov	r0, r4
  40292e:	47b0      	blx	r6
                pxCurrentTimerList = &xActiveTimerList1;
  402930:	4b0e      	ldr	r3, [pc, #56]	; (40296c <prvCheckForValidListAndQueue+0x5c>)
  402932:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
  402934:	4b0e      	ldr	r3, [pc, #56]	; (402970 <prvCheckForValidListAndQueue+0x60>)
  402936:	601c      	str	r4, [r3, #0]
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402938:	2200      	movs	r2, #0
  40293a:	2110      	movs	r1, #16
  40293c:	2005      	movs	r0, #5
  40293e:	4b0d      	ldr	r3, [pc, #52]	; (402974 <prvCheckForValidListAndQueue+0x64>)
  402940:	4798      	blx	r3
  402942:	4b05      	ldr	r3, [pc, #20]	; (402958 <prvCheckForValidListAndQueue+0x48>)
  402944:	6018      	str	r0, [r3, #0]
                        if( xTimerQueue != NULL )
  402946:	2800      	cmp	r0, #0
  402948:	d0e8      	beq.n	40291c <prvCheckForValidListAndQueue+0xc>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  40294a:	490b      	ldr	r1, [pc, #44]	; (402978 <prvCheckForValidListAndQueue+0x68>)
  40294c:	4b0b      	ldr	r3, [pc, #44]	; (40297c <prvCheckForValidListAndQueue+0x6c>)
  40294e:	4798      	blx	r3
  402950:	e7e4      	b.n	40291c <prvCheckForValidListAndQueue+0xc>
  402952:	bf00      	nop
  402954:	00400775 	.word	0x00400775
  402958:	20000c04 	.word	0x20000c04
  40295c:	004007bd 	.word	0x004007bd
  402960:	20000bd8 	.word	0x20000bd8
  402964:	00400615 	.word	0x00400615
  402968:	20000bec 	.word	0x20000bec
  40296c:	20000bd0 	.word	0x20000bd0
  402970:	20000bd4 	.word	0x20000bd4
  402974:	00400fe5 	.word	0x00400fe5
  402978:	00408544 	.word	0x00408544
  40297c:	00401515 	.word	0x00401515

00402980 <xTimerCreateTimerTask>:
    {
  402980:	b510      	push	{r4, lr}
  402982:	b082      	sub	sp, #8
        prvCheckForValidListAndQueue();
  402984:	4b0d      	ldr	r3, [pc, #52]	; (4029bc <xTimerCreateTimerTask+0x3c>)
  402986:	4798      	blx	r3
        if( xTimerQueue != NULL )
  402988:	4b0d      	ldr	r3, [pc, #52]	; (4029c0 <xTimerCreateTimerTask+0x40>)
  40298a:	681b      	ldr	r3, [r3, #0]
  40298c:	b17b      	cbz	r3, 4029ae <xTimerCreateTimerTask+0x2e>
                    xReturn = xTaskCreate( prvTimerTask,
  40298e:	4b0d      	ldr	r3, [pc, #52]	; (4029c4 <xTimerCreateTimerTask+0x44>)
  402990:	9301      	str	r3, [sp, #4]
  402992:	2307      	movs	r3, #7
  402994:	9300      	str	r3, [sp, #0]
  402996:	2300      	movs	r3, #0
  402998:	f44f 7282 	mov.w	r2, #260	; 0x104
  40299c:	490a      	ldr	r1, [pc, #40]	; (4029c8 <xTimerCreateTimerTask+0x48>)
  40299e:	480b      	ldr	r0, [pc, #44]	; (4029cc <xTimerCreateTimerTask+0x4c>)
  4029a0:	4c0b      	ldr	r4, [pc, #44]	; (4029d0 <xTimerCreateTimerTask+0x50>)
  4029a2:	47a0      	blx	r4
        configASSERT( xReturn );
  4029a4:	4603      	mov	r3, r0
  4029a6:	b110      	cbz	r0, 4029ae <xTimerCreateTimerTask+0x2e>
    }
  4029a8:	4618      	mov	r0, r3
  4029aa:	b002      	add	sp, #8
  4029ac:	bd10      	pop	{r4, pc}
        configASSERT( xReturn );
  4029ae:	f240 1119 	movw	r1, #281	; 0x119
  4029b2:	4808      	ldr	r0, [pc, #32]	; (4029d4 <xTimerCreateTimerTask+0x54>)
  4029b4:	4b08      	ldr	r3, [pc, #32]	; (4029d8 <xTimerCreateTimerTask+0x58>)
  4029b6:	4798      	blx	r3
  4029b8:	2300      	movs	r3, #0
        return xReturn;
  4029ba:	e7f5      	b.n	4029a8 <xTimerCreateTimerTask+0x28>
  4029bc:	00402911 	.word	0x00402911
  4029c0:	20000c04 	.word	0x20000c04
  4029c4:	20000c08 	.word	0x20000c08
  4029c8:	00408568 	.word	0x00408568
  4029cc:	00402751 	.word	0x00402751
  4029d0:	00401739 	.word	0x00401739
  4029d4:	0040854c 	.word	0x0040854c
  4029d8:	00403429 	.word	0x00403429

004029dc <setLED>:
}

// sets given LED (arg1) to given value (arg2)
uint8_t setLED(uint8_t uiLedNum, uint8_t uiLedValue)
{
	ioport_set_pin_level(decLED[uiLedNum], uiLedValue);
  4029dc:	4b0c      	ldr	r3, [pc, #48]	; (402a10 <setLED+0x34>)
  4029de:	5c1a      	ldrb	r2, [r3, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4029e0:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4029e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4029e6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4029ea:	025b      	lsls	r3, r3, #9
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  4029ec:	b941      	cbnz	r1, 402a00 <setLED+0x24>
	return 1U << (pin & 0x1F);
  4029ee:	f002 021f 	and.w	r2, r2, #31
  4029f2:	2101      	movs	r1, #1
  4029f4:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4029f8:	635a      	str	r2, [r3, #52]	; 0x34
	
	return SUCCESS; // dummy return
}
  4029fa:	4b06      	ldr	r3, [pc, #24]	; (402a14 <setLED+0x38>)
  4029fc:	7818      	ldrb	r0, [r3, #0]
  4029fe:	4770      	bx	lr
	return 1U << (pin & 0x1F);
  402a00:	f002 021f 	and.w	r2, r2, #31
  402a04:	2101      	movs	r1, #1
  402a06:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402a0a:	631a      	str	r2, [r3, #48]	; 0x30
  402a0c:	e7f5      	b.n	4029fa <setLED+0x1e>
  402a0e:	bf00      	nop
  402a10:	20000018 	.word	0x20000018
  402a14:	20000014 	.word	0x20000014

00402a18 <toggleLED>:

// 
uint8_t toggleLED(uint8_t uiLedNum)
{
	ioport_set_pin_level(decLED[uiLedNum], !ioport_get_pin_level(decLED[uiLedNum]));
  402a18:	4b09      	ldr	r3, [pc, #36]	; (402a40 <toggleLED+0x28>)
  402a1a:	5c1a      	ldrb	r2, [r3, r0]
	return pin >> 5;
  402a1c:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402a1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402a22:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402a26:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402a28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  402a2a:	f002 011f 	and.w	r1, r2, #31
  402a2e:	2201      	movs	r2, #1
  402a30:	408a      	lsls	r2, r1
	if (level) {
  402a32:	4210      	tst	r0, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402a34:	bf0c      	ite	eq
  402a36:	631a      	streq	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402a38:	635a      	strne	r2, [r3, #52]	; 0x34

	return SUCCESS; // dummy return
}
  402a3a:	4b02      	ldr	r3, [pc, #8]	; (402a44 <toggleLED+0x2c>)
  402a3c:	7818      	ldrb	r0, [r3, #0]
  402a3e:	4770      	bx	lr
  402a40:	20000018 	.word	0x20000018
  402a44:	20000014 	.word	0x20000014

00402a48 <taskHeartbeat>:
// heartbeat task created up to four times: 
//     *    1 onboard LED uncontrolled
//     *	3 extension board LEDs controlled by button functions
void 
taskHeartbeat (void* pvParameters)
{
  402a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Block for 500ms. */
	const TickType_t xDelay = 500 / portTICK_PERIOD_MS;	// SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ = 4MHz

	// casting sent parameter back to what it was originally
	const uint8_t* ledNum = (uint8_t*) pvParameters;
	const uint8_t led = *ledNum;
  402a4a:	7807      	ldrb	r7, [r0, #0]

	while(FOREVER)
	{	// actual task
		toggleLED(led);		// toggle LED state
  402a4c:	4e04      	ldr	r6, [pc, #16]	; (402a60 <taskHeartbeat+0x18>)
		vTaskDelay( xDelay );	// then wait 0.5 
  402a4e:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  402a52:	4c04      	ldr	r4, [pc, #16]	; (402a64 <taskHeartbeat+0x1c>)
		toggleLED(led);		// toggle LED state
  402a54:	4638      	mov	r0, r7
  402a56:	47b0      	blx	r6
		vTaskDelay( xDelay );	// then wait 0.5 
  402a58:	4628      	mov	r0, r5
  402a5a:	47a0      	blx	r4
  402a5c:	e7fa      	b.n	402a54 <taskHeartbeat+0xc>
  402a5e:	bf00      	nop
  402a60:	00402a19 	.word	0x00402a19
  402a64:	00401f1d 	.word	0x00401f1d

00402a68 <taskBlinkLED>:
// blinks target LED at the rate specified by the delay;
// delay is determined from message received from current system control task
// delay is bounded by min and max values
void 
taskBlinkLED (void* pvParameters)
{
  402a68:	b580      	push	{r7, lr}
  402a6a:	b082      	sub	sp, #8
	// casting sent parameter back to what it was originally
	struct DataBlinkLED data = *(struct DataBlinkLED*) pvParameters;
  402a6c:	6805      	ldr	r5, [r0, #0]
  402a6e:	f890 8004 	ldrb.w	r8, [r0, #4]
  402a72:	6884      	ldr	r4, [r0, #8]

	int message;

	while(FOREVER)
	{
		if (uxQueueMessagesWaiting(data.led_queue_handle))
  402a74:	4f09      	ldr	r7, [pc, #36]	; (402a9c <taskBlinkLED+0x34>)
		{			
			// retrieving message from mailbox
			xQueueReceive(data.led_queue_handle, &message, 0);
  402a76:	f8df 9030 	ldr.w	r9, [pc, #48]	; 402aa8 <taskBlinkLED+0x40>
			data.delay = message / portTICK_PERIOD_MS;
		}
		toggleLED(data.led_num);	// toggle LED state
  402a7a:	4e09      	ldr	r6, [pc, #36]	; (402aa0 <taskBlinkLED+0x38>)
  402a7c:	e004      	b.n	402a88 <taskBlinkLED+0x20>
  402a7e:	4640      	mov	r0, r8
  402a80:	47b0      	blx	r6
		vTaskDelay(data.delay);
  402a82:	4620      	mov	r0, r4
  402a84:	4b07      	ldr	r3, [pc, #28]	; (402aa4 <taskBlinkLED+0x3c>)
  402a86:	4798      	blx	r3
		if (uxQueueMessagesWaiting(data.led_queue_handle))
  402a88:	4628      	mov	r0, r5
  402a8a:	47b8      	blx	r7
  402a8c:	2800      	cmp	r0, #0
  402a8e:	d0f6      	beq.n	402a7e <taskBlinkLED+0x16>
			xQueueReceive(data.led_queue_handle, &message, 0);
  402a90:	2200      	movs	r2, #0
  402a92:	a901      	add	r1, sp, #4
  402a94:	4628      	mov	r0, r5
  402a96:	47c8      	blx	r9
			data.delay = message / portTICK_PERIOD_MS;
  402a98:	9c01      	ldr	r4, [sp, #4]
  402a9a:	e7f0      	b.n	402a7e <taskBlinkLED+0x16>
  402a9c:	004014e5 	.word	0x004014e5
  402aa0:	00402a19 	.word	0x00402a19
  402aa4:	00401f1d 	.word	0x00401f1d
  402aa8:	0040135d 	.word	0x0040135d

00402aac <taskUART_TX>:
}

//
void 
taskUART_TX (void* pvParameters)
{
  402aac:	b580      	push	{r7, lr}
  402aae:	b08e      	sub	sp, #56	; 0x38
	char					message[50];
	const struct UARTData	data = *(struct UARTData*) pvParameters;
  402ab0:	6806      	ldr	r6, [r0, #0]
	
	while (FOREVER)
	{	
		if (xQueueReceive(data.uart_tx_queue_handle, &message, portMAX_DELAY) == pdTRUE)
  402ab2:	4d09      	ldr	r5, [pc, #36]	; (402ad8 <taskUART_TX+0x2c>)
		{
			UARTPutStr(EDBG_UART, message, strlen(message));
  402ab4:	4f09      	ldr	r7, [pc, #36]	; (402adc <taskUART_TX+0x30>)
		if (xQueueReceive(data.uart_tx_queue_handle, &message, portMAX_DELAY) == pdTRUE)
  402ab6:	f04f 34ff 	mov.w	r4, #4294967295
  402aba:	4622      	mov	r2, r4
  402abc:	a901      	add	r1, sp, #4
  402abe:	4630      	mov	r0, r6
  402ac0:	47a8      	blx	r5
  402ac2:	2801      	cmp	r0, #1
  402ac4:	d1f9      	bne.n	402aba <taskUART_TX+0xe>
			UARTPutStr(EDBG_UART, message, strlen(message));
  402ac6:	a801      	add	r0, sp, #4
  402ac8:	4b05      	ldr	r3, [pc, #20]	; (402ae0 <taskUART_TX+0x34>)
  402aca:	4798      	blx	r3
  402acc:	b2c2      	uxtb	r2, r0
  402ace:	a901      	add	r1, sp, #4
  402ad0:	4638      	mov	r0, r7
  402ad2:	4b04      	ldr	r3, [pc, #16]	; (402ae4 <taskUART_TX+0x38>)
  402ad4:	4798      	blx	r3
  402ad6:	e7ee      	b.n	402ab6 <taskUART_TX+0xa>
  402ad8:	0040135d 	.word	0x0040135d
  402adc:	400e0600 	.word	0x400e0600
  402ae0:	00403881 	.word	0x00403881
  402ae4:	00402db9 	.word	0x00402db9

00402ae8 <taskUART_RX>:
}

//
void 
taskUART_RX (void* pvParameters)
{
  402ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402aec:	b083      	sub	sp, #12
	const struct UARTData data = *(struct UARTData*) pvParameters;
  402aee:	f8d0 8000 	ldr.w	r8, [r0]
  402af2:	6843      	ldr	r3, [r0, #4]
  402af4:	9301      	str	r3, [sp, #4]
	static int8_t cli_cmd_index = 0;
	static char  cli_command[INPUT_LENGTH] = "";
	
	while (FOREVER)
	{
		if (xQueueReceive(data.uart_rx_queue_handle, &rx_message, portMAX_DELAY) == pdTRUE)
  402af6:	f8df b108 	ldr.w	fp, [pc, #264]	; 402c00 <taskUART_RX+0x118>
  402afa:	e039      	b.n	402b70 <taskUART_RX+0x88>
		{			
			if (rx_message == '\r')
			{
				cli_command[cli_cmd_index] = '\0';
  402afc:	4b35      	ldr	r3, [pc, #212]	; (402bd4 <taskUART_RX+0xec>)
  402afe:	f993 2000 	ldrsb.w	r2, [r3]
  402b02:	2300      	movs	r3, #0
  402b04:	4934      	ldr	r1, [pc, #208]	; (402bd8 <taskUART_RX+0xf0>)
  402b06:	548b      	strb	r3, [r1, r2]
				
				strcpy(tx_message, "\r\n\0");
  402b08:	4934      	ldr	r1, [pc, #208]	; (402bdc <taskUART_RX+0xf4>)
  402b0a:	4a35      	ldr	r2, [pc, #212]	; (402be0 <taskUART_RX+0xf8>)
  402b0c:	6812      	ldr	r2, [r2, #0]
  402b0e:	800a      	strh	r2, [r1, #0]
  402b10:	0c12      	lsrs	r2, r2, #16
  402b12:	708a      	strb	r2, [r1, #2]
				xQueueSendToBack(data.uart_tx_queue_handle, (void*) &tx_message, (TickType_t) 10);
  402b14:	220a      	movs	r2, #10
  402b16:	4640      	mov	r0, r8
  402b18:	4c32      	ldr	r4, [pc, #200]	; (402be4 <taskUART_RX+0xfc>)
  402b1a:	47a0      	blx	r4
				
				do 
				{
					more_data = FreeRTOS_CLIProcessCommand(cli_command, output_message, OUTPUT_LENGTH);
  402b1c:	4c32      	ldr	r4, [pc, #200]	; (402be8 <taskUART_RX+0x100>)
  402b1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 402c04 <taskUART_RX+0x11c>
  402b22:	e015      	b.n	402b50 <taskUART_RX+0x68>
					
					while (snprintf(tx_message, INPUT_LENGTH - 1, output_message) > 0) 
					{
						strcpy(output_message, &output_message[strlen(tx_message)]);
  402b24:	4628      	mov	r0, r5
  402b26:	4b31      	ldr	r3, [pc, #196]	; (402bec <taskUART_RX+0x104>)
  402b28:	4798      	blx	r3
  402b2a:	1821      	adds	r1, r4, r0
  402b2c:	4620      	mov	r0, r4
  402b2e:	4b30      	ldr	r3, [pc, #192]	; (402bf0 <taskUART_RX+0x108>)
  402b30:	4798      	blx	r3
						xQueueSendToBack(data.uart_tx_queue_handle, (void*) &tx_message, (TickType_t) 10);
  402b32:	2300      	movs	r3, #0
  402b34:	220a      	movs	r2, #10
  402b36:	4629      	mov	r1, r5
  402b38:	4640      	mov	r0, r8
  402b3a:	4e2a      	ldr	r6, [pc, #168]	; (402be4 <taskUART_RX+0xfc>)
  402b3c:	47b0      	blx	r6
					while (snprintf(tx_message, INPUT_LENGTH - 1, output_message) > 0) 
  402b3e:	4622      	mov	r2, r4
  402b40:	2131      	movs	r1, #49	; 0x31
  402b42:	4628      	mov	r0, r5
  402b44:	47b8      	blx	r7
  402b46:	2800      	cmp	r0, #0
  402b48:	dcec      	bgt.n	402b24 <taskUART_RX+0x3c>
						
					};
					
				} while (more_data != pdFALSE);
  402b4a:	f1b9 0f00 	cmp.w	r9, #0
  402b4e:	d008      	beq.n	402b62 <taskUART_RX+0x7a>
					more_data = FreeRTOS_CLIProcessCommand(cli_command, output_message, OUTPUT_LENGTH);
  402b50:	f44f 7296 	mov.w	r2, #300	; 0x12c
  402b54:	4621      	mov	r1, r4
  402b56:	4820      	ldr	r0, [pc, #128]	; (402bd8 <taskUART_RX+0xf0>)
  402b58:	47d0      	blx	sl
  402b5a:	4681      	mov	r9, r0
					while (snprintf(tx_message, INPUT_LENGTH - 1, output_message) > 0) 
  402b5c:	4d1f      	ldr	r5, [pc, #124]	; (402bdc <taskUART_RX+0xf4>)
  402b5e:	4f25      	ldr	r7, [pc, #148]	; (402bf4 <taskUART_RX+0x10c>)
  402b60:	e7ed      	b.n	402b3e <taskUART_RX+0x56>
				
				cli_cmd_index = 0;
  402b62:	2100      	movs	r1, #0
  402b64:	4b1b      	ldr	r3, [pc, #108]	; (402bd4 <taskUART_RX+0xec>)
  402b66:	7019      	strb	r1, [r3, #0]
				memset(cli_command, 0x00, INPUT_LENGTH);
  402b68:	2232      	movs	r2, #50	; 0x32
  402b6a:	481b      	ldr	r0, [pc, #108]	; (402bd8 <taskUART_RX+0xf0>)
  402b6c:	4b22      	ldr	r3, [pc, #136]	; (402bf8 <taskUART_RX+0x110>)
  402b6e:	4798      	blx	r3
		if (xQueueReceive(data.uart_rx_queue_handle, &rx_message, portMAX_DELAY) == pdTRUE)
  402b70:	f04f 32ff 	mov.w	r2, #4294967295
  402b74:	4921      	ldr	r1, [pc, #132]	; (402bfc <taskUART_RX+0x114>)
  402b76:	9801      	ldr	r0, [sp, #4]
  402b78:	47d8      	blx	fp
  402b7a:	2801      	cmp	r0, #1
  402b7c:	d1f8      	bne.n	402b70 <taskUART_RX+0x88>
			if (rx_message == '\r')
  402b7e:	4b1f      	ldr	r3, [pc, #124]	; (402bfc <taskUART_RX+0x114>)
  402b80:	781b      	ldrb	r3, [r3, #0]
  402b82:	2b0d      	cmp	r3, #13
  402b84:	d0ba      	beq.n	402afc <taskUART_RX+0x14>
			}
			else if (rx_message == '\n')
  402b86:	2b0a      	cmp	r3, #10
  402b88:	d0f2      	beq.n	402b70 <taskUART_RX+0x88>
			{
					// do nothing
			}
			else if (rx_message == '\b')
  402b8a:	2b08      	cmp	r3, #8
  402b8c:	d015      	beq.n	402bba <taskUART_RX+0xd2>
					cli_command[cli_cmd_index] = '\0';
				}
			}
			else
			{
				if (cli_cmd_index < INPUT_LENGTH)
  402b8e:	4a11      	ldr	r2, [pc, #68]	; (402bd4 <taskUART_RX+0xec>)
  402b90:	f992 2000 	ldrsb.w	r2, [r2]
  402b94:	2a31      	cmp	r2, #49	; 0x31
  402b96:	dceb      	bgt.n	402b70 <taskUART_RX+0x88>
				{
					cli_command[cli_cmd_index] = rx_message;
  402b98:	490f      	ldr	r1, [pc, #60]	; (402bd8 <taskUART_RX+0xf0>)
  402b9a:	548b      	strb	r3, [r1, r2]
					++cli_cmd_index;
  402b9c:	3201      	adds	r2, #1
  402b9e:	4b0d      	ldr	r3, [pc, #52]	; (402bd4 <taskUART_RX+0xec>)
  402ba0:	701a      	strb	r2, [r3, #0]
					
					strcpy(tx_message, &rx_message);
  402ba2:	4c0e      	ldr	r4, [pc, #56]	; (402bdc <taskUART_RX+0xf4>)
  402ba4:	4915      	ldr	r1, [pc, #84]	; (402bfc <taskUART_RX+0x114>)
  402ba6:	4620      	mov	r0, r4
  402ba8:	4b11      	ldr	r3, [pc, #68]	; (402bf0 <taskUART_RX+0x108>)
  402baa:	4798      	blx	r3
					xQueueSendToBack(data.uart_tx_queue_handle, (void*) &tx_message, (TickType_t) 10);
  402bac:	2300      	movs	r3, #0
  402bae:	220a      	movs	r2, #10
  402bb0:	4621      	mov	r1, r4
  402bb2:	4640      	mov	r0, r8
  402bb4:	4c0b      	ldr	r4, [pc, #44]	; (402be4 <taskUART_RX+0xfc>)
  402bb6:	47a0      	blx	r4
  402bb8:	e7da      	b.n	402b70 <taskUART_RX+0x88>
				if (cli_cmd_index > 0)
  402bba:	4b06      	ldr	r3, [pc, #24]	; (402bd4 <taskUART_RX+0xec>)
  402bbc:	f993 3000 	ldrsb.w	r3, [r3]
  402bc0:	2b00      	cmp	r3, #0
  402bc2:	ddd5      	ble.n	402b70 <taskUART_RX+0x88>
					--cli_cmd_index;
  402bc4:	3b01      	subs	r3, #1
  402bc6:	b25b      	sxtb	r3, r3
  402bc8:	4a02      	ldr	r2, [pc, #8]	; (402bd4 <taskUART_RX+0xec>)
  402bca:	7013      	strb	r3, [r2, #0]
					cli_command[cli_cmd_index] = '\0';
  402bcc:	2100      	movs	r1, #0
  402bce:	4a02      	ldr	r2, [pc, #8]	; (402bd8 <taskUART_RX+0xf0>)
  402bd0:	54d1      	strb	r1, [r2, r3]
  402bd2:	e7cd      	b.n	402b70 <taskUART_RX+0x88>
  402bd4:	20000c0c 	.word	0x20000c0c
  402bd8:	20000c10 	.word	0x20000c10
  402bdc:	20000d74 	.word	0x20000d74
  402be0:	00408570 	.word	0x00408570
  402be4:	00401051 	.word	0x00401051
  402be8:	20000c44 	.word	0x20000c44
  402bec:	00403881 	.word	0x00403881
  402bf0:	00403789 	.word	0x00403789
  402bf4:	004036a5 	.word	0x004036a5
  402bf8:	00403609 	.word	0x00403609
  402bfc:	20000d70 	.word	0x20000d70
  402c00:	0040135d 	.word	0x0040135d
  402c04:	004004b1 	.word	0x004004b1

00402c08 <OITExpansionBoardInit>:
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)


void OITExpansionBoardInit(void)
{
  402c08:	b410      	push	{r4}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c0a:	4a44      	ldr	r2, [pc, #272]	; (402d1c <OITExpansionBoardInit+0x114>)
  402c0c:	2304      	movs	r3, #4
  402c0e:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c10:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c14:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c16:	2308      	movs	r3, #8
  402c18:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c1a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c1e:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c20:	4b3f      	ldr	r3, [pc, #252]	; (402d20 <OITExpansionBoardInit+0x118>)
  402c22:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  402c26:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c28:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c2c:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c2e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402c32:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c34:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c38:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  402c3e:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c40:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c44:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402c46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  402c4a:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c4c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402c50:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402c52:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402c56:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402c58:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  402c5a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402c5e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  402c60:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  402c64:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402c66:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  402c68:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  402c6c:	675c      	str	r4, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402c6e:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402c72:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402c76:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402c7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402c7e:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c80:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402c84:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402c86:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402c8a:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402c8c:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  402c8e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402c92:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  402c94:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  402c98:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402c9a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  402c9c:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  402ca0:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  402ca2:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402ca6:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402caa:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402cae:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  402cb2:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402cb4:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402cb8:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402cba:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402cbe:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402cc0:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  402cc2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402cc6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  402cc8:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  402ccc:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402cce:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402cd0:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  402cd4:	6758      	str	r0, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  402cd6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402cda:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402cde:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402ce2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402ce6:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ce8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  402cec:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  402cf2:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  402cf4:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  402cf6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402cfa:	6f11      	ldr	r1, [r2, #112]	; 0x70
  402cfc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  402d00:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402d02:	6f51      	ldr	r1, [r2, #116]	; 0x74
  402d04:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  402d08:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_ESR = mask;
  402d0a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402d0e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402d12:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	Init4Led5BtnBoardExt1();
#endif
#ifdef OIT_4LED_5BTN_BOARD_EXT3
	Init4Led5BtnBoardExt3();
#endif
}
  402d16:	f85d 4b04 	ldr.w	r4, [sp], #4
  402d1a:	4770      	bx	lr
  402d1c:	400e1000 	.word	0x400e1000
  402d20:	400e0e00 	.word	0x400e0e00

00402d24 <initUART>:
// 
// 
//
uint8_t
initUART (Uart * pUart)
{
  402d24:	b510      	push	{r4, lr}
  402d26:	4604      	mov	r4, r0
		base->PIO_PUDR = mask;
  402d28:	4b16      	ldr	r3, [pc, #88]	; (402d84 <initUART+0x60>)
  402d2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  402d2e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402d34:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402d36:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402d3c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402d3e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  402d42:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402d44:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402d46:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  402d4a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402d4c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402d4e:	2007      	movs	r0, #7
  402d50:	4b0d      	ldr	r3, [pc, #52]	; (402d88 <initUART+0x64>)
  402d52:	4798      	blx	r3
	ioport_disable_port(IOPORT_PIOA, PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
	sysclk_enable_peripheral_clock(ID_UART0);

	// Configure UART Control Registers
	// Reset and Disable RX and TX
	pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
  402d54:	23ac      	movs	r3, #172	; 0xac
  402d56:	6023      	str	r3, [r4, #0]
	}
       
	if(retVal != 1)
	{
		// Set The Actual BAUD to Control Register
		pUart->UART_BRGR = cd;
  402d58:	2334      	movs	r3, #52	; 0x34
  402d5a:	6223      	str	r3, [r4, #32]

		// Configure Mode
		pUart->UART_MR = UART_SERIAL_PARITY;
  402d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402d60:	6063      	str	r3, [r4, #4]
	       
		// Disable PDC Channel
		pUart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402d62:	f240 2302 	movw	r3, #514	; 0x202
  402d66:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	       
		// Enable RX and TX
		pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402d6a:	2350      	movs	r3, #80	; 0x50
  402d6c:	6023      	str	r3, [r4, #0]
	}
	
	// Enable RX Interrupt
	pUart->UART_IER = UART_IER_RXRDY;
  402d6e:	2301      	movs	r3, #1
  402d70:	60a3      	str	r3, [r4, #8]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  402d72:	4b06      	ldr	r3, [pc, #24]	; (402d8c <initUART+0x68>)
  402d74:	2260      	movs	r2, #96	; 0x60
  402d76:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402d7a:	2280      	movs	r2, #128	; 0x80
  402d7c:	601a      	str	r2, [r3, #0]
	// value defined in FreeRTOSConfig.h == 5
	NVIC_SetPriority(UART0_IRQn, 6);
	NVIC_EnableIRQ(UART0_IRQn);
       
	return retVal;
}
  402d7e:	2000      	movs	r0, #0
  402d80:	bd10      	pop	{r4, pc}
  402d82:	bf00      	nop
  402d84:	400e0e00 	.word	0x400e0e00
  402d88:	00402ff9 	.word	0x00402ff9
  402d8c:	e000e100 	.word	0xe000e100

00402d90 <UARTPutC>:
//
//
//
void
UARTPutC (Uart * pUart, char data)
{	
  402d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d92:	4604      	mov	r4, r0
  402d94:	460f      	mov	r7, r1
	const TickType_t		xDelay = 10 / portTICK_PERIOD_MS;
	
	// Wait for Transmitter to be Ready
	while((pUart->UART_SR & UART_SR_TXRDY) == 0)
  402d96:	6943      	ldr	r3, [r0, #20]
  402d98:	f013 0f02 	tst.w	r3, #2
  402d9c:	d107      	bne.n	402dae <UARTPutC+0x1e>
	{
		vTaskDelay(xDelay);
  402d9e:	260a      	movs	r6, #10
  402da0:	4d04      	ldr	r5, [pc, #16]	; (402db4 <UARTPutC+0x24>)
  402da2:	4630      	mov	r0, r6
  402da4:	47a8      	blx	r5
	while((pUart->UART_SR & UART_SR_TXRDY) == 0)
  402da6:	6963      	ldr	r3, [r4, #20]
  402da8:	f013 0f02 	tst.w	r3, #2
  402dac:	d0f9      	beq.n	402da2 <UARTPutC+0x12>
	}
	if (data != 0)
  402dae:	b107      	cbz	r7, 402db2 <UARTPutC+0x22>
		pUart->UART_THR = data;
  402db0:	61e7      	str	r7, [r4, #28]
  402db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402db4:	00401f1d 	.word	0x00401f1d

00402db8 <UARTPutStr>:
}

void
UARTPutStr (Uart * pUart, char * data, uint8_t len)
{	
	for (int i = 0; i < len; ++i)
  402db8:	b162      	cbz	r2, 402dd4 <UARTPutStr+0x1c>
{	
  402dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402dbc:	4615      	mov	r5, r2
  402dbe:	4606      	mov	r6, r0
  402dc0:	460c      	mov	r4, r1
  402dc2:	440d      	add	r5, r1
	{
		UARTPutC(pUart, data[i]);
  402dc4:	4f04      	ldr	r7, [pc, #16]	; (402dd8 <UARTPutStr+0x20>)
  402dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
  402dca:	4630      	mov	r0, r6
  402dcc:	47b8      	blx	r7
	for (int i = 0; i < len; ++i)
  402dce:	42ac      	cmp	r4, r5
  402dd0:	d1f9      	bne.n	402dc6 <UARTPutStr+0xe>
  402dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dd4:	4770      	bx	lr
  402dd6:	bf00      	nop
  402dd8:	00402d91 	.word	0x00402d91

00402ddc <UART0_Handler>:
	}
}

void UART0_Handler (void)
{
  402ddc:	b510      	push	{r4, lr}
  402dde:	b082      	sub	sp, #8
	uint8_t data = '\0';
  402de0:	2300      	movs	r3, #0
  402de2:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t uiStatus = EDBG_UART->UART_SR;
  402de6:	4b0f      	ldr	r3, [pc, #60]	; (402e24 <UART0_Handler+0x48>)
  402de8:	695b      	ldr	r3, [r3, #20]
	BaseType_t xHigherPriorityTaskWoken;

	if(uiStatus & UART_SR_RXRDY)
  402dea:	f013 0f01 	tst.w	r3, #1
  402dee:	d10b      	bne.n	402e08 <UART0_Handler+0x2c>
		
		xQueueSendToBackFromISR(qhUART_RX,  (void*) &data, &xHigherPriorityTaskWoken);
		
	}
	// Send Queue message to task
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
  402df0:	9b00      	ldr	r3, [sp, #0]
  402df2:	b13b      	cbz	r3, 402e04 <UART0_Handler+0x28>
  402df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402df8:	4b0b      	ldr	r3, [pc, #44]	; (402e28 <UART0_Handler+0x4c>)
  402dfa:	601a      	str	r2, [r3, #0]
  402dfc:	f3bf 8f4f 	dsb	sy
  402e00:	f3bf 8f6f 	isb	sy
}
  402e04:	b002      	add	sp, #8
  402e06:	bd10      	pop	{r4, pc}
		data = (uint8_t) EDBG_UART->UART_RHR;
  402e08:	4b06      	ldr	r3, [pc, #24]	; (402e24 <UART0_Handler+0x48>)
  402e0a:	699b      	ldr	r3, [r3, #24]
  402e0c:	f88d 3007 	strb.w	r3, [sp, #7]
		xQueueSendToBackFromISR(qhUART_RX,  (void*) &data, &xHigherPriorityTaskWoken);
  402e10:	2300      	movs	r3, #0
  402e12:	466a      	mov	r2, sp
  402e14:	f10d 0107 	add.w	r1, sp, #7
  402e18:	4804      	ldr	r0, [pc, #16]	; (402e2c <UART0_Handler+0x50>)
  402e1a:	6800      	ldr	r0, [r0, #0]
  402e1c:	4c04      	ldr	r4, [pc, #16]	; (402e30 <UART0_Handler+0x54>)
  402e1e:	47a0      	blx	r4
  402e20:	e7e6      	b.n	402df0 <UART0_Handler+0x14>
  402e22:	bf00      	nop
  402e24:	400e0600 	.word	0x400e0600
  402e28:	e000ed04 	.word	0xe000ed04
  402e2c:	20000e54 	.word	0x20000e54
  402e30:	00401245 	.word	0x00401245

00402e34 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402e34:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402e36:	480e      	ldr	r0, [pc, #56]	; (402e70 <sysclk_init+0x3c>)
  402e38:	4b0e      	ldr	r3, [pc, #56]	; (402e74 <sysclk_init+0x40>)
  402e3a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402e3c:	213e      	movs	r1, #62	; 0x3e
  402e3e:	2000      	movs	r0, #0
  402e40:	4b0d      	ldr	r3, [pc, #52]	; (402e78 <sysclk_init+0x44>)
  402e42:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402e44:	4c0d      	ldr	r4, [pc, #52]	; (402e7c <sysclk_init+0x48>)
  402e46:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402e48:	2800      	cmp	r0, #0
  402e4a:	d0fc      	beq.n	402e46 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402e4c:	4b0c      	ldr	r3, [pc, #48]	; (402e80 <sysclk_init+0x4c>)
  402e4e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402e50:	4a0c      	ldr	r2, [pc, #48]	; (402e84 <sysclk_init+0x50>)
  402e52:	4b0d      	ldr	r3, [pc, #52]	; (402e88 <sysclk_init+0x54>)
  402e54:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  402e56:	4c0d      	ldr	r4, [pc, #52]	; (402e8c <sysclk_init+0x58>)
  402e58:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402e5a:	2800      	cmp	r0, #0
  402e5c:	d0fc      	beq.n	402e58 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402e5e:	2010      	movs	r0, #16
  402e60:	4b0b      	ldr	r3, [pc, #44]	; (402e90 <sysclk_init+0x5c>)
  402e62:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402e64:	4b0b      	ldr	r3, [pc, #44]	; (402e94 <sysclk_init+0x60>)
  402e66:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402e68:	480b      	ldr	r0, [pc, #44]	; (402e98 <sysclk_init+0x64>)
  402e6a:	4b02      	ldr	r3, [pc, #8]	; (402e74 <sysclk_init+0x40>)
  402e6c:	4798      	blx	r3
  402e6e:	bd10      	pop	{r4, pc}
  402e70:	07270e00 	.word	0x07270e00
  402e74:	00403225 	.word	0x00403225
  402e78:	00402f75 	.word	0x00402f75
  402e7c:	00402fc9 	.word	0x00402fc9
  402e80:	00402fd9 	.word	0x00402fd9
  402e84:	200f3f01 	.word	0x200f3f01
  402e88:	400e0400 	.word	0x400e0400
  402e8c:	00402fe9 	.word	0x00402fe9
  402e90:	00402f11 	.word	0x00402f11
  402e94:	00403119 	.word	0x00403119
  402e98:	05b8d800 	.word	0x05b8d800

00402e9c <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  402e9c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402e9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402ea2:	4b18      	ldr	r3, [pc, #96]	; (402f04 <board_init+0x68>)
  402ea4:	605a      	str	r2, [r3, #4]
  402ea6:	2009      	movs	r0, #9
  402ea8:	4c17      	ldr	r4, [pc, #92]	; (402f08 <board_init+0x6c>)
  402eaa:	47a0      	blx	r4
  402eac:	200a      	movs	r0, #10
  402eae:	47a0      	blx	r4
  402eb0:	200b      	movs	r0, #11
  402eb2:	47a0      	blx	r4
  402eb4:	200c      	movs	r0, #12
  402eb6:	47a0      	blx	r4
  402eb8:	200d      	movs	r0, #13
  402eba:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402ebc:	4b13      	ldr	r3, [pc, #76]	; (402f0c <board_init+0x70>)
  402ebe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402ec2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ec4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402ec8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402eca:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  402ece:	2204      	movs	r2, #4
  402ed0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ed2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402ed6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402ed8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402edc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402ede:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402ee4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402ee6:	f021 0104 	bic.w	r1, r1, #4
  402eea:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402eec:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402eee:	f021 0104 	bic.w	r1, r1, #4
  402ef2:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  402ef4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402ef8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402efc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402f00:	bd10      	pop	{r4, pc}
  402f02:	bf00      	nop
  402f04:	400e1850 	.word	0x400e1850
  402f08:	00402ff9 	.word	0x00402ff9
  402f0c:	400e1400 	.word	0x400e1400

00402f10 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402f10:	4a17      	ldr	r2, [pc, #92]	; (402f70 <pmc_switch_mck_to_pllack+0x60>)
  402f12:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402f18:	4318      	orrs	r0, r3
  402f1a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402f1c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f1e:	f013 0f08 	tst.w	r3, #8
  402f22:	d10a      	bne.n	402f3a <pmc_switch_mck_to_pllack+0x2a>
  402f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402f28:	4911      	ldr	r1, [pc, #68]	; (402f70 <pmc_switch_mck_to_pllack+0x60>)
  402f2a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402f2c:	f012 0f08 	tst.w	r2, #8
  402f30:	d103      	bne.n	402f3a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402f32:	3b01      	subs	r3, #1
  402f34:	d1f9      	bne.n	402f2a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  402f36:	2001      	movs	r0, #1
  402f38:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402f3a:	4a0d      	ldr	r2, [pc, #52]	; (402f70 <pmc_switch_mck_to_pllack+0x60>)
  402f3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402f3e:	f023 0303 	bic.w	r3, r3, #3
  402f42:	f043 0302 	orr.w	r3, r3, #2
  402f46:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402f48:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f4a:	f013 0f08 	tst.w	r3, #8
  402f4e:	d10a      	bne.n	402f66 <pmc_switch_mck_to_pllack+0x56>
  402f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402f54:	4906      	ldr	r1, [pc, #24]	; (402f70 <pmc_switch_mck_to_pllack+0x60>)
  402f56:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402f58:	f012 0f08 	tst.w	r2, #8
  402f5c:	d105      	bne.n	402f6a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402f5e:	3b01      	subs	r3, #1
  402f60:	d1f9      	bne.n	402f56 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402f62:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402f64:	4770      	bx	lr
	return 0;
  402f66:	2000      	movs	r0, #0
  402f68:	4770      	bx	lr
  402f6a:	2000      	movs	r0, #0
  402f6c:	4770      	bx	lr
  402f6e:	bf00      	nop
  402f70:	400e0400 	.word	0x400e0400

00402f74 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402f74:	b9c8      	cbnz	r0, 402faa <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402f76:	4a11      	ldr	r2, [pc, #68]	; (402fbc <pmc_switch_mainck_to_xtal+0x48>)
  402f78:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402f7a:	0209      	lsls	r1, r1, #8
  402f7c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402f7e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402f82:	f023 0303 	bic.w	r3, r3, #3
  402f86:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402f8a:	f043 0301 	orr.w	r3, r3, #1
  402f8e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402f90:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402f92:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f94:	f013 0f01 	tst.w	r3, #1
  402f98:	d0fb      	beq.n	402f92 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402f9a:	4a08      	ldr	r2, [pc, #32]	; (402fbc <pmc_switch_mainck_to_xtal+0x48>)
  402f9c:	6a13      	ldr	r3, [r2, #32]
  402f9e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402fa6:	6213      	str	r3, [r2, #32]
  402fa8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402faa:	4904      	ldr	r1, [pc, #16]	; (402fbc <pmc_switch_mainck_to_xtal+0x48>)
  402fac:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402fae:	4a04      	ldr	r2, [pc, #16]	; (402fc0 <pmc_switch_mainck_to_xtal+0x4c>)
  402fb0:	401a      	ands	r2, r3
  402fb2:	4b04      	ldr	r3, [pc, #16]	; (402fc4 <pmc_switch_mainck_to_xtal+0x50>)
  402fb4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402fb6:	620b      	str	r3, [r1, #32]
  402fb8:	4770      	bx	lr
  402fba:	bf00      	nop
  402fbc:	400e0400 	.word	0x400e0400
  402fc0:	fec8fffc 	.word	0xfec8fffc
  402fc4:	01370002 	.word	0x01370002

00402fc8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402fc8:	4b02      	ldr	r3, [pc, #8]	; (402fd4 <pmc_osc_is_ready_mainck+0xc>)
  402fca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402fcc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402fd0:	4770      	bx	lr
  402fd2:	bf00      	nop
  402fd4:	400e0400 	.word	0x400e0400

00402fd8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402fd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402fdc:	4b01      	ldr	r3, [pc, #4]	; (402fe4 <pmc_disable_pllack+0xc>)
  402fde:	629a      	str	r2, [r3, #40]	; 0x28
  402fe0:	4770      	bx	lr
  402fe2:	bf00      	nop
  402fe4:	400e0400 	.word	0x400e0400

00402fe8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402fe8:	4b02      	ldr	r3, [pc, #8]	; (402ff4 <pmc_is_locked_pllack+0xc>)
  402fea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402fec:	f000 0002 	and.w	r0, r0, #2
  402ff0:	4770      	bx	lr
  402ff2:	bf00      	nop
  402ff4:	400e0400 	.word	0x400e0400

00402ff8 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402ff8:	282f      	cmp	r0, #47	; 0x2f
  402ffa:	d81e      	bhi.n	40303a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402ffc:	281f      	cmp	r0, #31
  402ffe:	d80c      	bhi.n	40301a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403000:	4b11      	ldr	r3, [pc, #68]	; (403048 <pmc_enable_periph_clk+0x50>)
  403002:	699a      	ldr	r2, [r3, #24]
  403004:	2301      	movs	r3, #1
  403006:	4083      	lsls	r3, r0
  403008:	4393      	bics	r3, r2
  40300a:	d018      	beq.n	40303e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40300c:	2301      	movs	r3, #1
  40300e:	fa03 f000 	lsl.w	r0, r3, r0
  403012:	4b0d      	ldr	r3, [pc, #52]	; (403048 <pmc_enable_periph_clk+0x50>)
  403014:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403016:	2000      	movs	r0, #0
  403018:	4770      	bx	lr
		ul_id -= 32;
  40301a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40301c:	4b0a      	ldr	r3, [pc, #40]	; (403048 <pmc_enable_periph_clk+0x50>)
  40301e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403022:	2301      	movs	r3, #1
  403024:	4083      	lsls	r3, r0
  403026:	4393      	bics	r3, r2
  403028:	d00b      	beq.n	403042 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40302a:	2301      	movs	r3, #1
  40302c:	fa03 f000 	lsl.w	r0, r3, r0
  403030:	4b05      	ldr	r3, [pc, #20]	; (403048 <pmc_enable_periph_clk+0x50>)
  403032:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  403036:	2000      	movs	r0, #0
  403038:	4770      	bx	lr
		return 1;
  40303a:	2001      	movs	r0, #1
  40303c:	4770      	bx	lr
	return 0;
  40303e:	2000      	movs	r0, #0
  403040:	4770      	bx	lr
  403042:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403044:	4770      	bx	lr
  403046:	bf00      	nop
  403048:	400e0400 	.word	0x400e0400

0040304c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40304c:	e7fe      	b.n	40304c <Dummy_Handler>
	...

00403050 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403050:	b500      	push	{lr}
  403052:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  403054:	4b25      	ldr	r3, [pc, #148]	; (4030ec <Reset_Handler+0x9c>)
  403056:	4a26      	ldr	r2, [pc, #152]	; (4030f0 <Reset_Handler+0xa0>)
  403058:	429a      	cmp	r2, r3
  40305a:	d010      	beq.n	40307e <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  40305c:	4b25      	ldr	r3, [pc, #148]	; (4030f4 <Reset_Handler+0xa4>)
  40305e:	4a23      	ldr	r2, [pc, #140]	; (4030ec <Reset_Handler+0x9c>)
  403060:	429a      	cmp	r2, r3
  403062:	d20c      	bcs.n	40307e <Reset_Handler+0x2e>
  403064:	3b01      	subs	r3, #1
  403066:	1a9b      	subs	r3, r3, r2
  403068:	f023 0303 	bic.w	r3, r3, #3
  40306c:	3304      	adds	r3, #4
  40306e:	4413      	add	r3, r2
  403070:	491f      	ldr	r1, [pc, #124]	; (4030f0 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  403072:	f851 0b04 	ldr.w	r0, [r1], #4
  403076:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  40307a:	429a      	cmp	r2, r3
  40307c:	d1f9      	bne.n	403072 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40307e:	4b1e      	ldr	r3, [pc, #120]	; (4030f8 <Reset_Handler+0xa8>)
  403080:	4a1e      	ldr	r2, [pc, #120]	; (4030fc <Reset_Handler+0xac>)
  403082:	429a      	cmp	r2, r3
  403084:	d20a      	bcs.n	40309c <Reset_Handler+0x4c>
  403086:	3b01      	subs	r3, #1
  403088:	1a9b      	subs	r3, r3, r2
  40308a:	f023 0303 	bic.w	r3, r3, #3
  40308e:	3304      	adds	r3, #4
  403090:	4413      	add	r3, r2
		*pDest++ = 0;
  403092:	2100      	movs	r1, #0
  403094:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  403098:	4293      	cmp	r3, r2
  40309a:	d1fb      	bne.n	403094 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40309c:	4a18      	ldr	r2, [pc, #96]	; (403100 <Reset_Handler+0xb0>)
  40309e:	4b19      	ldr	r3, [pc, #100]	; (403104 <Reset_Handler+0xb4>)
  4030a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4030a4:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4030a6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4030aa:	fab3 f383 	clz	r3, r3
  4030ae:	095b      	lsrs	r3, r3, #5
  4030b0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4030b2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4030b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4030b8:	2200      	movs	r2, #0
  4030ba:	4b13      	ldr	r3, [pc, #76]	; (403108 <Reset_Handler+0xb8>)
  4030bc:	701a      	strb	r2, [r3, #0]
	return flags;
  4030be:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4030c0:	4a12      	ldr	r2, [pc, #72]	; (40310c <Reset_Handler+0xbc>)
  4030c2:	6813      	ldr	r3, [r2, #0]
  4030c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4030c8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4030ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4030ce:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4030d2:	b129      	cbz	r1, 4030e0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4030d4:	2201      	movs	r2, #1
  4030d6:	4b0c      	ldr	r3, [pc, #48]	; (403108 <Reset_Handler+0xb8>)
  4030d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4030da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4030de:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4030e0:	4b0b      	ldr	r3, [pc, #44]	; (403110 <Reset_Handler+0xc0>)
  4030e2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4030e4:	4b0b      	ldr	r3, [pc, #44]	; (403114 <Reset_Handler+0xc4>)
  4030e6:	4798      	blx	r3
  4030e8:	e7fe      	b.n	4030e8 <Reset_Handler+0x98>
  4030ea:	bf00      	nop
  4030ec:	20000000 	.word	0x20000000
  4030f0:	00408864 	.word	0x00408864
  4030f4:	200009d0 	.word	0x200009d0
  4030f8:	20000e80 	.word	0x20000e80
  4030fc:	200009d0 	.word	0x200009d0
  403100:	e000ed00 	.word	0xe000ed00
  403104:	00400000 	.word	0x00400000
  403108:	2000001c 	.word	0x2000001c
  40310c:	e000ed88 	.word	0xe000ed88
  403110:	00403485 	.word	0x00403485
  403114:	004032d1 	.word	0x004032d1

00403118 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  403118:	4b3b      	ldr	r3, [pc, #236]	; (403208 <SystemCoreClockUpdate+0xf0>)
  40311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40311c:	f003 0303 	and.w	r3, r3, #3
  403120:	2b01      	cmp	r3, #1
  403122:	d01d      	beq.n	403160 <SystemCoreClockUpdate+0x48>
  403124:	b183      	cbz	r3, 403148 <SystemCoreClockUpdate+0x30>
  403126:	2b02      	cmp	r3, #2
  403128:	d036      	beq.n	403198 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40312a:	4b37      	ldr	r3, [pc, #220]	; (403208 <SystemCoreClockUpdate+0xf0>)
  40312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40312e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403132:	2b70      	cmp	r3, #112	; 0x70
  403134:	d05f      	beq.n	4031f6 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  403136:	4b34      	ldr	r3, [pc, #208]	; (403208 <SystemCoreClockUpdate+0xf0>)
  403138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40313a:	4934      	ldr	r1, [pc, #208]	; (40320c <SystemCoreClockUpdate+0xf4>)
  40313c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403140:	680b      	ldr	r3, [r1, #0]
  403142:	40d3      	lsrs	r3, r2
  403144:	600b      	str	r3, [r1, #0]
  403146:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403148:	4b31      	ldr	r3, [pc, #196]	; (403210 <SystemCoreClockUpdate+0xf8>)
  40314a:	695b      	ldr	r3, [r3, #20]
  40314c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403150:	bf14      	ite	ne
  403152:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403156:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40315a:	4b2c      	ldr	r3, [pc, #176]	; (40320c <SystemCoreClockUpdate+0xf4>)
  40315c:	601a      	str	r2, [r3, #0]
  40315e:	e7e4      	b.n	40312a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403160:	4b29      	ldr	r3, [pc, #164]	; (403208 <SystemCoreClockUpdate+0xf0>)
  403162:	6a1b      	ldr	r3, [r3, #32]
  403164:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403168:	d003      	beq.n	403172 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40316a:	4a2a      	ldr	r2, [pc, #168]	; (403214 <SystemCoreClockUpdate+0xfc>)
  40316c:	4b27      	ldr	r3, [pc, #156]	; (40320c <SystemCoreClockUpdate+0xf4>)
  40316e:	601a      	str	r2, [r3, #0]
  403170:	e7db      	b.n	40312a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403172:	4a29      	ldr	r2, [pc, #164]	; (403218 <SystemCoreClockUpdate+0x100>)
  403174:	4b25      	ldr	r3, [pc, #148]	; (40320c <SystemCoreClockUpdate+0xf4>)
  403176:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403178:	4b23      	ldr	r3, [pc, #140]	; (403208 <SystemCoreClockUpdate+0xf0>)
  40317a:	6a1b      	ldr	r3, [r3, #32]
  40317c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403180:	2b10      	cmp	r3, #16
  403182:	d005      	beq.n	403190 <SystemCoreClockUpdate+0x78>
  403184:	2b20      	cmp	r3, #32
  403186:	d1d0      	bne.n	40312a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  403188:	4a22      	ldr	r2, [pc, #136]	; (403214 <SystemCoreClockUpdate+0xfc>)
  40318a:	4b20      	ldr	r3, [pc, #128]	; (40320c <SystemCoreClockUpdate+0xf4>)
  40318c:	601a      	str	r2, [r3, #0]
				break;
  40318e:	e7cc      	b.n	40312a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  403190:	4a22      	ldr	r2, [pc, #136]	; (40321c <SystemCoreClockUpdate+0x104>)
  403192:	4b1e      	ldr	r3, [pc, #120]	; (40320c <SystemCoreClockUpdate+0xf4>)
  403194:	601a      	str	r2, [r3, #0]
				break;
  403196:	e7c8      	b.n	40312a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403198:	4b1b      	ldr	r3, [pc, #108]	; (403208 <SystemCoreClockUpdate+0xf0>)
  40319a:	6a1b      	ldr	r3, [r3, #32]
  40319c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4031a0:	d016      	beq.n	4031d0 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4031a2:	4a1c      	ldr	r2, [pc, #112]	; (403214 <SystemCoreClockUpdate+0xfc>)
  4031a4:	4b19      	ldr	r3, [pc, #100]	; (40320c <SystemCoreClockUpdate+0xf4>)
  4031a6:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4031a8:	4b17      	ldr	r3, [pc, #92]	; (403208 <SystemCoreClockUpdate+0xf0>)
  4031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031ac:	f003 0303 	and.w	r3, r3, #3
  4031b0:	2b02      	cmp	r3, #2
  4031b2:	d1ba      	bne.n	40312a <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4031b4:	4a14      	ldr	r2, [pc, #80]	; (403208 <SystemCoreClockUpdate+0xf0>)
  4031b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4031b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4031ba:	4814      	ldr	r0, [pc, #80]	; (40320c <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4031bc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4031c0:	6803      	ldr	r3, [r0, #0]
  4031c2:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4031c6:	b2d2      	uxtb	r2, r2
  4031c8:	fbb3 f3f2 	udiv	r3, r3, r2
  4031cc:	6003      	str	r3, [r0, #0]
  4031ce:	e7ac      	b.n	40312a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4031d0:	4a11      	ldr	r2, [pc, #68]	; (403218 <SystemCoreClockUpdate+0x100>)
  4031d2:	4b0e      	ldr	r3, [pc, #56]	; (40320c <SystemCoreClockUpdate+0xf4>)
  4031d4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4031d6:	4b0c      	ldr	r3, [pc, #48]	; (403208 <SystemCoreClockUpdate+0xf0>)
  4031d8:	6a1b      	ldr	r3, [r3, #32]
  4031da:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4031de:	2b10      	cmp	r3, #16
  4031e0:	d005      	beq.n	4031ee <SystemCoreClockUpdate+0xd6>
  4031e2:	2b20      	cmp	r3, #32
  4031e4:	d1e0      	bne.n	4031a8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4031e6:	4a0b      	ldr	r2, [pc, #44]	; (403214 <SystemCoreClockUpdate+0xfc>)
  4031e8:	4b08      	ldr	r3, [pc, #32]	; (40320c <SystemCoreClockUpdate+0xf4>)
  4031ea:	601a      	str	r2, [r3, #0]
				break;
  4031ec:	e7dc      	b.n	4031a8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4031ee:	4a0b      	ldr	r2, [pc, #44]	; (40321c <SystemCoreClockUpdate+0x104>)
  4031f0:	4b06      	ldr	r3, [pc, #24]	; (40320c <SystemCoreClockUpdate+0xf4>)
  4031f2:	601a      	str	r2, [r3, #0]
				break;
  4031f4:	e7d8      	b.n	4031a8 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4031f6:	4a05      	ldr	r2, [pc, #20]	; (40320c <SystemCoreClockUpdate+0xf4>)
  4031f8:	6813      	ldr	r3, [r2, #0]
  4031fa:	4909      	ldr	r1, [pc, #36]	; (403220 <SystemCoreClockUpdate+0x108>)
  4031fc:	fba1 1303 	umull	r1, r3, r1, r3
  403200:	085b      	lsrs	r3, r3, #1
  403202:	6013      	str	r3, [r2, #0]
  403204:	4770      	bx	lr
  403206:	bf00      	nop
  403208:	400e0400 	.word	0x400e0400
  40320c:	20000020 	.word	0x20000020
  403210:	400e1810 	.word	0x400e1810
  403214:	00b71b00 	.word	0x00b71b00
  403218:	003d0900 	.word	0x003d0900
  40321c:	007a1200 	.word	0x007a1200
  403220:	aaaaaaab 	.word	0xaaaaaaab

00403224 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403224:	4b12      	ldr	r3, [pc, #72]	; (403270 <system_init_flash+0x4c>)
  403226:	4298      	cmp	r0, r3
  403228:	d911      	bls.n	40324e <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  40322a:	4b12      	ldr	r3, [pc, #72]	; (403274 <system_init_flash+0x50>)
  40322c:	4298      	cmp	r0, r3
  40322e:	d913      	bls.n	403258 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  403230:	4b11      	ldr	r3, [pc, #68]	; (403278 <system_init_flash+0x54>)
  403232:	4298      	cmp	r0, r3
  403234:	d914      	bls.n	403260 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403236:	4b11      	ldr	r3, [pc, #68]	; (40327c <system_init_flash+0x58>)
  403238:	4298      	cmp	r0, r3
  40323a:	d915      	bls.n	403268 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40323c:	4b10      	ldr	r3, [pc, #64]	; (403280 <system_init_flash+0x5c>)
  40323e:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403240:	bf94      	ite	ls
  403242:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403246:	4a0f      	ldrhi	r2, [pc, #60]	; (403284 <system_init_flash+0x60>)
  403248:	4b0f      	ldr	r3, [pc, #60]	; (403288 <system_init_flash+0x64>)
  40324a:	601a      	str	r2, [r3, #0]
  40324c:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40324e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403252:	4b0d      	ldr	r3, [pc, #52]	; (403288 <system_init_flash+0x64>)
  403254:	601a      	str	r2, [r3, #0]
  403256:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403258:	4a0c      	ldr	r2, [pc, #48]	; (40328c <system_init_flash+0x68>)
  40325a:	4b0b      	ldr	r3, [pc, #44]	; (403288 <system_init_flash+0x64>)
  40325c:	601a      	str	r2, [r3, #0]
  40325e:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403260:	4a0b      	ldr	r2, [pc, #44]	; (403290 <system_init_flash+0x6c>)
  403262:	4b09      	ldr	r3, [pc, #36]	; (403288 <system_init_flash+0x64>)
  403264:	601a      	str	r2, [r3, #0]
  403266:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403268:	4a0a      	ldr	r2, [pc, #40]	; (403294 <system_init_flash+0x70>)
  40326a:	4b07      	ldr	r3, [pc, #28]	; (403288 <system_init_flash+0x64>)
  40326c:	601a      	str	r2, [r3, #0]
  40326e:	4770      	bx	lr
  403270:	01312cff 	.word	0x01312cff
  403274:	026259ff 	.word	0x026259ff
  403278:	039386ff 	.word	0x039386ff
  40327c:	04c4b3ff 	.word	0x04c4b3ff
  403280:	05f5e0ff 	.word	0x05f5e0ff
  403284:	04000500 	.word	0x04000500
  403288:	400e0a00 	.word	0x400e0a00
  40328c:	04000100 	.word	0x04000100
  403290:	04000200 	.word	0x04000200
  403294:	04000300 	.word	0x04000300

00403298 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403298:	4b0a      	ldr	r3, [pc, #40]	; (4032c4 <_sbrk+0x2c>)
  40329a:	681b      	ldr	r3, [r3, #0]
  40329c:	b153      	cbz	r3, 4032b4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40329e:	4b09      	ldr	r3, [pc, #36]	; (4032c4 <_sbrk+0x2c>)
  4032a0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4032a2:	181a      	adds	r2, r3, r0
  4032a4:	4908      	ldr	r1, [pc, #32]	; (4032c8 <_sbrk+0x30>)
  4032a6:	4291      	cmp	r1, r2
  4032a8:	db08      	blt.n	4032bc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4032aa:	4610      	mov	r0, r2
  4032ac:	4a05      	ldr	r2, [pc, #20]	; (4032c4 <_sbrk+0x2c>)
  4032ae:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4032b0:	4618      	mov	r0, r3
  4032b2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4032b4:	4a05      	ldr	r2, [pc, #20]	; (4032cc <_sbrk+0x34>)
  4032b6:	4b03      	ldr	r3, [pc, #12]	; (4032c4 <_sbrk+0x2c>)
  4032b8:	601a      	str	r2, [r3, #0]
  4032ba:	e7f0      	b.n	40329e <_sbrk+0x6>
		return (caddr_t) -1;	
  4032bc:	f04f 30ff 	mov.w	r0, #4294967295
}
  4032c0:	4770      	bx	lr
  4032c2:	bf00      	nop
  4032c4:	20000da8 	.word	0x20000da8
  4032c8:	2001fffc 	.word	0x2001fffc
  4032cc:	20003e80 	.word	0x20003e80

004032d0 <main>:
/************************************************************
	main: LED Control Application	

*************************************************************/
int main (void)
{
  4032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4032d2:	b093      	sub	sp, #76	; 0x4c
}

static void prvMiscInitialisation( void )
{
       /* Initialize the SAM system */
       sysclk_init();
  4032d4:	4b40      	ldr	r3, [pc, #256]	; (4033d8 <main+0x108>)
  4032d6:	4798      	blx	r3
       board_init();
  4032d8:	4b40      	ldr	r3, [pc, #256]	; (4033dc <main+0x10c>)
  4032da:	4798      	blx	r3
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  4032dc:	4a40      	ldr	r2, [pc, #256]	; (4033e0 <main+0x110>)
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  4032de:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
  4032e2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  4032e6:	f023 0307 	bic.w	r3, r3, #7
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  4032ea:	3207      	adds	r2, #7
  4032ec:	f022 0207 	bic.w	r2, r2, #7
       HeapRegion_t xHeapRegions[] = {
  4032f0:	9203      	str	r2, [sp, #12]
       ulHeapSize -= 1024;
  4032f2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  4032f6:	9304      	str	r3, [sp, #16]
  4032f8:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4032fc:	9305      	str	r3, [sp, #20]
  4032fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403302:	9306      	str	r3, [sp, #24]
  403304:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  403308:	9207      	str	r2, [sp, #28]
  40330a:	9308      	str	r3, [sp, #32]
  40330c:	2400      	movs	r4, #0
  40330e:	9409      	str	r4, [sp, #36]	; 0x24
  403310:	940a      	str	r4, [sp, #40]	; 0x28
       vPortDefineHeapRegions( xHeapRegions );
  403312:	a803      	add	r0, sp, #12
  403314:	4b33      	ldr	r3, [pc, #204]	; (4033e4 <main+0x114>)
  403316:	4798      	blx	r3
       prvInitialiseHeap();
       pmc_enable_periph_clk(ID_PIOA);
  403318:	2009      	movs	r0, #9
  40331a:	4d33      	ldr	r5, [pc, #204]	; (4033e8 <main+0x118>)
  40331c:	47a8      	blx	r5
       pmc_enable_periph_clk(ID_PIOB);
  40331e:	200a      	movs	r0, #10
  403320:	47a8      	blx	r5
	   OITExpansionBoardInit();
  403322:	4b32      	ldr	r3, [pc, #200]	; (4033ec <main+0x11c>)
  403324:	4798      	blx	r3
	   initUART(EDBG_UART);
  403326:	4832      	ldr	r0, [pc, #200]	; (4033f0 <main+0x120>)
  403328:	4b32      	ldr	r3, [pc, #200]	; (4033f4 <main+0x124>)
  40332a:	4798      	blx	r3
	uint8_t onboard_LED = 0; // shorthand for onboard LED referenced by taskHeartbeat
  40332c:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
	qhUART_RX = NULL; // UART RX Queue Handle
  403330:	4b31      	ldr	r3, [pc, #196]	; (4033f8 <main+0x128>)
  403332:	601c      	str	r4, [r3, #0]
		data_LEDs[i].led_queue_handle = NULL;
  403334:	4b31      	ldr	r3, [pc, #196]	; (4033fc <main+0x12c>)
  403336:	601c      	str	r4, [r3, #0]
		data_LEDs[i].led_num = (i + 1);	// LED numbers start at 1
  403338:	2501      	movs	r5, #1
  40333a:	711d      	strb	r5, [r3, #4]
		data_LEDs[i].delay = (500 / portTICK_PERIOD_MS);
  40333c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  403340:	609a      	str	r2, [r3, #8]
		data_LEDs[i].led_queue_handle = NULL;
  403342:	60dc      	str	r4, [r3, #12]
		data_LEDs[i].led_num = (i + 1);	// LED numbers start at 1
  403344:	2102      	movs	r1, #2
  403346:	7419      	strb	r1, [r3, #16]
		data_LEDs[i].delay = (500 / portTICK_PERIOD_MS);
  403348:	615a      	str	r2, [r3, #20]
		data_LEDs[i].led_queue_handle = NULL;
  40334a:	619c      	str	r4, [r3, #24]
		data_LEDs[i].led_num = (i + 1);	// LED numbers start at 1
  40334c:	2103      	movs	r1, #3
  40334e:	7719      	strb	r1, [r3, #28]
		data_LEDs[i].delay = (500 / portTICK_PERIOD_MS);
  403350:	621a      	str	r2, [r3, #32]
	struct UARTData uart_data_tx = {NULL, NULL, NULL}; // data for UART TX task
  403352:	940e      	str	r4, [sp, #56]	; 0x38
  403354:	940f      	str	r4, [sp, #60]	; 0x3c
  403356:	9410      	str	r4, [sp, #64]	; 0x40
	struct UARTData uart_data_rx = {NULL, NULL, NULL}; // data for UART RX task
  403358:	940b      	str	r4, [sp, #44]	; 0x2c
  40335a:	940c      	str	r4, [sp, #48]	; 0x30
  40335c:	940d      	str	r4, [sp, #52]	; 0x34
	register_commands();
  40335e:	4b28      	ldr	r3, [pc, #160]	; (403400 <main+0x130>)
  403360:	4798      	blx	r3
	xTaskCreate(taskHeartbeat,
  403362:	9401      	str	r4, [sp, #4]
  403364:	9500      	str	r5, [sp, #0]
  403366:	f10d 0347 	add.w	r3, sp, #71	; 0x47
  40336a:	2282      	movs	r2, #130	; 0x82
  40336c:	4925      	ldr	r1, [pc, #148]	; (403404 <main+0x134>)
  40336e:	4826      	ldr	r0, [pc, #152]	; (403408 <main+0x138>)
  403370:	4d26      	ldr	r5, [pc, #152]	; (40340c <main+0x13c>)
  403372:	47a8      	blx	r5
		data_LEDs[i].led_queue_handle = xQueueCreate(5, sizeof(int));
  403374:	4627      	mov	r7, r4
  403376:	4e26      	ldr	r6, [pc, #152]	; (403410 <main+0x140>)
  403378:	4d20      	ldr	r5, [pc, #128]	; (4033fc <main+0x12c>)
  40337a:	463a      	mov	r2, r7
  40337c:	2104      	movs	r1, #4
  40337e:	2005      	movs	r0, #5
  403380:	47b0      	blx	r6
  403382:	5128      	str	r0, [r5, r4]
  403384:	340c      	adds	r4, #12
	for (int i = 0; i < 3; ++i)
  403386:	2c24      	cmp	r4, #36	; 0x24
  403388:	d1f7      	bne.n	40337a <main+0xaa>
	qhUART_TX = xQueueCreate(20, sizeof(char) * 50);
  40338a:	2200      	movs	r2, #0
  40338c:	2132      	movs	r1, #50	; 0x32
  40338e:	2014      	movs	r0, #20
  403390:	4d1f      	ldr	r5, [pc, #124]	; (403410 <main+0x140>)
  403392:	47a8      	blx	r5
  403394:	4604      	mov	r4, r0
	qhUART_RX = xQueueCreate(20, sizeof(char));
  403396:	2200      	movs	r2, #0
  403398:	2101      	movs	r1, #1
  40339a:	2014      	movs	r0, #20
  40339c:	47a8      	blx	r5
  40339e:	4b16      	ldr	r3, [pc, #88]	; (4033f8 <main+0x128>)
  4033a0:	6018      	str	r0, [r3, #0]
	uart_data_tx.uart_tx_queue_handle = qhUART_TX;
  4033a2:	940e      	str	r4, [sp, #56]	; 0x38
	uart_data_rx.uart_tx_queue_handle = qhUART_TX;
  4033a4:	940b      	str	r4, [sp, #44]	; 0x2c
	uart_data_rx.uart_rx_queue_handle = qhUART_RX;
  4033a6:	900c      	str	r0, [sp, #48]	; 0x30
	xTaskCreate(taskUART_TX,
  4033a8:	2500      	movs	r5, #0
  4033aa:	9501      	str	r5, [sp, #4]
  4033ac:	2303      	movs	r3, #3
  4033ae:	9300      	str	r3, [sp, #0]
  4033b0:	ab0e      	add	r3, sp, #56	; 0x38
  4033b2:	f44f 7282 	mov.w	r2, #260	; 0x104
  4033b6:	4917      	ldr	r1, [pc, #92]	; (403414 <main+0x144>)
  4033b8:	4817      	ldr	r0, [pc, #92]	; (403418 <main+0x148>)
  4033ba:	4c14      	ldr	r4, [pc, #80]	; (40340c <main+0x13c>)
  4033bc:	47a0      	blx	r4
	xTaskCreate(taskUART_RX,
  4033be:	9501      	str	r5, [sp, #4]
  4033c0:	2304      	movs	r3, #4
  4033c2:	9300      	str	r3, [sp, #0]
  4033c4:	ab0b      	add	r3, sp, #44	; 0x2c
  4033c6:	f44f 7282 	mov.w	r2, #260	; 0x104
  4033ca:	4914      	ldr	r1, [pc, #80]	; (40341c <main+0x14c>)
  4033cc:	4814      	ldr	r0, [pc, #80]	; (403420 <main+0x150>)
  4033ce:	47a0      	blx	r4
	vTaskStartScheduler();
  4033d0:	4b14      	ldr	r3, [pc, #80]	; (403424 <main+0x154>)
  4033d2:	4798      	blx	r3
  4033d4:	e7fe      	b.n	4033d4 <main+0x104>
  4033d6:	bf00      	nop
  4033d8:	00402e35 	.word	0x00402e35
  4033dc:	00402e9d 	.word	0x00402e9d
  4033e0:	20003e80 	.word	0x20003e80
  4033e4:	00400c35 	.word	0x00400c35
  4033e8:	00402ff9 	.word	0x00402ff9
  4033ec:	00402c09 	.word	0x00402c09
  4033f0:	400e0600 	.word	0x400e0600
  4033f4:	00402d25 	.word	0x00402d25
  4033f8:	20000e54 	.word	0x20000e54
  4033fc:	20000df0 	.word	0x20000df0
  403400:	004003f5 	.word	0x004003f5
  403404:	00408574 	.word	0x00408574
  403408:	00402a49 	.word	0x00402a49
  40340c:	00401739 	.word	0x00401739
  403410:	00400fe5 	.word	0x00400fe5
  403414:	00408584 	.word	0x00408584
  403418:	00402aad 	.word	0x00402aad
  40341c:	00408590 	.word	0x00408590
  403420:	00402ae9 	.word	0x00402ae9
  403424:	00401b0d 	.word	0x00401b0d

00403428 <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  403428:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  40342a:	2300      	movs	r3, #0
  40342c:	9301      	str	r3, [sp, #4]
        __asm volatile
  40342e:	f04f 0350 	mov.w	r3, #80	; 0x50
  403432:	f383 8811 	msr	BASEPRI, r3
  403436:	f3bf 8f6f 	isb	sy
  40343a:	f3bf 8f4f 	dsb	sy

       /* Setting ulBlockVariable to a non-zero value in the debugger will allow
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
  40343e:	9b01      	ldr	r3, [sp, #4]
  403440:	b91b      	cbnz	r3, 40344a <vAssertCalled+0x22>
              {
                     __asm volatile( "NOP" );
  403442:	bf00      	nop
              while( ulBlockVariable == 0UL )
  403444:	9b01      	ldr	r3, [sp, #4]
  403446:	2b00      	cmp	r3, #0
  403448:	d0fb      	beq.n	403442 <vAssertCalled+0x1a>
        __asm volatile
  40344a:	2300      	movs	r3, #0
  40344c:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  403450:	b002      	add	sp, #8
  403452:	4770      	bx	lr

00403454 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  403454:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  403456:	21bb      	movs	r1, #187	; 0xbb
  403458:	4801      	ldr	r0, [pc, #4]	; (403460 <vApplicationMallocFailedHook+0xc>)
  40345a:	4b02      	ldr	r3, [pc, #8]	; (403464 <vApplicationMallocFailedHook+0x10>)
  40345c:	4798      	blx	r3
  40345e:	bd08      	pop	{r3, pc}
  403460:	0040859c 	.word	0x0040859c
  403464:	00403429 	.word	0x00403429

00403468 <vApplicationStackOverflowHook>:
        __asm volatile
  403468:	f04f 0350 	mov.w	r3, #80	; 0x50
  40346c:	f383 8811 	msr	BASEPRI, r3
  403470:	f3bf 8f6f 	isb	sy
  403474:	f3bf 8f4f 	dsb	sy
  403478:	e7fe      	b.n	403478 <vApplicationStackOverflowHook+0x10>
	...

0040347c <atoi>:
  40347c:	220a      	movs	r2, #10
  40347e:	2100      	movs	r1, #0
  403480:	f000 bb84 	b.w	403b8c <strtol>

00403484 <__libc_init_array>:
  403484:	b570      	push	{r4, r5, r6, lr}
  403486:	4e0f      	ldr	r6, [pc, #60]	; (4034c4 <__libc_init_array+0x40>)
  403488:	4d0f      	ldr	r5, [pc, #60]	; (4034c8 <__libc_init_array+0x44>)
  40348a:	1b76      	subs	r6, r6, r5
  40348c:	10b6      	asrs	r6, r6, #2
  40348e:	bf18      	it	ne
  403490:	2400      	movne	r4, #0
  403492:	d005      	beq.n	4034a0 <__libc_init_array+0x1c>
  403494:	3401      	adds	r4, #1
  403496:	f855 3b04 	ldr.w	r3, [r5], #4
  40349a:	4798      	blx	r3
  40349c:	42a6      	cmp	r6, r4
  40349e:	d1f9      	bne.n	403494 <__libc_init_array+0x10>
  4034a0:	4e0a      	ldr	r6, [pc, #40]	; (4034cc <__libc_init_array+0x48>)
  4034a2:	4d0b      	ldr	r5, [pc, #44]	; (4034d0 <__libc_init_array+0x4c>)
  4034a4:	1b76      	subs	r6, r6, r5
  4034a6:	f005 f9c7 	bl	408838 <_init>
  4034aa:	10b6      	asrs	r6, r6, #2
  4034ac:	bf18      	it	ne
  4034ae:	2400      	movne	r4, #0
  4034b0:	d006      	beq.n	4034c0 <__libc_init_array+0x3c>
  4034b2:	3401      	adds	r4, #1
  4034b4:	f855 3b04 	ldr.w	r3, [r5], #4
  4034b8:	4798      	blx	r3
  4034ba:	42a6      	cmp	r6, r4
  4034bc:	d1f9      	bne.n	4034b2 <__libc_init_array+0x2e>
  4034be:	bd70      	pop	{r4, r5, r6, pc}
  4034c0:	bd70      	pop	{r4, r5, r6, pc}
  4034c2:	bf00      	nop
  4034c4:	00408844 	.word	0x00408844
  4034c8:	00408844 	.word	0x00408844
  4034cc:	0040884c 	.word	0x0040884c
  4034d0:	00408844 	.word	0x00408844

004034d4 <memcpy>:
  4034d4:	4684      	mov	ip, r0
  4034d6:	ea41 0300 	orr.w	r3, r1, r0
  4034da:	f013 0303 	ands.w	r3, r3, #3
  4034de:	d16d      	bne.n	4035bc <memcpy+0xe8>
  4034e0:	3a40      	subs	r2, #64	; 0x40
  4034e2:	d341      	bcc.n	403568 <memcpy+0x94>
  4034e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4034e8:	f840 3b04 	str.w	r3, [r0], #4
  4034ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4034f0:	f840 3b04 	str.w	r3, [r0], #4
  4034f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4034f8:	f840 3b04 	str.w	r3, [r0], #4
  4034fc:	f851 3b04 	ldr.w	r3, [r1], #4
  403500:	f840 3b04 	str.w	r3, [r0], #4
  403504:	f851 3b04 	ldr.w	r3, [r1], #4
  403508:	f840 3b04 	str.w	r3, [r0], #4
  40350c:	f851 3b04 	ldr.w	r3, [r1], #4
  403510:	f840 3b04 	str.w	r3, [r0], #4
  403514:	f851 3b04 	ldr.w	r3, [r1], #4
  403518:	f840 3b04 	str.w	r3, [r0], #4
  40351c:	f851 3b04 	ldr.w	r3, [r1], #4
  403520:	f840 3b04 	str.w	r3, [r0], #4
  403524:	f851 3b04 	ldr.w	r3, [r1], #4
  403528:	f840 3b04 	str.w	r3, [r0], #4
  40352c:	f851 3b04 	ldr.w	r3, [r1], #4
  403530:	f840 3b04 	str.w	r3, [r0], #4
  403534:	f851 3b04 	ldr.w	r3, [r1], #4
  403538:	f840 3b04 	str.w	r3, [r0], #4
  40353c:	f851 3b04 	ldr.w	r3, [r1], #4
  403540:	f840 3b04 	str.w	r3, [r0], #4
  403544:	f851 3b04 	ldr.w	r3, [r1], #4
  403548:	f840 3b04 	str.w	r3, [r0], #4
  40354c:	f851 3b04 	ldr.w	r3, [r1], #4
  403550:	f840 3b04 	str.w	r3, [r0], #4
  403554:	f851 3b04 	ldr.w	r3, [r1], #4
  403558:	f840 3b04 	str.w	r3, [r0], #4
  40355c:	f851 3b04 	ldr.w	r3, [r1], #4
  403560:	f840 3b04 	str.w	r3, [r0], #4
  403564:	3a40      	subs	r2, #64	; 0x40
  403566:	d2bd      	bcs.n	4034e4 <memcpy+0x10>
  403568:	3230      	adds	r2, #48	; 0x30
  40356a:	d311      	bcc.n	403590 <memcpy+0xbc>
  40356c:	f851 3b04 	ldr.w	r3, [r1], #4
  403570:	f840 3b04 	str.w	r3, [r0], #4
  403574:	f851 3b04 	ldr.w	r3, [r1], #4
  403578:	f840 3b04 	str.w	r3, [r0], #4
  40357c:	f851 3b04 	ldr.w	r3, [r1], #4
  403580:	f840 3b04 	str.w	r3, [r0], #4
  403584:	f851 3b04 	ldr.w	r3, [r1], #4
  403588:	f840 3b04 	str.w	r3, [r0], #4
  40358c:	3a10      	subs	r2, #16
  40358e:	d2ed      	bcs.n	40356c <memcpy+0x98>
  403590:	320c      	adds	r2, #12
  403592:	d305      	bcc.n	4035a0 <memcpy+0xcc>
  403594:	f851 3b04 	ldr.w	r3, [r1], #4
  403598:	f840 3b04 	str.w	r3, [r0], #4
  40359c:	3a04      	subs	r2, #4
  40359e:	d2f9      	bcs.n	403594 <memcpy+0xc0>
  4035a0:	3204      	adds	r2, #4
  4035a2:	d008      	beq.n	4035b6 <memcpy+0xe2>
  4035a4:	07d2      	lsls	r2, r2, #31
  4035a6:	bf1c      	itt	ne
  4035a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035ac:	f800 3b01 	strbne.w	r3, [r0], #1
  4035b0:	d301      	bcc.n	4035b6 <memcpy+0xe2>
  4035b2:	880b      	ldrh	r3, [r1, #0]
  4035b4:	8003      	strh	r3, [r0, #0]
  4035b6:	4660      	mov	r0, ip
  4035b8:	4770      	bx	lr
  4035ba:	bf00      	nop
  4035bc:	2a08      	cmp	r2, #8
  4035be:	d313      	bcc.n	4035e8 <memcpy+0x114>
  4035c0:	078b      	lsls	r3, r1, #30
  4035c2:	d08d      	beq.n	4034e0 <memcpy+0xc>
  4035c4:	f010 0303 	ands.w	r3, r0, #3
  4035c8:	d08a      	beq.n	4034e0 <memcpy+0xc>
  4035ca:	f1c3 0304 	rsb	r3, r3, #4
  4035ce:	1ad2      	subs	r2, r2, r3
  4035d0:	07db      	lsls	r3, r3, #31
  4035d2:	bf1c      	itt	ne
  4035d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4035dc:	d380      	bcc.n	4034e0 <memcpy+0xc>
  4035de:	f831 3b02 	ldrh.w	r3, [r1], #2
  4035e2:	f820 3b02 	strh.w	r3, [r0], #2
  4035e6:	e77b      	b.n	4034e0 <memcpy+0xc>
  4035e8:	3a04      	subs	r2, #4
  4035ea:	d3d9      	bcc.n	4035a0 <memcpy+0xcc>
  4035ec:	3a01      	subs	r2, #1
  4035ee:	f811 3b01 	ldrb.w	r3, [r1], #1
  4035f2:	f800 3b01 	strb.w	r3, [r0], #1
  4035f6:	d2f9      	bcs.n	4035ec <memcpy+0x118>
  4035f8:	780b      	ldrb	r3, [r1, #0]
  4035fa:	7003      	strb	r3, [r0, #0]
  4035fc:	784b      	ldrb	r3, [r1, #1]
  4035fe:	7043      	strb	r3, [r0, #1]
  403600:	788b      	ldrb	r3, [r1, #2]
  403602:	7083      	strb	r3, [r0, #2]
  403604:	4660      	mov	r0, ip
  403606:	4770      	bx	lr

00403608 <memset>:
  403608:	b470      	push	{r4, r5, r6}
  40360a:	0786      	lsls	r6, r0, #30
  40360c:	d046      	beq.n	40369c <memset+0x94>
  40360e:	1e54      	subs	r4, r2, #1
  403610:	2a00      	cmp	r2, #0
  403612:	d041      	beq.n	403698 <memset+0x90>
  403614:	b2ca      	uxtb	r2, r1
  403616:	4603      	mov	r3, r0
  403618:	e002      	b.n	403620 <memset+0x18>
  40361a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40361e:	d33b      	bcc.n	403698 <memset+0x90>
  403620:	f803 2b01 	strb.w	r2, [r3], #1
  403624:	079d      	lsls	r5, r3, #30
  403626:	d1f8      	bne.n	40361a <memset+0x12>
  403628:	2c03      	cmp	r4, #3
  40362a:	d92e      	bls.n	40368a <memset+0x82>
  40362c:	b2cd      	uxtb	r5, r1
  40362e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403632:	2c0f      	cmp	r4, #15
  403634:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403638:	d919      	bls.n	40366e <memset+0x66>
  40363a:	f103 0210 	add.w	r2, r3, #16
  40363e:	4626      	mov	r6, r4
  403640:	3e10      	subs	r6, #16
  403642:	2e0f      	cmp	r6, #15
  403644:	f842 5c10 	str.w	r5, [r2, #-16]
  403648:	f842 5c0c 	str.w	r5, [r2, #-12]
  40364c:	f842 5c08 	str.w	r5, [r2, #-8]
  403650:	f842 5c04 	str.w	r5, [r2, #-4]
  403654:	f102 0210 	add.w	r2, r2, #16
  403658:	d8f2      	bhi.n	403640 <memset+0x38>
  40365a:	f1a4 0210 	sub.w	r2, r4, #16
  40365e:	f022 020f 	bic.w	r2, r2, #15
  403662:	f004 040f 	and.w	r4, r4, #15
  403666:	3210      	adds	r2, #16
  403668:	2c03      	cmp	r4, #3
  40366a:	4413      	add	r3, r2
  40366c:	d90d      	bls.n	40368a <memset+0x82>
  40366e:	461e      	mov	r6, r3
  403670:	4622      	mov	r2, r4
  403672:	3a04      	subs	r2, #4
  403674:	2a03      	cmp	r2, #3
  403676:	f846 5b04 	str.w	r5, [r6], #4
  40367a:	d8fa      	bhi.n	403672 <memset+0x6a>
  40367c:	1f22      	subs	r2, r4, #4
  40367e:	f022 0203 	bic.w	r2, r2, #3
  403682:	3204      	adds	r2, #4
  403684:	4413      	add	r3, r2
  403686:	f004 0403 	and.w	r4, r4, #3
  40368a:	b12c      	cbz	r4, 403698 <memset+0x90>
  40368c:	b2c9      	uxtb	r1, r1
  40368e:	441c      	add	r4, r3
  403690:	f803 1b01 	strb.w	r1, [r3], #1
  403694:	429c      	cmp	r4, r3
  403696:	d1fb      	bne.n	403690 <memset+0x88>
  403698:	bc70      	pop	{r4, r5, r6}
  40369a:	4770      	bx	lr
  40369c:	4614      	mov	r4, r2
  40369e:	4603      	mov	r3, r0
  4036a0:	e7c2      	b.n	403628 <memset+0x20>
  4036a2:	bf00      	nop

004036a4 <snprintf>:
  4036a4:	b40c      	push	{r2, r3}
  4036a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4036a8:	4b23      	ldr	r3, [pc, #140]	; (403738 <snprintf+0x94>)
  4036aa:	1e0c      	subs	r4, r1, #0
  4036ac:	b09d      	sub	sp, #116	; 0x74
  4036ae:	681d      	ldr	r5, [r3, #0]
  4036b0:	db3d      	blt.n	40372e <snprintf+0x8a>
  4036b2:	f44f 7302 	mov.w	r3, #520	; 0x208
  4036b6:	9002      	str	r0, [sp, #8]
  4036b8:	9006      	str	r0, [sp, #24]
  4036ba:	f8ad 3014 	strh.w	r3, [sp, #20]
  4036be:	ae23      	add	r6, sp, #140	; 0x8c
  4036c0:	d017      	beq.n	4036f2 <snprintf+0x4e>
  4036c2:	3c01      	subs	r4, #1
  4036c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4036c6:	9404      	str	r4, [sp, #16]
  4036c8:	4633      	mov	r3, r6
  4036ca:	f64f 77ff 	movw	r7, #65535	; 0xffff
  4036ce:	a902      	add	r1, sp, #8
  4036d0:	4628      	mov	r0, r5
  4036d2:	9407      	str	r4, [sp, #28]
  4036d4:	9601      	str	r6, [sp, #4]
  4036d6:	f8ad 7016 	strh.w	r7, [sp, #22]
  4036da:	f000 fa6d 	bl	403bb8 <_svfprintf_r>
  4036de:	1c42      	adds	r2, r0, #1
  4036e0:	db1b      	blt.n	40371a <snprintf+0x76>
  4036e2:	9b02      	ldr	r3, [sp, #8]
  4036e4:	2200      	movs	r2, #0
  4036e6:	701a      	strb	r2, [r3, #0]
  4036e8:	b01d      	add	sp, #116	; 0x74
  4036ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4036ee:	b002      	add	sp, #8
  4036f0:	4770      	bx	lr
  4036f2:	4633      	mov	r3, r6
  4036f4:	f64f 77ff 	movw	r7, #65535	; 0xffff
  4036f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4036fa:	9404      	str	r4, [sp, #16]
  4036fc:	a902      	add	r1, sp, #8
  4036fe:	4628      	mov	r0, r5
  403700:	9407      	str	r4, [sp, #28]
  403702:	9601      	str	r6, [sp, #4]
  403704:	f8ad 7016 	strh.w	r7, [sp, #22]
  403708:	f000 fa56 	bl	403bb8 <_svfprintf_r>
  40370c:	1c43      	adds	r3, r0, #1
  40370e:	db07      	blt.n	403720 <snprintf+0x7c>
  403710:	b01d      	add	sp, #116	; 0x74
  403712:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403716:	b002      	add	sp, #8
  403718:	4770      	bx	lr
  40371a:	238b      	movs	r3, #139	; 0x8b
  40371c:	602b      	str	r3, [r5, #0]
  40371e:	e7e0      	b.n	4036e2 <snprintf+0x3e>
  403720:	238b      	movs	r3, #139	; 0x8b
  403722:	602b      	str	r3, [r5, #0]
  403724:	b01d      	add	sp, #116	; 0x74
  403726:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40372a:	b002      	add	sp, #8
  40372c:	4770      	bx	lr
  40372e:	238b      	movs	r3, #139	; 0x8b
  403730:	602b      	str	r3, [r5, #0]
  403732:	f04f 30ff 	mov.w	r0, #4294967295
  403736:	e7eb      	b.n	403710 <snprintf+0x6c>
  403738:	20000024 	.word	0x20000024

0040373c <sprintf>:
  40373c:	b40e      	push	{r1, r2, r3}
  40373e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403740:	b09c      	sub	sp, #112	; 0x70
  403742:	ab21      	add	r3, sp, #132	; 0x84
  403744:	490f      	ldr	r1, [pc, #60]	; (403784 <sprintf+0x48>)
  403746:	f853 2b04 	ldr.w	r2, [r3], #4
  40374a:	9301      	str	r3, [sp, #4]
  40374c:	4605      	mov	r5, r0
  40374e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403752:	6808      	ldr	r0, [r1, #0]
  403754:	9502      	str	r5, [sp, #8]
  403756:	f44f 7702 	mov.w	r7, #520	; 0x208
  40375a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40375e:	a902      	add	r1, sp, #8
  403760:	9506      	str	r5, [sp, #24]
  403762:	f8ad 7014 	strh.w	r7, [sp, #20]
  403766:	9404      	str	r4, [sp, #16]
  403768:	9407      	str	r4, [sp, #28]
  40376a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40376e:	f000 fa23 	bl	403bb8 <_svfprintf_r>
  403772:	9b02      	ldr	r3, [sp, #8]
  403774:	2200      	movs	r2, #0
  403776:	701a      	strb	r2, [r3, #0]
  403778:	b01c      	add	sp, #112	; 0x70
  40377a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40377e:	b003      	add	sp, #12
  403780:	4770      	bx	lr
  403782:	bf00      	nop
  403784:	20000024 	.word	0x20000024

00403788 <strcpy>:
  403788:	ea80 0201 	eor.w	r2, r0, r1
  40378c:	4684      	mov	ip, r0
  40378e:	f012 0f03 	tst.w	r2, #3
  403792:	d14f      	bne.n	403834 <strcpy+0xac>
  403794:	f011 0f03 	tst.w	r1, #3
  403798:	d132      	bne.n	403800 <strcpy+0x78>
  40379a:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40379e:	f011 0f04 	tst.w	r1, #4
  4037a2:	f851 3b04 	ldr.w	r3, [r1], #4
  4037a6:	d00b      	beq.n	4037c0 <strcpy+0x38>
  4037a8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4037ac:	439a      	bics	r2, r3
  4037ae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4037b2:	bf04      	itt	eq
  4037b4:	f84c 3b04 	streq.w	r3, [ip], #4
  4037b8:	f851 3b04 	ldreq.w	r3, [r1], #4
  4037bc:	d116      	bne.n	4037ec <strcpy+0x64>
  4037be:	bf00      	nop
  4037c0:	f851 4b04 	ldr.w	r4, [r1], #4
  4037c4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4037c8:	439a      	bics	r2, r3
  4037ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4037ce:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4037d2:	d10b      	bne.n	4037ec <strcpy+0x64>
  4037d4:	f84c 3b04 	str.w	r3, [ip], #4
  4037d8:	43a2      	bics	r2, r4
  4037da:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4037de:	bf04      	itt	eq
  4037e0:	f851 3b04 	ldreq.w	r3, [r1], #4
  4037e4:	f84c 4b04 	streq.w	r4, [ip], #4
  4037e8:	d0ea      	beq.n	4037c0 <strcpy+0x38>
  4037ea:	4623      	mov	r3, r4
  4037ec:	f80c 3b01 	strb.w	r3, [ip], #1
  4037f0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4037f4:	ea4f 2333 	mov.w	r3, r3, ror #8
  4037f8:	d1f8      	bne.n	4037ec <strcpy+0x64>
  4037fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4037fe:	4770      	bx	lr
  403800:	f011 0f01 	tst.w	r1, #1
  403804:	d006      	beq.n	403814 <strcpy+0x8c>
  403806:	f811 2b01 	ldrb.w	r2, [r1], #1
  40380a:	f80c 2b01 	strb.w	r2, [ip], #1
  40380e:	2a00      	cmp	r2, #0
  403810:	bf08      	it	eq
  403812:	4770      	bxeq	lr
  403814:	f011 0f02 	tst.w	r1, #2
  403818:	d0bf      	beq.n	40379a <strcpy+0x12>
  40381a:	f831 2b02 	ldrh.w	r2, [r1], #2
  40381e:	f012 0fff 	tst.w	r2, #255	; 0xff
  403822:	bf16      	itet	ne
  403824:	f82c 2b02 	strhne.w	r2, [ip], #2
  403828:	f88c 2000 	strbeq.w	r2, [ip]
  40382c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  403830:	d1b3      	bne.n	40379a <strcpy+0x12>
  403832:	4770      	bx	lr
  403834:	f811 2b01 	ldrb.w	r2, [r1], #1
  403838:	f80c 2b01 	strb.w	r2, [ip], #1
  40383c:	2a00      	cmp	r2, #0
  40383e:	d1f9      	bne.n	403834 <strcpy+0xac>
  403840:	4770      	bx	lr
  403842:	bf00      	nop
	...

00403880 <strlen>:
  403880:	f890 f000 	pld	[r0]
  403884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403888:	f020 0107 	bic.w	r1, r0, #7
  40388c:	f06f 0c00 	mvn.w	ip, #0
  403890:	f010 0407 	ands.w	r4, r0, #7
  403894:	f891 f020 	pld	[r1, #32]
  403898:	f040 8049 	bne.w	40392e <strlen+0xae>
  40389c:	f04f 0400 	mov.w	r4, #0
  4038a0:	f06f 0007 	mvn.w	r0, #7
  4038a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4038a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4038ac:	f100 0008 	add.w	r0, r0, #8
  4038b0:	fa82 f24c 	uadd8	r2, r2, ip
  4038b4:	faa4 f28c 	sel	r2, r4, ip
  4038b8:	fa83 f34c 	uadd8	r3, r3, ip
  4038bc:	faa2 f38c 	sel	r3, r2, ip
  4038c0:	bb4b      	cbnz	r3, 403916 <strlen+0x96>
  4038c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4038c6:	fa82 f24c 	uadd8	r2, r2, ip
  4038ca:	f100 0008 	add.w	r0, r0, #8
  4038ce:	faa4 f28c 	sel	r2, r4, ip
  4038d2:	fa83 f34c 	uadd8	r3, r3, ip
  4038d6:	faa2 f38c 	sel	r3, r2, ip
  4038da:	b9e3      	cbnz	r3, 403916 <strlen+0x96>
  4038dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4038e0:	fa82 f24c 	uadd8	r2, r2, ip
  4038e4:	f100 0008 	add.w	r0, r0, #8
  4038e8:	faa4 f28c 	sel	r2, r4, ip
  4038ec:	fa83 f34c 	uadd8	r3, r3, ip
  4038f0:	faa2 f38c 	sel	r3, r2, ip
  4038f4:	b97b      	cbnz	r3, 403916 <strlen+0x96>
  4038f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4038fa:	f101 0120 	add.w	r1, r1, #32
  4038fe:	fa82 f24c 	uadd8	r2, r2, ip
  403902:	f100 0008 	add.w	r0, r0, #8
  403906:	faa4 f28c 	sel	r2, r4, ip
  40390a:	fa83 f34c 	uadd8	r3, r3, ip
  40390e:	faa2 f38c 	sel	r3, r2, ip
  403912:	2b00      	cmp	r3, #0
  403914:	d0c6      	beq.n	4038a4 <strlen+0x24>
  403916:	2a00      	cmp	r2, #0
  403918:	bf04      	itt	eq
  40391a:	3004      	addeq	r0, #4
  40391c:	461a      	moveq	r2, r3
  40391e:	ba12      	rev	r2, r2
  403920:	fab2 f282 	clz	r2, r2
  403924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40392c:	4770      	bx	lr
  40392e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403932:	f004 0503 	and.w	r5, r4, #3
  403936:	f1c4 0000 	rsb	r0, r4, #0
  40393a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40393e:	f014 0f04 	tst.w	r4, #4
  403942:	f891 f040 	pld	[r1, #64]	; 0x40
  403946:	fa0c f505 	lsl.w	r5, ip, r5
  40394a:	ea62 0205 	orn	r2, r2, r5
  40394e:	bf1c      	itt	ne
  403950:	ea63 0305 	ornne	r3, r3, r5
  403954:	4662      	movne	r2, ip
  403956:	f04f 0400 	mov.w	r4, #0
  40395a:	e7a9      	b.n	4038b0 <strlen+0x30>

0040395c <strncmp>:
  40395c:	2a00      	cmp	r2, #0
  40395e:	d041      	beq.n	4039e4 <strncmp+0x88>
  403960:	ea40 0301 	orr.w	r3, r0, r1
  403964:	f013 0303 	ands.w	r3, r3, #3
  403968:	b4f0      	push	{r4, r5, r6, r7}
  40396a:	d125      	bne.n	4039b8 <strncmp+0x5c>
  40396c:	2a03      	cmp	r2, #3
  40396e:	d923      	bls.n	4039b8 <strncmp+0x5c>
  403970:	6804      	ldr	r4, [r0, #0]
  403972:	680d      	ldr	r5, [r1, #0]
  403974:	42ac      	cmp	r4, r5
  403976:	d11f      	bne.n	4039b8 <strncmp+0x5c>
  403978:	3a04      	subs	r2, #4
  40397a:	d038      	beq.n	4039ee <strncmp+0x92>
  40397c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  403980:	ea25 0404 	bic.w	r4, r5, r4
  403984:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  403988:	d12e      	bne.n	4039e8 <strncmp+0x8c>
  40398a:	3004      	adds	r0, #4
  40398c:	3104      	adds	r1, #4
  40398e:	e00f      	b.n	4039b0 <strncmp+0x54>
  403990:	f850 3b04 	ldr.w	r3, [r0], #4
  403994:	680e      	ldr	r6, [r1, #0]
  403996:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  40399a:	42b3      	cmp	r3, r6
  40399c:	ea24 0403 	bic.w	r4, r4, r3
  4039a0:	f101 0104 	add.w	r1, r1, #4
  4039a4:	d126      	bne.n	4039f4 <strncmp+0x98>
  4039a6:	3a04      	subs	r2, #4
  4039a8:	d021      	beq.n	4039ee <strncmp+0x92>
  4039aa:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4039ae:	d11b      	bne.n	4039e8 <strncmp+0x8c>
  4039b0:	2a03      	cmp	r2, #3
  4039b2:	4607      	mov	r7, r0
  4039b4:	460d      	mov	r5, r1
  4039b6:	d8eb      	bhi.n	403990 <strncmp+0x34>
  4039b8:	7805      	ldrb	r5, [r0, #0]
  4039ba:	780c      	ldrb	r4, [r1, #0]
  4039bc:	42ac      	cmp	r4, r5
  4039be:	f102 33ff 	add.w	r3, r2, #4294967295
  4039c2:	d11a      	bne.n	4039fa <strncmp+0x9e>
  4039c4:	b183      	cbz	r3, 4039e8 <strncmp+0x8c>
  4039c6:	b914      	cbnz	r4, 4039ce <strncmp+0x72>
  4039c8:	e00e      	b.n	4039e8 <strncmp+0x8c>
  4039ca:	b16b      	cbz	r3, 4039e8 <strncmp+0x8c>
  4039cc:	b17a      	cbz	r2, 4039ee <strncmp+0x92>
  4039ce:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4039d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  4039d6:	42a2      	cmp	r2, r4
  4039d8:	f103 33ff 	add.w	r3, r3, #4294967295
  4039dc:	d0f5      	beq.n	4039ca <strncmp+0x6e>
  4039de:	1b10      	subs	r0, r2, r4
  4039e0:	bcf0      	pop	{r4, r5, r6, r7}
  4039e2:	4770      	bx	lr
  4039e4:	4610      	mov	r0, r2
  4039e6:	4770      	bx	lr
  4039e8:	2000      	movs	r0, #0
  4039ea:	bcf0      	pop	{r4, r5, r6, r7}
  4039ec:	4770      	bx	lr
  4039ee:	4610      	mov	r0, r2
  4039f0:	bcf0      	pop	{r4, r5, r6, r7}
  4039f2:	4770      	bx	lr
  4039f4:	4629      	mov	r1, r5
  4039f6:	4638      	mov	r0, r7
  4039f8:	e7de      	b.n	4039b8 <strncmp+0x5c>
  4039fa:	462a      	mov	r2, r5
  4039fc:	e7ef      	b.n	4039de <strncmp+0x82>
  4039fe:	bf00      	nop

00403a00 <strncpy>:
  403a00:	ea40 0301 	orr.w	r3, r0, r1
  403a04:	f013 0f03 	tst.w	r3, #3
  403a08:	b470      	push	{r4, r5, r6}
  403a0a:	4603      	mov	r3, r0
  403a0c:	d024      	beq.n	403a58 <strncpy+0x58>
  403a0e:	b1a2      	cbz	r2, 403a3a <strncpy+0x3a>
  403a10:	780c      	ldrb	r4, [r1, #0]
  403a12:	701c      	strb	r4, [r3, #0]
  403a14:	3a01      	subs	r2, #1
  403a16:	3301      	adds	r3, #1
  403a18:	3101      	adds	r1, #1
  403a1a:	b13c      	cbz	r4, 403a2c <strncpy+0x2c>
  403a1c:	b16a      	cbz	r2, 403a3a <strncpy+0x3a>
  403a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403a22:	f803 4b01 	strb.w	r4, [r3], #1
  403a26:	3a01      	subs	r2, #1
  403a28:	2c00      	cmp	r4, #0
  403a2a:	d1f7      	bne.n	403a1c <strncpy+0x1c>
  403a2c:	b12a      	cbz	r2, 403a3a <strncpy+0x3a>
  403a2e:	441a      	add	r2, r3
  403a30:	2100      	movs	r1, #0
  403a32:	f803 1b01 	strb.w	r1, [r3], #1
  403a36:	429a      	cmp	r2, r3
  403a38:	d1fb      	bne.n	403a32 <strncpy+0x32>
  403a3a:	bc70      	pop	{r4, r5, r6}
  403a3c:	4770      	bx	lr
  403a3e:	460e      	mov	r6, r1
  403a40:	f851 5b04 	ldr.w	r5, [r1], #4
  403a44:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  403a48:	ea24 0405 	bic.w	r4, r4, r5
  403a4c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  403a50:	d105      	bne.n	403a5e <strncpy+0x5e>
  403a52:	f843 5b04 	str.w	r5, [r3], #4
  403a56:	3a04      	subs	r2, #4
  403a58:	2a03      	cmp	r2, #3
  403a5a:	d8f0      	bhi.n	403a3e <strncpy+0x3e>
  403a5c:	e7d7      	b.n	403a0e <strncpy+0xe>
  403a5e:	4631      	mov	r1, r6
  403a60:	e7d6      	b.n	403a10 <strncpy+0x10>
  403a62:	bf00      	nop

00403a64 <_strtol_l.isra.0>:
  403a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a68:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  403a6c:	460f      	mov	r7, r1
  403a6e:	4680      	mov	r8, r0
  403a70:	4616      	mov	r6, r2
  403a72:	461d      	mov	r5, r3
  403a74:	468a      	mov	sl, r1
  403a76:	e000      	b.n	403a7a <_strtol_l.isra.0+0x16>
  403a78:	46a2      	mov	sl, r4
  403a7a:	4654      	mov	r4, sl
  403a7c:	4648      	mov	r0, r9
  403a7e:	f814 bb01 	ldrb.w	fp, [r4], #1
  403a82:	f002 fab1 	bl	405fe8 <__locale_ctype_ptr_l>
  403a86:	4458      	add	r0, fp
  403a88:	7842      	ldrb	r2, [r0, #1]
  403a8a:	f012 0208 	ands.w	r2, r2, #8
  403a8e:	d1f3      	bne.n	403a78 <_strtol_l.isra.0+0x14>
  403a90:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  403a94:	d04f      	beq.n	403b36 <_strtol_l.isra.0+0xd2>
  403a96:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  403a9a:	bf04      	itt	eq
  403a9c:	f894 b000 	ldrbeq.w	fp, [r4]
  403aa0:	f10a 0402 	addeq.w	r4, sl, #2
  403aa4:	b11d      	cbz	r5, 403aae <_strtol_l.isra.0+0x4a>
  403aa6:	2d10      	cmp	r5, #16
  403aa8:	d056      	beq.n	403b58 <_strtol_l.isra.0+0xf4>
  403aaa:	46ac      	mov	ip, r5
  403aac:	e004      	b.n	403ab8 <_strtol_l.isra.0+0x54>
  403aae:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  403ab2:	d060      	beq.n	403b76 <_strtol_l.isra.0+0x112>
  403ab4:	250a      	movs	r5, #10
  403ab6:	46ac      	mov	ip, r5
  403ab8:	2a00      	cmp	r2, #0
  403aba:	bf0c      	ite	eq
  403abc:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  403ac0:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  403ac4:	2100      	movs	r1, #0
  403ac6:	fbb9 fefc 	udiv	lr, r9, ip
  403aca:	4608      	mov	r0, r1
  403acc:	fb0c 9a1e 	mls	sl, ip, lr, r9
  403ad0:	e005      	b.n	403ade <_strtol_l.isra.0+0x7a>
  403ad2:	d029      	beq.n	403b28 <_strtol_l.isra.0+0xc4>
  403ad4:	fb0c 3000 	mla	r0, ip, r0, r3
  403ad8:	2101      	movs	r1, #1
  403ada:	f814 bb01 	ldrb.w	fp, [r4], #1
  403ade:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  403ae2:	2b09      	cmp	r3, #9
  403ae4:	d905      	bls.n	403af2 <_strtol_l.isra.0+0x8e>
  403ae6:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  403aea:	2b19      	cmp	r3, #25
  403aec:	d80b      	bhi.n	403b06 <_strtol_l.isra.0+0xa2>
  403aee:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  403af2:	429d      	cmp	r5, r3
  403af4:	dd0f      	ble.n	403b16 <_strtol_l.isra.0+0xb2>
  403af6:	f1b1 3fff 	cmp.w	r1, #4294967295
  403afa:	d0ee      	beq.n	403ada <_strtol_l.isra.0+0x76>
  403afc:	4586      	cmp	lr, r0
  403afe:	d2e8      	bcs.n	403ad2 <_strtol_l.isra.0+0x6e>
  403b00:	f04f 31ff 	mov.w	r1, #4294967295
  403b04:	e7e9      	b.n	403ada <_strtol_l.isra.0+0x76>
  403b06:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  403b0a:	2b19      	cmp	r3, #25
  403b0c:	d803      	bhi.n	403b16 <_strtol_l.isra.0+0xb2>
  403b0e:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  403b12:	429d      	cmp	r5, r3
  403b14:	dcef      	bgt.n	403af6 <_strtol_l.isra.0+0x92>
  403b16:	1c4b      	adds	r3, r1, #1
  403b18:	d013      	beq.n	403b42 <_strtol_l.isra.0+0xde>
  403b1a:	b102      	cbz	r2, 403b1e <_strtol_l.isra.0+0xba>
  403b1c:	4240      	negs	r0, r0
  403b1e:	b146      	cbz	r6, 403b32 <_strtol_l.isra.0+0xce>
  403b20:	b9c1      	cbnz	r1, 403b54 <_strtol_l.isra.0+0xf0>
  403b22:	6037      	str	r7, [r6, #0]
  403b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b28:	459a      	cmp	sl, r3
  403b2a:	dad3      	bge.n	403ad4 <_strtol_l.isra.0+0x70>
  403b2c:	f04f 31ff 	mov.w	r1, #4294967295
  403b30:	e7d3      	b.n	403ada <_strtol_l.isra.0+0x76>
  403b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b36:	f894 b000 	ldrb.w	fp, [r4]
  403b3a:	2201      	movs	r2, #1
  403b3c:	f10a 0402 	add.w	r4, sl, #2
  403b40:	e7b0      	b.n	403aa4 <_strtol_l.isra.0+0x40>
  403b42:	2322      	movs	r3, #34	; 0x22
  403b44:	f8c8 3000 	str.w	r3, [r8]
  403b48:	b1ee      	cbz	r6, 403b86 <_strtol_l.isra.0+0x122>
  403b4a:	1e67      	subs	r7, r4, #1
  403b4c:	4648      	mov	r0, r9
  403b4e:	6037      	str	r7, [r6, #0]
  403b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b54:	4681      	mov	r9, r0
  403b56:	e7f8      	b.n	403b4a <_strtol_l.isra.0+0xe6>
  403b58:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  403b5c:	d1a5      	bne.n	403aaa <_strtol_l.isra.0+0x46>
  403b5e:	7823      	ldrb	r3, [r4, #0]
  403b60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  403b64:	2b58      	cmp	r3, #88	; 0x58
  403b66:	d1a0      	bne.n	403aaa <_strtol_l.isra.0+0x46>
  403b68:	f04f 0c10 	mov.w	ip, #16
  403b6c:	f894 b001 	ldrb.w	fp, [r4, #1]
  403b70:	4665      	mov	r5, ip
  403b72:	3402      	adds	r4, #2
  403b74:	e7a0      	b.n	403ab8 <_strtol_l.isra.0+0x54>
  403b76:	7823      	ldrb	r3, [r4, #0]
  403b78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  403b7c:	2b58      	cmp	r3, #88	; 0x58
  403b7e:	d0f3      	beq.n	403b68 <_strtol_l.isra.0+0x104>
  403b80:	2508      	movs	r5, #8
  403b82:	46ac      	mov	ip, r5
  403b84:	e798      	b.n	403ab8 <_strtol_l.isra.0+0x54>
  403b86:	4648      	mov	r0, r9
  403b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00403b8c <strtol>:
  403b8c:	b530      	push	{r4, r5, lr}
  403b8e:	4c08      	ldr	r4, [pc, #32]	; (403bb0 <strtol+0x24>)
  403b90:	4b08      	ldr	r3, [pc, #32]	; (403bb4 <strtol+0x28>)
  403b92:	6825      	ldr	r5, [r4, #0]
  403b94:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  403b96:	b083      	sub	sp, #12
  403b98:	2c00      	cmp	r4, #0
  403b9a:	bf08      	it	eq
  403b9c:	461c      	moveq	r4, r3
  403b9e:	9400      	str	r4, [sp, #0]
  403ba0:	4613      	mov	r3, r2
  403ba2:	460a      	mov	r2, r1
  403ba4:	4601      	mov	r1, r0
  403ba6:	4628      	mov	r0, r5
  403ba8:	f7ff ff5c 	bl	403a64 <_strtol_l.isra.0>
  403bac:	b003      	add	sp, #12
  403bae:	bd30      	pop	{r4, r5, pc}
  403bb0:	20000024 	.word	0x20000024
  403bb4:	20000454 	.word	0x20000454

00403bb8 <_svfprintf_r>:
  403bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403bbc:	b0c3      	sub	sp, #268	; 0x10c
  403bbe:	460c      	mov	r4, r1
  403bc0:	910b      	str	r1, [sp, #44]	; 0x2c
  403bc2:	4692      	mov	sl, r2
  403bc4:	930f      	str	r3, [sp, #60]	; 0x3c
  403bc6:	900c      	str	r0, [sp, #48]	; 0x30
  403bc8:	f002 fa12 	bl	405ff0 <_localeconv_r>
  403bcc:	6803      	ldr	r3, [r0, #0]
  403bce:	931a      	str	r3, [sp, #104]	; 0x68
  403bd0:	4618      	mov	r0, r3
  403bd2:	f7ff fe55 	bl	403880 <strlen>
  403bd6:	89a3      	ldrh	r3, [r4, #12]
  403bd8:	9019      	str	r0, [sp, #100]	; 0x64
  403bda:	0619      	lsls	r1, r3, #24
  403bdc:	d503      	bpl.n	403be6 <_svfprintf_r+0x2e>
  403bde:	6923      	ldr	r3, [r4, #16]
  403be0:	2b00      	cmp	r3, #0
  403be2:	f001 8003 	beq.w	404bec <_svfprintf_r+0x1034>
  403be6:	2300      	movs	r3, #0
  403be8:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403bec:	9313      	str	r3, [sp, #76]	; 0x4c
  403bee:	9315      	str	r3, [sp, #84]	; 0x54
  403bf0:	9314      	str	r3, [sp, #80]	; 0x50
  403bf2:	9327      	str	r3, [sp, #156]	; 0x9c
  403bf4:	9326      	str	r3, [sp, #152]	; 0x98
  403bf6:	9318      	str	r3, [sp, #96]	; 0x60
  403bf8:	931b      	str	r3, [sp, #108]	; 0x6c
  403bfa:	9309      	str	r3, [sp, #36]	; 0x24
  403bfc:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403c00:	46c8      	mov	r8, r9
  403c02:	9316      	str	r3, [sp, #88]	; 0x58
  403c04:	9317      	str	r3, [sp, #92]	; 0x5c
  403c06:	f89a 3000 	ldrb.w	r3, [sl]
  403c0a:	4654      	mov	r4, sl
  403c0c:	b1e3      	cbz	r3, 403c48 <_svfprintf_r+0x90>
  403c0e:	2b25      	cmp	r3, #37	; 0x25
  403c10:	d102      	bne.n	403c18 <_svfprintf_r+0x60>
  403c12:	e019      	b.n	403c48 <_svfprintf_r+0x90>
  403c14:	2b25      	cmp	r3, #37	; 0x25
  403c16:	d003      	beq.n	403c20 <_svfprintf_r+0x68>
  403c18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403c1c:	2b00      	cmp	r3, #0
  403c1e:	d1f9      	bne.n	403c14 <_svfprintf_r+0x5c>
  403c20:	eba4 050a 	sub.w	r5, r4, sl
  403c24:	b185      	cbz	r5, 403c48 <_svfprintf_r+0x90>
  403c26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c28:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403c2a:	f8c8 a000 	str.w	sl, [r8]
  403c2e:	3301      	adds	r3, #1
  403c30:	442a      	add	r2, r5
  403c32:	2b07      	cmp	r3, #7
  403c34:	f8c8 5004 	str.w	r5, [r8, #4]
  403c38:	9227      	str	r2, [sp, #156]	; 0x9c
  403c3a:	9326      	str	r3, [sp, #152]	; 0x98
  403c3c:	dc7f      	bgt.n	403d3e <_svfprintf_r+0x186>
  403c3e:	f108 0808 	add.w	r8, r8, #8
  403c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c44:	442b      	add	r3, r5
  403c46:	9309      	str	r3, [sp, #36]	; 0x24
  403c48:	7823      	ldrb	r3, [r4, #0]
  403c4a:	2b00      	cmp	r3, #0
  403c4c:	d07f      	beq.n	403d4e <_svfprintf_r+0x196>
  403c4e:	2300      	movs	r3, #0
  403c50:	461a      	mov	r2, r3
  403c52:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403c56:	4619      	mov	r1, r3
  403c58:	930d      	str	r3, [sp, #52]	; 0x34
  403c5a:	469b      	mov	fp, r3
  403c5c:	f04f 30ff 	mov.w	r0, #4294967295
  403c60:	7863      	ldrb	r3, [r4, #1]
  403c62:	900a      	str	r0, [sp, #40]	; 0x28
  403c64:	f104 0a01 	add.w	sl, r4, #1
  403c68:	f10a 0a01 	add.w	sl, sl, #1
  403c6c:	f1a3 0020 	sub.w	r0, r3, #32
  403c70:	2858      	cmp	r0, #88	; 0x58
  403c72:	f200 83c1 	bhi.w	4043f8 <_svfprintf_r+0x840>
  403c76:	e8df f010 	tbh	[pc, r0, lsl #1]
  403c7a:	0238      	.short	0x0238
  403c7c:	03bf03bf 	.word	0x03bf03bf
  403c80:	03bf0240 	.word	0x03bf0240
  403c84:	03bf03bf 	.word	0x03bf03bf
  403c88:	03bf03bf 	.word	0x03bf03bf
  403c8c:	024503bf 	.word	0x024503bf
  403c90:	03bf0203 	.word	0x03bf0203
  403c94:	026b005d 	.word	0x026b005d
  403c98:	028603bf 	.word	0x028603bf
  403c9c:	039d039d 	.word	0x039d039d
  403ca0:	039d039d 	.word	0x039d039d
  403ca4:	039d039d 	.word	0x039d039d
  403ca8:	039d039d 	.word	0x039d039d
  403cac:	03bf039d 	.word	0x03bf039d
  403cb0:	03bf03bf 	.word	0x03bf03bf
  403cb4:	03bf03bf 	.word	0x03bf03bf
  403cb8:	03bf03bf 	.word	0x03bf03bf
  403cbc:	03bf03bf 	.word	0x03bf03bf
  403cc0:	033703bf 	.word	0x033703bf
  403cc4:	03bf0357 	.word	0x03bf0357
  403cc8:	03bf0357 	.word	0x03bf0357
  403ccc:	03bf03bf 	.word	0x03bf03bf
  403cd0:	039803bf 	.word	0x039803bf
  403cd4:	03bf03bf 	.word	0x03bf03bf
  403cd8:	03bf03ad 	.word	0x03bf03ad
  403cdc:	03bf03bf 	.word	0x03bf03bf
  403ce0:	03bf03bf 	.word	0x03bf03bf
  403ce4:	03bf0259 	.word	0x03bf0259
  403ce8:	031e03bf 	.word	0x031e03bf
  403cec:	03bf03bf 	.word	0x03bf03bf
  403cf0:	03bf03bf 	.word	0x03bf03bf
  403cf4:	03bf03bf 	.word	0x03bf03bf
  403cf8:	03bf03bf 	.word	0x03bf03bf
  403cfc:	03bf03bf 	.word	0x03bf03bf
  403d00:	02db02c6 	.word	0x02db02c6
  403d04:	03570357 	.word	0x03570357
  403d08:	028b0357 	.word	0x028b0357
  403d0c:	03bf02db 	.word	0x03bf02db
  403d10:	029003bf 	.word	0x029003bf
  403d14:	029d03bf 	.word	0x029d03bf
  403d18:	02b401cc 	.word	0x02b401cc
  403d1c:	03bf0208 	.word	0x03bf0208
  403d20:	03bf01e1 	.word	0x03bf01e1
  403d24:	03bf007e 	.word	0x03bf007e
  403d28:	020d03bf 	.word	0x020d03bf
  403d2c:	980d      	ldr	r0, [sp, #52]	; 0x34
  403d2e:	930f      	str	r3, [sp, #60]	; 0x3c
  403d30:	4240      	negs	r0, r0
  403d32:	900d      	str	r0, [sp, #52]	; 0x34
  403d34:	f04b 0b04 	orr.w	fp, fp, #4
  403d38:	f89a 3000 	ldrb.w	r3, [sl]
  403d3c:	e794      	b.n	403c68 <_svfprintf_r+0xb0>
  403d3e:	aa25      	add	r2, sp, #148	; 0x94
  403d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d42:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d44:	f002 ff94 	bl	406c70 <__ssprint_r>
  403d48:	b940      	cbnz	r0, 403d5c <_svfprintf_r+0x1a4>
  403d4a:	46c8      	mov	r8, r9
  403d4c:	e779      	b.n	403c42 <_svfprintf_r+0x8a>
  403d4e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403d50:	b123      	cbz	r3, 403d5c <_svfprintf_r+0x1a4>
  403d52:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d56:	aa25      	add	r2, sp, #148	; 0x94
  403d58:	f002 ff8a 	bl	406c70 <__ssprint_r>
  403d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403d5e:	899b      	ldrh	r3, [r3, #12]
  403d60:	f013 0f40 	tst.w	r3, #64	; 0x40
  403d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d66:	bf18      	it	ne
  403d68:	f04f 33ff 	movne.w	r3, #4294967295
  403d6c:	9309      	str	r3, [sp, #36]	; 0x24
  403d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
  403d70:	b043      	add	sp, #268	; 0x10c
  403d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d76:	f01b 0f20 	tst.w	fp, #32
  403d7a:	9311      	str	r3, [sp, #68]	; 0x44
  403d7c:	f040 81dd 	bne.w	40413a <_svfprintf_r+0x582>
  403d80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403d82:	f01b 0f10 	tst.w	fp, #16
  403d86:	4613      	mov	r3, r2
  403d88:	f040 856e 	bne.w	404868 <_svfprintf_r+0xcb0>
  403d8c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403d90:	f000 856a 	beq.w	404868 <_svfprintf_r+0xcb0>
  403d94:	8814      	ldrh	r4, [r2, #0]
  403d96:	3204      	adds	r2, #4
  403d98:	2500      	movs	r5, #0
  403d9a:	2301      	movs	r3, #1
  403d9c:	920f      	str	r2, [sp, #60]	; 0x3c
  403d9e:	2700      	movs	r7, #0
  403da0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403da4:	990a      	ldr	r1, [sp, #40]	; 0x28
  403da6:	1c4a      	adds	r2, r1, #1
  403da8:	f000 8265 	beq.w	404276 <_svfprintf_r+0x6be>
  403dac:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403db0:	9207      	str	r2, [sp, #28]
  403db2:	ea54 0205 	orrs.w	r2, r4, r5
  403db6:	f040 8264 	bne.w	404282 <_svfprintf_r+0x6ca>
  403dba:	2900      	cmp	r1, #0
  403dbc:	f040 843c 	bne.w	404638 <_svfprintf_r+0xa80>
  403dc0:	2b00      	cmp	r3, #0
  403dc2:	f040 84d7 	bne.w	404774 <_svfprintf_r+0xbbc>
  403dc6:	f01b 0301 	ands.w	r3, fp, #1
  403dca:	930e      	str	r3, [sp, #56]	; 0x38
  403dcc:	f000 8604 	beq.w	4049d8 <_svfprintf_r+0xe20>
  403dd0:	ae42      	add	r6, sp, #264	; 0x108
  403dd2:	2330      	movs	r3, #48	; 0x30
  403dd4:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403ddc:	4293      	cmp	r3, r2
  403dde:	bfb8      	it	lt
  403de0:	4613      	movlt	r3, r2
  403de2:	9308      	str	r3, [sp, #32]
  403de4:	2300      	movs	r3, #0
  403de6:	9312      	str	r3, [sp, #72]	; 0x48
  403de8:	b117      	cbz	r7, 403df0 <_svfprintf_r+0x238>
  403dea:	9b08      	ldr	r3, [sp, #32]
  403dec:	3301      	adds	r3, #1
  403dee:	9308      	str	r3, [sp, #32]
  403df0:	9b07      	ldr	r3, [sp, #28]
  403df2:	f013 0302 	ands.w	r3, r3, #2
  403df6:	9310      	str	r3, [sp, #64]	; 0x40
  403df8:	d002      	beq.n	403e00 <_svfprintf_r+0x248>
  403dfa:	9b08      	ldr	r3, [sp, #32]
  403dfc:	3302      	adds	r3, #2
  403dfe:	9308      	str	r3, [sp, #32]
  403e00:	9b07      	ldr	r3, [sp, #28]
  403e02:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403e06:	f040 830e 	bne.w	404426 <_svfprintf_r+0x86e>
  403e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e0c:	9a08      	ldr	r2, [sp, #32]
  403e0e:	eba3 0b02 	sub.w	fp, r3, r2
  403e12:	f1bb 0f00 	cmp.w	fp, #0
  403e16:	f340 8306 	ble.w	404426 <_svfprintf_r+0x86e>
  403e1a:	f1bb 0f10 	cmp.w	fp, #16
  403e1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e20:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403e22:	dd29      	ble.n	403e78 <_svfprintf_r+0x2c0>
  403e24:	4643      	mov	r3, r8
  403e26:	4621      	mov	r1, r4
  403e28:	46a8      	mov	r8, r5
  403e2a:	2710      	movs	r7, #16
  403e2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403e2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403e30:	e006      	b.n	403e40 <_svfprintf_r+0x288>
  403e32:	f1ab 0b10 	sub.w	fp, fp, #16
  403e36:	f1bb 0f10 	cmp.w	fp, #16
  403e3a:	f103 0308 	add.w	r3, r3, #8
  403e3e:	dd18      	ble.n	403e72 <_svfprintf_r+0x2ba>
  403e40:	3201      	adds	r2, #1
  403e42:	48b7      	ldr	r0, [pc, #732]	; (404120 <_svfprintf_r+0x568>)
  403e44:	9226      	str	r2, [sp, #152]	; 0x98
  403e46:	3110      	adds	r1, #16
  403e48:	2a07      	cmp	r2, #7
  403e4a:	9127      	str	r1, [sp, #156]	; 0x9c
  403e4c:	e883 0081 	stmia.w	r3, {r0, r7}
  403e50:	ddef      	ble.n	403e32 <_svfprintf_r+0x27a>
  403e52:	aa25      	add	r2, sp, #148	; 0x94
  403e54:	4629      	mov	r1, r5
  403e56:	4620      	mov	r0, r4
  403e58:	f002 ff0a 	bl	406c70 <__ssprint_r>
  403e5c:	2800      	cmp	r0, #0
  403e5e:	f47f af7d 	bne.w	403d5c <_svfprintf_r+0x1a4>
  403e62:	f1ab 0b10 	sub.w	fp, fp, #16
  403e66:	f1bb 0f10 	cmp.w	fp, #16
  403e6a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403e6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403e6e:	464b      	mov	r3, r9
  403e70:	dce6      	bgt.n	403e40 <_svfprintf_r+0x288>
  403e72:	4645      	mov	r5, r8
  403e74:	460c      	mov	r4, r1
  403e76:	4698      	mov	r8, r3
  403e78:	3201      	adds	r2, #1
  403e7a:	4ba9      	ldr	r3, [pc, #676]	; (404120 <_svfprintf_r+0x568>)
  403e7c:	9226      	str	r2, [sp, #152]	; 0x98
  403e7e:	445c      	add	r4, fp
  403e80:	2a07      	cmp	r2, #7
  403e82:	9427      	str	r4, [sp, #156]	; 0x9c
  403e84:	e888 0808 	stmia.w	r8, {r3, fp}
  403e88:	f300 8498 	bgt.w	4047bc <_svfprintf_r+0xc04>
  403e8c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403e90:	f108 0808 	add.w	r8, r8, #8
  403e94:	b177      	cbz	r7, 403eb4 <_svfprintf_r+0x2fc>
  403e96:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e98:	3301      	adds	r3, #1
  403e9a:	3401      	adds	r4, #1
  403e9c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403ea0:	2201      	movs	r2, #1
  403ea2:	2b07      	cmp	r3, #7
  403ea4:	9427      	str	r4, [sp, #156]	; 0x9c
  403ea6:	9326      	str	r3, [sp, #152]	; 0x98
  403ea8:	e888 0006 	stmia.w	r8, {r1, r2}
  403eac:	f300 83db 	bgt.w	404666 <_svfprintf_r+0xaae>
  403eb0:	f108 0808 	add.w	r8, r8, #8
  403eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403eb6:	b16b      	cbz	r3, 403ed4 <_svfprintf_r+0x31c>
  403eb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403eba:	3301      	adds	r3, #1
  403ebc:	3402      	adds	r4, #2
  403ebe:	a91e      	add	r1, sp, #120	; 0x78
  403ec0:	2202      	movs	r2, #2
  403ec2:	2b07      	cmp	r3, #7
  403ec4:	9427      	str	r4, [sp, #156]	; 0x9c
  403ec6:	9326      	str	r3, [sp, #152]	; 0x98
  403ec8:	e888 0006 	stmia.w	r8, {r1, r2}
  403ecc:	f300 83d6 	bgt.w	40467c <_svfprintf_r+0xac4>
  403ed0:	f108 0808 	add.w	r8, r8, #8
  403ed4:	2d80      	cmp	r5, #128	; 0x80
  403ed6:	f000 8315 	beq.w	404504 <_svfprintf_r+0x94c>
  403eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403ede:	1a9f      	subs	r7, r3, r2
  403ee0:	2f00      	cmp	r7, #0
  403ee2:	dd36      	ble.n	403f52 <_svfprintf_r+0x39a>
  403ee4:	2f10      	cmp	r7, #16
  403ee6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ee8:	4d8e      	ldr	r5, [pc, #568]	; (404124 <_svfprintf_r+0x56c>)
  403eea:	dd27      	ble.n	403f3c <_svfprintf_r+0x384>
  403eec:	4642      	mov	r2, r8
  403eee:	4621      	mov	r1, r4
  403ef0:	46b0      	mov	r8, r6
  403ef2:	f04f 0b10 	mov.w	fp, #16
  403ef6:	462e      	mov	r6, r5
  403ef8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403efa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403efc:	e004      	b.n	403f08 <_svfprintf_r+0x350>
  403efe:	3f10      	subs	r7, #16
  403f00:	2f10      	cmp	r7, #16
  403f02:	f102 0208 	add.w	r2, r2, #8
  403f06:	dd15      	ble.n	403f34 <_svfprintf_r+0x37c>
  403f08:	3301      	adds	r3, #1
  403f0a:	3110      	adds	r1, #16
  403f0c:	2b07      	cmp	r3, #7
  403f0e:	9127      	str	r1, [sp, #156]	; 0x9c
  403f10:	9326      	str	r3, [sp, #152]	; 0x98
  403f12:	e882 0840 	stmia.w	r2, {r6, fp}
  403f16:	ddf2      	ble.n	403efe <_svfprintf_r+0x346>
  403f18:	aa25      	add	r2, sp, #148	; 0x94
  403f1a:	4629      	mov	r1, r5
  403f1c:	4620      	mov	r0, r4
  403f1e:	f002 fea7 	bl	406c70 <__ssprint_r>
  403f22:	2800      	cmp	r0, #0
  403f24:	f47f af1a 	bne.w	403d5c <_svfprintf_r+0x1a4>
  403f28:	3f10      	subs	r7, #16
  403f2a:	2f10      	cmp	r7, #16
  403f2c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f30:	464a      	mov	r2, r9
  403f32:	dce9      	bgt.n	403f08 <_svfprintf_r+0x350>
  403f34:	4635      	mov	r5, r6
  403f36:	460c      	mov	r4, r1
  403f38:	4646      	mov	r6, r8
  403f3a:	4690      	mov	r8, r2
  403f3c:	3301      	adds	r3, #1
  403f3e:	443c      	add	r4, r7
  403f40:	2b07      	cmp	r3, #7
  403f42:	9427      	str	r4, [sp, #156]	; 0x9c
  403f44:	9326      	str	r3, [sp, #152]	; 0x98
  403f46:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f4a:	f300 8381 	bgt.w	404650 <_svfprintf_r+0xa98>
  403f4e:	f108 0808 	add.w	r8, r8, #8
  403f52:	9b07      	ldr	r3, [sp, #28]
  403f54:	05df      	lsls	r7, r3, #23
  403f56:	f100 8268 	bmi.w	40442a <_svfprintf_r+0x872>
  403f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f5c:	990e      	ldr	r1, [sp, #56]	; 0x38
  403f5e:	f8c8 6000 	str.w	r6, [r8]
  403f62:	3301      	adds	r3, #1
  403f64:	440c      	add	r4, r1
  403f66:	2b07      	cmp	r3, #7
  403f68:	9427      	str	r4, [sp, #156]	; 0x9c
  403f6a:	f8c8 1004 	str.w	r1, [r8, #4]
  403f6e:	9326      	str	r3, [sp, #152]	; 0x98
  403f70:	f300 834d 	bgt.w	40460e <_svfprintf_r+0xa56>
  403f74:	f108 0808 	add.w	r8, r8, #8
  403f78:	9b07      	ldr	r3, [sp, #28]
  403f7a:	075b      	lsls	r3, r3, #29
  403f7c:	d53a      	bpl.n	403ff4 <_svfprintf_r+0x43c>
  403f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f80:	9a08      	ldr	r2, [sp, #32]
  403f82:	1a9d      	subs	r5, r3, r2
  403f84:	2d00      	cmp	r5, #0
  403f86:	dd35      	ble.n	403ff4 <_svfprintf_r+0x43c>
  403f88:	2d10      	cmp	r5, #16
  403f8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f8c:	dd20      	ble.n	403fd0 <_svfprintf_r+0x418>
  403f8e:	2610      	movs	r6, #16
  403f90:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403f92:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403f96:	e004      	b.n	403fa2 <_svfprintf_r+0x3ea>
  403f98:	3d10      	subs	r5, #16
  403f9a:	2d10      	cmp	r5, #16
  403f9c:	f108 0808 	add.w	r8, r8, #8
  403fa0:	dd16      	ble.n	403fd0 <_svfprintf_r+0x418>
  403fa2:	3301      	adds	r3, #1
  403fa4:	4a5e      	ldr	r2, [pc, #376]	; (404120 <_svfprintf_r+0x568>)
  403fa6:	9326      	str	r3, [sp, #152]	; 0x98
  403fa8:	3410      	adds	r4, #16
  403faa:	2b07      	cmp	r3, #7
  403fac:	9427      	str	r4, [sp, #156]	; 0x9c
  403fae:	e888 0044 	stmia.w	r8, {r2, r6}
  403fb2:	ddf1      	ble.n	403f98 <_svfprintf_r+0x3e0>
  403fb4:	aa25      	add	r2, sp, #148	; 0x94
  403fb6:	4659      	mov	r1, fp
  403fb8:	4638      	mov	r0, r7
  403fba:	f002 fe59 	bl	406c70 <__ssprint_r>
  403fbe:	2800      	cmp	r0, #0
  403fc0:	f47f aecc 	bne.w	403d5c <_svfprintf_r+0x1a4>
  403fc4:	3d10      	subs	r5, #16
  403fc6:	2d10      	cmp	r5, #16
  403fc8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403fca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fcc:	46c8      	mov	r8, r9
  403fce:	dce8      	bgt.n	403fa2 <_svfprintf_r+0x3ea>
  403fd0:	3301      	adds	r3, #1
  403fd2:	4a53      	ldr	r2, [pc, #332]	; (404120 <_svfprintf_r+0x568>)
  403fd4:	9326      	str	r3, [sp, #152]	; 0x98
  403fd6:	442c      	add	r4, r5
  403fd8:	2b07      	cmp	r3, #7
  403fda:	9427      	str	r4, [sp, #156]	; 0x9c
  403fdc:	e888 0024 	stmia.w	r8, {r2, r5}
  403fe0:	dd08      	ble.n	403ff4 <_svfprintf_r+0x43c>
  403fe2:	aa25      	add	r2, sp, #148	; 0x94
  403fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403fe6:	980c      	ldr	r0, [sp, #48]	; 0x30
  403fe8:	f002 fe42 	bl	406c70 <__ssprint_r>
  403fec:	2800      	cmp	r0, #0
  403fee:	f47f aeb5 	bne.w	403d5c <_svfprintf_r+0x1a4>
  403ff2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403ff8:	9908      	ldr	r1, [sp, #32]
  403ffa:	428a      	cmp	r2, r1
  403ffc:	bfac      	ite	ge
  403ffe:	189b      	addge	r3, r3, r2
  404000:	185b      	addlt	r3, r3, r1
  404002:	9309      	str	r3, [sp, #36]	; 0x24
  404004:	2c00      	cmp	r4, #0
  404006:	f040 830d 	bne.w	404624 <_svfprintf_r+0xa6c>
  40400a:	2300      	movs	r3, #0
  40400c:	9326      	str	r3, [sp, #152]	; 0x98
  40400e:	46c8      	mov	r8, r9
  404010:	e5f9      	b.n	403c06 <_svfprintf_r+0x4e>
  404012:	9311      	str	r3, [sp, #68]	; 0x44
  404014:	f01b 0320 	ands.w	r3, fp, #32
  404018:	f040 81e3 	bne.w	4043e2 <_svfprintf_r+0x82a>
  40401c:	f01b 0210 	ands.w	r2, fp, #16
  404020:	f040 842e 	bne.w	404880 <_svfprintf_r+0xcc8>
  404024:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404028:	f000 842a 	beq.w	404880 <_svfprintf_r+0xcc8>
  40402c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40402e:	4613      	mov	r3, r2
  404030:	460a      	mov	r2, r1
  404032:	3204      	adds	r2, #4
  404034:	880c      	ldrh	r4, [r1, #0]
  404036:	920f      	str	r2, [sp, #60]	; 0x3c
  404038:	2500      	movs	r5, #0
  40403a:	e6b0      	b.n	403d9e <_svfprintf_r+0x1e6>
  40403c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40403e:	9311      	str	r3, [sp, #68]	; 0x44
  404040:	6816      	ldr	r6, [r2, #0]
  404042:	2400      	movs	r4, #0
  404044:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404048:	1d15      	adds	r5, r2, #4
  40404a:	2e00      	cmp	r6, #0
  40404c:	f000 86a7 	beq.w	404d9e <_svfprintf_r+0x11e6>
  404050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404052:	1c53      	adds	r3, r2, #1
  404054:	f000 8609 	beq.w	404c6a <_svfprintf_r+0x10b2>
  404058:	4621      	mov	r1, r4
  40405a:	4630      	mov	r0, r6
  40405c:	f002 faa0 	bl	4065a0 <memchr>
  404060:	2800      	cmp	r0, #0
  404062:	f000 86e1 	beq.w	404e28 <_svfprintf_r+0x1270>
  404066:	1b83      	subs	r3, r0, r6
  404068:	930e      	str	r3, [sp, #56]	; 0x38
  40406a:	940a      	str	r4, [sp, #40]	; 0x28
  40406c:	950f      	str	r5, [sp, #60]	; 0x3c
  40406e:	f8cd b01c 	str.w	fp, [sp, #28]
  404072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404076:	9308      	str	r3, [sp, #32]
  404078:	9412      	str	r4, [sp, #72]	; 0x48
  40407a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40407e:	e6b3      	b.n	403de8 <_svfprintf_r+0x230>
  404080:	f89a 3000 	ldrb.w	r3, [sl]
  404084:	2201      	movs	r2, #1
  404086:	212b      	movs	r1, #43	; 0x2b
  404088:	e5ee      	b.n	403c68 <_svfprintf_r+0xb0>
  40408a:	f04b 0b20 	orr.w	fp, fp, #32
  40408e:	f89a 3000 	ldrb.w	r3, [sl]
  404092:	e5e9      	b.n	403c68 <_svfprintf_r+0xb0>
  404094:	9311      	str	r3, [sp, #68]	; 0x44
  404096:	2a00      	cmp	r2, #0
  404098:	f040 8795 	bne.w	404fc6 <_svfprintf_r+0x140e>
  40409c:	4b22      	ldr	r3, [pc, #136]	; (404128 <_svfprintf_r+0x570>)
  40409e:	9318      	str	r3, [sp, #96]	; 0x60
  4040a0:	f01b 0f20 	tst.w	fp, #32
  4040a4:	f040 8111 	bne.w	4042ca <_svfprintf_r+0x712>
  4040a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4040aa:	f01b 0f10 	tst.w	fp, #16
  4040ae:	4613      	mov	r3, r2
  4040b0:	f040 83e1 	bne.w	404876 <_svfprintf_r+0xcbe>
  4040b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4040b8:	f000 83dd 	beq.w	404876 <_svfprintf_r+0xcbe>
  4040bc:	3304      	adds	r3, #4
  4040be:	8814      	ldrh	r4, [r2, #0]
  4040c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4040c2:	2500      	movs	r5, #0
  4040c4:	f01b 0f01 	tst.w	fp, #1
  4040c8:	f000 810c 	beq.w	4042e4 <_svfprintf_r+0x72c>
  4040cc:	ea54 0305 	orrs.w	r3, r4, r5
  4040d0:	f000 8108 	beq.w	4042e4 <_svfprintf_r+0x72c>
  4040d4:	2330      	movs	r3, #48	; 0x30
  4040d6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4040da:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4040de:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4040e2:	f04b 0b02 	orr.w	fp, fp, #2
  4040e6:	2302      	movs	r3, #2
  4040e8:	e659      	b.n	403d9e <_svfprintf_r+0x1e6>
  4040ea:	f89a 3000 	ldrb.w	r3, [sl]
  4040ee:	2900      	cmp	r1, #0
  4040f0:	f47f adba 	bne.w	403c68 <_svfprintf_r+0xb0>
  4040f4:	2201      	movs	r2, #1
  4040f6:	2120      	movs	r1, #32
  4040f8:	e5b6      	b.n	403c68 <_svfprintf_r+0xb0>
  4040fa:	f04b 0b01 	orr.w	fp, fp, #1
  4040fe:	f89a 3000 	ldrb.w	r3, [sl]
  404102:	e5b1      	b.n	403c68 <_svfprintf_r+0xb0>
  404104:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404106:	6823      	ldr	r3, [r4, #0]
  404108:	930d      	str	r3, [sp, #52]	; 0x34
  40410a:	4618      	mov	r0, r3
  40410c:	2800      	cmp	r0, #0
  40410e:	4623      	mov	r3, r4
  404110:	f103 0304 	add.w	r3, r3, #4
  404114:	f6ff ae0a 	blt.w	403d2c <_svfprintf_r+0x174>
  404118:	930f      	str	r3, [sp, #60]	; 0x3c
  40411a:	f89a 3000 	ldrb.w	r3, [sl]
  40411e:	e5a3      	b.n	403c68 <_svfprintf_r+0xb0>
  404120:	004085f4 	.word	0x004085f4
  404124:	00408604 	.word	0x00408604
  404128:	004085d4 	.word	0x004085d4
  40412c:	f04b 0b10 	orr.w	fp, fp, #16
  404130:	f01b 0f20 	tst.w	fp, #32
  404134:	9311      	str	r3, [sp, #68]	; 0x44
  404136:	f43f ae23 	beq.w	403d80 <_svfprintf_r+0x1c8>
  40413a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40413c:	3507      	adds	r5, #7
  40413e:	f025 0307 	bic.w	r3, r5, #7
  404142:	f103 0208 	add.w	r2, r3, #8
  404146:	e9d3 4500 	ldrd	r4, r5, [r3]
  40414a:	920f      	str	r2, [sp, #60]	; 0x3c
  40414c:	2301      	movs	r3, #1
  40414e:	e626      	b.n	403d9e <_svfprintf_r+0x1e6>
  404150:	f89a 3000 	ldrb.w	r3, [sl]
  404154:	2b2a      	cmp	r3, #42	; 0x2a
  404156:	f10a 0401 	add.w	r4, sl, #1
  40415a:	f000 8727 	beq.w	404fac <_svfprintf_r+0x13f4>
  40415e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404162:	2809      	cmp	r0, #9
  404164:	46a2      	mov	sl, r4
  404166:	f200 86ad 	bhi.w	404ec4 <_svfprintf_r+0x130c>
  40416a:	2300      	movs	r3, #0
  40416c:	461c      	mov	r4, r3
  40416e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404172:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404176:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40417a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40417e:	2809      	cmp	r0, #9
  404180:	d9f5      	bls.n	40416e <_svfprintf_r+0x5b6>
  404182:	940a      	str	r4, [sp, #40]	; 0x28
  404184:	e572      	b.n	403c6c <_svfprintf_r+0xb4>
  404186:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40418a:	f89a 3000 	ldrb.w	r3, [sl]
  40418e:	e56b      	b.n	403c68 <_svfprintf_r+0xb0>
  404190:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404194:	f89a 3000 	ldrb.w	r3, [sl]
  404198:	e566      	b.n	403c68 <_svfprintf_r+0xb0>
  40419a:	f89a 3000 	ldrb.w	r3, [sl]
  40419e:	2b6c      	cmp	r3, #108	; 0x6c
  4041a0:	bf03      	ittte	eq
  4041a2:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  4041a6:	f04b 0b20 	orreq.w	fp, fp, #32
  4041aa:	f10a 0a01 	addeq.w	sl, sl, #1
  4041ae:	f04b 0b10 	orrne.w	fp, fp, #16
  4041b2:	e559      	b.n	403c68 <_svfprintf_r+0xb0>
  4041b4:	2a00      	cmp	r2, #0
  4041b6:	f040 8711 	bne.w	404fdc <_svfprintf_r+0x1424>
  4041ba:	f01b 0f20 	tst.w	fp, #32
  4041be:	f040 84f9 	bne.w	404bb4 <_svfprintf_r+0xffc>
  4041c2:	f01b 0f10 	tst.w	fp, #16
  4041c6:	f040 84ac 	bne.w	404b22 <_svfprintf_r+0xf6a>
  4041ca:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4041ce:	f000 84a8 	beq.w	404b22 <_svfprintf_r+0xf6a>
  4041d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4041d4:	6813      	ldr	r3, [r2, #0]
  4041d6:	3204      	adds	r2, #4
  4041d8:	920f      	str	r2, [sp, #60]	; 0x3c
  4041da:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4041de:	801a      	strh	r2, [r3, #0]
  4041e0:	e511      	b.n	403c06 <_svfprintf_r+0x4e>
  4041e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4041e4:	4bb3      	ldr	r3, [pc, #716]	; (4044b4 <_svfprintf_r+0x8fc>)
  4041e6:	680c      	ldr	r4, [r1, #0]
  4041e8:	9318      	str	r3, [sp, #96]	; 0x60
  4041ea:	2230      	movs	r2, #48	; 0x30
  4041ec:	2378      	movs	r3, #120	; 0x78
  4041ee:	3104      	adds	r1, #4
  4041f0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4041f4:	9311      	str	r3, [sp, #68]	; 0x44
  4041f6:	f04b 0b02 	orr.w	fp, fp, #2
  4041fa:	910f      	str	r1, [sp, #60]	; 0x3c
  4041fc:	2500      	movs	r5, #0
  4041fe:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404202:	2302      	movs	r3, #2
  404204:	e5cb      	b.n	403d9e <_svfprintf_r+0x1e6>
  404206:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404208:	9311      	str	r3, [sp, #68]	; 0x44
  40420a:	680a      	ldr	r2, [r1, #0]
  40420c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404210:	2300      	movs	r3, #0
  404212:	460a      	mov	r2, r1
  404214:	461f      	mov	r7, r3
  404216:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40421a:	3204      	adds	r2, #4
  40421c:	2301      	movs	r3, #1
  40421e:	9308      	str	r3, [sp, #32]
  404220:	f8cd b01c 	str.w	fp, [sp, #28]
  404224:	970a      	str	r7, [sp, #40]	; 0x28
  404226:	9712      	str	r7, [sp, #72]	; 0x48
  404228:	920f      	str	r2, [sp, #60]	; 0x3c
  40422a:	930e      	str	r3, [sp, #56]	; 0x38
  40422c:	ae28      	add	r6, sp, #160	; 0xa0
  40422e:	e5df      	b.n	403df0 <_svfprintf_r+0x238>
  404230:	9311      	str	r3, [sp, #68]	; 0x44
  404232:	2a00      	cmp	r2, #0
  404234:	f040 86ea 	bne.w	40500c <_svfprintf_r+0x1454>
  404238:	f01b 0f20 	tst.w	fp, #32
  40423c:	d15d      	bne.n	4042fa <_svfprintf_r+0x742>
  40423e:	f01b 0f10 	tst.w	fp, #16
  404242:	f040 8308 	bne.w	404856 <_svfprintf_r+0xc9e>
  404246:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40424a:	f000 8304 	beq.w	404856 <_svfprintf_r+0xc9e>
  40424e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404250:	f9b1 4000 	ldrsh.w	r4, [r1]
  404254:	3104      	adds	r1, #4
  404256:	17e5      	asrs	r5, r4, #31
  404258:	4622      	mov	r2, r4
  40425a:	462b      	mov	r3, r5
  40425c:	910f      	str	r1, [sp, #60]	; 0x3c
  40425e:	2a00      	cmp	r2, #0
  404260:	f173 0300 	sbcs.w	r3, r3, #0
  404264:	db58      	blt.n	404318 <_svfprintf_r+0x760>
  404266:	990a      	ldr	r1, [sp, #40]	; 0x28
  404268:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40426c:	1c4a      	adds	r2, r1, #1
  40426e:	f04f 0301 	mov.w	r3, #1
  404272:	f47f ad9b 	bne.w	403dac <_svfprintf_r+0x1f4>
  404276:	ea54 0205 	orrs.w	r2, r4, r5
  40427a:	f000 81df 	beq.w	40463c <_svfprintf_r+0xa84>
  40427e:	f8cd b01c 	str.w	fp, [sp, #28]
  404282:	2b01      	cmp	r3, #1
  404284:	f000 827b 	beq.w	40477e <_svfprintf_r+0xbc6>
  404288:	2b02      	cmp	r3, #2
  40428a:	f040 8206 	bne.w	40469a <_svfprintf_r+0xae2>
  40428e:	9818      	ldr	r0, [sp, #96]	; 0x60
  404290:	464e      	mov	r6, r9
  404292:	0923      	lsrs	r3, r4, #4
  404294:	f004 010f 	and.w	r1, r4, #15
  404298:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40429c:	092a      	lsrs	r2, r5, #4
  40429e:	461c      	mov	r4, r3
  4042a0:	4615      	mov	r5, r2
  4042a2:	5c43      	ldrb	r3, [r0, r1]
  4042a4:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4042a8:	ea54 0305 	orrs.w	r3, r4, r5
  4042ac:	d1f1      	bne.n	404292 <_svfprintf_r+0x6da>
  4042ae:	eba9 0306 	sub.w	r3, r9, r6
  4042b2:	930e      	str	r3, [sp, #56]	; 0x38
  4042b4:	e590      	b.n	403dd8 <_svfprintf_r+0x220>
  4042b6:	9311      	str	r3, [sp, #68]	; 0x44
  4042b8:	2a00      	cmp	r2, #0
  4042ba:	f040 86a3 	bne.w	405004 <_svfprintf_r+0x144c>
  4042be:	4b7e      	ldr	r3, [pc, #504]	; (4044b8 <_svfprintf_r+0x900>)
  4042c0:	9318      	str	r3, [sp, #96]	; 0x60
  4042c2:	f01b 0f20 	tst.w	fp, #32
  4042c6:	f43f aeef 	beq.w	4040a8 <_svfprintf_r+0x4f0>
  4042ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4042cc:	3507      	adds	r5, #7
  4042ce:	f025 0307 	bic.w	r3, r5, #7
  4042d2:	f103 0208 	add.w	r2, r3, #8
  4042d6:	f01b 0f01 	tst.w	fp, #1
  4042da:	920f      	str	r2, [sp, #60]	; 0x3c
  4042dc:	e9d3 4500 	ldrd	r4, r5, [r3]
  4042e0:	f47f aef4 	bne.w	4040cc <_svfprintf_r+0x514>
  4042e4:	2302      	movs	r3, #2
  4042e6:	e55a      	b.n	403d9e <_svfprintf_r+0x1e6>
  4042e8:	9311      	str	r3, [sp, #68]	; 0x44
  4042ea:	2a00      	cmp	r2, #0
  4042ec:	f040 8686 	bne.w	404ffc <_svfprintf_r+0x1444>
  4042f0:	f04b 0b10 	orr.w	fp, fp, #16
  4042f4:	f01b 0f20 	tst.w	fp, #32
  4042f8:	d0a1      	beq.n	40423e <_svfprintf_r+0x686>
  4042fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4042fc:	3507      	adds	r5, #7
  4042fe:	f025 0507 	bic.w	r5, r5, #7
  404302:	e9d5 2300 	ldrd	r2, r3, [r5]
  404306:	2a00      	cmp	r2, #0
  404308:	f105 0108 	add.w	r1, r5, #8
  40430c:	461d      	mov	r5, r3
  40430e:	f173 0300 	sbcs.w	r3, r3, #0
  404312:	910f      	str	r1, [sp, #60]	; 0x3c
  404314:	4614      	mov	r4, r2
  404316:	daa6      	bge.n	404266 <_svfprintf_r+0x6ae>
  404318:	272d      	movs	r7, #45	; 0x2d
  40431a:	4264      	negs	r4, r4
  40431c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404320:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404324:	2301      	movs	r3, #1
  404326:	e53d      	b.n	403da4 <_svfprintf_r+0x1ec>
  404328:	9311      	str	r3, [sp, #68]	; 0x44
  40432a:	2a00      	cmp	r2, #0
  40432c:	f040 8662 	bne.w	404ff4 <_svfprintf_r+0x143c>
  404330:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404332:	3507      	adds	r5, #7
  404334:	f025 0307 	bic.w	r3, r5, #7
  404338:	f103 0208 	add.w	r2, r3, #8
  40433c:	920f      	str	r2, [sp, #60]	; 0x3c
  40433e:	681a      	ldr	r2, [r3, #0]
  404340:	9215      	str	r2, [sp, #84]	; 0x54
  404342:	685b      	ldr	r3, [r3, #4]
  404344:	9314      	str	r3, [sp, #80]	; 0x50
  404346:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404348:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40434a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40434e:	4628      	mov	r0, r5
  404350:	4621      	mov	r1, r4
  404352:	f04f 32ff 	mov.w	r2, #4294967295
  404356:	4b59      	ldr	r3, [pc, #356]	; (4044bc <_svfprintf_r+0x904>)
  404358:	f003 fd3a 	bl	407dd0 <__aeabi_dcmpun>
  40435c:	2800      	cmp	r0, #0
  40435e:	f040 834a 	bne.w	4049f6 <_svfprintf_r+0xe3e>
  404362:	4628      	mov	r0, r5
  404364:	4621      	mov	r1, r4
  404366:	f04f 32ff 	mov.w	r2, #4294967295
  40436a:	4b54      	ldr	r3, [pc, #336]	; (4044bc <_svfprintf_r+0x904>)
  40436c:	f003 fd12 	bl	407d94 <__aeabi_dcmple>
  404370:	2800      	cmp	r0, #0
  404372:	f040 8340 	bne.w	4049f6 <_svfprintf_r+0xe3e>
  404376:	a815      	add	r0, sp, #84	; 0x54
  404378:	c80d      	ldmia	r0, {r0, r2, r3}
  40437a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40437c:	f003 fd00 	bl	407d80 <__aeabi_dcmplt>
  404380:	2800      	cmp	r0, #0
  404382:	f040 8530 	bne.w	404de6 <_svfprintf_r+0x122e>
  404386:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40438a:	4e4d      	ldr	r6, [pc, #308]	; (4044c0 <_svfprintf_r+0x908>)
  40438c:	4b4d      	ldr	r3, [pc, #308]	; (4044c4 <_svfprintf_r+0x90c>)
  40438e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404392:	9007      	str	r0, [sp, #28]
  404394:	9811      	ldr	r0, [sp, #68]	; 0x44
  404396:	2203      	movs	r2, #3
  404398:	2100      	movs	r1, #0
  40439a:	9208      	str	r2, [sp, #32]
  40439c:	910a      	str	r1, [sp, #40]	; 0x28
  40439e:	2847      	cmp	r0, #71	; 0x47
  4043a0:	bfd8      	it	le
  4043a2:	461e      	movle	r6, r3
  4043a4:	920e      	str	r2, [sp, #56]	; 0x38
  4043a6:	9112      	str	r1, [sp, #72]	; 0x48
  4043a8:	e51e      	b.n	403de8 <_svfprintf_r+0x230>
  4043aa:	f04b 0b08 	orr.w	fp, fp, #8
  4043ae:	f89a 3000 	ldrb.w	r3, [sl]
  4043b2:	e459      	b.n	403c68 <_svfprintf_r+0xb0>
  4043b4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4043b8:	2300      	movs	r3, #0
  4043ba:	461c      	mov	r4, r3
  4043bc:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4043c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4043c4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4043c8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4043cc:	2809      	cmp	r0, #9
  4043ce:	d9f5      	bls.n	4043bc <_svfprintf_r+0x804>
  4043d0:	940d      	str	r4, [sp, #52]	; 0x34
  4043d2:	e44b      	b.n	403c6c <_svfprintf_r+0xb4>
  4043d4:	f04b 0b10 	orr.w	fp, fp, #16
  4043d8:	9311      	str	r3, [sp, #68]	; 0x44
  4043da:	f01b 0320 	ands.w	r3, fp, #32
  4043de:	f43f ae1d 	beq.w	40401c <_svfprintf_r+0x464>
  4043e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4043e4:	3507      	adds	r5, #7
  4043e6:	f025 0307 	bic.w	r3, r5, #7
  4043ea:	f103 0208 	add.w	r2, r3, #8
  4043ee:	e9d3 4500 	ldrd	r4, r5, [r3]
  4043f2:	920f      	str	r2, [sp, #60]	; 0x3c
  4043f4:	2300      	movs	r3, #0
  4043f6:	e4d2      	b.n	403d9e <_svfprintf_r+0x1e6>
  4043f8:	9311      	str	r3, [sp, #68]	; 0x44
  4043fa:	2a00      	cmp	r2, #0
  4043fc:	f040 85e7 	bne.w	404fce <_svfprintf_r+0x1416>
  404400:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404402:	2a00      	cmp	r2, #0
  404404:	f43f aca3 	beq.w	403d4e <_svfprintf_r+0x196>
  404408:	2300      	movs	r3, #0
  40440a:	2101      	movs	r1, #1
  40440c:	461f      	mov	r7, r3
  40440e:	9108      	str	r1, [sp, #32]
  404410:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404414:	f8cd b01c 	str.w	fp, [sp, #28]
  404418:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40441c:	930a      	str	r3, [sp, #40]	; 0x28
  40441e:	9312      	str	r3, [sp, #72]	; 0x48
  404420:	910e      	str	r1, [sp, #56]	; 0x38
  404422:	ae28      	add	r6, sp, #160	; 0xa0
  404424:	e4e4      	b.n	403df0 <_svfprintf_r+0x238>
  404426:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404428:	e534      	b.n	403e94 <_svfprintf_r+0x2dc>
  40442a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40442c:	2b65      	cmp	r3, #101	; 0x65
  40442e:	f340 80a7 	ble.w	404580 <_svfprintf_r+0x9c8>
  404432:	a815      	add	r0, sp, #84	; 0x54
  404434:	c80d      	ldmia	r0, {r0, r2, r3}
  404436:	9914      	ldr	r1, [sp, #80]	; 0x50
  404438:	f003 fc98 	bl	407d6c <__aeabi_dcmpeq>
  40443c:	2800      	cmp	r0, #0
  40443e:	f000 8150 	beq.w	4046e2 <_svfprintf_r+0xb2a>
  404442:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404444:	4a20      	ldr	r2, [pc, #128]	; (4044c8 <_svfprintf_r+0x910>)
  404446:	f8c8 2000 	str.w	r2, [r8]
  40444a:	3301      	adds	r3, #1
  40444c:	3401      	adds	r4, #1
  40444e:	2201      	movs	r2, #1
  404450:	2b07      	cmp	r3, #7
  404452:	9427      	str	r4, [sp, #156]	; 0x9c
  404454:	9326      	str	r3, [sp, #152]	; 0x98
  404456:	f8c8 2004 	str.w	r2, [r8, #4]
  40445a:	f300 836a 	bgt.w	404b32 <_svfprintf_r+0xf7a>
  40445e:	f108 0808 	add.w	r8, r8, #8
  404462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404464:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404466:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404468:	4293      	cmp	r3, r2
  40446a:	db03      	blt.n	404474 <_svfprintf_r+0x8bc>
  40446c:	9b07      	ldr	r3, [sp, #28]
  40446e:	07dd      	lsls	r5, r3, #31
  404470:	f57f ad82 	bpl.w	403f78 <_svfprintf_r+0x3c0>
  404474:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404476:	9919      	ldr	r1, [sp, #100]	; 0x64
  404478:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40447a:	f8c8 2000 	str.w	r2, [r8]
  40447e:	3301      	adds	r3, #1
  404480:	440c      	add	r4, r1
  404482:	2b07      	cmp	r3, #7
  404484:	f8c8 1004 	str.w	r1, [r8, #4]
  404488:	9427      	str	r4, [sp, #156]	; 0x9c
  40448a:	9326      	str	r3, [sp, #152]	; 0x98
  40448c:	f300 839e 	bgt.w	404bcc <_svfprintf_r+0x1014>
  404490:	f108 0808 	add.w	r8, r8, #8
  404494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404496:	1e5e      	subs	r6, r3, #1
  404498:	2e00      	cmp	r6, #0
  40449a:	f77f ad6d 	ble.w	403f78 <_svfprintf_r+0x3c0>
  40449e:	2e10      	cmp	r6, #16
  4044a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044a2:	4d0a      	ldr	r5, [pc, #40]	; (4044cc <_svfprintf_r+0x914>)
  4044a4:	f340 81f5 	ble.w	404892 <_svfprintf_r+0xcda>
  4044a8:	4622      	mov	r2, r4
  4044aa:	2710      	movs	r7, #16
  4044ac:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4044b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4044b2:	e013      	b.n	4044dc <_svfprintf_r+0x924>
  4044b4:	004085d4 	.word	0x004085d4
  4044b8:	004085c0 	.word	0x004085c0
  4044bc:	7fefffff 	.word	0x7fefffff
  4044c0:	004085b4 	.word	0x004085b4
  4044c4:	004085b0 	.word	0x004085b0
  4044c8:	004085f0 	.word	0x004085f0
  4044cc:	00408604 	.word	0x00408604
  4044d0:	f108 0808 	add.w	r8, r8, #8
  4044d4:	3e10      	subs	r6, #16
  4044d6:	2e10      	cmp	r6, #16
  4044d8:	f340 81da 	ble.w	404890 <_svfprintf_r+0xcd8>
  4044dc:	3301      	adds	r3, #1
  4044de:	3210      	adds	r2, #16
  4044e0:	2b07      	cmp	r3, #7
  4044e2:	9227      	str	r2, [sp, #156]	; 0x9c
  4044e4:	9326      	str	r3, [sp, #152]	; 0x98
  4044e6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4044ea:	ddf1      	ble.n	4044d0 <_svfprintf_r+0x918>
  4044ec:	aa25      	add	r2, sp, #148	; 0x94
  4044ee:	4621      	mov	r1, r4
  4044f0:	4658      	mov	r0, fp
  4044f2:	f002 fbbd 	bl	406c70 <__ssprint_r>
  4044f6:	2800      	cmp	r0, #0
  4044f8:	f47f ac30 	bne.w	403d5c <_svfprintf_r+0x1a4>
  4044fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4044fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404500:	46c8      	mov	r8, r9
  404502:	e7e7      	b.n	4044d4 <_svfprintf_r+0x91c>
  404504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404506:	9a08      	ldr	r2, [sp, #32]
  404508:	1a9f      	subs	r7, r3, r2
  40450a:	2f00      	cmp	r7, #0
  40450c:	f77f ace5 	ble.w	403eda <_svfprintf_r+0x322>
  404510:	2f10      	cmp	r7, #16
  404512:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404514:	4db6      	ldr	r5, [pc, #728]	; (4047f0 <_svfprintf_r+0xc38>)
  404516:	dd27      	ble.n	404568 <_svfprintf_r+0x9b0>
  404518:	4642      	mov	r2, r8
  40451a:	4621      	mov	r1, r4
  40451c:	46b0      	mov	r8, r6
  40451e:	f04f 0b10 	mov.w	fp, #16
  404522:	462e      	mov	r6, r5
  404524:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404526:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404528:	e004      	b.n	404534 <_svfprintf_r+0x97c>
  40452a:	3f10      	subs	r7, #16
  40452c:	2f10      	cmp	r7, #16
  40452e:	f102 0208 	add.w	r2, r2, #8
  404532:	dd15      	ble.n	404560 <_svfprintf_r+0x9a8>
  404534:	3301      	adds	r3, #1
  404536:	3110      	adds	r1, #16
  404538:	2b07      	cmp	r3, #7
  40453a:	9127      	str	r1, [sp, #156]	; 0x9c
  40453c:	9326      	str	r3, [sp, #152]	; 0x98
  40453e:	e882 0840 	stmia.w	r2, {r6, fp}
  404542:	ddf2      	ble.n	40452a <_svfprintf_r+0x972>
  404544:	aa25      	add	r2, sp, #148	; 0x94
  404546:	4629      	mov	r1, r5
  404548:	4620      	mov	r0, r4
  40454a:	f002 fb91 	bl	406c70 <__ssprint_r>
  40454e:	2800      	cmp	r0, #0
  404550:	f47f ac04 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404554:	3f10      	subs	r7, #16
  404556:	2f10      	cmp	r7, #16
  404558:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40455a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40455c:	464a      	mov	r2, r9
  40455e:	dce9      	bgt.n	404534 <_svfprintf_r+0x97c>
  404560:	4635      	mov	r5, r6
  404562:	460c      	mov	r4, r1
  404564:	4646      	mov	r6, r8
  404566:	4690      	mov	r8, r2
  404568:	3301      	adds	r3, #1
  40456a:	443c      	add	r4, r7
  40456c:	2b07      	cmp	r3, #7
  40456e:	9427      	str	r4, [sp, #156]	; 0x9c
  404570:	9326      	str	r3, [sp, #152]	; 0x98
  404572:	e888 00a0 	stmia.w	r8, {r5, r7}
  404576:	f300 8232 	bgt.w	4049de <_svfprintf_r+0xe26>
  40457a:	f108 0808 	add.w	r8, r8, #8
  40457e:	e4ac      	b.n	403eda <_svfprintf_r+0x322>
  404580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404582:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404584:	2b01      	cmp	r3, #1
  404586:	f340 81fe 	ble.w	404986 <_svfprintf_r+0xdce>
  40458a:	3701      	adds	r7, #1
  40458c:	3401      	adds	r4, #1
  40458e:	2301      	movs	r3, #1
  404590:	2f07      	cmp	r7, #7
  404592:	9427      	str	r4, [sp, #156]	; 0x9c
  404594:	9726      	str	r7, [sp, #152]	; 0x98
  404596:	f8c8 6000 	str.w	r6, [r8]
  40459a:	f8c8 3004 	str.w	r3, [r8, #4]
  40459e:	f300 8203 	bgt.w	4049a8 <_svfprintf_r+0xdf0>
  4045a2:	f108 0808 	add.w	r8, r8, #8
  4045a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4045a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4045aa:	f8c8 3000 	str.w	r3, [r8]
  4045ae:	3701      	adds	r7, #1
  4045b0:	4414      	add	r4, r2
  4045b2:	2f07      	cmp	r7, #7
  4045b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4045b6:	9726      	str	r7, [sp, #152]	; 0x98
  4045b8:	f8c8 2004 	str.w	r2, [r8, #4]
  4045bc:	f300 8200 	bgt.w	4049c0 <_svfprintf_r+0xe08>
  4045c0:	f108 0808 	add.w	r8, r8, #8
  4045c4:	a815      	add	r0, sp, #84	; 0x54
  4045c6:	c80d      	ldmia	r0, {r0, r2, r3}
  4045c8:	9914      	ldr	r1, [sp, #80]	; 0x50
  4045ca:	f003 fbcf 	bl	407d6c <__aeabi_dcmpeq>
  4045ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4045d0:	2800      	cmp	r0, #0
  4045d2:	f040 8101 	bne.w	4047d8 <_svfprintf_r+0xc20>
  4045d6:	3b01      	subs	r3, #1
  4045d8:	3701      	adds	r7, #1
  4045da:	3601      	adds	r6, #1
  4045dc:	441c      	add	r4, r3
  4045de:	2f07      	cmp	r7, #7
  4045e0:	9726      	str	r7, [sp, #152]	; 0x98
  4045e2:	9427      	str	r4, [sp, #156]	; 0x9c
  4045e4:	f8c8 6000 	str.w	r6, [r8]
  4045e8:	f8c8 3004 	str.w	r3, [r8, #4]
  4045ec:	f300 8127 	bgt.w	40483e <_svfprintf_r+0xc86>
  4045f0:	f108 0808 	add.w	r8, r8, #8
  4045f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4045f6:	f8c8 2004 	str.w	r2, [r8, #4]
  4045fa:	3701      	adds	r7, #1
  4045fc:	4414      	add	r4, r2
  4045fe:	ab21      	add	r3, sp, #132	; 0x84
  404600:	2f07      	cmp	r7, #7
  404602:	9427      	str	r4, [sp, #156]	; 0x9c
  404604:	9726      	str	r7, [sp, #152]	; 0x98
  404606:	f8c8 3000 	str.w	r3, [r8]
  40460a:	f77f acb3 	ble.w	403f74 <_svfprintf_r+0x3bc>
  40460e:	aa25      	add	r2, sp, #148	; 0x94
  404610:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404612:	980c      	ldr	r0, [sp, #48]	; 0x30
  404614:	f002 fb2c 	bl	406c70 <__ssprint_r>
  404618:	2800      	cmp	r0, #0
  40461a:	f47f ab9f 	bne.w	403d5c <_svfprintf_r+0x1a4>
  40461e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404620:	46c8      	mov	r8, r9
  404622:	e4a9      	b.n	403f78 <_svfprintf_r+0x3c0>
  404624:	aa25      	add	r2, sp, #148	; 0x94
  404626:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404628:	980c      	ldr	r0, [sp, #48]	; 0x30
  40462a:	f002 fb21 	bl	406c70 <__ssprint_r>
  40462e:	2800      	cmp	r0, #0
  404630:	f43f aceb 	beq.w	40400a <_svfprintf_r+0x452>
  404634:	f7ff bb92 	b.w	403d5c <_svfprintf_r+0x1a4>
  404638:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40463c:	2b01      	cmp	r3, #1
  40463e:	f000 8134 	beq.w	4048aa <_svfprintf_r+0xcf2>
  404642:	2b02      	cmp	r3, #2
  404644:	d125      	bne.n	404692 <_svfprintf_r+0xada>
  404646:	f8cd b01c 	str.w	fp, [sp, #28]
  40464a:	2400      	movs	r4, #0
  40464c:	2500      	movs	r5, #0
  40464e:	e61e      	b.n	40428e <_svfprintf_r+0x6d6>
  404650:	aa25      	add	r2, sp, #148	; 0x94
  404652:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404654:	980c      	ldr	r0, [sp, #48]	; 0x30
  404656:	f002 fb0b 	bl	406c70 <__ssprint_r>
  40465a:	2800      	cmp	r0, #0
  40465c:	f47f ab7e 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404660:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404662:	46c8      	mov	r8, r9
  404664:	e475      	b.n	403f52 <_svfprintf_r+0x39a>
  404666:	aa25      	add	r2, sp, #148	; 0x94
  404668:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40466a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40466c:	f002 fb00 	bl	406c70 <__ssprint_r>
  404670:	2800      	cmp	r0, #0
  404672:	f47f ab73 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404676:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404678:	46c8      	mov	r8, r9
  40467a:	e41b      	b.n	403eb4 <_svfprintf_r+0x2fc>
  40467c:	aa25      	add	r2, sp, #148	; 0x94
  40467e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404680:	980c      	ldr	r0, [sp, #48]	; 0x30
  404682:	f002 faf5 	bl	406c70 <__ssprint_r>
  404686:	2800      	cmp	r0, #0
  404688:	f47f ab68 	bne.w	403d5c <_svfprintf_r+0x1a4>
  40468c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40468e:	46c8      	mov	r8, r9
  404690:	e420      	b.n	403ed4 <_svfprintf_r+0x31c>
  404692:	f8cd b01c 	str.w	fp, [sp, #28]
  404696:	2400      	movs	r4, #0
  404698:	2500      	movs	r5, #0
  40469a:	4649      	mov	r1, r9
  40469c:	e000      	b.n	4046a0 <_svfprintf_r+0xae8>
  40469e:	4631      	mov	r1, r6
  4046a0:	08e2      	lsrs	r2, r4, #3
  4046a2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4046a6:	08e8      	lsrs	r0, r5, #3
  4046a8:	f004 0307 	and.w	r3, r4, #7
  4046ac:	4605      	mov	r5, r0
  4046ae:	4614      	mov	r4, r2
  4046b0:	3330      	adds	r3, #48	; 0x30
  4046b2:	ea54 0205 	orrs.w	r2, r4, r5
  4046b6:	f801 3c01 	strb.w	r3, [r1, #-1]
  4046ba:	f101 36ff 	add.w	r6, r1, #4294967295
  4046be:	d1ee      	bne.n	40469e <_svfprintf_r+0xae6>
  4046c0:	9a07      	ldr	r2, [sp, #28]
  4046c2:	07d2      	lsls	r2, r2, #31
  4046c4:	f57f adf3 	bpl.w	4042ae <_svfprintf_r+0x6f6>
  4046c8:	2b30      	cmp	r3, #48	; 0x30
  4046ca:	f43f adf0 	beq.w	4042ae <_svfprintf_r+0x6f6>
  4046ce:	3902      	subs	r1, #2
  4046d0:	2330      	movs	r3, #48	; 0x30
  4046d2:	f806 3c01 	strb.w	r3, [r6, #-1]
  4046d6:	eba9 0301 	sub.w	r3, r9, r1
  4046da:	930e      	str	r3, [sp, #56]	; 0x38
  4046dc:	460e      	mov	r6, r1
  4046de:	f7ff bb7b 	b.w	403dd8 <_svfprintf_r+0x220>
  4046e2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4046e4:	2900      	cmp	r1, #0
  4046e6:	f340 822e 	ble.w	404b46 <_svfprintf_r+0xf8e>
  4046ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4046ee:	4293      	cmp	r3, r2
  4046f0:	bfa8      	it	ge
  4046f2:	4613      	movge	r3, r2
  4046f4:	2b00      	cmp	r3, #0
  4046f6:	461f      	mov	r7, r3
  4046f8:	dd0d      	ble.n	404716 <_svfprintf_r+0xb5e>
  4046fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046fc:	f8c8 6000 	str.w	r6, [r8]
  404700:	3301      	adds	r3, #1
  404702:	443c      	add	r4, r7
  404704:	2b07      	cmp	r3, #7
  404706:	9427      	str	r4, [sp, #156]	; 0x9c
  404708:	f8c8 7004 	str.w	r7, [r8, #4]
  40470c:	9326      	str	r3, [sp, #152]	; 0x98
  40470e:	f300 831f 	bgt.w	404d50 <_svfprintf_r+0x1198>
  404712:	f108 0808 	add.w	r8, r8, #8
  404716:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404718:	2f00      	cmp	r7, #0
  40471a:	bfa8      	it	ge
  40471c:	1bdb      	subge	r3, r3, r7
  40471e:	2b00      	cmp	r3, #0
  404720:	461f      	mov	r7, r3
  404722:	f340 80d6 	ble.w	4048d2 <_svfprintf_r+0xd1a>
  404726:	2f10      	cmp	r7, #16
  404728:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40472a:	4d31      	ldr	r5, [pc, #196]	; (4047f0 <_svfprintf_r+0xc38>)
  40472c:	f340 81ed 	ble.w	404b0a <_svfprintf_r+0xf52>
  404730:	4642      	mov	r2, r8
  404732:	4621      	mov	r1, r4
  404734:	46b0      	mov	r8, r6
  404736:	f04f 0b10 	mov.w	fp, #16
  40473a:	462e      	mov	r6, r5
  40473c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40473e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404740:	e004      	b.n	40474c <_svfprintf_r+0xb94>
  404742:	3208      	adds	r2, #8
  404744:	3f10      	subs	r7, #16
  404746:	2f10      	cmp	r7, #16
  404748:	f340 81db 	ble.w	404b02 <_svfprintf_r+0xf4a>
  40474c:	3301      	adds	r3, #1
  40474e:	3110      	adds	r1, #16
  404750:	2b07      	cmp	r3, #7
  404752:	9127      	str	r1, [sp, #156]	; 0x9c
  404754:	9326      	str	r3, [sp, #152]	; 0x98
  404756:	e882 0840 	stmia.w	r2, {r6, fp}
  40475a:	ddf2      	ble.n	404742 <_svfprintf_r+0xb8a>
  40475c:	aa25      	add	r2, sp, #148	; 0x94
  40475e:	4629      	mov	r1, r5
  404760:	4620      	mov	r0, r4
  404762:	f002 fa85 	bl	406c70 <__ssprint_r>
  404766:	2800      	cmp	r0, #0
  404768:	f47f aaf8 	bne.w	403d5c <_svfprintf_r+0x1a4>
  40476c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40476e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404770:	464a      	mov	r2, r9
  404772:	e7e7      	b.n	404744 <_svfprintf_r+0xb8c>
  404774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404776:	930e      	str	r3, [sp, #56]	; 0x38
  404778:	464e      	mov	r6, r9
  40477a:	f7ff bb2d 	b.w	403dd8 <_svfprintf_r+0x220>
  40477e:	2d00      	cmp	r5, #0
  404780:	bf08      	it	eq
  404782:	2c0a      	cmpeq	r4, #10
  404784:	f0c0 808f 	bcc.w	4048a6 <_svfprintf_r+0xcee>
  404788:	464e      	mov	r6, r9
  40478a:	4620      	mov	r0, r4
  40478c:	4629      	mov	r1, r5
  40478e:	220a      	movs	r2, #10
  404790:	2300      	movs	r3, #0
  404792:	f003 fb5b 	bl	407e4c <__aeabi_uldivmod>
  404796:	3230      	adds	r2, #48	; 0x30
  404798:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40479c:	4620      	mov	r0, r4
  40479e:	4629      	mov	r1, r5
  4047a0:	2300      	movs	r3, #0
  4047a2:	220a      	movs	r2, #10
  4047a4:	f003 fb52 	bl	407e4c <__aeabi_uldivmod>
  4047a8:	4604      	mov	r4, r0
  4047aa:	460d      	mov	r5, r1
  4047ac:	ea54 0305 	orrs.w	r3, r4, r5
  4047b0:	d1eb      	bne.n	40478a <_svfprintf_r+0xbd2>
  4047b2:	eba9 0306 	sub.w	r3, r9, r6
  4047b6:	930e      	str	r3, [sp, #56]	; 0x38
  4047b8:	f7ff bb0e 	b.w	403dd8 <_svfprintf_r+0x220>
  4047bc:	aa25      	add	r2, sp, #148	; 0x94
  4047be:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047c0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047c2:	f002 fa55 	bl	406c70 <__ssprint_r>
  4047c6:	2800      	cmp	r0, #0
  4047c8:	f47f aac8 	bne.w	403d5c <_svfprintf_r+0x1a4>
  4047cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4047d0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047d2:	46c8      	mov	r8, r9
  4047d4:	f7ff bb5e 	b.w	403e94 <_svfprintf_r+0x2dc>
  4047d8:	1e5e      	subs	r6, r3, #1
  4047da:	2e00      	cmp	r6, #0
  4047dc:	f77f af0a 	ble.w	4045f4 <_svfprintf_r+0xa3c>
  4047e0:	2e10      	cmp	r6, #16
  4047e2:	4d03      	ldr	r5, [pc, #12]	; (4047f0 <_svfprintf_r+0xc38>)
  4047e4:	dd22      	ble.n	40482c <_svfprintf_r+0xc74>
  4047e6:	4622      	mov	r2, r4
  4047e8:	f04f 0b10 	mov.w	fp, #16
  4047ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4047ee:	e006      	b.n	4047fe <_svfprintf_r+0xc46>
  4047f0:	00408604 	.word	0x00408604
  4047f4:	3e10      	subs	r6, #16
  4047f6:	2e10      	cmp	r6, #16
  4047f8:	f108 0808 	add.w	r8, r8, #8
  4047fc:	dd15      	ble.n	40482a <_svfprintf_r+0xc72>
  4047fe:	3701      	adds	r7, #1
  404800:	3210      	adds	r2, #16
  404802:	2f07      	cmp	r7, #7
  404804:	9227      	str	r2, [sp, #156]	; 0x9c
  404806:	9726      	str	r7, [sp, #152]	; 0x98
  404808:	e888 0820 	stmia.w	r8, {r5, fp}
  40480c:	ddf2      	ble.n	4047f4 <_svfprintf_r+0xc3c>
  40480e:	aa25      	add	r2, sp, #148	; 0x94
  404810:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404812:	4620      	mov	r0, r4
  404814:	f002 fa2c 	bl	406c70 <__ssprint_r>
  404818:	2800      	cmp	r0, #0
  40481a:	f47f aa9f 	bne.w	403d5c <_svfprintf_r+0x1a4>
  40481e:	3e10      	subs	r6, #16
  404820:	2e10      	cmp	r6, #16
  404822:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404824:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404826:	46c8      	mov	r8, r9
  404828:	dce9      	bgt.n	4047fe <_svfprintf_r+0xc46>
  40482a:	4614      	mov	r4, r2
  40482c:	3701      	adds	r7, #1
  40482e:	4434      	add	r4, r6
  404830:	2f07      	cmp	r7, #7
  404832:	9427      	str	r4, [sp, #156]	; 0x9c
  404834:	9726      	str	r7, [sp, #152]	; 0x98
  404836:	e888 0060 	stmia.w	r8, {r5, r6}
  40483a:	f77f aed9 	ble.w	4045f0 <_svfprintf_r+0xa38>
  40483e:	aa25      	add	r2, sp, #148	; 0x94
  404840:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404842:	980c      	ldr	r0, [sp, #48]	; 0x30
  404844:	f002 fa14 	bl	406c70 <__ssprint_r>
  404848:	2800      	cmp	r0, #0
  40484a:	f47f aa87 	bne.w	403d5c <_svfprintf_r+0x1a4>
  40484e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404850:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404852:	46c8      	mov	r8, r9
  404854:	e6ce      	b.n	4045f4 <_svfprintf_r+0xa3c>
  404856:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404858:	6814      	ldr	r4, [r2, #0]
  40485a:	4613      	mov	r3, r2
  40485c:	3304      	adds	r3, #4
  40485e:	17e5      	asrs	r5, r4, #31
  404860:	930f      	str	r3, [sp, #60]	; 0x3c
  404862:	4622      	mov	r2, r4
  404864:	462b      	mov	r3, r5
  404866:	e4fa      	b.n	40425e <_svfprintf_r+0x6a6>
  404868:	3204      	adds	r2, #4
  40486a:	681c      	ldr	r4, [r3, #0]
  40486c:	920f      	str	r2, [sp, #60]	; 0x3c
  40486e:	2301      	movs	r3, #1
  404870:	2500      	movs	r5, #0
  404872:	f7ff ba94 	b.w	403d9e <_svfprintf_r+0x1e6>
  404876:	681c      	ldr	r4, [r3, #0]
  404878:	3304      	adds	r3, #4
  40487a:	930f      	str	r3, [sp, #60]	; 0x3c
  40487c:	2500      	movs	r5, #0
  40487e:	e421      	b.n	4040c4 <_svfprintf_r+0x50c>
  404880:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404882:	460a      	mov	r2, r1
  404884:	3204      	adds	r2, #4
  404886:	680c      	ldr	r4, [r1, #0]
  404888:	920f      	str	r2, [sp, #60]	; 0x3c
  40488a:	2500      	movs	r5, #0
  40488c:	f7ff ba87 	b.w	403d9e <_svfprintf_r+0x1e6>
  404890:	4614      	mov	r4, r2
  404892:	3301      	adds	r3, #1
  404894:	4434      	add	r4, r6
  404896:	2b07      	cmp	r3, #7
  404898:	9427      	str	r4, [sp, #156]	; 0x9c
  40489a:	9326      	str	r3, [sp, #152]	; 0x98
  40489c:	e888 0060 	stmia.w	r8, {r5, r6}
  4048a0:	f77f ab68 	ble.w	403f74 <_svfprintf_r+0x3bc>
  4048a4:	e6b3      	b.n	40460e <_svfprintf_r+0xa56>
  4048a6:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4048aa:	f8cd b01c 	str.w	fp, [sp, #28]
  4048ae:	ae42      	add	r6, sp, #264	; 0x108
  4048b0:	3430      	adds	r4, #48	; 0x30
  4048b2:	2301      	movs	r3, #1
  4048b4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4048b8:	930e      	str	r3, [sp, #56]	; 0x38
  4048ba:	f7ff ba8d 	b.w	403dd8 <_svfprintf_r+0x220>
  4048be:	aa25      	add	r2, sp, #148	; 0x94
  4048c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048c2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048c4:	f002 f9d4 	bl	406c70 <__ssprint_r>
  4048c8:	2800      	cmp	r0, #0
  4048ca:	f47f aa47 	bne.w	403d5c <_svfprintf_r+0x1a4>
  4048ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048d0:	46c8      	mov	r8, r9
  4048d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4048d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048d6:	429a      	cmp	r2, r3
  4048d8:	db44      	blt.n	404964 <_svfprintf_r+0xdac>
  4048da:	9b07      	ldr	r3, [sp, #28]
  4048dc:	07d9      	lsls	r1, r3, #31
  4048de:	d441      	bmi.n	404964 <_svfprintf_r+0xdac>
  4048e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048e2:	9812      	ldr	r0, [sp, #72]	; 0x48
  4048e4:	1a9a      	subs	r2, r3, r2
  4048e6:	1a1d      	subs	r5, r3, r0
  4048e8:	4295      	cmp	r5, r2
  4048ea:	bfa8      	it	ge
  4048ec:	4615      	movge	r5, r2
  4048ee:	2d00      	cmp	r5, #0
  4048f0:	dd0e      	ble.n	404910 <_svfprintf_r+0xd58>
  4048f2:	9926      	ldr	r1, [sp, #152]	; 0x98
  4048f4:	f8c8 5004 	str.w	r5, [r8, #4]
  4048f8:	3101      	adds	r1, #1
  4048fa:	4406      	add	r6, r0
  4048fc:	442c      	add	r4, r5
  4048fe:	2907      	cmp	r1, #7
  404900:	f8c8 6000 	str.w	r6, [r8]
  404904:	9427      	str	r4, [sp, #156]	; 0x9c
  404906:	9126      	str	r1, [sp, #152]	; 0x98
  404908:	f300 823b 	bgt.w	404d82 <_svfprintf_r+0x11ca>
  40490c:	f108 0808 	add.w	r8, r8, #8
  404910:	2d00      	cmp	r5, #0
  404912:	bfac      	ite	ge
  404914:	1b56      	subge	r6, r2, r5
  404916:	4616      	movlt	r6, r2
  404918:	2e00      	cmp	r6, #0
  40491a:	f77f ab2d 	ble.w	403f78 <_svfprintf_r+0x3c0>
  40491e:	2e10      	cmp	r6, #16
  404920:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404922:	4db0      	ldr	r5, [pc, #704]	; (404be4 <_svfprintf_r+0x102c>)
  404924:	ddb5      	ble.n	404892 <_svfprintf_r+0xcda>
  404926:	4622      	mov	r2, r4
  404928:	2710      	movs	r7, #16
  40492a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40492e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404930:	e004      	b.n	40493c <_svfprintf_r+0xd84>
  404932:	f108 0808 	add.w	r8, r8, #8
  404936:	3e10      	subs	r6, #16
  404938:	2e10      	cmp	r6, #16
  40493a:	dda9      	ble.n	404890 <_svfprintf_r+0xcd8>
  40493c:	3301      	adds	r3, #1
  40493e:	3210      	adds	r2, #16
  404940:	2b07      	cmp	r3, #7
  404942:	9227      	str	r2, [sp, #156]	; 0x9c
  404944:	9326      	str	r3, [sp, #152]	; 0x98
  404946:	e888 00a0 	stmia.w	r8, {r5, r7}
  40494a:	ddf2      	ble.n	404932 <_svfprintf_r+0xd7a>
  40494c:	aa25      	add	r2, sp, #148	; 0x94
  40494e:	4621      	mov	r1, r4
  404950:	4658      	mov	r0, fp
  404952:	f002 f98d 	bl	406c70 <__ssprint_r>
  404956:	2800      	cmp	r0, #0
  404958:	f47f aa00 	bne.w	403d5c <_svfprintf_r+0x1a4>
  40495c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40495e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404960:	46c8      	mov	r8, r9
  404962:	e7e8      	b.n	404936 <_svfprintf_r+0xd7e>
  404964:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404966:	9819      	ldr	r0, [sp, #100]	; 0x64
  404968:	991a      	ldr	r1, [sp, #104]	; 0x68
  40496a:	f8c8 1000 	str.w	r1, [r8]
  40496e:	3301      	adds	r3, #1
  404970:	4404      	add	r4, r0
  404972:	2b07      	cmp	r3, #7
  404974:	9427      	str	r4, [sp, #156]	; 0x9c
  404976:	f8c8 0004 	str.w	r0, [r8, #4]
  40497a:	9326      	str	r3, [sp, #152]	; 0x98
  40497c:	f300 81f5 	bgt.w	404d6a <_svfprintf_r+0x11b2>
  404980:	f108 0808 	add.w	r8, r8, #8
  404984:	e7ac      	b.n	4048e0 <_svfprintf_r+0xd28>
  404986:	9b07      	ldr	r3, [sp, #28]
  404988:	07da      	lsls	r2, r3, #31
  40498a:	f53f adfe 	bmi.w	40458a <_svfprintf_r+0x9d2>
  40498e:	3701      	adds	r7, #1
  404990:	3401      	adds	r4, #1
  404992:	2301      	movs	r3, #1
  404994:	2f07      	cmp	r7, #7
  404996:	9427      	str	r4, [sp, #156]	; 0x9c
  404998:	9726      	str	r7, [sp, #152]	; 0x98
  40499a:	f8c8 6000 	str.w	r6, [r8]
  40499e:	f8c8 3004 	str.w	r3, [r8, #4]
  4049a2:	f77f ae25 	ble.w	4045f0 <_svfprintf_r+0xa38>
  4049a6:	e74a      	b.n	40483e <_svfprintf_r+0xc86>
  4049a8:	aa25      	add	r2, sp, #148	; 0x94
  4049aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049ac:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049ae:	f002 f95f 	bl	406c70 <__ssprint_r>
  4049b2:	2800      	cmp	r0, #0
  4049b4:	f47f a9d2 	bne.w	403d5c <_svfprintf_r+0x1a4>
  4049b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049ba:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4049bc:	46c8      	mov	r8, r9
  4049be:	e5f2      	b.n	4045a6 <_svfprintf_r+0x9ee>
  4049c0:	aa25      	add	r2, sp, #148	; 0x94
  4049c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049c4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049c6:	f002 f953 	bl	406c70 <__ssprint_r>
  4049ca:	2800      	cmp	r0, #0
  4049cc:	f47f a9c6 	bne.w	403d5c <_svfprintf_r+0x1a4>
  4049d0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049d2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4049d4:	46c8      	mov	r8, r9
  4049d6:	e5f5      	b.n	4045c4 <_svfprintf_r+0xa0c>
  4049d8:	464e      	mov	r6, r9
  4049da:	f7ff b9fd 	b.w	403dd8 <_svfprintf_r+0x220>
  4049de:	aa25      	add	r2, sp, #148	; 0x94
  4049e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049e4:	f002 f944 	bl	406c70 <__ssprint_r>
  4049e8:	2800      	cmp	r0, #0
  4049ea:	f47f a9b7 	bne.w	403d5c <_svfprintf_r+0x1a4>
  4049ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049f0:	46c8      	mov	r8, r9
  4049f2:	f7ff ba72 	b.w	403eda <_svfprintf_r+0x322>
  4049f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4049f8:	4622      	mov	r2, r4
  4049fa:	4620      	mov	r0, r4
  4049fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4049fe:	4623      	mov	r3, r4
  404a00:	4621      	mov	r1, r4
  404a02:	f003 f9e5 	bl	407dd0 <__aeabi_dcmpun>
  404a06:	2800      	cmp	r0, #0
  404a08:	f040 8286 	bne.w	404f18 <_svfprintf_r+0x1360>
  404a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a0e:	3301      	adds	r3, #1
  404a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a12:	f023 0320 	bic.w	r3, r3, #32
  404a16:	930e      	str	r3, [sp, #56]	; 0x38
  404a18:	f000 81e2 	beq.w	404de0 <_svfprintf_r+0x1228>
  404a1c:	2b47      	cmp	r3, #71	; 0x47
  404a1e:	f000 811e 	beq.w	404c5e <_svfprintf_r+0x10a6>
  404a22:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404a26:	9307      	str	r3, [sp, #28]
  404a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404a2a:	1e1f      	subs	r7, r3, #0
  404a2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404a2e:	9308      	str	r3, [sp, #32]
  404a30:	bfbb      	ittet	lt
  404a32:	463b      	movlt	r3, r7
  404a34:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404a38:	2300      	movge	r3, #0
  404a3a:	232d      	movlt	r3, #45	; 0x2d
  404a3c:	9310      	str	r3, [sp, #64]	; 0x40
  404a3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a40:	2b66      	cmp	r3, #102	; 0x66
  404a42:	f000 81bb 	beq.w	404dbc <_svfprintf_r+0x1204>
  404a46:	2b46      	cmp	r3, #70	; 0x46
  404a48:	f000 80df 	beq.w	404c0a <_svfprintf_r+0x1052>
  404a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404a4e:	9a08      	ldr	r2, [sp, #32]
  404a50:	2b45      	cmp	r3, #69	; 0x45
  404a52:	bf0c      	ite	eq
  404a54:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404a56:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404a58:	a823      	add	r0, sp, #140	; 0x8c
  404a5a:	a920      	add	r1, sp, #128	; 0x80
  404a5c:	bf08      	it	eq
  404a5e:	1c5d      	addeq	r5, r3, #1
  404a60:	9004      	str	r0, [sp, #16]
  404a62:	9103      	str	r1, [sp, #12]
  404a64:	a81f      	add	r0, sp, #124	; 0x7c
  404a66:	2102      	movs	r1, #2
  404a68:	463b      	mov	r3, r7
  404a6a:	9002      	str	r0, [sp, #8]
  404a6c:	9501      	str	r5, [sp, #4]
  404a6e:	9100      	str	r1, [sp, #0]
  404a70:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a72:	f000 fb75 	bl	405160 <_dtoa_r>
  404a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a78:	2b67      	cmp	r3, #103	; 0x67
  404a7a:	4606      	mov	r6, r0
  404a7c:	f040 81e0 	bne.w	404e40 <_svfprintf_r+0x1288>
  404a80:	f01b 0f01 	tst.w	fp, #1
  404a84:	f000 8246 	beq.w	404f14 <_svfprintf_r+0x135c>
  404a88:	1974      	adds	r4, r6, r5
  404a8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404a8c:	9808      	ldr	r0, [sp, #32]
  404a8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404a90:	4639      	mov	r1, r7
  404a92:	f003 f96b 	bl	407d6c <__aeabi_dcmpeq>
  404a96:	2800      	cmp	r0, #0
  404a98:	f040 8165 	bne.w	404d66 <_svfprintf_r+0x11ae>
  404a9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404a9e:	42a3      	cmp	r3, r4
  404aa0:	d206      	bcs.n	404ab0 <_svfprintf_r+0xef8>
  404aa2:	2130      	movs	r1, #48	; 0x30
  404aa4:	1c5a      	adds	r2, r3, #1
  404aa6:	9223      	str	r2, [sp, #140]	; 0x8c
  404aa8:	7019      	strb	r1, [r3, #0]
  404aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404aac:	429c      	cmp	r4, r3
  404aae:	d8f9      	bhi.n	404aa4 <_svfprintf_r+0xeec>
  404ab0:	1b9b      	subs	r3, r3, r6
  404ab2:	9313      	str	r3, [sp, #76]	; 0x4c
  404ab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ab6:	2b47      	cmp	r3, #71	; 0x47
  404ab8:	f000 80e9 	beq.w	404c8e <_svfprintf_r+0x10d6>
  404abc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404abe:	2b65      	cmp	r3, #101	; 0x65
  404ac0:	f340 81cd 	ble.w	404e5e <_svfprintf_r+0x12a6>
  404ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ac6:	2b66      	cmp	r3, #102	; 0x66
  404ac8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404aca:	9312      	str	r3, [sp, #72]	; 0x48
  404acc:	f000 819e 	beq.w	404e0c <_svfprintf_r+0x1254>
  404ad0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404ad2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404ad4:	4619      	mov	r1, r3
  404ad6:	4291      	cmp	r1, r2
  404ad8:	f300 818a 	bgt.w	404df0 <_svfprintf_r+0x1238>
  404adc:	f01b 0f01 	tst.w	fp, #1
  404ae0:	f040 8213 	bne.w	404f0a <_svfprintf_r+0x1352>
  404ae4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404ae8:	9308      	str	r3, [sp, #32]
  404aea:	2367      	movs	r3, #103	; 0x67
  404aec:	920e      	str	r2, [sp, #56]	; 0x38
  404aee:	9311      	str	r3, [sp, #68]	; 0x44
  404af0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404af2:	2b00      	cmp	r3, #0
  404af4:	f040 80c4 	bne.w	404c80 <_svfprintf_r+0x10c8>
  404af8:	930a      	str	r3, [sp, #40]	; 0x28
  404afa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404afe:	f7ff b973 	b.w	403de8 <_svfprintf_r+0x230>
  404b02:	4635      	mov	r5, r6
  404b04:	460c      	mov	r4, r1
  404b06:	4646      	mov	r6, r8
  404b08:	4690      	mov	r8, r2
  404b0a:	3301      	adds	r3, #1
  404b0c:	443c      	add	r4, r7
  404b0e:	2b07      	cmp	r3, #7
  404b10:	9427      	str	r4, [sp, #156]	; 0x9c
  404b12:	9326      	str	r3, [sp, #152]	; 0x98
  404b14:	e888 00a0 	stmia.w	r8, {r5, r7}
  404b18:	f73f aed1 	bgt.w	4048be <_svfprintf_r+0xd06>
  404b1c:	f108 0808 	add.w	r8, r8, #8
  404b20:	e6d7      	b.n	4048d2 <_svfprintf_r+0xd1a>
  404b22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b24:	6813      	ldr	r3, [r2, #0]
  404b26:	3204      	adds	r2, #4
  404b28:	920f      	str	r2, [sp, #60]	; 0x3c
  404b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404b2c:	601a      	str	r2, [r3, #0]
  404b2e:	f7ff b86a 	b.w	403c06 <_svfprintf_r+0x4e>
  404b32:	aa25      	add	r2, sp, #148	; 0x94
  404b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b36:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b38:	f002 f89a 	bl	406c70 <__ssprint_r>
  404b3c:	2800      	cmp	r0, #0
  404b3e:	f47f a90d 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404b42:	46c8      	mov	r8, r9
  404b44:	e48d      	b.n	404462 <_svfprintf_r+0x8aa>
  404b46:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b48:	4a27      	ldr	r2, [pc, #156]	; (404be8 <_svfprintf_r+0x1030>)
  404b4a:	f8c8 2000 	str.w	r2, [r8]
  404b4e:	3301      	adds	r3, #1
  404b50:	3401      	adds	r4, #1
  404b52:	2201      	movs	r2, #1
  404b54:	2b07      	cmp	r3, #7
  404b56:	9427      	str	r4, [sp, #156]	; 0x9c
  404b58:	9326      	str	r3, [sp, #152]	; 0x98
  404b5a:	f8c8 2004 	str.w	r2, [r8, #4]
  404b5e:	dc72      	bgt.n	404c46 <_svfprintf_r+0x108e>
  404b60:	f108 0808 	add.w	r8, r8, #8
  404b64:	b929      	cbnz	r1, 404b72 <_svfprintf_r+0xfba>
  404b66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404b68:	b91b      	cbnz	r3, 404b72 <_svfprintf_r+0xfba>
  404b6a:	9b07      	ldr	r3, [sp, #28]
  404b6c:	07d8      	lsls	r0, r3, #31
  404b6e:	f57f aa03 	bpl.w	403f78 <_svfprintf_r+0x3c0>
  404b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b74:	9819      	ldr	r0, [sp, #100]	; 0x64
  404b76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404b78:	f8c8 2000 	str.w	r2, [r8]
  404b7c:	3301      	adds	r3, #1
  404b7e:	4602      	mov	r2, r0
  404b80:	4422      	add	r2, r4
  404b82:	2b07      	cmp	r3, #7
  404b84:	9227      	str	r2, [sp, #156]	; 0x9c
  404b86:	f8c8 0004 	str.w	r0, [r8, #4]
  404b8a:	9326      	str	r3, [sp, #152]	; 0x98
  404b8c:	f300 818d 	bgt.w	404eaa <_svfprintf_r+0x12f2>
  404b90:	f108 0808 	add.w	r8, r8, #8
  404b94:	2900      	cmp	r1, #0
  404b96:	f2c0 8165 	blt.w	404e64 <_svfprintf_r+0x12ac>
  404b9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404b9c:	f8c8 6000 	str.w	r6, [r8]
  404ba0:	3301      	adds	r3, #1
  404ba2:	188c      	adds	r4, r1, r2
  404ba4:	2b07      	cmp	r3, #7
  404ba6:	9427      	str	r4, [sp, #156]	; 0x9c
  404ba8:	9326      	str	r3, [sp, #152]	; 0x98
  404baa:	f8c8 1004 	str.w	r1, [r8, #4]
  404bae:	f77f a9e1 	ble.w	403f74 <_svfprintf_r+0x3bc>
  404bb2:	e52c      	b.n	40460e <_svfprintf_r+0xa56>
  404bb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404bb6:	9909      	ldr	r1, [sp, #36]	; 0x24
  404bb8:	6813      	ldr	r3, [r2, #0]
  404bba:	17cd      	asrs	r5, r1, #31
  404bbc:	4608      	mov	r0, r1
  404bbe:	3204      	adds	r2, #4
  404bc0:	4629      	mov	r1, r5
  404bc2:	920f      	str	r2, [sp, #60]	; 0x3c
  404bc4:	e9c3 0100 	strd	r0, r1, [r3]
  404bc8:	f7ff b81d 	b.w	403c06 <_svfprintf_r+0x4e>
  404bcc:	aa25      	add	r2, sp, #148	; 0x94
  404bce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404bd0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bd2:	f002 f84d 	bl	406c70 <__ssprint_r>
  404bd6:	2800      	cmp	r0, #0
  404bd8:	f47f a8c0 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404bdc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404bde:	46c8      	mov	r8, r9
  404be0:	e458      	b.n	404494 <_svfprintf_r+0x8dc>
  404be2:	bf00      	nop
  404be4:	00408604 	.word	0x00408604
  404be8:	004085f0 	.word	0x004085f0
  404bec:	2140      	movs	r1, #64	; 0x40
  404bee:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bf0:	f001 fa10 	bl	406014 <_malloc_r>
  404bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404bf6:	6010      	str	r0, [r2, #0]
  404bf8:	6110      	str	r0, [r2, #16]
  404bfa:	2800      	cmp	r0, #0
  404bfc:	f000 81f2 	beq.w	404fe4 <_svfprintf_r+0x142c>
  404c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404c02:	2340      	movs	r3, #64	; 0x40
  404c04:	6153      	str	r3, [r2, #20]
  404c06:	f7fe bfee 	b.w	403be6 <_svfprintf_r+0x2e>
  404c0a:	a823      	add	r0, sp, #140	; 0x8c
  404c0c:	a920      	add	r1, sp, #128	; 0x80
  404c0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404c10:	9004      	str	r0, [sp, #16]
  404c12:	9103      	str	r1, [sp, #12]
  404c14:	a81f      	add	r0, sp, #124	; 0x7c
  404c16:	2103      	movs	r1, #3
  404c18:	9002      	str	r0, [sp, #8]
  404c1a:	9a08      	ldr	r2, [sp, #32]
  404c1c:	9401      	str	r4, [sp, #4]
  404c1e:	463b      	mov	r3, r7
  404c20:	9100      	str	r1, [sp, #0]
  404c22:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c24:	f000 fa9c 	bl	405160 <_dtoa_r>
  404c28:	4625      	mov	r5, r4
  404c2a:	4606      	mov	r6, r0
  404c2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c2e:	2b46      	cmp	r3, #70	; 0x46
  404c30:	eb06 0405 	add.w	r4, r6, r5
  404c34:	f47f af29 	bne.w	404a8a <_svfprintf_r+0xed2>
  404c38:	7833      	ldrb	r3, [r6, #0]
  404c3a:	2b30      	cmp	r3, #48	; 0x30
  404c3c:	f000 8178 	beq.w	404f30 <_svfprintf_r+0x1378>
  404c40:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404c42:	442c      	add	r4, r5
  404c44:	e721      	b.n	404a8a <_svfprintf_r+0xed2>
  404c46:	aa25      	add	r2, sp, #148	; 0x94
  404c48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c4c:	f002 f810 	bl	406c70 <__ssprint_r>
  404c50:	2800      	cmp	r0, #0
  404c52:	f47f a883 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404c56:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404c58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c5a:	46c8      	mov	r8, r9
  404c5c:	e782      	b.n	404b64 <_svfprintf_r+0xfac>
  404c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c60:	2b00      	cmp	r3, #0
  404c62:	bf08      	it	eq
  404c64:	2301      	moveq	r3, #1
  404c66:	930a      	str	r3, [sp, #40]	; 0x28
  404c68:	e6db      	b.n	404a22 <_svfprintf_r+0xe6a>
  404c6a:	4630      	mov	r0, r6
  404c6c:	940a      	str	r4, [sp, #40]	; 0x28
  404c6e:	f7fe fe07 	bl	403880 <strlen>
  404c72:	950f      	str	r5, [sp, #60]	; 0x3c
  404c74:	900e      	str	r0, [sp, #56]	; 0x38
  404c76:	f8cd b01c 	str.w	fp, [sp, #28]
  404c7a:	4603      	mov	r3, r0
  404c7c:	f7ff b9f9 	b.w	404072 <_svfprintf_r+0x4ba>
  404c80:	272d      	movs	r7, #45	; 0x2d
  404c82:	2300      	movs	r3, #0
  404c84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404c88:	930a      	str	r3, [sp, #40]	; 0x28
  404c8a:	f7ff b8ae 	b.w	403dea <_svfprintf_r+0x232>
  404c8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404c90:	9312      	str	r3, [sp, #72]	; 0x48
  404c92:	461a      	mov	r2, r3
  404c94:	3303      	adds	r3, #3
  404c96:	db04      	blt.n	404ca2 <_svfprintf_r+0x10ea>
  404c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c9a:	4619      	mov	r1, r3
  404c9c:	4291      	cmp	r1, r2
  404c9e:	f6bf af17 	bge.w	404ad0 <_svfprintf_r+0xf18>
  404ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ca4:	3b02      	subs	r3, #2
  404ca6:	9311      	str	r3, [sp, #68]	; 0x44
  404ca8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404cac:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404cb2:	3b01      	subs	r3, #1
  404cb4:	2b00      	cmp	r3, #0
  404cb6:	931f      	str	r3, [sp, #124]	; 0x7c
  404cb8:	bfbd      	ittte	lt
  404cba:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404cbc:	f1c3 0301 	rsblt	r3, r3, #1
  404cc0:	222d      	movlt	r2, #45	; 0x2d
  404cc2:	222b      	movge	r2, #43	; 0x2b
  404cc4:	2b09      	cmp	r3, #9
  404cc6:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404cca:	f340 8116 	ble.w	404efa <_svfprintf_r+0x1342>
  404cce:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404cd2:	4620      	mov	r0, r4
  404cd4:	4dab      	ldr	r5, [pc, #684]	; (404f84 <_svfprintf_r+0x13cc>)
  404cd6:	e000      	b.n	404cda <_svfprintf_r+0x1122>
  404cd8:	4610      	mov	r0, r2
  404cda:	fb85 1203 	smull	r1, r2, r5, r3
  404cde:	17d9      	asrs	r1, r3, #31
  404ce0:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404ce4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404ce8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404cec:	3230      	adds	r2, #48	; 0x30
  404cee:	2909      	cmp	r1, #9
  404cf0:	f800 2c01 	strb.w	r2, [r0, #-1]
  404cf4:	460b      	mov	r3, r1
  404cf6:	f100 32ff 	add.w	r2, r0, #4294967295
  404cfa:	dced      	bgt.n	404cd8 <_svfprintf_r+0x1120>
  404cfc:	3330      	adds	r3, #48	; 0x30
  404cfe:	3802      	subs	r0, #2
  404d00:	b2d9      	uxtb	r1, r3
  404d02:	4284      	cmp	r4, r0
  404d04:	f802 1c01 	strb.w	r1, [r2, #-1]
  404d08:	f240 8165 	bls.w	404fd6 <_svfprintf_r+0x141e>
  404d0c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404d10:	4613      	mov	r3, r2
  404d12:	e001      	b.n	404d18 <_svfprintf_r+0x1160>
  404d14:	f813 1b01 	ldrb.w	r1, [r3], #1
  404d18:	f800 1b01 	strb.w	r1, [r0], #1
  404d1c:	42a3      	cmp	r3, r4
  404d1e:	d1f9      	bne.n	404d14 <_svfprintf_r+0x115c>
  404d20:	3301      	adds	r3, #1
  404d22:	1a9b      	subs	r3, r3, r2
  404d24:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404d28:	4413      	add	r3, r2
  404d2a:	aa21      	add	r2, sp, #132	; 0x84
  404d2c:	1a9b      	subs	r3, r3, r2
  404d2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404d30:	931b      	str	r3, [sp, #108]	; 0x6c
  404d32:	2a01      	cmp	r2, #1
  404d34:	4413      	add	r3, r2
  404d36:	930e      	str	r3, [sp, #56]	; 0x38
  404d38:	f340 8119 	ble.w	404f6e <_svfprintf_r+0x13b6>
  404d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404d3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404d40:	4413      	add	r3, r2
  404d42:	930e      	str	r3, [sp, #56]	; 0x38
  404d44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404d48:	9308      	str	r3, [sp, #32]
  404d4a:	2300      	movs	r3, #0
  404d4c:	9312      	str	r3, [sp, #72]	; 0x48
  404d4e:	e6cf      	b.n	404af0 <_svfprintf_r+0xf38>
  404d50:	aa25      	add	r2, sp, #148	; 0x94
  404d52:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d54:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d56:	f001 ff8b 	bl	406c70 <__ssprint_r>
  404d5a:	2800      	cmp	r0, #0
  404d5c:	f47e affe 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404d60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d62:	46c8      	mov	r8, r9
  404d64:	e4d7      	b.n	404716 <_svfprintf_r+0xb5e>
  404d66:	4623      	mov	r3, r4
  404d68:	e6a2      	b.n	404ab0 <_svfprintf_r+0xef8>
  404d6a:	aa25      	add	r2, sp, #148	; 0x94
  404d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d6e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d70:	f001 ff7e 	bl	406c70 <__ssprint_r>
  404d74:	2800      	cmp	r0, #0
  404d76:	f47e aff1 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404d7a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404d7c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d7e:	46c8      	mov	r8, r9
  404d80:	e5ae      	b.n	4048e0 <_svfprintf_r+0xd28>
  404d82:	aa25      	add	r2, sp, #148	; 0x94
  404d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d86:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d88:	f001 ff72 	bl	406c70 <__ssprint_r>
  404d8c:	2800      	cmp	r0, #0
  404d8e:	f47e afe5 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404d92:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404d96:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d98:	1a9a      	subs	r2, r3, r2
  404d9a:	46c8      	mov	r8, r9
  404d9c:	e5b8      	b.n	404910 <_svfprintf_r+0xd58>
  404d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404da0:	9612      	str	r6, [sp, #72]	; 0x48
  404da2:	2b06      	cmp	r3, #6
  404da4:	bf28      	it	cs
  404da6:	2306      	movcs	r3, #6
  404da8:	960a      	str	r6, [sp, #40]	; 0x28
  404daa:	4637      	mov	r7, r6
  404dac:	9308      	str	r3, [sp, #32]
  404dae:	950f      	str	r5, [sp, #60]	; 0x3c
  404db0:	f8cd b01c 	str.w	fp, [sp, #28]
  404db4:	930e      	str	r3, [sp, #56]	; 0x38
  404db6:	4e74      	ldr	r6, [pc, #464]	; (404f88 <_svfprintf_r+0x13d0>)
  404db8:	f7ff b816 	b.w	403de8 <_svfprintf_r+0x230>
  404dbc:	a823      	add	r0, sp, #140	; 0x8c
  404dbe:	a920      	add	r1, sp, #128	; 0x80
  404dc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404dc2:	9004      	str	r0, [sp, #16]
  404dc4:	9103      	str	r1, [sp, #12]
  404dc6:	a81f      	add	r0, sp, #124	; 0x7c
  404dc8:	2103      	movs	r1, #3
  404dca:	9002      	str	r0, [sp, #8]
  404dcc:	9a08      	ldr	r2, [sp, #32]
  404dce:	9501      	str	r5, [sp, #4]
  404dd0:	463b      	mov	r3, r7
  404dd2:	9100      	str	r1, [sp, #0]
  404dd4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404dd6:	f000 f9c3 	bl	405160 <_dtoa_r>
  404dda:	4606      	mov	r6, r0
  404ddc:	1944      	adds	r4, r0, r5
  404dde:	e72b      	b.n	404c38 <_svfprintf_r+0x1080>
  404de0:	2306      	movs	r3, #6
  404de2:	930a      	str	r3, [sp, #40]	; 0x28
  404de4:	e61d      	b.n	404a22 <_svfprintf_r+0xe6a>
  404de6:	272d      	movs	r7, #45	; 0x2d
  404de8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404dec:	f7ff bacd 	b.w	40438a <_svfprintf_r+0x7d2>
  404df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404df2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404df4:	4413      	add	r3, r2
  404df6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404df8:	930e      	str	r3, [sp, #56]	; 0x38
  404dfa:	2a00      	cmp	r2, #0
  404dfc:	f340 80b0 	ble.w	404f60 <_svfprintf_r+0x13a8>
  404e00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404e04:	9308      	str	r3, [sp, #32]
  404e06:	2367      	movs	r3, #103	; 0x67
  404e08:	9311      	str	r3, [sp, #68]	; 0x44
  404e0a:	e671      	b.n	404af0 <_svfprintf_r+0xf38>
  404e0c:	2b00      	cmp	r3, #0
  404e0e:	f340 80c3 	ble.w	404f98 <_svfprintf_r+0x13e0>
  404e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e14:	2a00      	cmp	r2, #0
  404e16:	f040 8099 	bne.w	404f4c <_svfprintf_r+0x1394>
  404e1a:	f01b 0f01 	tst.w	fp, #1
  404e1e:	f040 8095 	bne.w	404f4c <_svfprintf_r+0x1394>
  404e22:	9308      	str	r3, [sp, #32]
  404e24:	930e      	str	r3, [sp, #56]	; 0x38
  404e26:	e663      	b.n	404af0 <_svfprintf_r+0xf38>
  404e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e2a:	9308      	str	r3, [sp, #32]
  404e2c:	930e      	str	r3, [sp, #56]	; 0x38
  404e2e:	900a      	str	r0, [sp, #40]	; 0x28
  404e30:	950f      	str	r5, [sp, #60]	; 0x3c
  404e32:	f8cd b01c 	str.w	fp, [sp, #28]
  404e36:	9012      	str	r0, [sp, #72]	; 0x48
  404e38:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404e3c:	f7fe bfd4 	b.w	403de8 <_svfprintf_r+0x230>
  404e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e42:	2b47      	cmp	r3, #71	; 0x47
  404e44:	f47f ae20 	bne.w	404a88 <_svfprintf_r+0xed0>
  404e48:	f01b 0f01 	tst.w	fp, #1
  404e4c:	f47f aeee 	bne.w	404c2c <_svfprintf_r+0x1074>
  404e50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404e52:	1b9b      	subs	r3, r3, r6
  404e54:	9313      	str	r3, [sp, #76]	; 0x4c
  404e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404e58:	2b47      	cmp	r3, #71	; 0x47
  404e5a:	f43f af18 	beq.w	404c8e <_svfprintf_r+0x10d6>
  404e5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404e60:	9312      	str	r3, [sp, #72]	; 0x48
  404e62:	e721      	b.n	404ca8 <_svfprintf_r+0x10f0>
  404e64:	424f      	negs	r7, r1
  404e66:	3110      	adds	r1, #16
  404e68:	4d48      	ldr	r5, [pc, #288]	; (404f8c <_svfprintf_r+0x13d4>)
  404e6a:	da2f      	bge.n	404ecc <_svfprintf_r+0x1314>
  404e6c:	2410      	movs	r4, #16
  404e6e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404e72:	e004      	b.n	404e7e <_svfprintf_r+0x12c6>
  404e74:	f108 0808 	add.w	r8, r8, #8
  404e78:	3f10      	subs	r7, #16
  404e7a:	2f10      	cmp	r7, #16
  404e7c:	dd26      	ble.n	404ecc <_svfprintf_r+0x1314>
  404e7e:	3301      	adds	r3, #1
  404e80:	3210      	adds	r2, #16
  404e82:	2b07      	cmp	r3, #7
  404e84:	9227      	str	r2, [sp, #156]	; 0x9c
  404e86:	9326      	str	r3, [sp, #152]	; 0x98
  404e88:	f8c8 5000 	str.w	r5, [r8]
  404e8c:	f8c8 4004 	str.w	r4, [r8, #4]
  404e90:	ddf0      	ble.n	404e74 <_svfprintf_r+0x12bc>
  404e92:	aa25      	add	r2, sp, #148	; 0x94
  404e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e96:	4658      	mov	r0, fp
  404e98:	f001 feea 	bl	406c70 <__ssprint_r>
  404e9c:	2800      	cmp	r0, #0
  404e9e:	f47e af5d 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404ea2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404ea4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ea6:	46c8      	mov	r8, r9
  404ea8:	e7e6      	b.n	404e78 <_svfprintf_r+0x12c0>
  404eaa:	aa25      	add	r2, sp, #148	; 0x94
  404eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404eae:	980c      	ldr	r0, [sp, #48]	; 0x30
  404eb0:	f001 fede 	bl	406c70 <__ssprint_r>
  404eb4:	2800      	cmp	r0, #0
  404eb6:	f47e af51 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404eba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404ebc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404ebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ec0:	46c8      	mov	r8, r9
  404ec2:	e667      	b.n	404b94 <_svfprintf_r+0xfdc>
  404ec4:	2000      	movs	r0, #0
  404ec6:	900a      	str	r0, [sp, #40]	; 0x28
  404ec8:	f7fe bed0 	b.w	403c6c <_svfprintf_r+0xb4>
  404ecc:	3301      	adds	r3, #1
  404ece:	443a      	add	r2, r7
  404ed0:	2b07      	cmp	r3, #7
  404ed2:	e888 00a0 	stmia.w	r8, {r5, r7}
  404ed6:	9227      	str	r2, [sp, #156]	; 0x9c
  404ed8:	9326      	str	r3, [sp, #152]	; 0x98
  404eda:	f108 0808 	add.w	r8, r8, #8
  404ede:	f77f ae5c 	ble.w	404b9a <_svfprintf_r+0xfe2>
  404ee2:	aa25      	add	r2, sp, #148	; 0x94
  404ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ee6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ee8:	f001 fec2 	bl	406c70 <__ssprint_r>
  404eec:	2800      	cmp	r0, #0
  404eee:	f47e af35 	bne.w	403d5c <_svfprintf_r+0x1a4>
  404ef2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404ef4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ef6:	46c8      	mov	r8, r9
  404ef8:	e64f      	b.n	404b9a <_svfprintf_r+0xfe2>
  404efa:	3330      	adds	r3, #48	; 0x30
  404efc:	2230      	movs	r2, #48	; 0x30
  404efe:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404f02:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404f06:	ab22      	add	r3, sp, #136	; 0x88
  404f08:	e70f      	b.n	404d2a <_svfprintf_r+0x1172>
  404f0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404f0c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404f0e:	4413      	add	r3, r2
  404f10:	930e      	str	r3, [sp, #56]	; 0x38
  404f12:	e775      	b.n	404e00 <_svfprintf_r+0x1248>
  404f14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404f16:	e5cb      	b.n	404ab0 <_svfprintf_r+0xef8>
  404f18:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404f1a:	4e1d      	ldr	r6, [pc, #116]	; (404f90 <_svfprintf_r+0x13d8>)
  404f1c:	2b00      	cmp	r3, #0
  404f1e:	bfb6      	itet	lt
  404f20:	272d      	movlt	r7, #45	; 0x2d
  404f22:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404f26:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404f2a:	4b1a      	ldr	r3, [pc, #104]	; (404f94 <_svfprintf_r+0x13dc>)
  404f2c:	f7ff ba2f 	b.w	40438e <_svfprintf_r+0x7d6>
  404f30:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404f32:	9808      	ldr	r0, [sp, #32]
  404f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404f36:	4639      	mov	r1, r7
  404f38:	f002 ff18 	bl	407d6c <__aeabi_dcmpeq>
  404f3c:	2800      	cmp	r0, #0
  404f3e:	f47f ae7f 	bne.w	404c40 <_svfprintf_r+0x1088>
  404f42:	f1c5 0501 	rsb	r5, r5, #1
  404f46:	951f      	str	r5, [sp, #124]	; 0x7c
  404f48:	442c      	add	r4, r5
  404f4a:	e59e      	b.n	404a8a <_svfprintf_r+0xed2>
  404f4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404f4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404f50:	4413      	add	r3, r2
  404f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404f54:	441a      	add	r2, r3
  404f56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404f5a:	920e      	str	r2, [sp, #56]	; 0x38
  404f5c:	9308      	str	r3, [sp, #32]
  404f5e:	e5c7      	b.n	404af0 <_svfprintf_r+0xf38>
  404f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404f62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404f64:	f1c3 0301 	rsb	r3, r3, #1
  404f68:	441a      	add	r2, r3
  404f6a:	4613      	mov	r3, r2
  404f6c:	e7d0      	b.n	404f10 <_svfprintf_r+0x1358>
  404f6e:	f01b 0301 	ands.w	r3, fp, #1
  404f72:	9312      	str	r3, [sp, #72]	; 0x48
  404f74:	f47f aee2 	bne.w	404d3c <_svfprintf_r+0x1184>
  404f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404f7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404f7e:	9308      	str	r3, [sp, #32]
  404f80:	e5b6      	b.n	404af0 <_svfprintf_r+0xf38>
  404f82:	bf00      	nop
  404f84:	66666667 	.word	0x66666667
  404f88:	004085e8 	.word	0x004085e8
  404f8c:	00408604 	.word	0x00408604
  404f90:	004085bc 	.word	0x004085bc
  404f94:	004085b8 	.word	0x004085b8
  404f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f9a:	b913      	cbnz	r3, 404fa2 <_svfprintf_r+0x13ea>
  404f9c:	f01b 0f01 	tst.w	fp, #1
  404fa0:	d002      	beq.n	404fa8 <_svfprintf_r+0x13f0>
  404fa2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404fa4:	3301      	adds	r3, #1
  404fa6:	e7d4      	b.n	404f52 <_svfprintf_r+0x139a>
  404fa8:	2301      	movs	r3, #1
  404faa:	e73a      	b.n	404e22 <_svfprintf_r+0x126a>
  404fac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404fae:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404fb2:	6828      	ldr	r0, [r5, #0]
  404fb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404fb8:	900a      	str	r0, [sp, #40]	; 0x28
  404fba:	4628      	mov	r0, r5
  404fbc:	3004      	adds	r0, #4
  404fbe:	46a2      	mov	sl, r4
  404fc0:	900f      	str	r0, [sp, #60]	; 0x3c
  404fc2:	f7fe be51 	b.w	403c68 <_svfprintf_r+0xb0>
  404fc6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fca:	f7ff b867 	b.w	40409c <_svfprintf_r+0x4e4>
  404fce:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fd2:	f7ff ba15 	b.w	404400 <_svfprintf_r+0x848>
  404fd6:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404fda:	e6a6      	b.n	404d2a <_svfprintf_r+0x1172>
  404fdc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fe0:	f7ff b8eb 	b.w	4041ba <_svfprintf_r+0x602>
  404fe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404fe6:	230c      	movs	r3, #12
  404fe8:	6013      	str	r3, [r2, #0]
  404fea:	f04f 33ff 	mov.w	r3, #4294967295
  404fee:	9309      	str	r3, [sp, #36]	; 0x24
  404ff0:	f7fe bebd 	b.w	403d6e <_svfprintf_r+0x1b6>
  404ff4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404ff8:	f7ff b99a 	b.w	404330 <_svfprintf_r+0x778>
  404ffc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405000:	f7ff b976 	b.w	4042f0 <_svfprintf_r+0x738>
  405004:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405008:	f7ff b959 	b.w	4042be <_svfprintf_r+0x706>
  40500c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405010:	f7ff b912 	b.w	404238 <_svfprintf_r+0x680>

00405014 <register_fini>:
  405014:	4b02      	ldr	r3, [pc, #8]	; (405020 <register_fini+0xc>)
  405016:	b113      	cbz	r3, 40501e <register_fini+0xa>
  405018:	4802      	ldr	r0, [pc, #8]	; (405024 <register_fini+0x10>)
  40501a:	f000 b805 	b.w	405028 <atexit>
  40501e:	4770      	bx	lr
  405020:	00000000 	.word	0x00000000
  405024:	00405fb5 	.word	0x00405fb5

00405028 <atexit>:
  405028:	2300      	movs	r3, #0
  40502a:	4601      	mov	r1, r0
  40502c:	461a      	mov	r2, r3
  40502e:	4618      	mov	r0, r3
  405030:	f001 beaa 	b.w	406d88 <__register_exitproc>

00405034 <quorem>:
  405034:	6902      	ldr	r2, [r0, #16]
  405036:	690b      	ldr	r3, [r1, #16]
  405038:	4293      	cmp	r3, r2
  40503a:	f300 808d 	bgt.w	405158 <quorem+0x124>
  40503e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405042:	f103 38ff 	add.w	r8, r3, #4294967295
  405046:	f101 0714 	add.w	r7, r1, #20
  40504a:	f100 0b14 	add.w	fp, r0, #20
  40504e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405052:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405056:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40505a:	b083      	sub	sp, #12
  40505c:	3201      	adds	r2, #1
  40505e:	fbb3 f9f2 	udiv	r9, r3, r2
  405062:	eb0b 0304 	add.w	r3, fp, r4
  405066:	9400      	str	r4, [sp, #0]
  405068:	eb07 0a04 	add.w	sl, r7, r4
  40506c:	9301      	str	r3, [sp, #4]
  40506e:	f1b9 0f00 	cmp.w	r9, #0
  405072:	d039      	beq.n	4050e8 <quorem+0xb4>
  405074:	2500      	movs	r5, #0
  405076:	462e      	mov	r6, r5
  405078:	46bc      	mov	ip, r7
  40507a:	46de      	mov	lr, fp
  40507c:	f85c 4b04 	ldr.w	r4, [ip], #4
  405080:	f8de 3000 	ldr.w	r3, [lr]
  405084:	b2a2      	uxth	r2, r4
  405086:	fb09 5502 	mla	r5, r9, r2, r5
  40508a:	0c22      	lsrs	r2, r4, #16
  40508c:	0c2c      	lsrs	r4, r5, #16
  40508e:	fb09 4202 	mla	r2, r9, r2, r4
  405092:	b2ad      	uxth	r5, r5
  405094:	1b75      	subs	r5, r6, r5
  405096:	b296      	uxth	r6, r2
  405098:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40509c:	fa15 f383 	uxtah	r3, r5, r3
  4050a0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4050a4:	b29b      	uxth	r3, r3
  4050a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4050aa:	45e2      	cmp	sl, ip
  4050ac:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4050b0:	f84e 3b04 	str.w	r3, [lr], #4
  4050b4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4050b8:	d2e0      	bcs.n	40507c <quorem+0x48>
  4050ba:	9b00      	ldr	r3, [sp, #0]
  4050bc:	f85b 3003 	ldr.w	r3, [fp, r3]
  4050c0:	b993      	cbnz	r3, 4050e8 <quorem+0xb4>
  4050c2:	9c01      	ldr	r4, [sp, #4]
  4050c4:	1f23      	subs	r3, r4, #4
  4050c6:	459b      	cmp	fp, r3
  4050c8:	d20c      	bcs.n	4050e4 <quorem+0xb0>
  4050ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4050ce:	b94b      	cbnz	r3, 4050e4 <quorem+0xb0>
  4050d0:	f1a4 0308 	sub.w	r3, r4, #8
  4050d4:	e002      	b.n	4050dc <quorem+0xa8>
  4050d6:	681a      	ldr	r2, [r3, #0]
  4050d8:	3b04      	subs	r3, #4
  4050da:	b91a      	cbnz	r2, 4050e4 <quorem+0xb0>
  4050dc:	459b      	cmp	fp, r3
  4050de:	f108 38ff 	add.w	r8, r8, #4294967295
  4050e2:	d3f8      	bcc.n	4050d6 <quorem+0xa2>
  4050e4:	f8c0 8010 	str.w	r8, [r0, #16]
  4050e8:	4604      	mov	r4, r0
  4050ea:	f001 fcb3 	bl	406a54 <__mcmp>
  4050ee:	2800      	cmp	r0, #0
  4050f0:	db2e      	blt.n	405150 <quorem+0x11c>
  4050f2:	f109 0901 	add.w	r9, r9, #1
  4050f6:	465d      	mov	r5, fp
  4050f8:	2300      	movs	r3, #0
  4050fa:	f857 1b04 	ldr.w	r1, [r7], #4
  4050fe:	6828      	ldr	r0, [r5, #0]
  405100:	b28a      	uxth	r2, r1
  405102:	1a9a      	subs	r2, r3, r2
  405104:	0c0b      	lsrs	r3, r1, #16
  405106:	fa12 f280 	uxtah	r2, r2, r0
  40510a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40510e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405112:	b292      	uxth	r2, r2
  405114:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405118:	45ba      	cmp	sl, r7
  40511a:	f845 2b04 	str.w	r2, [r5], #4
  40511e:	ea4f 4323 	mov.w	r3, r3, asr #16
  405122:	d2ea      	bcs.n	4050fa <quorem+0xc6>
  405124:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405128:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40512c:	b982      	cbnz	r2, 405150 <quorem+0x11c>
  40512e:	1f1a      	subs	r2, r3, #4
  405130:	4593      	cmp	fp, r2
  405132:	d20b      	bcs.n	40514c <quorem+0x118>
  405134:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405138:	b942      	cbnz	r2, 40514c <quorem+0x118>
  40513a:	3b08      	subs	r3, #8
  40513c:	e002      	b.n	405144 <quorem+0x110>
  40513e:	681a      	ldr	r2, [r3, #0]
  405140:	3b04      	subs	r3, #4
  405142:	b91a      	cbnz	r2, 40514c <quorem+0x118>
  405144:	459b      	cmp	fp, r3
  405146:	f108 38ff 	add.w	r8, r8, #4294967295
  40514a:	d3f8      	bcc.n	40513e <quorem+0x10a>
  40514c:	f8c4 8010 	str.w	r8, [r4, #16]
  405150:	4648      	mov	r0, r9
  405152:	b003      	add	sp, #12
  405154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405158:	2000      	movs	r0, #0
  40515a:	4770      	bx	lr
  40515c:	0000      	movs	r0, r0
	...

00405160 <_dtoa_r>:
  405160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405164:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405166:	b09b      	sub	sp, #108	; 0x6c
  405168:	4604      	mov	r4, r0
  40516a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40516c:	4692      	mov	sl, r2
  40516e:	469b      	mov	fp, r3
  405170:	b141      	cbz	r1, 405184 <_dtoa_r+0x24>
  405172:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405174:	604a      	str	r2, [r1, #4]
  405176:	2301      	movs	r3, #1
  405178:	4093      	lsls	r3, r2
  40517a:	608b      	str	r3, [r1, #8]
  40517c:	f001 fa92 	bl	4066a4 <_Bfree>
  405180:	2300      	movs	r3, #0
  405182:	6423      	str	r3, [r4, #64]	; 0x40
  405184:	f1bb 0f00 	cmp.w	fp, #0
  405188:	465d      	mov	r5, fp
  40518a:	db35      	blt.n	4051f8 <_dtoa_r+0x98>
  40518c:	2300      	movs	r3, #0
  40518e:	6033      	str	r3, [r6, #0]
  405190:	4b9d      	ldr	r3, [pc, #628]	; (405408 <_dtoa_r+0x2a8>)
  405192:	43ab      	bics	r3, r5
  405194:	d015      	beq.n	4051c2 <_dtoa_r+0x62>
  405196:	4650      	mov	r0, sl
  405198:	4659      	mov	r1, fp
  40519a:	2200      	movs	r2, #0
  40519c:	2300      	movs	r3, #0
  40519e:	f002 fde5 	bl	407d6c <__aeabi_dcmpeq>
  4051a2:	4680      	mov	r8, r0
  4051a4:	2800      	cmp	r0, #0
  4051a6:	d02d      	beq.n	405204 <_dtoa_r+0xa4>
  4051a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4051aa:	2301      	movs	r3, #1
  4051ac:	6013      	str	r3, [r2, #0]
  4051ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4051b0:	2b00      	cmp	r3, #0
  4051b2:	f000 80bd 	beq.w	405330 <_dtoa_r+0x1d0>
  4051b6:	4895      	ldr	r0, [pc, #596]	; (40540c <_dtoa_r+0x2ac>)
  4051b8:	6018      	str	r0, [r3, #0]
  4051ba:	3801      	subs	r0, #1
  4051bc:	b01b      	add	sp, #108	; 0x6c
  4051be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4051c4:	f242 730f 	movw	r3, #9999	; 0x270f
  4051c8:	6013      	str	r3, [r2, #0]
  4051ca:	f1ba 0f00 	cmp.w	sl, #0
  4051ce:	d10d      	bne.n	4051ec <_dtoa_r+0x8c>
  4051d0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4051d4:	b955      	cbnz	r5, 4051ec <_dtoa_r+0x8c>
  4051d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4051d8:	488d      	ldr	r0, [pc, #564]	; (405410 <_dtoa_r+0x2b0>)
  4051da:	2b00      	cmp	r3, #0
  4051dc:	d0ee      	beq.n	4051bc <_dtoa_r+0x5c>
  4051de:	f100 0308 	add.w	r3, r0, #8
  4051e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4051e4:	6013      	str	r3, [r2, #0]
  4051e6:	b01b      	add	sp, #108	; 0x6c
  4051e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4051ee:	4889      	ldr	r0, [pc, #548]	; (405414 <_dtoa_r+0x2b4>)
  4051f0:	2b00      	cmp	r3, #0
  4051f2:	d0e3      	beq.n	4051bc <_dtoa_r+0x5c>
  4051f4:	1cc3      	adds	r3, r0, #3
  4051f6:	e7f4      	b.n	4051e2 <_dtoa_r+0x82>
  4051f8:	2301      	movs	r3, #1
  4051fa:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4051fe:	6033      	str	r3, [r6, #0]
  405200:	46ab      	mov	fp, r5
  405202:	e7c5      	b.n	405190 <_dtoa_r+0x30>
  405204:	aa18      	add	r2, sp, #96	; 0x60
  405206:	ab19      	add	r3, sp, #100	; 0x64
  405208:	9201      	str	r2, [sp, #4]
  40520a:	9300      	str	r3, [sp, #0]
  40520c:	4652      	mov	r2, sl
  40520e:	465b      	mov	r3, fp
  405210:	4620      	mov	r0, r4
  405212:	f001 fcbf 	bl	406b94 <__d2b>
  405216:	0d2b      	lsrs	r3, r5, #20
  405218:	4681      	mov	r9, r0
  40521a:	d071      	beq.n	405300 <_dtoa_r+0x1a0>
  40521c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405220:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405224:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405226:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40522a:	4650      	mov	r0, sl
  40522c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405230:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405234:	2200      	movs	r2, #0
  405236:	4b78      	ldr	r3, [pc, #480]	; (405418 <_dtoa_r+0x2b8>)
  405238:	f002 f97c 	bl	407534 <__aeabi_dsub>
  40523c:	a36c      	add	r3, pc, #432	; (adr r3, 4053f0 <_dtoa_r+0x290>)
  40523e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405242:	f002 fb2b 	bl	40789c <__aeabi_dmul>
  405246:	a36c      	add	r3, pc, #432	; (adr r3, 4053f8 <_dtoa_r+0x298>)
  405248:	e9d3 2300 	ldrd	r2, r3, [r3]
  40524c:	f002 f974 	bl	407538 <__adddf3>
  405250:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405254:	4630      	mov	r0, r6
  405256:	f002 fabb 	bl	4077d0 <__aeabi_i2d>
  40525a:	a369      	add	r3, pc, #420	; (adr r3, 405400 <_dtoa_r+0x2a0>)
  40525c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405260:	f002 fb1c 	bl	40789c <__aeabi_dmul>
  405264:	4602      	mov	r2, r0
  405266:	460b      	mov	r3, r1
  405268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40526c:	f002 f964 	bl	407538 <__adddf3>
  405270:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405274:	f002 fdc2 	bl	407dfc <__aeabi_d2iz>
  405278:	2200      	movs	r2, #0
  40527a:	9002      	str	r0, [sp, #8]
  40527c:	2300      	movs	r3, #0
  40527e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405282:	f002 fd7d 	bl	407d80 <__aeabi_dcmplt>
  405286:	2800      	cmp	r0, #0
  405288:	f040 8173 	bne.w	405572 <_dtoa_r+0x412>
  40528c:	9d02      	ldr	r5, [sp, #8]
  40528e:	2d16      	cmp	r5, #22
  405290:	f200 815d 	bhi.w	40554e <_dtoa_r+0x3ee>
  405294:	4b61      	ldr	r3, [pc, #388]	; (40541c <_dtoa_r+0x2bc>)
  405296:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40529a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40529e:	4652      	mov	r2, sl
  4052a0:	465b      	mov	r3, fp
  4052a2:	f002 fd8b 	bl	407dbc <__aeabi_dcmpgt>
  4052a6:	2800      	cmp	r0, #0
  4052a8:	f000 81c5 	beq.w	405636 <_dtoa_r+0x4d6>
  4052ac:	1e6b      	subs	r3, r5, #1
  4052ae:	9302      	str	r3, [sp, #8]
  4052b0:	2300      	movs	r3, #0
  4052b2:	930e      	str	r3, [sp, #56]	; 0x38
  4052b4:	1bbf      	subs	r7, r7, r6
  4052b6:	1e7b      	subs	r3, r7, #1
  4052b8:	9306      	str	r3, [sp, #24]
  4052ba:	f100 8154 	bmi.w	405566 <_dtoa_r+0x406>
  4052be:	2300      	movs	r3, #0
  4052c0:	9308      	str	r3, [sp, #32]
  4052c2:	9b02      	ldr	r3, [sp, #8]
  4052c4:	2b00      	cmp	r3, #0
  4052c6:	f2c0 8145 	blt.w	405554 <_dtoa_r+0x3f4>
  4052ca:	9a06      	ldr	r2, [sp, #24]
  4052cc:	930d      	str	r3, [sp, #52]	; 0x34
  4052ce:	4611      	mov	r1, r2
  4052d0:	4419      	add	r1, r3
  4052d2:	2300      	movs	r3, #0
  4052d4:	9106      	str	r1, [sp, #24]
  4052d6:	930c      	str	r3, [sp, #48]	; 0x30
  4052d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4052da:	2b09      	cmp	r3, #9
  4052dc:	d82a      	bhi.n	405334 <_dtoa_r+0x1d4>
  4052de:	2b05      	cmp	r3, #5
  4052e0:	f340 865b 	ble.w	405f9a <_dtoa_r+0xe3a>
  4052e4:	3b04      	subs	r3, #4
  4052e6:	9324      	str	r3, [sp, #144]	; 0x90
  4052e8:	2500      	movs	r5, #0
  4052ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4052ec:	3b02      	subs	r3, #2
  4052ee:	2b03      	cmp	r3, #3
  4052f0:	f200 8642 	bhi.w	405f78 <_dtoa_r+0xe18>
  4052f4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4052f8:	02c903d4 	.word	0x02c903d4
  4052fc:	046103df 	.word	0x046103df
  405300:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405302:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405304:	443e      	add	r6, r7
  405306:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40530a:	2b20      	cmp	r3, #32
  40530c:	f340 818e 	ble.w	40562c <_dtoa_r+0x4cc>
  405310:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405314:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405318:	409d      	lsls	r5, r3
  40531a:	fa2a f000 	lsr.w	r0, sl, r0
  40531e:	4328      	orrs	r0, r5
  405320:	f002 fa46 	bl	4077b0 <__aeabi_ui2d>
  405324:	2301      	movs	r3, #1
  405326:	3e01      	subs	r6, #1
  405328:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40532c:	9314      	str	r3, [sp, #80]	; 0x50
  40532e:	e781      	b.n	405234 <_dtoa_r+0xd4>
  405330:	483b      	ldr	r0, [pc, #236]	; (405420 <_dtoa_r+0x2c0>)
  405332:	e743      	b.n	4051bc <_dtoa_r+0x5c>
  405334:	2100      	movs	r1, #0
  405336:	6461      	str	r1, [r4, #68]	; 0x44
  405338:	4620      	mov	r0, r4
  40533a:	9125      	str	r1, [sp, #148]	; 0x94
  40533c:	f001 f98c 	bl	406658 <_Balloc>
  405340:	f04f 33ff 	mov.w	r3, #4294967295
  405344:	930a      	str	r3, [sp, #40]	; 0x28
  405346:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405348:	930f      	str	r3, [sp, #60]	; 0x3c
  40534a:	2301      	movs	r3, #1
  40534c:	9004      	str	r0, [sp, #16]
  40534e:	6420      	str	r0, [r4, #64]	; 0x40
  405350:	9224      	str	r2, [sp, #144]	; 0x90
  405352:	930b      	str	r3, [sp, #44]	; 0x2c
  405354:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405356:	2b00      	cmp	r3, #0
  405358:	f2c0 80d9 	blt.w	40550e <_dtoa_r+0x3ae>
  40535c:	9a02      	ldr	r2, [sp, #8]
  40535e:	2a0e      	cmp	r2, #14
  405360:	f300 80d5 	bgt.w	40550e <_dtoa_r+0x3ae>
  405364:	4b2d      	ldr	r3, [pc, #180]	; (40541c <_dtoa_r+0x2bc>)
  405366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40536a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40536e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405372:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405374:	2b00      	cmp	r3, #0
  405376:	f2c0 83ba 	blt.w	405aee <_dtoa_r+0x98e>
  40537a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40537e:	4650      	mov	r0, sl
  405380:	462a      	mov	r2, r5
  405382:	4633      	mov	r3, r6
  405384:	4659      	mov	r1, fp
  405386:	f002 fbb3 	bl	407af0 <__aeabi_ddiv>
  40538a:	f002 fd37 	bl	407dfc <__aeabi_d2iz>
  40538e:	4680      	mov	r8, r0
  405390:	f002 fa1e 	bl	4077d0 <__aeabi_i2d>
  405394:	462a      	mov	r2, r5
  405396:	4633      	mov	r3, r6
  405398:	f002 fa80 	bl	40789c <__aeabi_dmul>
  40539c:	460b      	mov	r3, r1
  40539e:	4602      	mov	r2, r0
  4053a0:	4659      	mov	r1, fp
  4053a2:	4650      	mov	r0, sl
  4053a4:	f002 f8c6 	bl	407534 <__aeabi_dsub>
  4053a8:	9d04      	ldr	r5, [sp, #16]
  4053aa:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4053ae:	702b      	strb	r3, [r5, #0]
  4053b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053b2:	2b01      	cmp	r3, #1
  4053b4:	4606      	mov	r6, r0
  4053b6:	460f      	mov	r7, r1
  4053b8:	f105 0501 	add.w	r5, r5, #1
  4053bc:	d068      	beq.n	405490 <_dtoa_r+0x330>
  4053be:	2200      	movs	r2, #0
  4053c0:	4b18      	ldr	r3, [pc, #96]	; (405424 <_dtoa_r+0x2c4>)
  4053c2:	f002 fa6b 	bl	40789c <__aeabi_dmul>
  4053c6:	2200      	movs	r2, #0
  4053c8:	2300      	movs	r3, #0
  4053ca:	4606      	mov	r6, r0
  4053cc:	460f      	mov	r7, r1
  4053ce:	f002 fccd 	bl	407d6c <__aeabi_dcmpeq>
  4053d2:	2800      	cmp	r0, #0
  4053d4:	f040 8088 	bne.w	4054e8 <_dtoa_r+0x388>
  4053d8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4053dc:	f04f 0a00 	mov.w	sl, #0
  4053e0:	f8df b040 	ldr.w	fp, [pc, #64]	; 405424 <_dtoa_r+0x2c4>
  4053e4:	940c      	str	r4, [sp, #48]	; 0x30
  4053e6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4053ea:	e028      	b.n	40543e <_dtoa_r+0x2de>
  4053ec:	f3af 8000 	nop.w
  4053f0:	636f4361 	.word	0x636f4361
  4053f4:	3fd287a7 	.word	0x3fd287a7
  4053f8:	8b60c8b3 	.word	0x8b60c8b3
  4053fc:	3fc68a28 	.word	0x3fc68a28
  405400:	509f79fb 	.word	0x509f79fb
  405404:	3fd34413 	.word	0x3fd34413
  405408:	7ff00000 	.word	0x7ff00000
  40540c:	004085f1 	.word	0x004085f1
  405410:	00408614 	.word	0x00408614
  405414:	00408620 	.word	0x00408620
  405418:	3ff80000 	.word	0x3ff80000
  40541c:	00408660 	.word	0x00408660
  405420:	004085f0 	.word	0x004085f0
  405424:	40240000 	.word	0x40240000
  405428:	f002 fa38 	bl	40789c <__aeabi_dmul>
  40542c:	2200      	movs	r2, #0
  40542e:	2300      	movs	r3, #0
  405430:	4606      	mov	r6, r0
  405432:	460f      	mov	r7, r1
  405434:	f002 fc9a 	bl	407d6c <__aeabi_dcmpeq>
  405438:	2800      	cmp	r0, #0
  40543a:	f040 83c1 	bne.w	405bc0 <_dtoa_r+0xa60>
  40543e:	4642      	mov	r2, r8
  405440:	464b      	mov	r3, r9
  405442:	4630      	mov	r0, r6
  405444:	4639      	mov	r1, r7
  405446:	f002 fb53 	bl	407af0 <__aeabi_ddiv>
  40544a:	f002 fcd7 	bl	407dfc <__aeabi_d2iz>
  40544e:	4604      	mov	r4, r0
  405450:	f002 f9be 	bl	4077d0 <__aeabi_i2d>
  405454:	4642      	mov	r2, r8
  405456:	464b      	mov	r3, r9
  405458:	f002 fa20 	bl	40789c <__aeabi_dmul>
  40545c:	4602      	mov	r2, r0
  40545e:	460b      	mov	r3, r1
  405460:	4630      	mov	r0, r6
  405462:	4639      	mov	r1, r7
  405464:	f002 f866 	bl	407534 <__aeabi_dsub>
  405468:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40546c:	9e04      	ldr	r6, [sp, #16]
  40546e:	f805 eb01 	strb.w	lr, [r5], #1
  405472:	eba5 0e06 	sub.w	lr, r5, r6
  405476:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405478:	45b6      	cmp	lr, r6
  40547a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40547e:	4652      	mov	r2, sl
  405480:	465b      	mov	r3, fp
  405482:	d1d1      	bne.n	405428 <_dtoa_r+0x2c8>
  405484:	46a0      	mov	r8, r4
  405486:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40548a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40548c:	4606      	mov	r6, r0
  40548e:	460f      	mov	r7, r1
  405490:	4632      	mov	r2, r6
  405492:	463b      	mov	r3, r7
  405494:	4630      	mov	r0, r6
  405496:	4639      	mov	r1, r7
  405498:	f002 f84e 	bl	407538 <__adddf3>
  40549c:	4606      	mov	r6, r0
  40549e:	460f      	mov	r7, r1
  4054a0:	4602      	mov	r2, r0
  4054a2:	460b      	mov	r3, r1
  4054a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4054a8:	f002 fc6a 	bl	407d80 <__aeabi_dcmplt>
  4054ac:	b948      	cbnz	r0, 4054c2 <_dtoa_r+0x362>
  4054ae:	4632      	mov	r2, r6
  4054b0:	463b      	mov	r3, r7
  4054b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4054b6:	f002 fc59 	bl	407d6c <__aeabi_dcmpeq>
  4054ba:	b1a8      	cbz	r0, 4054e8 <_dtoa_r+0x388>
  4054bc:	f018 0f01 	tst.w	r8, #1
  4054c0:	d012      	beq.n	4054e8 <_dtoa_r+0x388>
  4054c2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4054c6:	9a04      	ldr	r2, [sp, #16]
  4054c8:	1e6b      	subs	r3, r5, #1
  4054ca:	e004      	b.n	4054d6 <_dtoa_r+0x376>
  4054cc:	429a      	cmp	r2, r3
  4054ce:	f000 8401 	beq.w	405cd4 <_dtoa_r+0xb74>
  4054d2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4054d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4054da:	f103 0501 	add.w	r5, r3, #1
  4054de:	d0f5      	beq.n	4054cc <_dtoa_r+0x36c>
  4054e0:	f108 0801 	add.w	r8, r8, #1
  4054e4:	f883 8000 	strb.w	r8, [r3]
  4054e8:	4649      	mov	r1, r9
  4054ea:	4620      	mov	r0, r4
  4054ec:	f001 f8da 	bl	4066a4 <_Bfree>
  4054f0:	2200      	movs	r2, #0
  4054f2:	9b02      	ldr	r3, [sp, #8]
  4054f4:	702a      	strb	r2, [r5, #0]
  4054f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4054f8:	3301      	adds	r3, #1
  4054fa:	6013      	str	r3, [r2, #0]
  4054fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4054fe:	2b00      	cmp	r3, #0
  405500:	f000 839e 	beq.w	405c40 <_dtoa_r+0xae0>
  405504:	9804      	ldr	r0, [sp, #16]
  405506:	601d      	str	r5, [r3, #0]
  405508:	b01b      	add	sp, #108	; 0x6c
  40550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40550e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405510:	2a00      	cmp	r2, #0
  405512:	d03e      	beq.n	405592 <_dtoa_r+0x432>
  405514:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405516:	2a01      	cmp	r2, #1
  405518:	f340 8311 	ble.w	405b3e <_dtoa_r+0x9de>
  40551c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40551e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405520:	1e5f      	subs	r7, r3, #1
  405522:	42ba      	cmp	r2, r7
  405524:	f2c0 838f 	blt.w	405c46 <_dtoa_r+0xae6>
  405528:	1bd7      	subs	r7, r2, r7
  40552a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40552c:	2b00      	cmp	r3, #0
  40552e:	f2c0 848b 	blt.w	405e48 <_dtoa_r+0xce8>
  405532:	9d08      	ldr	r5, [sp, #32]
  405534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405536:	9a08      	ldr	r2, [sp, #32]
  405538:	441a      	add	r2, r3
  40553a:	9208      	str	r2, [sp, #32]
  40553c:	9a06      	ldr	r2, [sp, #24]
  40553e:	2101      	movs	r1, #1
  405540:	441a      	add	r2, r3
  405542:	4620      	mov	r0, r4
  405544:	9206      	str	r2, [sp, #24]
  405546:	f001 f947 	bl	4067d8 <__i2b>
  40554a:	4606      	mov	r6, r0
  40554c:	e024      	b.n	405598 <_dtoa_r+0x438>
  40554e:	2301      	movs	r3, #1
  405550:	930e      	str	r3, [sp, #56]	; 0x38
  405552:	e6af      	b.n	4052b4 <_dtoa_r+0x154>
  405554:	9a08      	ldr	r2, [sp, #32]
  405556:	9b02      	ldr	r3, [sp, #8]
  405558:	1ad2      	subs	r2, r2, r3
  40555a:	425b      	negs	r3, r3
  40555c:	930c      	str	r3, [sp, #48]	; 0x30
  40555e:	2300      	movs	r3, #0
  405560:	9208      	str	r2, [sp, #32]
  405562:	930d      	str	r3, [sp, #52]	; 0x34
  405564:	e6b8      	b.n	4052d8 <_dtoa_r+0x178>
  405566:	f1c7 0301 	rsb	r3, r7, #1
  40556a:	9308      	str	r3, [sp, #32]
  40556c:	2300      	movs	r3, #0
  40556e:	9306      	str	r3, [sp, #24]
  405570:	e6a7      	b.n	4052c2 <_dtoa_r+0x162>
  405572:	9d02      	ldr	r5, [sp, #8]
  405574:	4628      	mov	r0, r5
  405576:	f002 f92b 	bl	4077d0 <__aeabi_i2d>
  40557a:	4602      	mov	r2, r0
  40557c:	460b      	mov	r3, r1
  40557e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405582:	f002 fbf3 	bl	407d6c <__aeabi_dcmpeq>
  405586:	2800      	cmp	r0, #0
  405588:	f47f ae80 	bne.w	40528c <_dtoa_r+0x12c>
  40558c:	1e6b      	subs	r3, r5, #1
  40558e:	9302      	str	r3, [sp, #8]
  405590:	e67c      	b.n	40528c <_dtoa_r+0x12c>
  405592:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405594:	9d08      	ldr	r5, [sp, #32]
  405596:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405598:	2d00      	cmp	r5, #0
  40559a:	dd0c      	ble.n	4055b6 <_dtoa_r+0x456>
  40559c:	9906      	ldr	r1, [sp, #24]
  40559e:	2900      	cmp	r1, #0
  4055a0:	460b      	mov	r3, r1
  4055a2:	dd08      	ble.n	4055b6 <_dtoa_r+0x456>
  4055a4:	42a9      	cmp	r1, r5
  4055a6:	9a08      	ldr	r2, [sp, #32]
  4055a8:	bfa8      	it	ge
  4055aa:	462b      	movge	r3, r5
  4055ac:	1ad2      	subs	r2, r2, r3
  4055ae:	1aed      	subs	r5, r5, r3
  4055b0:	1acb      	subs	r3, r1, r3
  4055b2:	9208      	str	r2, [sp, #32]
  4055b4:	9306      	str	r3, [sp, #24]
  4055b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4055b8:	b1d3      	cbz	r3, 4055f0 <_dtoa_r+0x490>
  4055ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4055bc:	2b00      	cmp	r3, #0
  4055be:	f000 82b7 	beq.w	405b30 <_dtoa_r+0x9d0>
  4055c2:	2f00      	cmp	r7, #0
  4055c4:	dd10      	ble.n	4055e8 <_dtoa_r+0x488>
  4055c6:	4631      	mov	r1, r6
  4055c8:	463a      	mov	r2, r7
  4055ca:	4620      	mov	r0, r4
  4055cc:	f001 f9a0 	bl	406910 <__pow5mult>
  4055d0:	464a      	mov	r2, r9
  4055d2:	4601      	mov	r1, r0
  4055d4:	4606      	mov	r6, r0
  4055d6:	4620      	mov	r0, r4
  4055d8:	f001 f908 	bl	4067ec <__multiply>
  4055dc:	4649      	mov	r1, r9
  4055de:	4680      	mov	r8, r0
  4055e0:	4620      	mov	r0, r4
  4055e2:	f001 f85f 	bl	4066a4 <_Bfree>
  4055e6:	46c1      	mov	r9, r8
  4055e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4055ea:	1bda      	subs	r2, r3, r7
  4055ec:	f040 82a1 	bne.w	405b32 <_dtoa_r+0x9d2>
  4055f0:	2101      	movs	r1, #1
  4055f2:	4620      	mov	r0, r4
  4055f4:	f001 f8f0 	bl	4067d8 <__i2b>
  4055f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4055fa:	2b00      	cmp	r3, #0
  4055fc:	4680      	mov	r8, r0
  4055fe:	dd1c      	ble.n	40563a <_dtoa_r+0x4da>
  405600:	4601      	mov	r1, r0
  405602:	461a      	mov	r2, r3
  405604:	4620      	mov	r0, r4
  405606:	f001 f983 	bl	406910 <__pow5mult>
  40560a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40560c:	2b01      	cmp	r3, #1
  40560e:	4680      	mov	r8, r0
  405610:	f340 8254 	ble.w	405abc <_dtoa_r+0x95c>
  405614:	2300      	movs	r3, #0
  405616:	930c      	str	r3, [sp, #48]	; 0x30
  405618:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40561c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405620:	6918      	ldr	r0, [r3, #16]
  405622:	f001 f889 	bl	406738 <__hi0bits>
  405626:	f1c0 0020 	rsb	r0, r0, #32
  40562a:	e010      	b.n	40564e <_dtoa_r+0x4ee>
  40562c:	f1c3 0520 	rsb	r5, r3, #32
  405630:	fa0a f005 	lsl.w	r0, sl, r5
  405634:	e674      	b.n	405320 <_dtoa_r+0x1c0>
  405636:	900e      	str	r0, [sp, #56]	; 0x38
  405638:	e63c      	b.n	4052b4 <_dtoa_r+0x154>
  40563a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40563c:	2b01      	cmp	r3, #1
  40563e:	f340 8287 	ble.w	405b50 <_dtoa_r+0x9f0>
  405642:	2300      	movs	r3, #0
  405644:	930c      	str	r3, [sp, #48]	; 0x30
  405646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405648:	2001      	movs	r0, #1
  40564a:	2b00      	cmp	r3, #0
  40564c:	d1e4      	bne.n	405618 <_dtoa_r+0x4b8>
  40564e:	9a06      	ldr	r2, [sp, #24]
  405650:	4410      	add	r0, r2
  405652:	f010 001f 	ands.w	r0, r0, #31
  405656:	f000 80a1 	beq.w	40579c <_dtoa_r+0x63c>
  40565a:	f1c0 0320 	rsb	r3, r0, #32
  40565e:	2b04      	cmp	r3, #4
  405660:	f340 849e 	ble.w	405fa0 <_dtoa_r+0xe40>
  405664:	9b08      	ldr	r3, [sp, #32]
  405666:	f1c0 001c 	rsb	r0, r0, #28
  40566a:	4403      	add	r3, r0
  40566c:	9308      	str	r3, [sp, #32]
  40566e:	4613      	mov	r3, r2
  405670:	4403      	add	r3, r0
  405672:	4405      	add	r5, r0
  405674:	9306      	str	r3, [sp, #24]
  405676:	9b08      	ldr	r3, [sp, #32]
  405678:	2b00      	cmp	r3, #0
  40567a:	dd05      	ble.n	405688 <_dtoa_r+0x528>
  40567c:	4649      	mov	r1, r9
  40567e:	461a      	mov	r2, r3
  405680:	4620      	mov	r0, r4
  405682:	f001 f995 	bl	4069b0 <__lshift>
  405686:	4681      	mov	r9, r0
  405688:	9b06      	ldr	r3, [sp, #24]
  40568a:	2b00      	cmp	r3, #0
  40568c:	dd05      	ble.n	40569a <_dtoa_r+0x53a>
  40568e:	4641      	mov	r1, r8
  405690:	461a      	mov	r2, r3
  405692:	4620      	mov	r0, r4
  405694:	f001 f98c 	bl	4069b0 <__lshift>
  405698:	4680      	mov	r8, r0
  40569a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40569c:	2b00      	cmp	r3, #0
  40569e:	f040 8086 	bne.w	4057ae <_dtoa_r+0x64e>
  4056a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056a4:	2b00      	cmp	r3, #0
  4056a6:	f340 8266 	ble.w	405b76 <_dtoa_r+0xa16>
  4056aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4056ac:	2b00      	cmp	r3, #0
  4056ae:	f000 8098 	beq.w	4057e2 <_dtoa_r+0x682>
  4056b2:	2d00      	cmp	r5, #0
  4056b4:	dd05      	ble.n	4056c2 <_dtoa_r+0x562>
  4056b6:	4631      	mov	r1, r6
  4056b8:	462a      	mov	r2, r5
  4056ba:	4620      	mov	r0, r4
  4056bc:	f001 f978 	bl	4069b0 <__lshift>
  4056c0:	4606      	mov	r6, r0
  4056c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4056c4:	2b00      	cmp	r3, #0
  4056c6:	f040 8337 	bne.w	405d38 <_dtoa_r+0xbd8>
  4056ca:	9606      	str	r6, [sp, #24]
  4056cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056ce:	9a04      	ldr	r2, [sp, #16]
  4056d0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4056d4:	3b01      	subs	r3, #1
  4056d6:	18d3      	adds	r3, r2, r3
  4056d8:	930b      	str	r3, [sp, #44]	; 0x2c
  4056da:	f00a 0301 	and.w	r3, sl, #1
  4056de:	930c      	str	r3, [sp, #48]	; 0x30
  4056e0:	4617      	mov	r7, r2
  4056e2:	46c2      	mov	sl, r8
  4056e4:	4651      	mov	r1, sl
  4056e6:	4648      	mov	r0, r9
  4056e8:	f7ff fca4 	bl	405034 <quorem>
  4056ec:	4631      	mov	r1, r6
  4056ee:	4605      	mov	r5, r0
  4056f0:	4648      	mov	r0, r9
  4056f2:	f001 f9af 	bl	406a54 <__mcmp>
  4056f6:	465a      	mov	r2, fp
  4056f8:	900a      	str	r0, [sp, #40]	; 0x28
  4056fa:	4651      	mov	r1, sl
  4056fc:	4620      	mov	r0, r4
  4056fe:	f001 f9c5 	bl	406a8c <__mdiff>
  405702:	68c2      	ldr	r2, [r0, #12]
  405704:	4680      	mov	r8, r0
  405706:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40570a:	2a00      	cmp	r2, #0
  40570c:	f040 822b 	bne.w	405b66 <_dtoa_r+0xa06>
  405710:	4601      	mov	r1, r0
  405712:	4648      	mov	r0, r9
  405714:	9308      	str	r3, [sp, #32]
  405716:	f001 f99d 	bl	406a54 <__mcmp>
  40571a:	4641      	mov	r1, r8
  40571c:	9006      	str	r0, [sp, #24]
  40571e:	4620      	mov	r0, r4
  405720:	f000 ffc0 	bl	4066a4 <_Bfree>
  405724:	9a06      	ldr	r2, [sp, #24]
  405726:	9b08      	ldr	r3, [sp, #32]
  405728:	b932      	cbnz	r2, 405738 <_dtoa_r+0x5d8>
  40572a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40572c:	b921      	cbnz	r1, 405738 <_dtoa_r+0x5d8>
  40572e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405730:	2a00      	cmp	r2, #0
  405732:	f000 83ef 	beq.w	405f14 <_dtoa_r+0xdb4>
  405736:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405738:	990a      	ldr	r1, [sp, #40]	; 0x28
  40573a:	2900      	cmp	r1, #0
  40573c:	f2c0 829f 	blt.w	405c7e <_dtoa_r+0xb1e>
  405740:	d105      	bne.n	40574e <_dtoa_r+0x5ee>
  405742:	9924      	ldr	r1, [sp, #144]	; 0x90
  405744:	b919      	cbnz	r1, 40574e <_dtoa_r+0x5ee>
  405746:	990c      	ldr	r1, [sp, #48]	; 0x30
  405748:	2900      	cmp	r1, #0
  40574a:	f000 8298 	beq.w	405c7e <_dtoa_r+0xb1e>
  40574e:	2a00      	cmp	r2, #0
  405750:	f300 8306 	bgt.w	405d60 <_dtoa_r+0xc00>
  405754:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405756:	703b      	strb	r3, [r7, #0]
  405758:	f107 0801 	add.w	r8, r7, #1
  40575c:	4297      	cmp	r7, r2
  40575e:	4645      	mov	r5, r8
  405760:	f000 830c 	beq.w	405d7c <_dtoa_r+0xc1c>
  405764:	4649      	mov	r1, r9
  405766:	2300      	movs	r3, #0
  405768:	220a      	movs	r2, #10
  40576a:	4620      	mov	r0, r4
  40576c:	f000 ffa4 	bl	4066b8 <__multadd>
  405770:	455e      	cmp	r6, fp
  405772:	4681      	mov	r9, r0
  405774:	4631      	mov	r1, r6
  405776:	f04f 0300 	mov.w	r3, #0
  40577a:	f04f 020a 	mov.w	r2, #10
  40577e:	4620      	mov	r0, r4
  405780:	f000 81eb 	beq.w	405b5a <_dtoa_r+0x9fa>
  405784:	f000 ff98 	bl	4066b8 <__multadd>
  405788:	4659      	mov	r1, fp
  40578a:	4606      	mov	r6, r0
  40578c:	2300      	movs	r3, #0
  40578e:	220a      	movs	r2, #10
  405790:	4620      	mov	r0, r4
  405792:	f000 ff91 	bl	4066b8 <__multadd>
  405796:	4647      	mov	r7, r8
  405798:	4683      	mov	fp, r0
  40579a:	e7a3      	b.n	4056e4 <_dtoa_r+0x584>
  40579c:	201c      	movs	r0, #28
  40579e:	9b08      	ldr	r3, [sp, #32]
  4057a0:	4403      	add	r3, r0
  4057a2:	9308      	str	r3, [sp, #32]
  4057a4:	9b06      	ldr	r3, [sp, #24]
  4057a6:	4403      	add	r3, r0
  4057a8:	4405      	add	r5, r0
  4057aa:	9306      	str	r3, [sp, #24]
  4057ac:	e763      	b.n	405676 <_dtoa_r+0x516>
  4057ae:	4641      	mov	r1, r8
  4057b0:	4648      	mov	r0, r9
  4057b2:	f001 f94f 	bl	406a54 <__mcmp>
  4057b6:	2800      	cmp	r0, #0
  4057b8:	f6bf af73 	bge.w	4056a2 <_dtoa_r+0x542>
  4057bc:	9f02      	ldr	r7, [sp, #8]
  4057be:	4649      	mov	r1, r9
  4057c0:	2300      	movs	r3, #0
  4057c2:	220a      	movs	r2, #10
  4057c4:	4620      	mov	r0, r4
  4057c6:	3f01      	subs	r7, #1
  4057c8:	9702      	str	r7, [sp, #8]
  4057ca:	f000 ff75 	bl	4066b8 <__multadd>
  4057ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4057d0:	4681      	mov	r9, r0
  4057d2:	2b00      	cmp	r3, #0
  4057d4:	f040 83b6 	bne.w	405f44 <_dtoa_r+0xde4>
  4057d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4057da:	2b00      	cmp	r3, #0
  4057dc:	f340 83bf 	ble.w	405f5e <_dtoa_r+0xdfe>
  4057e0:	930a      	str	r3, [sp, #40]	; 0x28
  4057e2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4057e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4057e8:	465d      	mov	r5, fp
  4057ea:	e002      	b.n	4057f2 <_dtoa_r+0x692>
  4057ec:	f000 ff64 	bl	4066b8 <__multadd>
  4057f0:	4681      	mov	r9, r0
  4057f2:	4641      	mov	r1, r8
  4057f4:	4648      	mov	r0, r9
  4057f6:	f7ff fc1d 	bl	405034 <quorem>
  4057fa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4057fe:	f805 ab01 	strb.w	sl, [r5], #1
  405802:	eba5 030b 	sub.w	r3, r5, fp
  405806:	42bb      	cmp	r3, r7
  405808:	f04f 020a 	mov.w	r2, #10
  40580c:	f04f 0300 	mov.w	r3, #0
  405810:	4649      	mov	r1, r9
  405812:	4620      	mov	r0, r4
  405814:	dbea      	blt.n	4057ec <_dtoa_r+0x68c>
  405816:	9b04      	ldr	r3, [sp, #16]
  405818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40581a:	2a01      	cmp	r2, #1
  40581c:	bfac      	ite	ge
  40581e:	189b      	addge	r3, r3, r2
  405820:	3301      	addlt	r3, #1
  405822:	461d      	mov	r5, r3
  405824:	f04f 0b00 	mov.w	fp, #0
  405828:	4649      	mov	r1, r9
  40582a:	2201      	movs	r2, #1
  40582c:	4620      	mov	r0, r4
  40582e:	f001 f8bf 	bl	4069b0 <__lshift>
  405832:	4641      	mov	r1, r8
  405834:	4681      	mov	r9, r0
  405836:	f001 f90d 	bl	406a54 <__mcmp>
  40583a:	2800      	cmp	r0, #0
  40583c:	f340 823d 	ble.w	405cba <_dtoa_r+0xb5a>
  405840:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405844:	9904      	ldr	r1, [sp, #16]
  405846:	1e6b      	subs	r3, r5, #1
  405848:	e004      	b.n	405854 <_dtoa_r+0x6f4>
  40584a:	428b      	cmp	r3, r1
  40584c:	f000 81ae 	beq.w	405bac <_dtoa_r+0xa4c>
  405850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405854:	2a39      	cmp	r2, #57	; 0x39
  405856:	f103 0501 	add.w	r5, r3, #1
  40585a:	d0f6      	beq.n	40584a <_dtoa_r+0x6ea>
  40585c:	3201      	adds	r2, #1
  40585e:	701a      	strb	r2, [r3, #0]
  405860:	4641      	mov	r1, r8
  405862:	4620      	mov	r0, r4
  405864:	f000 ff1e 	bl	4066a4 <_Bfree>
  405868:	2e00      	cmp	r6, #0
  40586a:	f43f ae3d 	beq.w	4054e8 <_dtoa_r+0x388>
  40586e:	f1bb 0f00 	cmp.w	fp, #0
  405872:	d005      	beq.n	405880 <_dtoa_r+0x720>
  405874:	45b3      	cmp	fp, r6
  405876:	d003      	beq.n	405880 <_dtoa_r+0x720>
  405878:	4659      	mov	r1, fp
  40587a:	4620      	mov	r0, r4
  40587c:	f000 ff12 	bl	4066a4 <_Bfree>
  405880:	4631      	mov	r1, r6
  405882:	4620      	mov	r0, r4
  405884:	f000 ff0e 	bl	4066a4 <_Bfree>
  405888:	e62e      	b.n	4054e8 <_dtoa_r+0x388>
  40588a:	2300      	movs	r3, #0
  40588c:	930b      	str	r3, [sp, #44]	; 0x2c
  40588e:	9b02      	ldr	r3, [sp, #8]
  405890:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405892:	4413      	add	r3, r2
  405894:	930f      	str	r3, [sp, #60]	; 0x3c
  405896:	3301      	adds	r3, #1
  405898:	2b01      	cmp	r3, #1
  40589a:	461f      	mov	r7, r3
  40589c:	461e      	mov	r6, r3
  40589e:	930a      	str	r3, [sp, #40]	; 0x28
  4058a0:	bfb8      	it	lt
  4058a2:	2701      	movlt	r7, #1
  4058a4:	2100      	movs	r1, #0
  4058a6:	2f17      	cmp	r7, #23
  4058a8:	6461      	str	r1, [r4, #68]	; 0x44
  4058aa:	d90a      	bls.n	4058c2 <_dtoa_r+0x762>
  4058ac:	2201      	movs	r2, #1
  4058ae:	2304      	movs	r3, #4
  4058b0:	005b      	lsls	r3, r3, #1
  4058b2:	f103 0014 	add.w	r0, r3, #20
  4058b6:	4287      	cmp	r7, r0
  4058b8:	4611      	mov	r1, r2
  4058ba:	f102 0201 	add.w	r2, r2, #1
  4058be:	d2f7      	bcs.n	4058b0 <_dtoa_r+0x750>
  4058c0:	6461      	str	r1, [r4, #68]	; 0x44
  4058c2:	4620      	mov	r0, r4
  4058c4:	f000 fec8 	bl	406658 <_Balloc>
  4058c8:	2e0e      	cmp	r6, #14
  4058ca:	9004      	str	r0, [sp, #16]
  4058cc:	6420      	str	r0, [r4, #64]	; 0x40
  4058ce:	f63f ad41 	bhi.w	405354 <_dtoa_r+0x1f4>
  4058d2:	2d00      	cmp	r5, #0
  4058d4:	f43f ad3e 	beq.w	405354 <_dtoa_r+0x1f4>
  4058d8:	9902      	ldr	r1, [sp, #8]
  4058da:	2900      	cmp	r1, #0
  4058dc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4058e0:	f340 8202 	ble.w	405ce8 <_dtoa_r+0xb88>
  4058e4:	4bb8      	ldr	r3, [pc, #736]	; (405bc8 <_dtoa_r+0xa68>)
  4058e6:	f001 020f 	and.w	r2, r1, #15
  4058ea:	110d      	asrs	r5, r1, #4
  4058ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4058f0:	06e9      	lsls	r1, r5, #27
  4058f2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4058f6:	f140 81ae 	bpl.w	405c56 <_dtoa_r+0xaf6>
  4058fa:	4bb4      	ldr	r3, [pc, #720]	; (405bcc <_dtoa_r+0xa6c>)
  4058fc:	4650      	mov	r0, sl
  4058fe:	4659      	mov	r1, fp
  405900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405904:	f002 f8f4 	bl	407af0 <__aeabi_ddiv>
  405908:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40590c:	f005 050f 	and.w	r5, r5, #15
  405910:	f04f 0a03 	mov.w	sl, #3
  405914:	b18d      	cbz	r5, 40593a <_dtoa_r+0x7da>
  405916:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405bcc <_dtoa_r+0xa6c>
  40591a:	07ea      	lsls	r2, r5, #31
  40591c:	d509      	bpl.n	405932 <_dtoa_r+0x7d2>
  40591e:	4630      	mov	r0, r6
  405920:	4639      	mov	r1, r7
  405922:	e9d8 2300 	ldrd	r2, r3, [r8]
  405926:	f001 ffb9 	bl	40789c <__aeabi_dmul>
  40592a:	f10a 0a01 	add.w	sl, sl, #1
  40592e:	4606      	mov	r6, r0
  405930:	460f      	mov	r7, r1
  405932:	106d      	asrs	r5, r5, #1
  405934:	f108 0808 	add.w	r8, r8, #8
  405938:	d1ef      	bne.n	40591a <_dtoa_r+0x7ba>
  40593a:	463b      	mov	r3, r7
  40593c:	4632      	mov	r2, r6
  40593e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405942:	f002 f8d5 	bl	407af0 <__aeabi_ddiv>
  405946:	4607      	mov	r7, r0
  405948:	4688      	mov	r8, r1
  40594a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40594c:	b143      	cbz	r3, 405960 <_dtoa_r+0x800>
  40594e:	2200      	movs	r2, #0
  405950:	4b9f      	ldr	r3, [pc, #636]	; (405bd0 <_dtoa_r+0xa70>)
  405952:	4638      	mov	r0, r7
  405954:	4641      	mov	r1, r8
  405956:	f002 fa13 	bl	407d80 <__aeabi_dcmplt>
  40595a:	2800      	cmp	r0, #0
  40595c:	f040 8286 	bne.w	405e6c <_dtoa_r+0xd0c>
  405960:	4650      	mov	r0, sl
  405962:	f001 ff35 	bl	4077d0 <__aeabi_i2d>
  405966:	463a      	mov	r2, r7
  405968:	4643      	mov	r3, r8
  40596a:	f001 ff97 	bl	40789c <__aeabi_dmul>
  40596e:	4b99      	ldr	r3, [pc, #612]	; (405bd4 <_dtoa_r+0xa74>)
  405970:	2200      	movs	r2, #0
  405972:	f001 fde1 	bl	407538 <__adddf3>
  405976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405978:	4605      	mov	r5, r0
  40597a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40597e:	2b00      	cmp	r3, #0
  405980:	f000 813e 	beq.w	405c00 <_dtoa_r+0xaa0>
  405984:	9b02      	ldr	r3, [sp, #8]
  405986:	9315      	str	r3, [sp, #84]	; 0x54
  405988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40598a:	9312      	str	r3, [sp, #72]	; 0x48
  40598c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40598e:	2b00      	cmp	r3, #0
  405990:	f000 81fa 	beq.w	405d88 <_dtoa_r+0xc28>
  405994:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405996:	4b8c      	ldr	r3, [pc, #560]	; (405bc8 <_dtoa_r+0xa68>)
  405998:	498f      	ldr	r1, [pc, #572]	; (405bd8 <_dtoa_r+0xa78>)
  40599a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40599e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4059a2:	2000      	movs	r0, #0
  4059a4:	f002 f8a4 	bl	407af0 <__aeabi_ddiv>
  4059a8:	462a      	mov	r2, r5
  4059aa:	4633      	mov	r3, r6
  4059ac:	f001 fdc2 	bl	407534 <__aeabi_dsub>
  4059b0:	4682      	mov	sl, r0
  4059b2:	468b      	mov	fp, r1
  4059b4:	4638      	mov	r0, r7
  4059b6:	4641      	mov	r1, r8
  4059b8:	f002 fa20 	bl	407dfc <__aeabi_d2iz>
  4059bc:	4605      	mov	r5, r0
  4059be:	f001 ff07 	bl	4077d0 <__aeabi_i2d>
  4059c2:	4602      	mov	r2, r0
  4059c4:	460b      	mov	r3, r1
  4059c6:	4638      	mov	r0, r7
  4059c8:	4641      	mov	r1, r8
  4059ca:	f001 fdb3 	bl	407534 <__aeabi_dsub>
  4059ce:	3530      	adds	r5, #48	; 0x30
  4059d0:	fa5f f885 	uxtb.w	r8, r5
  4059d4:	9d04      	ldr	r5, [sp, #16]
  4059d6:	4606      	mov	r6, r0
  4059d8:	460f      	mov	r7, r1
  4059da:	f885 8000 	strb.w	r8, [r5]
  4059de:	4602      	mov	r2, r0
  4059e0:	460b      	mov	r3, r1
  4059e2:	4650      	mov	r0, sl
  4059e4:	4659      	mov	r1, fp
  4059e6:	3501      	adds	r5, #1
  4059e8:	f002 f9e8 	bl	407dbc <__aeabi_dcmpgt>
  4059ec:	2800      	cmp	r0, #0
  4059ee:	d154      	bne.n	405a9a <_dtoa_r+0x93a>
  4059f0:	4632      	mov	r2, r6
  4059f2:	463b      	mov	r3, r7
  4059f4:	2000      	movs	r0, #0
  4059f6:	4976      	ldr	r1, [pc, #472]	; (405bd0 <_dtoa_r+0xa70>)
  4059f8:	f001 fd9c 	bl	407534 <__aeabi_dsub>
  4059fc:	4602      	mov	r2, r0
  4059fe:	460b      	mov	r3, r1
  405a00:	4650      	mov	r0, sl
  405a02:	4659      	mov	r1, fp
  405a04:	f002 f9da 	bl	407dbc <__aeabi_dcmpgt>
  405a08:	2800      	cmp	r0, #0
  405a0a:	f040 8270 	bne.w	405eee <_dtoa_r+0xd8e>
  405a0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405a10:	2a01      	cmp	r2, #1
  405a12:	f000 8111 	beq.w	405c38 <_dtoa_r+0xad8>
  405a16:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405a18:	9a04      	ldr	r2, [sp, #16]
  405a1a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405a1e:	4413      	add	r3, r2
  405a20:	4699      	mov	r9, r3
  405a22:	e00d      	b.n	405a40 <_dtoa_r+0x8e0>
  405a24:	2000      	movs	r0, #0
  405a26:	496a      	ldr	r1, [pc, #424]	; (405bd0 <_dtoa_r+0xa70>)
  405a28:	f001 fd84 	bl	407534 <__aeabi_dsub>
  405a2c:	4652      	mov	r2, sl
  405a2e:	465b      	mov	r3, fp
  405a30:	f002 f9a6 	bl	407d80 <__aeabi_dcmplt>
  405a34:	2800      	cmp	r0, #0
  405a36:	f040 8258 	bne.w	405eea <_dtoa_r+0xd8a>
  405a3a:	454d      	cmp	r5, r9
  405a3c:	f000 80fa 	beq.w	405c34 <_dtoa_r+0xad4>
  405a40:	4650      	mov	r0, sl
  405a42:	4659      	mov	r1, fp
  405a44:	2200      	movs	r2, #0
  405a46:	4b65      	ldr	r3, [pc, #404]	; (405bdc <_dtoa_r+0xa7c>)
  405a48:	f001 ff28 	bl	40789c <__aeabi_dmul>
  405a4c:	2200      	movs	r2, #0
  405a4e:	4b63      	ldr	r3, [pc, #396]	; (405bdc <_dtoa_r+0xa7c>)
  405a50:	4682      	mov	sl, r0
  405a52:	468b      	mov	fp, r1
  405a54:	4630      	mov	r0, r6
  405a56:	4639      	mov	r1, r7
  405a58:	f001 ff20 	bl	40789c <__aeabi_dmul>
  405a5c:	460f      	mov	r7, r1
  405a5e:	4606      	mov	r6, r0
  405a60:	f002 f9cc 	bl	407dfc <__aeabi_d2iz>
  405a64:	4680      	mov	r8, r0
  405a66:	f001 feb3 	bl	4077d0 <__aeabi_i2d>
  405a6a:	4602      	mov	r2, r0
  405a6c:	460b      	mov	r3, r1
  405a6e:	4630      	mov	r0, r6
  405a70:	4639      	mov	r1, r7
  405a72:	f001 fd5f 	bl	407534 <__aeabi_dsub>
  405a76:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405a7a:	fa5f f888 	uxtb.w	r8, r8
  405a7e:	4652      	mov	r2, sl
  405a80:	465b      	mov	r3, fp
  405a82:	f805 8b01 	strb.w	r8, [r5], #1
  405a86:	4606      	mov	r6, r0
  405a88:	460f      	mov	r7, r1
  405a8a:	f002 f979 	bl	407d80 <__aeabi_dcmplt>
  405a8e:	4632      	mov	r2, r6
  405a90:	463b      	mov	r3, r7
  405a92:	2800      	cmp	r0, #0
  405a94:	d0c6      	beq.n	405a24 <_dtoa_r+0x8c4>
  405a96:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405a9c:	9302      	str	r3, [sp, #8]
  405a9e:	e523      	b.n	4054e8 <_dtoa_r+0x388>
  405aa0:	2300      	movs	r3, #0
  405aa2:	930b      	str	r3, [sp, #44]	; 0x2c
  405aa4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405aa6:	2b00      	cmp	r3, #0
  405aa8:	f340 80dc 	ble.w	405c64 <_dtoa_r+0xb04>
  405aac:	461f      	mov	r7, r3
  405aae:	461e      	mov	r6, r3
  405ab0:	930f      	str	r3, [sp, #60]	; 0x3c
  405ab2:	930a      	str	r3, [sp, #40]	; 0x28
  405ab4:	e6f6      	b.n	4058a4 <_dtoa_r+0x744>
  405ab6:	2301      	movs	r3, #1
  405ab8:	930b      	str	r3, [sp, #44]	; 0x2c
  405aba:	e7f3      	b.n	405aa4 <_dtoa_r+0x944>
  405abc:	f1ba 0f00 	cmp.w	sl, #0
  405ac0:	f47f ada8 	bne.w	405614 <_dtoa_r+0x4b4>
  405ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405ac8:	2b00      	cmp	r3, #0
  405aca:	f47f adba 	bne.w	405642 <_dtoa_r+0x4e2>
  405ace:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405ad2:	0d3f      	lsrs	r7, r7, #20
  405ad4:	053f      	lsls	r7, r7, #20
  405ad6:	2f00      	cmp	r7, #0
  405ad8:	f000 820d 	beq.w	405ef6 <_dtoa_r+0xd96>
  405adc:	9b08      	ldr	r3, [sp, #32]
  405ade:	3301      	adds	r3, #1
  405ae0:	9308      	str	r3, [sp, #32]
  405ae2:	9b06      	ldr	r3, [sp, #24]
  405ae4:	3301      	adds	r3, #1
  405ae6:	9306      	str	r3, [sp, #24]
  405ae8:	2301      	movs	r3, #1
  405aea:	930c      	str	r3, [sp, #48]	; 0x30
  405aec:	e5ab      	b.n	405646 <_dtoa_r+0x4e6>
  405aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405af0:	2b00      	cmp	r3, #0
  405af2:	f73f ac42 	bgt.w	40537a <_dtoa_r+0x21a>
  405af6:	f040 8221 	bne.w	405f3c <_dtoa_r+0xddc>
  405afa:	2200      	movs	r2, #0
  405afc:	4b38      	ldr	r3, [pc, #224]	; (405be0 <_dtoa_r+0xa80>)
  405afe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405b02:	f001 fecb 	bl	40789c <__aeabi_dmul>
  405b06:	4652      	mov	r2, sl
  405b08:	465b      	mov	r3, fp
  405b0a:	f002 f94d 	bl	407da8 <__aeabi_dcmpge>
  405b0e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405b12:	4646      	mov	r6, r8
  405b14:	2800      	cmp	r0, #0
  405b16:	d041      	beq.n	405b9c <_dtoa_r+0xa3c>
  405b18:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405b1a:	9d04      	ldr	r5, [sp, #16]
  405b1c:	43db      	mvns	r3, r3
  405b1e:	9302      	str	r3, [sp, #8]
  405b20:	4641      	mov	r1, r8
  405b22:	4620      	mov	r0, r4
  405b24:	f000 fdbe 	bl	4066a4 <_Bfree>
  405b28:	2e00      	cmp	r6, #0
  405b2a:	f43f acdd 	beq.w	4054e8 <_dtoa_r+0x388>
  405b2e:	e6a7      	b.n	405880 <_dtoa_r+0x720>
  405b30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405b32:	4649      	mov	r1, r9
  405b34:	4620      	mov	r0, r4
  405b36:	f000 feeb 	bl	406910 <__pow5mult>
  405b3a:	4681      	mov	r9, r0
  405b3c:	e558      	b.n	4055f0 <_dtoa_r+0x490>
  405b3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405b40:	2a00      	cmp	r2, #0
  405b42:	f000 8187 	beq.w	405e54 <_dtoa_r+0xcf4>
  405b46:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405b4a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405b4c:	9d08      	ldr	r5, [sp, #32]
  405b4e:	e4f2      	b.n	405536 <_dtoa_r+0x3d6>
  405b50:	f1ba 0f00 	cmp.w	sl, #0
  405b54:	f47f ad75 	bne.w	405642 <_dtoa_r+0x4e2>
  405b58:	e7b4      	b.n	405ac4 <_dtoa_r+0x964>
  405b5a:	f000 fdad 	bl	4066b8 <__multadd>
  405b5e:	4647      	mov	r7, r8
  405b60:	4606      	mov	r6, r0
  405b62:	4683      	mov	fp, r0
  405b64:	e5be      	b.n	4056e4 <_dtoa_r+0x584>
  405b66:	4601      	mov	r1, r0
  405b68:	4620      	mov	r0, r4
  405b6a:	9306      	str	r3, [sp, #24]
  405b6c:	f000 fd9a 	bl	4066a4 <_Bfree>
  405b70:	2201      	movs	r2, #1
  405b72:	9b06      	ldr	r3, [sp, #24]
  405b74:	e5e0      	b.n	405738 <_dtoa_r+0x5d8>
  405b76:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b78:	2b02      	cmp	r3, #2
  405b7a:	f77f ad96 	ble.w	4056aa <_dtoa_r+0x54a>
  405b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b80:	2b00      	cmp	r3, #0
  405b82:	d1c9      	bne.n	405b18 <_dtoa_r+0x9b8>
  405b84:	4641      	mov	r1, r8
  405b86:	2205      	movs	r2, #5
  405b88:	4620      	mov	r0, r4
  405b8a:	f000 fd95 	bl	4066b8 <__multadd>
  405b8e:	4601      	mov	r1, r0
  405b90:	4680      	mov	r8, r0
  405b92:	4648      	mov	r0, r9
  405b94:	f000 ff5e 	bl	406a54 <__mcmp>
  405b98:	2800      	cmp	r0, #0
  405b9a:	ddbd      	ble.n	405b18 <_dtoa_r+0x9b8>
  405b9c:	9a02      	ldr	r2, [sp, #8]
  405b9e:	9904      	ldr	r1, [sp, #16]
  405ba0:	2331      	movs	r3, #49	; 0x31
  405ba2:	3201      	adds	r2, #1
  405ba4:	9202      	str	r2, [sp, #8]
  405ba6:	700b      	strb	r3, [r1, #0]
  405ba8:	1c4d      	adds	r5, r1, #1
  405baa:	e7b9      	b.n	405b20 <_dtoa_r+0x9c0>
  405bac:	9a02      	ldr	r2, [sp, #8]
  405bae:	3201      	adds	r2, #1
  405bb0:	9202      	str	r2, [sp, #8]
  405bb2:	9a04      	ldr	r2, [sp, #16]
  405bb4:	2331      	movs	r3, #49	; 0x31
  405bb6:	7013      	strb	r3, [r2, #0]
  405bb8:	e652      	b.n	405860 <_dtoa_r+0x700>
  405bba:	2301      	movs	r3, #1
  405bbc:	930b      	str	r3, [sp, #44]	; 0x2c
  405bbe:	e666      	b.n	40588e <_dtoa_r+0x72e>
  405bc0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405bc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405bc6:	e48f      	b.n	4054e8 <_dtoa_r+0x388>
  405bc8:	00408660 	.word	0x00408660
  405bcc:	00408638 	.word	0x00408638
  405bd0:	3ff00000 	.word	0x3ff00000
  405bd4:	401c0000 	.word	0x401c0000
  405bd8:	3fe00000 	.word	0x3fe00000
  405bdc:	40240000 	.word	0x40240000
  405be0:	40140000 	.word	0x40140000
  405be4:	4650      	mov	r0, sl
  405be6:	f001 fdf3 	bl	4077d0 <__aeabi_i2d>
  405bea:	463a      	mov	r2, r7
  405bec:	4643      	mov	r3, r8
  405bee:	f001 fe55 	bl	40789c <__aeabi_dmul>
  405bf2:	2200      	movs	r2, #0
  405bf4:	4bc1      	ldr	r3, [pc, #772]	; (405efc <_dtoa_r+0xd9c>)
  405bf6:	f001 fc9f 	bl	407538 <__adddf3>
  405bfa:	4605      	mov	r5, r0
  405bfc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405c00:	4641      	mov	r1, r8
  405c02:	2200      	movs	r2, #0
  405c04:	4bbe      	ldr	r3, [pc, #760]	; (405f00 <_dtoa_r+0xda0>)
  405c06:	4638      	mov	r0, r7
  405c08:	f001 fc94 	bl	407534 <__aeabi_dsub>
  405c0c:	462a      	mov	r2, r5
  405c0e:	4633      	mov	r3, r6
  405c10:	4682      	mov	sl, r0
  405c12:	468b      	mov	fp, r1
  405c14:	f002 f8d2 	bl	407dbc <__aeabi_dcmpgt>
  405c18:	4680      	mov	r8, r0
  405c1a:	2800      	cmp	r0, #0
  405c1c:	f040 8110 	bne.w	405e40 <_dtoa_r+0xce0>
  405c20:	462a      	mov	r2, r5
  405c22:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405c26:	4650      	mov	r0, sl
  405c28:	4659      	mov	r1, fp
  405c2a:	f002 f8a9 	bl	407d80 <__aeabi_dcmplt>
  405c2e:	b118      	cbz	r0, 405c38 <_dtoa_r+0xad8>
  405c30:	4646      	mov	r6, r8
  405c32:	e771      	b.n	405b18 <_dtoa_r+0x9b8>
  405c34:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405c38:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405c3c:	f7ff bb8a 	b.w	405354 <_dtoa_r+0x1f4>
  405c40:	9804      	ldr	r0, [sp, #16]
  405c42:	f7ff babb 	b.w	4051bc <_dtoa_r+0x5c>
  405c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405c4a:	970c      	str	r7, [sp, #48]	; 0x30
  405c4c:	1afb      	subs	r3, r7, r3
  405c4e:	441a      	add	r2, r3
  405c50:	920d      	str	r2, [sp, #52]	; 0x34
  405c52:	2700      	movs	r7, #0
  405c54:	e469      	b.n	40552a <_dtoa_r+0x3ca>
  405c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405c5a:	f04f 0a02 	mov.w	sl, #2
  405c5e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405c62:	e657      	b.n	405914 <_dtoa_r+0x7b4>
  405c64:	2100      	movs	r1, #0
  405c66:	2301      	movs	r3, #1
  405c68:	6461      	str	r1, [r4, #68]	; 0x44
  405c6a:	4620      	mov	r0, r4
  405c6c:	9325      	str	r3, [sp, #148]	; 0x94
  405c6e:	f000 fcf3 	bl	406658 <_Balloc>
  405c72:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405c74:	9004      	str	r0, [sp, #16]
  405c76:	6420      	str	r0, [r4, #64]	; 0x40
  405c78:	930a      	str	r3, [sp, #40]	; 0x28
  405c7a:	930f      	str	r3, [sp, #60]	; 0x3c
  405c7c:	e629      	b.n	4058d2 <_dtoa_r+0x772>
  405c7e:	2a00      	cmp	r2, #0
  405c80:	46d0      	mov	r8, sl
  405c82:	f8cd b018 	str.w	fp, [sp, #24]
  405c86:	469a      	mov	sl, r3
  405c88:	dd11      	ble.n	405cae <_dtoa_r+0xb4e>
  405c8a:	4649      	mov	r1, r9
  405c8c:	2201      	movs	r2, #1
  405c8e:	4620      	mov	r0, r4
  405c90:	f000 fe8e 	bl	4069b0 <__lshift>
  405c94:	4641      	mov	r1, r8
  405c96:	4681      	mov	r9, r0
  405c98:	f000 fedc 	bl	406a54 <__mcmp>
  405c9c:	2800      	cmp	r0, #0
  405c9e:	f340 8146 	ble.w	405f2e <_dtoa_r+0xdce>
  405ca2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405ca6:	f000 8106 	beq.w	405eb6 <_dtoa_r+0xd56>
  405caa:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405cae:	46b3      	mov	fp, r6
  405cb0:	f887 a000 	strb.w	sl, [r7]
  405cb4:	1c7d      	adds	r5, r7, #1
  405cb6:	9e06      	ldr	r6, [sp, #24]
  405cb8:	e5d2      	b.n	405860 <_dtoa_r+0x700>
  405cba:	d104      	bne.n	405cc6 <_dtoa_r+0xb66>
  405cbc:	f01a 0f01 	tst.w	sl, #1
  405cc0:	d001      	beq.n	405cc6 <_dtoa_r+0xb66>
  405cc2:	e5bd      	b.n	405840 <_dtoa_r+0x6e0>
  405cc4:	4615      	mov	r5, r2
  405cc6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405cca:	2b30      	cmp	r3, #48	; 0x30
  405ccc:	f105 32ff 	add.w	r2, r5, #4294967295
  405cd0:	d0f8      	beq.n	405cc4 <_dtoa_r+0xb64>
  405cd2:	e5c5      	b.n	405860 <_dtoa_r+0x700>
  405cd4:	9904      	ldr	r1, [sp, #16]
  405cd6:	2230      	movs	r2, #48	; 0x30
  405cd8:	700a      	strb	r2, [r1, #0]
  405cda:	9a02      	ldr	r2, [sp, #8]
  405cdc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405ce0:	3201      	adds	r2, #1
  405ce2:	9202      	str	r2, [sp, #8]
  405ce4:	f7ff bbfc 	b.w	4054e0 <_dtoa_r+0x380>
  405ce8:	f000 80bb 	beq.w	405e62 <_dtoa_r+0xd02>
  405cec:	9b02      	ldr	r3, [sp, #8]
  405cee:	425d      	negs	r5, r3
  405cf0:	4b84      	ldr	r3, [pc, #528]	; (405f04 <_dtoa_r+0xda4>)
  405cf2:	f005 020f 	and.w	r2, r5, #15
  405cf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405d02:	f001 fdcb 	bl	40789c <__aeabi_dmul>
  405d06:	112d      	asrs	r5, r5, #4
  405d08:	4607      	mov	r7, r0
  405d0a:	4688      	mov	r8, r1
  405d0c:	f000 812c 	beq.w	405f68 <_dtoa_r+0xe08>
  405d10:	4e7d      	ldr	r6, [pc, #500]	; (405f08 <_dtoa_r+0xda8>)
  405d12:	f04f 0a02 	mov.w	sl, #2
  405d16:	07eb      	lsls	r3, r5, #31
  405d18:	d509      	bpl.n	405d2e <_dtoa_r+0xbce>
  405d1a:	4638      	mov	r0, r7
  405d1c:	4641      	mov	r1, r8
  405d1e:	e9d6 2300 	ldrd	r2, r3, [r6]
  405d22:	f001 fdbb 	bl	40789c <__aeabi_dmul>
  405d26:	f10a 0a01 	add.w	sl, sl, #1
  405d2a:	4607      	mov	r7, r0
  405d2c:	4688      	mov	r8, r1
  405d2e:	106d      	asrs	r5, r5, #1
  405d30:	f106 0608 	add.w	r6, r6, #8
  405d34:	d1ef      	bne.n	405d16 <_dtoa_r+0xbb6>
  405d36:	e608      	b.n	40594a <_dtoa_r+0x7ea>
  405d38:	6871      	ldr	r1, [r6, #4]
  405d3a:	4620      	mov	r0, r4
  405d3c:	f000 fc8c 	bl	406658 <_Balloc>
  405d40:	6933      	ldr	r3, [r6, #16]
  405d42:	3302      	adds	r3, #2
  405d44:	009a      	lsls	r2, r3, #2
  405d46:	4605      	mov	r5, r0
  405d48:	f106 010c 	add.w	r1, r6, #12
  405d4c:	300c      	adds	r0, #12
  405d4e:	f7fd fbc1 	bl	4034d4 <memcpy>
  405d52:	4629      	mov	r1, r5
  405d54:	2201      	movs	r2, #1
  405d56:	4620      	mov	r0, r4
  405d58:	f000 fe2a 	bl	4069b0 <__lshift>
  405d5c:	9006      	str	r0, [sp, #24]
  405d5e:	e4b5      	b.n	4056cc <_dtoa_r+0x56c>
  405d60:	2b39      	cmp	r3, #57	; 0x39
  405d62:	f8cd b018 	str.w	fp, [sp, #24]
  405d66:	46d0      	mov	r8, sl
  405d68:	f000 80a5 	beq.w	405eb6 <_dtoa_r+0xd56>
  405d6c:	f103 0a01 	add.w	sl, r3, #1
  405d70:	46b3      	mov	fp, r6
  405d72:	f887 a000 	strb.w	sl, [r7]
  405d76:	1c7d      	adds	r5, r7, #1
  405d78:	9e06      	ldr	r6, [sp, #24]
  405d7a:	e571      	b.n	405860 <_dtoa_r+0x700>
  405d7c:	465a      	mov	r2, fp
  405d7e:	46d0      	mov	r8, sl
  405d80:	46b3      	mov	fp, r6
  405d82:	469a      	mov	sl, r3
  405d84:	4616      	mov	r6, r2
  405d86:	e54f      	b.n	405828 <_dtoa_r+0x6c8>
  405d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405d8a:	495e      	ldr	r1, [pc, #376]	; (405f04 <_dtoa_r+0xda4>)
  405d8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405d90:	462a      	mov	r2, r5
  405d92:	4633      	mov	r3, r6
  405d94:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405d98:	f001 fd80 	bl	40789c <__aeabi_dmul>
  405d9c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405da0:	4638      	mov	r0, r7
  405da2:	4641      	mov	r1, r8
  405da4:	f002 f82a 	bl	407dfc <__aeabi_d2iz>
  405da8:	4605      	mov	r5, r0
  405daa:	f001 fd11 	bl	4077d0 <__aeabi_i2d>
  405dae:	460b      	mov	r3, r1
  405db0:	4602      	mov	r2, r0
  405db2:	4641      	mov	r1, r8
  405db4:	4638      	mov	r0, r7
  405db6:	f001 fbbd 	bl	407534 <__aeabi_dsub>
  405dba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405dbc:	460f      	mov	r7, r1
  405dbe:	9904      	ldr	r1, [sp, #16]
  405dc0:	3530      	adds	r5, #48	; 0x30
  405dc2:	2b01      	cmp	r3, #1
  405dc4:	700d      	strb	r5, [r1, #0]
  405dc6:	4606      	mov	r6, r0
  405dc8:	f101 0501 	add.w	r5, r1, #1
  405dcc:	d026      	beq.n	405e1c <_dtoa_r+0xcbc>
  405dce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405dd0:	9a04      	ldr	r2, [sp, #16]
  405dd2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 405f10 <_dtoa_r+0xdb0>
  405dd6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405dda:	4413      	add	r3, r2
  405ddc:	f04f 0a00 	mov.w	sl, #0
  405de0:	4699      	mov	r9, r3
  405de2:	4652      	mov	r2, sl
  405de4:	465b      	mov	r3, fp
  405de6:	4630      	mov	r0, r6
  405de8:	4639      	mov	r1, r7
  405dea:	f001 fd57 	bl	40789c <__aeabi_dmul>
  405dee:	460f      	mov	r7, r1
  405df0:	4606      	mov	r6, r0
  405df2:	f002 f803 	bl	407dfc <__aeabi_d2iz>
  405df6:	4680      	mov	r8, r0
  405df8:	f001 fcea 	bl	4077d0 <__aeabi_i2d>
  405dfc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405e00:	4602      	mov	r2, r0
  405e02:	460b      	mov	r3, r1
  405e04:	4630      	mov	r0, r6
  405e06:	4639      	mov	r1, r7
  405e08:	f001 fb94 	bl	407534 <__aeabi_dsub>
  405e0c:	f805 8b01 	strb.w	r8, [r5], #1
  405e10:	454d      	cmp	r5, r9
  405e12:	4606      	mov	r6, r0
  405e14:	460f      	mov	r7, r1
  405e16:	d1e4      	bne.n	405de2 <_dtoa_r+0xc82>
  405e18:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405e1c:	4b3b      	ldr	r3, [pc, #236]	; (405f0c <_dtoa_r+0xdac>)
  405e1e:	2200      	movs	r2, #0
  405e20:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405e24:	f001 fb88 	bl	407538 <__adddf3>
  405e28:	4632      	mov	r2, r6
  405e2a:	463b      	mov	r3, r7
  405e2c:	f001 ffa8 	bl	407d80 <__aeabi_dcmplt>
  405e30:	2800      	cmp	r0, #0
  405e32:	d046      	beq.n	405ec2 <_dtoa_r+0xd62>
  405e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405e36:	9302      	str	r3, [sp, #8]
  405e38:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405e3c:	f7ff bb43 	b.w	4054c6 <_dtoa_r+0x366>
  405e40:	f04f 0800 	mov.w	r8, #0
  405e44:	4646      	mov	r6, r8
  405e46:	e6a9      	b.n	405b9c <_dtoa_r+0xa3c>
  405e48:	9b08      	ldr	r3, [sp, #32]
  405e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405e4c:	1a9d      	subs	r5, r3, r2
  405e4e:	2300      	movs	r3, #0
  405e50:	f7ff bb71 	b.w	405536 <_dtoa_r+0x3d6>
  405e54:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405e56:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405e58:	9d08      	ldr	r5, [sp, #32]
  405e5a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405e5e:	f7ff bb6a 	b.w	405536 <_dtoa_r+0x3d6>
  405e62:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405e66:	f04f 0a02 	mov.w	sl, #2
  405e6a:	e56e      	b.n	40594a <_dtoa_r+0x7ea>
  405e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e6e:	2b00      	cmp	r3, #0
  405e70:	f43f aeb8 	beq.w	405be4 <_dtoa_r+0xa84>
  405e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405e76:	2b00      	cmp	r3, #0
  405e78:	f77f aede 	ble.w	405c38 <_dtoa_r+0xad8>
  405e7c:	2200      	movs	r2, #0
  405e7e:	4b24      	ldr	r3, [pc, #144]	; (405f10 <_dtoa_r+0xdb0>)
  405e80:	4638      	mov	r0, r7
  405e82:	4641      	mov	r1, r8
  405e84:	f001 fd0a 	bl	40789c <__aeabi_dmul>
  405e88:	4607      	mov	r7, r0
  405e8a:	4688      	mov	r8, r1
  405e8c:	f10a 0001 	add.w	r0, sl, #1
  405e90:	f001 fc9e 	bl	4077d0 <__aeabi_i2d>
  405e94:	463a      	mov	r2, r7
  405e96:	4643      	mov	r3, r8
  405e98:	f001 fd00 	bl	40789c <__aeabi_dmul>
  405e9c:	2200      	movs	r2, #0
  405e9e:	4b17      	ldr	r3, [pc, #92]	; (405efc <_dtoa_r+0xd9c>)
  405ea0:	f001 fb4a 	bl	407538 <__adddf3>
  405ea4:	9a02      	ldr	r2, [sp, #8]
  405ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405ea8:	9312      	str	r3, [sp, #72]	; 0x48
  405eaa:	3a01      	subs	r2, #1
  405eac:	4605      	mov	r5, r0
  405eae:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405eb2:	9215      	str	r2, [sp, #84]	; 0x54
  405eb4:	e56a      	b.n	40598c <_dtoa_r+0x82c>
  405eb6:	2239      	movs	r2, #57	; 0x39
  405eb8:	46b3      	mov	fp, r6
  405eba:	703a      	strb	r2, [r7, #0]
  405ebc:	9e06      	ldr	r6, [sp, #24]
  405ebe:	1c7d      	adds	r5, r7, #1
  405ec0:	e4c0      	b.n	405844 <_dtoa_r+0x6e4>
  405ec2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405ec6:	2000      	movs	r0, #0
  405ec8:	4910      	ldr	r1, [pc, #64]	; (405f0c <_dtoa_r+0xdac>)
  405eca:	f001 fb33 	bl	407534 <__aeabi_dsub>
  405ece:	4632      	mov	r2, r6
  405ed0:	463b      	mov	r3, r7
  405ed2:	f001 ff73 	bl	407dbc <__aeabi_dcmpgt>
  405ed6:	b908      	cbnz	r0, 405edc <_dtoa_r+0xd7c>
  405ed8:	e6ae      	b.n	405c38 <_dtoa_r+0xad8>
  405eda:	4615      	mov	r5, r2
  405edc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405ee0:	2b30      	cmp	r3, #48	; 0x30
  405ee2:	f105 32ff 	add.w	r2, r5, #4294967295
  405ee6:	d0f8      	beq.n	405eda <_dtoa_r+0xd7a>
  405ee8:	e5d7      	b.n	405a9a <_dtoa_r+0x93a>
  405eea:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405ef0:	9302      	str	r3, [sp, #8]
  405ef2:	f7ff bae8 	b.w	4054c6 <_dtoa_r+0x366>
  405ef6:	970c      	str	r7, [sp, #48]	; 0x30
  405ef8:	f7ff bba5 	b.w	405646 <_dtoa_r+0x4e6>
  405efc:	401c0000 	.word	0x401c0000
  405f00:	40140000 	.word	0x40140000
  405f04:	00408660 	.word	0x00408660
  405f08:	00408638 	.word	0x00408638
  405f0c:	3fe00000 	.word	0x3fe00000
  405f10:	40240000 	.word	0x40240000
  405f14:	2b39      	cmp	r3, #57	; 0x39
  405f16:	f8cd b018 	str.w	fp, [sp, #24]
  405f1a:	46d0      	mov	r8, sl
  405f1c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405f20:	469a      	mov	sl, r3
  405f22:	d0c8      	beq.n	405eb6 <_dtoa_r+0xd56>
  405f24:	f1bb 0f00 	cmp.w	fp, #0
  405f28:	f73f aebf 	bgt.w	405caa <_dtoa_r+0xb4a>
  405f2c:	e6bf      	b.n	405cae <_dtoa_r+0xb4e>
  405f2e:	f47f aebe 	bne.w	405cae <_dtoa_r+0xb4e>
  405f32:	f01a 0f01 	tst.w	sl, #1
  405f36:	f43f aeba 	beq.w	405cae <_dtoa_r+0xb4e>
  405f3a:	e6b2      	b.n	405ca2 <_dtoa_r+0xb42>
  405f3c:	f04f 0800 	mov.w	r8, #0
  405f40:	4646      	mov	r6, r8
  405f42:	e5e9      	b.n	405b18 <_dtoa_r+0x9b8>
  405f44:	4631      	mov	r1, r6
  405f46:	2300      	movs	r3, #0
  405f48:	220a      	movs	r2, #10
  405f4a:	4620      	mov	r0, r4
  405f4c:	f000 fbb4 	bl	4066b8 <__multadd>
  405f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f52:	2b00      	cmp	r3, #0
  405f54:	4606      	mov	r6, r0
  405f56:	dd0a      	ble.n	405f6e <_dtoa_r+0xe0e>
  405f58:	930a      	str	r3, [sp, #40]	; 0x28
  405f5a:	f7ff bbaa 	b.w	4056b2 <_dtoa_r+0x552>
  405f5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f60:	2b02      	cmp	r3, #2
  405f62:	dc23      	bgt.n	405fac <_dtoa_r+0xe4c>
  405f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f66:	e43b      	b.n	4057e0 <_dtoa_r+0x680>
  405f68:	f04f 0a02 	mov.w	sl, #2
  405f6c:	e4ed      	b.n	40594a <_dtoa_r+0x7ea>
  405f6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f70:	2b02      	cmp	r3, #2
  405f72:	dc1b      	bgt.n	405fac <_dtoa_r+0xe4c>
  405f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f76:	e7ef      	b.n	405f58 <_dtoa_r+0xdf8>
  405f78:	2500      	movs	r5, #0
  405f7a:	6465      	str	r5, [r4, #68]	; 0x44
  405f7c:	4629      	mov	r1, r5
  405f7e:	4620      	mov	r0, r4
  405f80:	f000 fb6a 	bl	406658 <_Balloc>
  405f84:	f04f 33ff 	mov.w	r3, #4294967295
  405f88:	930a      	str	r3, [sp, #40]	; 0x28
  405f8a:	930f      	str	r3, [sp, #60]	; 0x3c
  405f8c:	2301      	movs	r3, #1
  405f8e:	9004      	str	r0, [sp, #16]
  405f90:	9525      	str	r5, [sp, #148]	; 0x94
  405f92:	6420      	str	r0, [r4, #64]	; 0x40
  405f94:	930b      	str	r3, [sp, #44]	; 0x2c
  405f96:	f7ff b9dd 	b.w	405354 <_dtoa_r+0x1f4>
  405f9a:	2501      	movs	r5, #1
  405f9c:	f7ff b9a5 	b.w	4052ea <_dtoa_r+0x18a>
  405fa0:	f43f ab69 	beq.w	405676 <_dtoa_r+0x516>
  405fa4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405fa8:	f7ff bbf9 	b.w	40579e <_dtoa_r+0x63e>
  405fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405fae:	930a      	str	r3, [sp, #40]	; 0x28
  405fb0:	e5e5      	b.n	405b7e <_dtoa_r+0xa1e>
  405fb2:	bf00      	nop

00405fb4 <__libc_fini_array>:
  405fb4:	b538      	push	{r3, r4, r5, lr}
  405fb6:	4c0a      	ldr	r4, [pc, #40]	; (405fe0 <__libc_fini_array+0x2c>)
  405fb8:	4d0a      	ldr	r5, [pc, #40]	; (405fe4 <__libc_fini_array+0x30>)
  405fba:	1b64      	subs	r4, r4, r5
  405fbc:	10a4      	asrs	r4, r4, #2
  405fbe:	d00a      	beq.n	405fd6 <__libc_fini_array+0x22>
  405fc0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405fc4:	3b01      	subs	r3, #1
  405fc6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405fca:	3c01      	subs	r4, #1
  405fcc:	f855 3904 	ldr.w	r3, [r5], #-4
  405fd0:	4798      	blx	r3
  405fd2:	2c00      	cmp	r4, #0
  405fd4:	d1f9      	bne.n	405fca <__libc_fini_array+0x16>
  405fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405fda:	f002 bc37 	b.w	40884c <_fini>
  405fde:	bf00      	nop
  405fe0:	0040885c 	.word	0x0040885c
  405fe4:	00408858 	.word	0x00408858

00405fe8 <__locale_ctype_ptr_l>:
  405fe8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  405fec:	4770      	bx	lr
  405fee:	bf00      	nop

00405ff0 <_localeconv_r>:
  405ff0:	4a04      	ldr	r2, [pc, #16]	; (406004 <_localeconv_r+0x14>)
  405ff2:	4b05      	ldr	r3, [pc, #20]	; (406008 <_localeconv_r+0x18>)
  405ff4:	6812      	ldr	r2, [r2, #0]
  405ff6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405ff8:	2800      	cmp	r0, #0
  405ffa:	bf08      	it	eq
  405ffc:	4618      	moveq	r0, r3
  405ffe:	30f0      	adds	r0, #240	; 0xf0
  406000:	4770      	bx	lr
  406002:	bf00      	nop
  406004:	20000024 	.word	0x20000024
  406008:	20000454 	.word	0x20000454

0040600c <__retarget_lock_acquire_recursive>:
  40600c:	4770      	bx	lr
  40600e:	bf00      	nop

00406010 <__retarget_lock_release_recursive>:
  406010:	4770      	bx	lr
  406012:	bf00      	nop

00406014 <_malloc_r>:
  406014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406018:	f101 060b 	add.w	r6, r1, #11
  40601c:	2e16      	cmp	r6, #22
  40601e:	b083      	sub	sp, #12
  406020:	4605      	mov	r5, r0
  406022:	f240 809e 	bls.w	406162 <_malloc_r+0x14e>
  406026:	f036 0607 	bics.w	r6, r6, #7
  40602a:	f100 80bd 	bmi.w	4061a8 <_malloc_r+0x194>
  40602e:	42b1      	cmp	r1, r6
  406030:	f200 80ba 	bhi.w	4061a8 <_malloc_r+0x194>
  406034:	f000 fb04 	bl	406640 <__malloc_lock>
  406038:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40603c:	f0c0 8293 	bcc.w	406566 <_malloc_r+0x552>
  406040:	0a73      	lsrs	r3, r6, #9
  406042:	f000 80b8 	beq.w	4061b6 <_malloc_r+0x1a2>
  406046:	2b04      	cmp	r3, #4
  406048:	f200 8179 	bhi.w	40633e <_malloc_r+0x32a>
  40604c:	09b3      	lsrs	r3, r6, #6
  40604e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406052:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406056:	00c3      	lsls	r3, r0, #3
  406058:	4fbf      	ldr	r7, [pc, #764]	; (406358 <_malloc_r+0x344>)
  40605a:	443b      	add	r3, r7
  40605c:	f1a3 0108 	sub.w	r1, r3, #8
  406060:	685c      	ldr	r4, [r3, #4]
  406062:	42a1      	cmp	r1, r4
  406064:	d106      	bne.n	406074 <_malloc_r+0x60>
  406066:	e00c      	b.n	406082 <_malloc_r+0x6e>
  406068:	2a00      	cmp	r2, #0
  40606a:	f280 80aa 	bge.w	4061c2 <_malloc_r+0x1ae>
  40606e:	68e4      	ldr	r4, [r4, #12]
  406070:	42a1      	cmp	r1, r4
  406072:	d006      	beq.n	406082 <_malloc_r+0x6e>
  406074:	6863      	ldr	r3, [r4, #4]
  406076:	f023 0303 	bic.w	r3, r3, #3
  40607a:	1b9a      	subs	r2, r3, r6
  40607c:	2a0f      	cmp	r2, #15
  40607e:	ddf3      	ble.n	406068 <_malloc_r+0x54>
  406080:	4670      	mov	r0, lr
  406082:	693c      	ldr	r4, [r7, #16]
  406084:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40636c <_malloc_r+0x358>
  406088:	4574      	cmp	r4, lr
  40608a:	f000 81ab 	beq.w	4063e4 <_malloc_r+0x3d0>
  40608e:	6863      	ldr	r3, [r4, #4]
  406090:	f023 0303 	bic.w	r3, r3, #3
  406094:	1b9a      	subs	r2, r3, r6
  406096:	2a0f      	cmp	r2, #15
  406098:	f300 8190 	bgt.w	4063bc <_malloc_r+0x3a8>
  40609c:	2a00      	cmp	r2, #0
  40609e:	f8c7 e014 	str.w	lr, [r7, #20]
  4060a2:	f8c7 e010 	str.w	lr, [r7, #16]
  4060a6:	f280 809d 	bge.w	4061e4 <_malloc_r+0x1d0>
  4060aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4060ae:	f080 8161 	bcs.w	406374 <_malloc_r+0x360>
  4060b2:	08db      	lsrs	r3, r3, #3
  4060b4:	f103 0c01 	add.w	ip, r3, #1
  4060b8:	1099      	asrs	r1, r3, #2
  4060ba:	687a      	ldr	r2, [r7, #4]
  4060bc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4060c0:	f8c4 8008 	str.w	r8, [r4, #8]
  4060c4:	2301      	movs	r3, #1
  4060c6:	408b      	lsls	r3, r1
  4060c8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4060cc:	4313      	orrs	r3, r2
  4060ce:	3908      	subs	r1, #8
  4060d0:	60e1      	str	r1, [r4, #12]
  4060d2:	607b      	str	r3, [r7, #4]
  4060d4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4060d8:	f8c8 400c 	str.w	r4, [r8, #12]
  4060dc:	1082      	asrs	r2, r0, #2
  4060de:	2401      	movs	r4, #1
  4060e0:	4094      	lsls	r4, r2
  4060e2:	429c      	cmp	r4, r3
  4060e4:	f200 808b 	bhi.w	4061fe <_malloc_r+0x1ea>
  4060e8:	421c      	tst	r4, r3
  4060ea:	d106      	bne.n	4060fa <_malloc_r+0xe6>
  4060ec:	f020 0003 	bic.w	r0, r0, #3
  4060f0:	0064      	lsls	r4, r4, #1
  4060f2:	421c      	tst	r4, r3
  4060f4:	f100 0004 	add.w	r0, r0, #4
  4060f8:	d0fa      	beq.n	4060f0 <_malloc_r+0xdc>
  4060fa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4060fe:	46cc      	mov	ip, r9
  406100:	4680      	mov	r8, r0
  406102:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406106:	459c      	cmp	ip, r3
  406108:	d107      	bne.n	40611a <_malloc_r+0x106>
  40610a:	e16d      	b.n	4063e8 <_malloc_r+0x3d4>
  40610c:	2a00      	cmp	r2, #0
  40610e:	f280 817b 	bge.w	406408 <_malloc_r+0x3f4>
  406112:	68db      	ldr	r3, [r3, #12]
  406114:	459c      	cmp	ip, r3
  406116:	f000 8167 	beq.w	4063e8 <_malloc_r+0x3d4>
  40611a:	6859      	ldr	r1, [r3, #4]
  40611c:	f021 0103 	bic.w	r1, r1, #3
  406120:	1b8a      	subs	r2, r1, r6
  406122:	2a0f      	cmp	r2, #15
  406124:	ddf2      	ble.n	40610c <_malloc_r+0xf8>
  406126:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40612a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40612e:	9300      	str	r3, [sp, #0]
  406130:	199c      	adds	r4, r3, r6
  406132:	4628      	mov	r0, r5
  406134:	f046 0601 	orr.w	r6, r6, #1
  406138:	f042 0501 	orr.w	r5, r2, #1
  40613c:	605e      	str	r6, [r3, #4]
  40613e:	f8c8 c00c 	str.w	ip, [r8, #12]
  406142:	f8cc 8008 	str.w	r8, [ip, #8]
  406146:	617c      	str	r4, [r7, #20]
  406148:	613c      	str	r4, [r7, #16]
  40614a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40614e:	f8c4 e008 	str.w	lr, [r4, #8]
  406152:	6065      	str	r5, [r4, #4]
  406154:	505a      	str	r2, [r3, r1]
  406156:	f000 fa79 	bl	40664c <__malloc_unlock>
  40615a:	9b00      	ldr	r3, [sp, #0]
  40615c:	f103 0408 	add.w	r4, r3, #8
  406160:	e01e      	b.n	4061a0 <_malloc_r+0x18c>
  406162:	2910      	cmp	r1, #16
  406164:	d820      	bhi.n	4061a8 <_malloc_r+0x194>
  406166:	f000 fa6b 	bl	406640 <__malloc_lock>
  40616a:	2610      	movs	r6, #16
  40616c:	2318      	movs	r3, #24
  40616e:	2002      	movs	r0, #2
  406170:	4f79      	ldr	r7, [pc, #484]	; (406358 <_malloc_r+0x344>)
  406172:	443b      	add	r3, r7
  406174:	f1a3 0208 	sub.w	r2, r3, #8
  406178:	685c      	ldr	r4, [r3, #4]
  40617a:	4294      	cmp	r4, r2
  40617c:	f000 813d 	beq.w	4063fa <_malloc_r+0x3e6>
  406180:	6863      	ldr	r3, [r4, #4]
  406182:	68e1      	ldr	r1, [r4, #12]
  406184:	68a6      	ldr	r6, [r4, #8]
  406186:	f023 0303 	bic.w	r3, r3, #3
  40618a:	4423      	add	r3, r4
  40618c:	4628      	mov	r0, r5
  40618e:	685a      	ldr	r2, [r3, #4]
  406190:	60f1      	str	r1, [r6, #12]
  406192:	f042 0201 	orr.w	r2, r2, #1
  406196:	608e      	str	r6, [r1, #8]
  406198:	605a      	str	r2, [r3, #4]
  40619a:	f000 fa57 	bl	40664c <__malloc_unlock>
  40619e:	3408      	adds	r4, #8
  4061a0:	4620      	mov	r0, r4
  4061a2:	b003      	add	sp, #12
  4061a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061a8:	2400      	movs	r4, #0
  4061aa:	230c      	movs	r3, #12
  4061ac:	4620      	mov	r0, r4
  4061ae:	602b      	str	r3, [r5, #0]
  4061b0:	b003      	add	sp, #12
  4061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061b6:	2040      	movs	r0, #64	; 0x40
  4061b8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4061bc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4061c0:	e74a      	b.n	406058 <_malloc_r+0x44>
  4061c2:	4423      	add	r3, r4
  4061c4:	68e1      	ldr	r1, [r4, #12]
  4061c6:	685a      	ldr	r2, [r3, #4]
  4061c8:	68a6      	ldr	r6, [r4, #8]
  4061ca:	f042 0201 	orr.w	r2, r2, #1
  4061ce:	60f1      	str	r1, [r6, #12]
  4061d0:	4628      	mov	r0, r5
  4061d2:	608e      	str	r6, [r1, #8]
  4061d4:	605a      	str	r2, [r3, #4]
  4061d6:	f000 fa39 	bl	40664c <__malloc_unlock>
  4061da:	3408      	adds	r4, #8
  4061dc:	4620      	mov	r0, r4
  4061de:	b003      	add	sp, #12
  4061e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061e4:	4423      	add	r3, r4
  4061e6:	4628      	mov	r0, r5
  4061e8:	685a      	ldr	r2, [r3, #4]
  4061ea:	f042 0201 	orr.w	r2, r2, #1
  4061ee:	605a      	str	r2, [r3, #4]
  4061f0:	f000 fa2c 	bl	40664c <__malloc_unlock>
  4061f4:	3408      	adds	r4, #8
  4061f6:	4620      	mov	r0, r4
  4061f8:	b003      	add	sp, #12
  4061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061fe:	68bc      	ldr	r4, [r7, #8]
  406200:	6863      	ldr	r3, [r4, #4]
  406202:	f023 0803 	bic.w	r8, r3, #3
  406206:	45b0      	cmp	r8, r6
  406208:	d304      	bcc.n	406214 <_malloc_r+0x200>
  40620a:	eba8 0306 	sub.w	r3, r8, r6
  40620e:	2b0f      	cmp	r3, #15
  406210:	f300 8085 	bgt.w	40631e <_malloc_r+0x30a>
  406214:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406370 <_malloc_r+0x35c>
  406218:	4b50      	ldr	r3, [pc, #320]	; (40635c <_malloc_r+0x348>)
  40621a:	f8d9 2000 	ldr.w	r2, [r9]
  40621e:	681b      	ldr	r3, [r3, #0]
  406220:	3201      	adds	r2, #1
  406222:	4433      	add	r3, r6
  406224:	eb04 0a08 	add.w	sl, r4, r8
  406228:	f000 8155 	beq.w	4064d6 <_malloc_r+0x4c2>
  40622c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406230:	330f      	adds	r3, #15
  406232:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406236:	f02b 0b0f 	bic.w	fp, fp, #15
  40623a:	4659      	mov	r1, fp
  40623c:	4628      	mov	r0, r5
  40623e:	f000 fd05 	bl	406c4c <_sbrk_r>
  406242:	1c41      	adds	r1, r0, #1
  406244:	4602      	mov	r2, r0
  406246:	f000 80fc 	beq.w	406442 <_malloc_r+0x42e>
  40624a:	4582      	cmp	sl, r0
  40624c:	f200 80f7 	bhi.w	40643e <_malloc_r+0x42a>
  406250:	4b43      	ldr	r3, [pc, #268]	; (406360 <_malloc_r+0x34c>)
  406252:	6819      	ldr	r1, [r3, #0]
  406254:	4459      	add	r1, fp
  406256:	6019      	str	r1, [r3, #0]
  406258:	f000 814d 	beq.w	4064f6 <_malloc_r+0x4e2>
  40625c:	f8d9 0000 	ldr.w	r0, [r9]
  406260:	3001      	adds	r0, #1
  406262:	bf1b      	ittet	ne
  406264:	eba2 0a0a 	subne.w	sl, r2, sl
  406268:	4451      	addne	r1, sl
  40626a:	f8c9 2000 	streq.w	r2, [r9]
  40626e:	6019      	strne	r1, [r3, #0]
  406270:	f012 0107 	ands.w	r1, r2, #7
  406274:	f000 8115 	beq.w	4064a2 <_malloc_r+0x48e>
  406278:	f1c1 0008 	rsb	r0, r1, #8
  40627c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406280:	4402      	add	r2, r0
  406282:	3108      	adds	r1, #8
  406284:	eb02 090b 	add.w	r9, r2, fp
  406288:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40628c:	eba1 0909 	sub.w	r9, r1, r9
  406290:	4649      	mov	r1, r9
  406292:	4628      	mov	r0, r5
  406294:	9301      	str	r3, [sp, #4]
  406296:	9200      	str	r2, [sp, #0]
  406298:	f000 fcd8 	bl	406c4c <_sbrk_r>
  40629c:	1c43      	adds	r3, r0, #1
  40629e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4062a2:	f000 8143 	beq.w	40652c <_malloc_r+0x518>
  4062a6:	1a80      	subs	r0, r0, r2
  4062a8:	4448      	add	r0, r9
  4062aa:	f040 0001 	orr.w	r0, r0, #1
  4062ae:	6819      	ldr	r1, [r3, #0]
  4062b0:	60ba      	str	r2, [r7, #8]
  4062b2:	4449      	add	r1, r9
  4062b4:	42bc      	cmp	r4, r7
  4062b6:	6050      	str	r0, [r2, #4]
  4062b8:	6019      	str	r1, [r3, #0]
  4062ba:	d017      	beq.n	4062ec <_malloc_r+0x2d8>
  4062bc:	f1b8 0f0f 	cmp.w	r8, #15
  4062c0:	f240 80fb 	bls.w	4064ba <_malloc_r+0x4a6>
  4062c4:	6860      	ldr	r0, [r4, #4]
  4062c6:	f1a8 020c 	sub.w	r2, r8, #12
  4062ca:	f022 0207 	bic.w	r2, r2, #7
  4062ce:	eb04 0e02 	add.w	lr, r4, r2
  4062d2:	f000 0001 	and.w	r0, r0, #1
  4062d6:	f04f 0c05 	mov.w	ip, #5
  4062da:	4310      	orrs	r0, r2
  4062dc:	2a0f      	cmp	r2, #15
  4062de:	6060      	str	r0, [r4, #4]
  4062e0:	f8ce c004 	str.w	ip, [lr, #4]
  4062e4:	f8ce c008 	str.w	ip, [lr, #8]
  4062e8:	f200 8117 	bhi.w	40651a <_malloc_r+0x506>
  4062ec:	4b1d      	ldr	r3, [pc, #116]	; (406364 <_malloc_r+0x350>)
  4062ee:	68bc      	ldr	r4, [r7, #8]
  4062f0:	681a      	ldr	r2, [r3, #0]
  4062f2:	4291      	cmp	r1, r2
  4062f4:	bf88      	it	hi
  4062f6:	6019      	strhi	r1, [r3, #0]
  4062f8:	4b1b      	ldr	r3, [pc, #108]	; (406368 <_malloc_r+0x354>)
  4062fa:	681a      	ldr	r2, [r3, #0]
  4062fc:	4291      	cmp	r1, r2
  4062fe:	6862      	ldr	r2, [r4, #4]
  406300:	bf88      	it	hi
  406302:	6019      	strhi	r1, [r3, #0]
  406304:	f022 0203 	bic.w	r2, r2, #3
  406308:	4296      	cmp	r6, r2
  40630a:	eba2 0306 	sub.w	r3, r2, r6
  40630e:	d801      	bhi.n	406314 <_malloc_r+0x300>
  406310:	2b0f      	cmp	r3, #15
  406312:	dc04      	bgt.n	40631e <_malloc_r+0x30a>
  406314:	4628      	mov	r0, r5
  406316:	f000 f999 	bl	40664c <__malloc_unlock>
  40631a:	2400      	movs	r4, #0
  40631c:	e740      	b.n	4061a0 <_malloc_r+0x18c>
  40631e:	19a2      	adds	r2, r4, r6
  406320:	f043 0301 	orr.w	r3, r3, #1
  406324:	f046 0601 	orr.w	r6, r6, #1
  406328:	6066      	str	r6, [r4, #4]
  40632a:	4628      	mov	r0, r5
  40632c:	60ba      	str	r2, [r7, #8]
  40632e:	6053      	str	r3, [r2, #4]
  406330:	f000 f98c 	bl	40664c <__malloc_unlock>
  406334:	3408      	adds	r4, #8
  406336:	4620      	mov	r0, r4
  406338:	b003      	add	sp, #12
  40633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40633e:	2b14      	cmp	r3, #20
  406340:	d971      	bls.n	406426 <_malloc_r+0x412>
  406342:	2b54      	cmp	r3, #84	; 0x54
  406344:	f200 80a3 	bhi.w	40648e <_malloc_r+0x47a>
  406348:	0b33      	lsrs	r3, r6, #12
  40634a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40634e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406352:	00c3      	lsls	r3, r0, #3
  406354:	e680      	b.n	406058 <_malloc_r+0x44>
  406356:	bf00      	nop
  406358:	200005c0 	.word	0x200005c0
  40635c:	20000ddc 	.word	0x20000ddc
  406360:	20000dac 	.word	0x20000dac
  406364:	20000dd4 	.word	0x20000dd4
  406368:	20000dd8 	.word	0x20000dd8
  40636c:	200005c8 	.word	0x200005c8
  406370:	200009c8 	.word	0x200009c8
  406374:	0a5a      	lsrs	r2, r3, #9
  406376:	2a04      	cmp	r2, #4
  406378:	d95b      	bls.n	406432 <_malloc_r+0x41e>
  40637a:	2a14      	cmp	r2, #20
  40637c:	f200 80ae 	bhi.w	4064dc <_malloc_r+0x4c8>
  406380:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406384:	00c9      	lsls	r1, r1, #3
  406386:	325b      	adds	r2, #91	; 0x5b
  406388:	eb07 0c01 	add.w	ip, r7, r1
  40638c:	5879      	ldr	r1, [r7, r1]
  40638e:	f1ac 0c08 	sub.w	ip, ip, #8
  406392:	458c      	cmp	ip, r1
  406394:	f000 8088 	beq.w	4064a8 <_malloc_r+0x494>
  406398:	684a      	ldr	r2, [r1, #4]
  40639a:	f022 0203 	bic.w	r2, r2, #3
  40639e:	4293      	cmp	r3, r2
  4063a0:	d273      	bcs.n	40648a <_malloc_r+0x476>
  4063a2:	6889      	ldr	r1, [r1, #8]
  4063a4:	458c      	cmp	ip, r1
  4063a6:	d1f7      	bne.n	406398 <_malloc_r+0x384>
  4063a8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4063ac:	687b      	ldr	r3, [r7, #4]
  4063ae:	60e2      	str	r2, [r4, #12]
  4063b0:	f8c4 c008 	str.w	ip, [r4, #8]
  4063b4:	6094      	str	r4, [r2, #8]
  4063b6:	f8cc 400c 	str.w	r4, [ip, #12]
  4063ba:	e68f      	b.n	4060dc <_malloc_r+0xc8>
  4063bc:	19a1      	adds	r1, r4, r6
  4063be:	f046 0c01 	orr.w	ip, r6, #1
  4063c2:	f042 0601 	orr.w	r6, r2, #1
  4063c6:	f8c4 c004 	str.w	ip, [r4, #4]
  4063ca:	4628      	mov	r0, r5
  4063cc:	6179      	str	r1, [r7, #20]
  4063ce:	6139      	str	r1, [r7, #16]
  4063d0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4063d4:	f8c1 e008 	str.w	lr, [r1, #8]
  4063d8:	604e      	str	r6, [r1, #4]
  4063da:	50e2      	str	r2, [r4, r3]
  4063dc:	f000 f936 	bl	40664c <__malloc_unlock>
  4063e0:	3408      	adds	r4, #8
  4063e2:	e6dd      	b.n	4061a0 <_malloc_r+0x18c>
  4063e4:	687b      	ldr	r3, [r7, #4]
  4063e6:	e679      	b.n	4060dc <_malloc_r+0xc8>
  4063e8:	f108 0801 	add.w	r8, r8, #1
  4063ec:	f018 0f03 	tst.w	r8, #3
  4063f0:	f10c 0c08 	add.w	ip, ip, #8
  4063f4:	f47f ae85 	bne.w	406102 <_malloc_r+0xee>
  4063f8:	e02d      	b.n	406456 <_malloc_r+0x442>
  4063fa:	68dc      	ldr	r4, [r3, #12]
  4063fc:	42a3      	cmp	r3, r4
  4063fe:	bf08      	it	eq
  406400:	3002      	addeq	r0, #2
  406402:	f43f ae3e 	beq.w	406082 <_malloc_r+0x6e>
  406406:	e6bb      	b.n	406180 <_malloc_r+0x16c>
  406408:	4419      	add	r1, r3
  40640a:	461c      	mov	r4, r3
  40640c:	684a      	ldr	r2, [r1, #4]
  40640e:	68db      	ldr	r3, [r3, #12]
  406410:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406414:	f042 0201 	orr.w	r2, r2, #1
  406418:	604a      	str	r2, [r1, #4]
  40641a:	4628      	mov	r0, r5
  40641c:	60f3      	str	r3, [r6, #12]
  40641e:	609e      	str	r6, [r3, #8]
  406420:	f000 f914 	bl	40664c <__malloc_unlock>
  406424:	e6bc      	b.n	4061a0 <_malloc_r+0x18c>
  406426:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40642a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40642e:	00c3      	lsls	r3, r0, #3
  406430:	e612      	b.n	406058 <_malloc_r+0x44>
  406432:	099a      	lsrs	r2, r3, #6
  406434:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406438:	00c9      	lsls	r1, r1, #3
  40643a:	3238      	adds	r2, #56	; 0x38
  40643c:	e7a4      	b.n	406388 <_malloc_r+0x374>
  40643e:	42bc      	cmp	r4, r7
  406440:	d054      	beq.n	4064ec <_malloc_r+0x4d8>
  406442:	68bc      	ldr	r4, [r7, #8]
  406444:	6862      	ldr	r2, [r4, #4]
  406446:	f022 0203 	bic.w	r2, r2, #3
  40644a:	e75d      	b.n	406308 <_malloc_r+0x2f4>
  40644c:	f859 3908 	ldr.w	r3, [r9], #-8
  406450:	4599      	cmp	r9, r3
  406452:	f040 8086 	bne.w	406562 <_malloc_r+0x54e>
  406456:	f010 0f03 	tst.w	r0, #3
  40645a:	f100 30ff 	add.w	r0, r0, #4294967295
  40645e:	d1f5      	bne.n	40644c <_malloc_r+0x438>
  406460:	687b      	ldr	r3, [r7, #4]
  406462:	ea23 0304 	bic.w	r3, r3, r4
  406466:	607b      	str	r3, [r7, #4]
  406468:	0064      	lsls	r4, r4, #1
  40646a:	429c      	cmp	r4, r3
  40646c:	f63f aec7 	bhi.w	4061fe <_malloc_r+0x1ea>
  406470:	2c00      	cmp	r4, #0
  406472:	f43f aec4 	beq.w	4061fe <_malloc_r+0x1ea>
  406476:	421c      	tst	r4, r3
  406478:	4640      	mov	r0, r8
  40647a:	f47f ae3e 	bne.w	4060fa <_malloc_r+0xe6>
  40647e:	0064      	lsls	r4, r4, #1
  406480:	421c      	tst	r4, r3
  406482:	f100 0004 	add.w	r0, r0, #4
  406486:	d0fa      	beq.n	40647e <_malloc_r+0x46a>
  406488:	e637      	b.n	4060fa <_malloc_r+0xe6>
  40648a:	468c      	mov	ip, r1
  40648c:	e78c      	b.n	4063a8 <_malloc_r+0x394>
  40648e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406492:	d815      	bhi.n	4064c0 <_malloc_r+0x4ac>
  406494:	0bf3      	lsrs	r3, r6, #15
  406496:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40649a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40649e:	00c3      	lsls	r3, r0, #3
  4064a0:	e5da      	b.n	406058 <_malloc_r+0x44>
  4064a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4064a6:	e6ed      	b.n	406284 <_malloc_r+0x270>
  4064a8:	687b      	ldr	r3, [r7, #4]
  4064aa:	1092      	asrs	r2, r2, #2
  4064ac:	2101      	movs	r1, #1
  4064ae:	fa01 f202 	lsl.w	r2, r1, r2
  4064b2:	4313      	orrs	r3, r2
  4064b4:	607b      	str	r3, [r7, #4]
  4064b6:	4662      	mov	r2, ip
  4064b8:	e779      	b.n	4063ae <_malloc_r+0x39a>
  4064ba:	2301      	movs	r3, #1
  4064bc:	6053      	str	r3, [r2, #4]
  4064be:	e729      	b.n	406314 <_malloc_r+0x300>
  4064c0:	f240 5254 	movw	r2, #1364	; 0x554
  4064c4:	4293      	cmp	r3, r2
  4064c6:	d822      	bhi.n	40650e <_malloc_r+0x4fa>
  4064c8:	0cb3      	lsrs	r3, r6, #18
  4064ca:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4064ce:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4064d2:	00c3      	lsls	r3, r0, #3
  4064d4:	e5c0      	b.n	406058 <_malloc_r+0x44>
  4064d6:	f103 0b10 	add.w	fp, r3, #16
  4064da:	e6ae      	b.n	40623a <_malloc_r+0x226>
  4064dc:	2a54      	cmp	r2, #84	; 0x54
  4064de:	d829      	bhi.n	406534 <_malloc_r+0x520>
  4064e0:	0b1a      	lsrs	r2, r3, #12
  4064e2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4064e6:	00c9      	lsls	r1, r1, #3
  4064e8:	326e      	adds	r2, #110	; 0x6e
  4064ea:	e74d      	b.n	406388 <_malloc_r+0x374>
  4064ec:	4b20      	ldr	r3, [pc, #128]	; (406570 <_malloc_r+0x55c>)
  4064ee:	6819      	ldr	r1, [r3, #0]
  4064f0:	4459      	add	r1, fp
  4064f2:	6019      	str	r1, [r3, #0]
  4064f4:	e6b2      	b.n	40625c <_malloc_r+0x248>
  4064f6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4064fa:	2800      	cmp	r0, #0
  4064fc:	f47f aeae 	bne.w	40625c <_malloc_r+0x248>
  406500:	eb08 030b 	add.w	r3, r8, fp
  406504:	68ba      	ldr	r2, [r7, #8]
  406506:	f043 0301 	orr.w	r3, r3, #1
  40650a:	6053      	str	r3, [r2, #4]
  40650c:	e6ee      	b.n	4062ec <_malloc_r+0x2d8>
  40650e:	207f      	movs	r0, #127	; 0x7f
  406510:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406514:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406518:	e59e      	b.n	406058 <_malloc_r+0x44>
  40651a:	f104 0108 	add.w	r1, r4, #8
  40651e:	4628      	mov	r0, r5
  406520:	9300      	str	r3, [sp, #0]
  406522:	f000 fd13 	bl	406f4c <_free_r>
  406526:	9b00      	ldr	r3, [sp, #0]
  406528:	6819      	ldr	r1, [r3, #0]
  40652a:	e6df      	b.n	4062ec <_malloc_r+0x2d8>
  40652c:	2001      	movs	r0, #1
  40652e:	f04f 0900 	mov.w	r9, #0
  406532:	e6bc      	b.n	4062ae <_malloc_r+0x29a>
  406534:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406538:	d805      	bhi.n	406546 <_malloc_r+0x532>
  40653a:	0bda      	lsrs	r2, r3, #15
  40653c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406540:	00c9      	lsls	r1, r1, #3
  406542:	3277      	adds	r2, #119	; 0x77
  406544:	e720      	b.n	406388 <_malloc_r+0x374>
  406546:	f240 5154 	movw	r1, #1364	; 0x554
  40654a:	428a      	cmp	r2, r1
  40654c:	d805      	bhi.n	40655a <_malloc_r+0x546>
  40654e:	0c9a      	lsrs	r2, r3, #18
  406550:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406554:	00c9      	lsls	r1, r1, #3
  406556:	327c      	adds	r2, #124	; 0x7c
  406558:	e716      	b.n	406388 <_malloc_r+0x374>
  40655a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40655e:	227e      	movs	r2, #126	; 0x7e
  406560:	e712      	b.n	406388 <_malloc_r+0x374>
  406562:	687b      	ldr	r3, [r7, #4]
  406564:	e780      	b.n	406468 <_malloc_r+0x454>
  406566:	08f0      	lsrs	r0, r6, #3
  406568:	f106 0308 	add.w	r3, r6, #8
  40656c:	e600      	b.n	406170 <_malloc_r+0x15c>
  40656e:	bf00      	nop
  406570:	20000dac 	.word	0x20000dac

00406574 <__ascii_mbtowc>:
  406574:	b082      	sub	sp, #8
  406576:	b149      	cbz	r1, 40658c <__ascii_mbtowc+0x18>
  406578:	b15a      	cbz	r2, 406592 <__ascii_mbtowc+0x1e>
  40657a:	b16b      	cbz	r3, 406598 <__ascii_mbtowc+0x24>
  40657c:	7813      	ldrb	r3, [r2, #0]
  40657e:	600b      	str	r3, [r1, #0]
  406580:	7812      	ldrb	r2, [r2, #0]
  406582:	1c10      	adds	r0, r2, #0
  406584:	bf18      	it	ne
  406586:	2001      	movne	r0, #1
  406588:	b002      	add	sp, #8
  40658a:	4770      	bx	lr
  40658c:	a901      	add	r1, sp, #4
  40658e:	2a00      	cmp	r2, #0
  406590:	d1f3      	bne.n	40657a <__ascii_mbtowc+0x6>
  406592:	4610      	mov	r0, r2
  406594:	b002      	add	sp, #8
  406596:	4770      	bx	lr
  406598:	f06f 0001 	mvn.w	r0, #1
  40659c:	e7f4      	b.n	406588 <__ascii_mbtowc+0x14>
  40659e:	bf00      	nop

004065a0 <memchr>:
  4065a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4065a4:	2a10      	cmp	r2, #16
  4065a6:	db2b      	blt.n	406600 <memchr+0x60>
  4065a8:	f010 0f07 	tst.w	r0, #7
  4065ac:	d008      	beq.n	4065c0 <memchr+0x20>
  4065ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4065b2:	3a01      	subs	r2, #1
  4065b4:	428b      	cmp	r3, r1
  4065b6:	d02d      	beq.n	406614 <memchr+0x74>
  4065b8:	f010 0f07 	tst.w	r0, #7
  4065bc:	b342      	cbz	r2, 406610 <memchr+0x70>
  4065be:	d1f6      	bne.n	4065ae <memchr+0xe>
  4065c0:	b4f0      	push	{r4, r5, r6, r7}
  4065c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4065c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4065ca:	f022 0407 	bic.w	r4, r2, #7
  4065ce:	f07f 0700 	mvns.w	r7, #0
  4065d2:	2300      	movs	r3, #0
  4065d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4065d8:	3c08      	subs	r4, #8
  4065da:	ea85 0501 	eor.w	r5, r5, r1
  4065de:	ea86 0601 	eor.w	r6, r6, r1
  4065e2:	fa85 f547 	uadd8	r5, r5, r7
  4065e6:	faa3 f587 	sel	r5, r3, r7
  4065ea:	fa86 f647 	uadd8	r6, r6, r7
  4065ee:	faa5 f687 	sel	r6, r5, r7
  4065f2:	b98e      	cbnz	r6, 406618 <memchr+0x78>
  4065f4:	d1ee      	bne.n	4065d4 <memchr+0x34>
  4065f6:	bcf0      	pop	{r4, r5, r6, r7}
  4065f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4065fc:	f002 0207 	and.w	r2, r2, #7
  406600:	b132      	cbz	r2, 406610 <memchr+0x70>
  406602:	f810 3b01 	ldrb.w	r3, [r0], #1
  406606:	3a01      	subs	r2, #1
  406608:	ea83 0301 	eor.w	r3, r3, r1
  40660c:	b113      	cbz	r3, 406614 <memchr+0x74>
  40660e:	d1f8      	bne.n	406602 <memchr+0x62>
  406610:	2000      	movs	r0, #0
  406612:	4770      	bx	lr
  406614:	3801      	subs	r0, #1
  406616:	4770      	bx	lr
  406618:	2d00      	cmp	r5, #0
  40661a:	bf06      	itte	eq
  40661c:	4635      	moveq	r5, r6
  40661e:	3803      	subeq	r0, #3
  406620:	3807      	subne	r0, #7
  406622:	f015 0f01 	tst.w	r5, #1
  406626:	d107      	bne.n	406638 <memchr+0x98>
  406628:	3001      	adds	r0, #1
  40662a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40662e:	bf02      	ittt	eq
  406630:	3001      	addeq	r0, #1
  406632:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406636:	3001      	addeq	r0, #1
  406638:	bcf0      	pop	{r4, r5, r6, r7}
  40663a:	3801      	subs	r0, #1
  40663c:	4770      	bx	lr
  40663e:	bf00      	nop

00406640 <__malloc_lock>:
  406640:	4801      	ldr	r0, [pc, #4]	; (406648 <__malloc_lock+0x8>)
  406642:	f7ff bce3 	b.w	40600c <__retarget_lock_acquire_recursive>
  406646:	bf00      	nop
  406648:	20000e68 	.word	0x20000e68

0040664c <__malloc_unlock>:
  40664c:	4801      	ldr	r0, [pc, #4]	; (406654 <__malloc_unlock+0x8>)
  40664e:	f7ff bcdf 	b.w	406010 <__retarget_lock_release_recursive>
  406652:	bf00      	nop
  406654:	20000e68 	.word	0x20000e68

00406658 <_Balloc>:
  406658:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40665a:	b570      	push	{r4, r5, r6, lr}
  40665c:	4605      	mov	r5, r0
  40665e:	460c      	mov	r4, r1
  406660:	b14b      	cbz	r3, 406676 <_Balloc+0x1e>
  406662:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406666:	b180      	cbz	r0, 40668a <_Balloc+0x32>
  406668:	6802      	ldr	r2, [r0, #0]
  40666a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40666e:	2300      	movs	r3, #0
  406670:	6103      	str	r3, [r0, #16]
  406672:	60c3      	str	r3, [r0, #12]
  406674:	bd70      	pop	{r4, r5, r6, pc}
  406676:	2221      	movs	r2, #33	; 0x21
  406678:	2104      	movs	r1, #4
  40667a:	f000 fbe7 	bl	406e4c <_calloc_r>
  40667e:	64e8      	str	r0, [r5, #76]	; 0x4c
  406680:	4603      	mov	r3, r0
  406682:	2800      	cmp	r0, #0
  406684:	d1ed      	bne.n	406662 <_Balloc+0xa>
  406686:	2000      	movs	r0, #0
  406688:	bd70      	pop	{r4, r5, r6, pc}
  40668a:	2101      	movs	r1, #1
  40668c:	fa01 f604 	lsl.w	r6, r1, r4
  406690:	1d72      	adds	r2, r6, #5
  406692:	4628      	mov	r0, r5
  406694:	0092      	lsls	r2, r2, #2
  406696:	f000 fbd9 	bl	406e4c <_calloc_r>
  40669a:	2800      	cmp	r0, #0
  40669c:	d0f3      	beq.n	406686 <_Balloc+0x2e>
  40669e:	6044      	str	r4, [r0, #4]
  4066a0:	6086      	str	r6, [r0, #8]
  4066a2:	e7e4      	b.n	40666e <_Balloc+0x16>

004066a4 <_Bfree>:
  4066a4:	b131      	cbz	r1, 4066b4 <_Bfree+0x10>
  4066a6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4066a8:	684a      	ldr	r2, [r1, #4]
  4066aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4066ae:	6008      	str	r0, [r1, #0]
  4066b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4066b4:	4770      	bx	lr
  4066b6:	bf00      	nop

004066b8 <__multadd>:
  4066b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4066ba:	690c      	ldr	r4, [r1, #16]
  4066bc:	b083      	sub	sp, #12
  4066be:	460d      	mov	r5, r1
  4066c0:	4606      	mov	r6, r0
  4066c2:	f101 0e14 	add.w	lr, r1, #20
  4066c6:	2700      	movs	r7, #0
  4066c8:	f8de 0000 	ldr.w	r0, [lr]
  4066cc:	b281      	uxth	r1, r0
  4066ce:	fb02 3301 	mla	r3, r2, r1, r3
  4066d2:	0c01      	lsrs	r1, r0, #16
  4066d4:	0c18      	lsrs	r0, r3, #16
  4066d6:	fb02 0101 	mla	r1, r2, r1, r0
  4066da:	b29b      	uxth	r3, r3
  4066dc:	3701      	adds	r7, #1
  4066de:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4066e2:	42bc      	cmp	r4, r7
  4066e4:	f84e 3b04 	str.w	r3, [lr], #4
  4066e8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4066ec:	dcec      	bgt.n	4066c8 <__multadd+0x10>
  4066ee:	b13b      	cbz	r3, 406700 <__multadd+0x48>
  4066f0:	68aa      	ldr	r2, [r5, #8]
  4066f2:	4294      	cmp	r4, r2
  4066f4:	da07      	bge.n	406706 <__multadd+0x4e>
  4066f6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4066fa:	3401      	adds	r4, #1
  4066fc:	6153      	str	r3, [r2, #20]
  4066fe:	612c      	str	r4, [r5, #16]
  406700:	4628      	mov	r0, r5
  406702:	b003      	add	sp, #12
  406704:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406706:	6869      	ldr	r1, [r5, #4]
  406708:	9301      	str	r3, [sp, #4]
  40670a:	3101      	adds	r1, #1
  40670c:	4630      	mov	r0, r6
  40670e:	f7ff ffa3 	bl	406658 <_Balloc>
  406712:	692a      	ldr	r2, [r5, #16]
  406714:	3202      	adds	r2, #2
  406716:	f105 010c 	add.w	r1, r5, #12
  40671a:	4607      	mov	r7, r0
  40671c:	0092      	lsls	r2, r2, #2
  40671e:	300c      	adds	r0, #12
  406720:	f7fc fed8 	bl	4034d4 <memcpy>
  406724:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406726:	6869      	ldr	r1, [r5, #4]
  406728:	9b01      	ldr	r3, [sp, #4]
  40672a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40672e:	6028      	str	r0, [r5, #0]
  406730:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406734:	463d      	mov	r5, r7
  406736:	e7de      	b.n	4066f6 <__multadd+0x3e>

00406738 <__hi0bits>:
  406738:	0c02      	lsrs	r2, r0, #16
  40673a:	0412      	lsls	r2, r2, #16
  40673c:	4603      	mov	r3, r0
  40673e:	b9b2      	cbnz	r2, 40676e <__hi0bits+0x36>
  406740:	0403      	lsls	r3, r0, #16
  406742:	2010      	movs	r0, #16
  406744:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406748:	bf04      	itt	eq
  40674a:	021b      	lsleq	r3, r3, #8
  40674c:	3008      	addeq	r0, #8
  40674e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406752:	bf04      	itt	eq
  406754:	011b      	lsleq	r3, r3, #4
  406756:	3004      	addeq	r0, #4
  406758:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40675c:	bf04      	itt	eq
  40675e:	009b      	lsleq	r3, r3, #2
  406760:	3002      	addeq	r0, #2
  406762:	2b00      	cmp	r3, #0
  406764:	db02      	blt.n	40676c <__hi0bits+0x34>
  406766:	005b      	lsls	r3, r3, #1
  406768:	d403      	bmi.n	406772 <__hi0bits+0x3a>
  40676a:	2020      	movs	r0, #32
  40676c:	4770      	bx	lr
  40676e:	2000      	movs	r0, #0
  406770:	e7e8      	b.n	406744 <__hi0bits+0xc>
  406772:	3001      	adds	r0, #1
  406774:	4770      	bx	lr
  406776:	bf00      	nop

00406778 <__lo0bits>:
  406778:	6803      	ldr	r3, [r0, #0]
  40677a:	f013 0207 	ands.w	r2, r3, #7
  40677e:	4601      	mov	r1, r0
  406780:	d007      	beq.n	406792 <__lo0bits+0x1a>
  406782:	07da      	lsls	r2, r3, #31
  406784:	d421      	bmi.n	4067ca <__lo0bits+0x52>
  406786:	0798      	lsls	r0, r3, #30
  406788:	d421      	bmi.n	4067ce <__lo0bits+0x56>
  40678a:	089b      	lsrs	r3, r3, #2
  40678c:	600b      	str	r3, [r1, #0]
  40678e:	2002      	movs	r0, #2
  406790:	4770      	bx	lr
  406792:	b298      	uxth	r0, r3
  406794:	b198      	cbz	r0, 4067be <__lo0bits+0x46>
  406796:	4610      	mov	r0, r2
  406798:	f013 0fff 	tst.w	r3, #255	; 0xff
  40679c:	bf04      	itt	eq
  40679e:	0a1b      	lsreq	r3, r3, #8
  4067a0:	3008      	addeq	r0, #8
  4067a2:	071a      	lsls	r2, r3, #28
  4067a4:	bf04      	itt	eq
  4067a6:	091b      	lsreq	r3, r3, #4
  4067a8:	3004      	addeq	r0, #4
  4067aa:	079a      	lsls	r2, r3, #30
  4067ac:	bf04      	itt	eq
  4067ae:	089b      	lsreq	r3, r3, #2
  4067b0:	3002      	addeq	r0, #2
  4067b2:	07da      	lsls	r2, r3, #31
  4067b4:	d407      	bmi.n	4067c6 <__lo0bits+0x4e>
  4067b6:	085b      	lsrs	r3, r3, #1
  4067b8:	d104      	bne.n	4067c4 <__lo0bits+0x4c>
  4067ba:	2020      	movs	r0, #32
  4067bc:	4770      	bx	lr
  4067be:	0c1b      	lsrs	r3, r3, #16
  4067c0:	2010      	movs	r0, #16
  4067c2:	e7e9      	b.n	406798 <__lo0bits+0x20>
  4067c4:	3001      	adds	r0, #1
  4067c6:	600b      	str	r3, [r1, #0]
  4067c8:	4770      	bx	lr
  4067ca:	2000      	movs	r0, #0
  4067cc:	4770      	bx	lr
  4067ce:	085b      	lsrs	r3, r3, #1
  4067d0:	600b      	str	r3, [r1, #0]
  4067d2:	2001      	movs	r0, #1
  4067d4:	4770      	bx	lr
  4067d6:	bf00      	nop

004067d8 <__i2b>:
  4067d8:	b510      	push	{r4, lr}
  4067da:	460c      	mov	r4, r1
  4067dc:	2101      	movs	r1, #1
  4067de:	f7ff ff3b 	bl	406658 <_Balloc>
  4067e2:	2201      	movs	r2, #1
  4067e4:	6144      	str	r4, [r0, #20]
  4067e6:	6102      	str	r2, [r0, #16]
  4067e8:	bd10      	pop	{r4, pc}
  4067ea:	bf00      	nop

004067ec <__multiply>:
  4067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4067f0:	690c      	ldr	r4, [r1, #16]
  4067f2:	6915      	ldr	r5, [r2, #16]
  4067f4:	42ac      	cmp	r4, r5
  4067f6:	b083      	sub	sp, #12
  4067f8:	468b      	mov	fp, r1
  4067fa:	4616      	mov	r6, r2
  4067fc:	da04      	bge.n	406808 <__multiply+0x1c>
  4067fe:	4622      	mov	r2, r4
  406800:	46b3      	mov	fp, r6
  406802:	462c      	mov	r4, r5
  406804:	460e      	mov	r6, r1
  406806:	4615      	mov	r5, r2
  406808:	f8db 3008 	ldr.w	r3, [fp, #8]
  40680c:	f8db 1004 	ldr.w	r1, [fp, #4]
  406810:	eb04 0805 	add.w	r8, r4, r5
  406814:	4598      	cmp	r8, r3
  406816:	bfc8      	it	gt
  406818:	3101      	addgt	r1, #1
  40681a:	f7ff ff1d 	bl	406658 <_Balloc>
  40681e:	f100 0914 	add.w	r9, r0, #20
  406822:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406826:	45d1      	cmp	r9, sl
  406828:	9000      	str	r0, [sp, #0]
  40682a:	d205      	bcs.n	406838 <__multiply+0x4c>
  40682c:	464b      	mov	r3, r9
  40682e:	2100      	movs	r1, #0
  406830:	f843 1b04 	str.w	r1, [r3], #4
  406834:	459a      	cmp	sl, r3
  406836:	d8fb      	bhi.n	406830 <__multiply+0x44>
  406838:	f106 0c14 	add.w	ip, r6, #20
  40683c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406840:	f10b 0b14 	add.w	fp, fp, #20
  406844:	459c      	cmp	ip, r3
  406846:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40684a:	d24c      	bcs.n	4068e6 <__multiply+0xfa>
  40684c:	f8cd a004 	str.w	sl, [sp, #4]
  406850:	469a      	mov	sl, r3
  406852:	f8dc 5000 	ldr.w	r5, [ip]
  406856:	b2af      	uxth	r7, r5
  406858:	b1ef      	cbz	r7, 406896 <__multiply+0xaa>
  40685a:	2100      	movs	r1, #0
  40685c:	464d      	mov	r5, r9
  40685e:	465e      	mov	r6, fp
  406860:	460c      	mov	r4, r1
  406862:	f856 2b04 	ldr.w	r2, [r6], #4
  406866:	6828      	ldr	r0, [r5, #0]
  406868:	b293      	uxth	r3, r2
  40686a:	b281      	uxth	r1, r0
  40686c:	fb07 1303 	mla	r3, r7, r3, r1
  406870:	0c12      	lsrs	r2, r2, #16
  406872:	0c01      	lsrs	r1, r0, #16
  406874:	4423      	add	r3, r4
  406876:	fb07 1102 	mla	r1, r7, r2, r1
  40687a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40687e:	b29b      	uxth	r3, r3
  406880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406884:	45b6      	cmp	lr, r6
  406886:	f845 3b04 	str.w	r3, [r5], #4
  40688a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40688e:	d8e8      	bhi.n	406862 <__multiply+0x76>
  406890:	602c      	str	r4, [r5, #0]
  406892:	f8dc 5000 	ldr.w	r5, [ip]
  406896:	0c2d      	lsrs	r5, r5, #16
  406898:	d01d      	beq.n	4068d6 <__multiply+0xea>
  40689a:	f8d9 3000 	ldr.w	r3, [r9]
  40689e:	4648      	mov	r0, r9
  4068a0:	461c      	mov	r4, r3
  4068a2:	4659      	mov	r1, fp
  4068a4:	2200      	movs	r2, #0
  4068a6:	880e      	ldrh	r6, [r1, #0]
  4068a8:	0c24      	lsrs	r4, r4, #16
  4068aa:	fb05 4406 	mla	r4, r5, r6, r4
  4068ae:	4422      	add	r2, r4
  4068b0:	b29b      	uxth	r3, r3
  4068b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4068b6:	f840 3b04 	str.w	r3, [r0], #4
  4068ba:	f851 3b04 	ldr.w	r3, [r1], #4
  4068be:	6804      	ldr	r4, [r0, #0]
  4068c0:	0c1b      	lsrs	r3, r3, #16
  4068c2:	b2a6      	uxth	r6, r4
  4068c4:	fb05 6303 	mla	r3, r5, r3, r6
  4068c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4068cc:	458e      	cmp	lr, r1
  4068ce:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4068d2:	d8e8      	bhi.n	4068a6 <__multiply+0xba>
  4068d4:	6003      	str	r3, [r0, #0]
  4068d6:	f10c 0c04 	add.w	ip, ip, #4
  4068da:	45e2      	cmp	sl, ip
  4068dc:	f109 0904 	add.w	r9, r9, #4
  4068e0:	d8b7      	bhi.n	406852 <__multiply+0x66>
  4068e2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4068e6:	f1b8 0f00 	cmp.w	r8, #0
  4068ea:	dd0b      	ble.n	406904 <__multiply+0x118>
  4068ec:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4068f0:	f1aa 0a04 	sub.w	sl, sl, #4
  4068f4:	b11b      	cbz	r3, 4068fe <__multiply+0x112>
  4068f6:	e005      	b.n	406904 <__multiply+0x118>
  4068f8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4068fc:	b913      	cbnz	r3, 406904 <__multiply+0x118>
  4068fe:	f1b8 0801 	subs.w	r8, r8, #1
  406902:	d1f9      	bne.n	4068f8 <__multiply+0x10c>
  406904:	9800      	ldr	r0, [sp, #0]
  406906:	f8c0 8010 	str.w	r8, [r0, #16]
  40690a:	b003      	add	sp, #12
  40690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406910 <__pow5mult>:
  406910:	f012 0303 	ands.w	r3, r2, #3
  406914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406918:	4614      	mov	r4, r2
  40691a:	4607      	mov	r7, r0
  40691c:	d12e      	bne.n	40697c <__pow5mult+0x6c>
  40691e:	460d      	mov	r5, r1
  406920:	10a4      	asrs	r4, r4, #2
  406922:	d01c      	beq.n	40695e <__pow5mult+0x4e>
  406924:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406926:	b396      	cbz	r6, 40698e <__pow5mult+0x7e>
  406928:	07e3      	lsls	r3, r4, #31
  40692a:	f04f 0800 	mov.w	r8, #0
  40692e:	d406      	bmi.n	40693e <__pow5mult+0x2e>
  406930:	1064      	asrs	r4, r4, #1
  406932:	d014      	beq.n	40695e <__pow5mult+0x4e>
  406934:	6830      	ldr	r0, [r6, #0]
  406936:	b1a8      	cbz	r0, 406964 <__pow5mult+0x54>
  406938:	4606      	mov	r6, r0
  40693a:	07e3      	lsls	r3, r4, #31
  40693c:	d5f8      	bpl.n	406930 <__pow5mult+0x20>
  40693e:	4632      	mov	r2, r6
  406940:	4629      	mov	r1, r5
  406942:	4638      	mov	r0, r7
  406944:	f7ff ff52 	bl	4067ec <__multiply>
  406948:	b1b5      	cbz	r5, 406978 <__pow5mult+0x68>
  40694a:	686a      	ldr	r2, [r5, #4]
  40694c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40694e:	1064      	asrs	r4, r4, #1
  406950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406954:	6029      	str	r1, [r5, #0]
  406956:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40695a:	4605      	mov	r5, r0
  40695c:	d1ea      	bne.n	406934 <__pow5mult+0x24>
  40695e:	4628      	mov	r0, r5
  406960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406964:	4632      	mov	r2, r6
  406966:	4631      	mov	r1, r6
  406968:	4638      	mov	r0, r7
  40696a:	f7ff ff3f 	bl	4067ec <__multiply>
  40696e:	6030      	str	r0, [r6, #0]
  406970:	f8c0 8000 	str.w	r8, [r0]
  406974:	4606      	mov	r6, r0
  406976:	e7e0      	b.n	40693a <__pow5mult+0x2a>
  406978:	4605      	mov	r5, r0
  40697a:	e7d9      	b.n	406930 <__pow5mult+0x20>
  40697c:	1e5a      	subs	r2, r3, #1
  40697e:	4d0b      	ldr	r5, [pc, #44]	; (4069ac <__pow5mult+0x9c>)
  406980:	2300      	movs	r3, #0
  406982:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406986:	f7ff fe97 	bl	4066b8 <__multadd>
  40698a:	4605      	mov	r5, r0
  40698c:	e7c8      	b.n	406920 <__pow5mult+0x10>
  40698e:	2101      	movs	r1, #1
  406990:	4638      	mov	r0, r7
  406992:	f7ff fe61 	bl	406658 <_Balloc>
  406996:	f240 2171 	movw	r1, #625	; 0x271
  40699a:	2201      	movs	r2, #1
  40699c:	2300      	movs	r3, #0
  40699e:	6141      	str	r1, [r0, #20]
  4069a0:	6102      	str	r2, [r0, #16]
  4069a2:	4606      	mov	r6, r0
  4069a4:	64b8      	str	r0, [r7, #72]	; 0x48
  4069a6:	6003      	str	r3, [r0, #0]
  4069a8:	e7be      	b.n	406928 <__pow5mult+0x18>
  4069aa:	bf00      	nop
  4069ac:	00408728 	.word	0x00408728

004069b0 <__lshift>:
  4069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4069b4:	4691      	mov	r9, r2
  4069b6:	690a      	ldr	r2, [r1, #16]
  4069b8:	688b      	ldr	r3, [r1, #8]
  4069ba:	ea4f 1469 	mov.w	r4, r9, asr #5
  4069be:	eb04 0802 	add.w	r8, r4, r2
  4069c2:	f108 0501 	add.w	r5, r8, #1
  4069c6:	429d      	cmp	r5, r3
  4069c8:	460e      	mov	r6, r1
  4069ca:	4607      	mov	r7, r0
  4069cc:	6849      	ldr	r1, [r1, #4]
  4069ce:	dd04      	ble.n	4069da <__lshift+0x2a>
  4069d0:	005b      	lsls	r3, r3, #1
  4069d2:	429d      	cmp	r5, r3
  4069d4:	f101 0101 	add.w	r1, r1, #1
  4069d8:	dcfa      	bgt.n	4069d0 <__lshift+0x20>
  4069da:	4638      	mov	r0, r7
  4069dc:	f7ff fe3c 	bl	406658 <_Balloc>
  4069e0:	2c00      	cmp	r4, #0
  4069e2:	f100 0314 	add.w	r3, r0, #20
  4069e6:	dd06      	ble.n	4069f6 <__lshift+0x46>
  4069e8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4069ec:	2100      	movs	r1, #0
  4069ee:	f843 1b04 	str.w	r1, [r3], #4
  4069f2:	429a      	cmp	r2, r3
  4069f4:	d1fb      	bne.n	4069ee <__lshift+0x3e>
  4069f6:	6934      	ldr	r4, [r6, #16]
  4069f8:	f106 0114 	add.w	r1, r6, #20
  4069fc:	f019 091f 	ands.w	r9, r9, #31
  406a00:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406a04:	d01d      	beq.n	406a42 <__lshift+0x92>
  406a06:	f1c9 0c20 	rsb	ip, r9, #32
  406a0a:	2200      	movs	r2, #0
  406a0c:	680c      	ldr	r4, [r1, #0]
  406a0e:	fa04 f409 	lsl.w	r4, r4, r9
  406a12:	4314      	orrs	r4, r2
  406a14:	f843 4b04 	str.w	r4, [r3], #4
  406a18:	f851 2b04 	ldr.w	r2, [r1], #4
  406a1c:	458e      	cmp	lr, r1
  406a1e:	fa22 f20c 	lsr.w	r2, r2, ip
  406a22:	d8f3      	bhi.n	406a0c <__lshift+0x5c>
  406a24:	601a      	str	r2, [r3, #0]
  406a26:	b10a      	cbz	r2, 406a2c <__lshift+0x7c>
  406a28:	f108 0502 	add.w	r5, r8, #2
  406a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406a2e:	6872      	ldr	r2, [r6, #4]
  406a30:	3d01      	subs	r5, #1
  406a32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406a36:	6105      	str	r5, [r0, #16]
  406a38:	6031      	str	r1, [r6, #0]
  406a3a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406a42:	3b04      	subs	r3, #4
  406a44:	f851 2b04 	ldr.w	r2, [r1], #4
  406a48:	f843 2f04 	str.w	r2, [r3, #4]!
  406a4c:	458e      	cmp	lr, r1
  406a4e:	d8f9      	bhi.n	406a44 <__lshift+0x94>
  406a50:	e7ec      	b.n	406a2c <__lshift+0x7c>
  406a52:	bf00      	nop

00406a54 <__mcmp>:
  406a54:	b430      	push	{r4, r5}
  406a56:	690b      	ldr	r3, [r1, #16]
  406a58:	4605      	mov	r5, r0
  406a5a:	6900      	ldr	r0, [r0, #16]
  406a5c:	1ac0      	subs	r0, r0, r3
  406a5e:	d10f      	bne.n	406a80 <__mcmp+0x2c>
  406a60:	009b      	lsls	r3, r3, #2
  406a62:	3514      	adds	r5, #20
  406a64:	3114      	adds	r1, #20
  406a66:	4419      	add	r1, r3
  406a68:	442b      	add	r3, r5
  406a6a:	e001      	b.n	406a70 <__mcmp+0x1c>
  406a6c:	429d      	cmp	r5, r3
  406a6e:	d207      	bcs.n	406a80 <__mcmp+0x2c>
  406a70:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406a74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406a78:	4294      	cmp	r4, r2
  406a7a:	d0f7      	beq.n	406a6c <__mcmp+0x18>
  406a7c:	d302      	bcc.n	406a84 <__mcmp+0x30>
  406a7e:	2001      	movs	r0, #1
  406a80:	bc30      	pop	{r4, r5}
  406a82:	4770      	bx	lr
  406a84:	f04f 30ff 	mov.w	r0, #4294967295
  406a88:	e7fa      	b.n	406a80 <__mcmp+0x2c>
  406a8a:	bf00      	nop

00406a8c <__mdiff>:
  406a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a90:	690f      	ldr	r7, [r1, #16]
  406a92:	460e      	mov	r6, r1
  406a94:	6911      	ldr	r1, [r2, #16]
  406a96:	1a7f      	subs	r7, r7, r1
  406a98:	2f00      	cmp	r7, #0
  406a9a:	4690      	mov	r8, r2
  406a9c:	d117      	bne.n	406ace <__mdiff+0x42>
  406a9e:	0089      	lsls	r1, r1, #2
  406aa0:	f106 0514 	add.w	r5, r6, #20
  406aa4:	f102 0e14 	add.w	lr, r2, #20
  406aa8:	186b      	adds	r3, r5, r1
  406aaa:	4471      	add	r1, lr
  406aac:	e001      	b.n	406ab2 <__mdiff+0x26>
  406aae:	429d      	cmp	r5, r3
  406ab0:	d25c      	bcs.n	406b6c <__mdiff+0xe0>
  406ab2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406ab6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406aba:	42a2      	cmp	r2, r4
  406abc:	d0f7      	beq.n	406aae <__mdiff+0x22>
  406abe:	d25e      	bcs.n	406b7e <__mdiff+0xf2>
  406ac0:	4633      	mov	r3, r6
  406ac2:	462c      	mov	r4, r5
  406ac4:	4646      	mov	r6, r8
  406ac6:	4675      	mov	r5, lr
  406ac8:	4698      	mov	r8, r3
  406aca:	2701      	movs	r7, #1
  406acc:	e005      	b.n	406ada <__mdiff+0x4e>
  406ace:	db58      	blt.n	406b82 <__mdiff+0xf6>
  406ad0:	f106 0514 	add.w	r5, r6, #20
  406ad4:	f108 0414 	add.w	r4, r8, #20
  406ad8:	2700      	movs	r7, #0
  406ada:	6871      	ldr	r1, [r6, #4]
  406adc:	f7ff fdbc 	bl	406658 <_Balloc>
  406ae0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406ae4:	6936      	ldr	r6, [r6, #16]
  406ae6:	60c7      	str	r7, [r0, #12]
  406ae8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406aec:	46a6      	mov	lr, r4
  406aee:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406af2:	f100 0414 	add.w	r4, r0, #20
  406af6:	2300      	movs	r3, #0
  406af8:	f85e 1b04 	ldr.w	r1, [lr], #4
  406afc:	f855 8b04 	ldr.w	r8, [r5], #4
  406b00:	b28a      	uxth	r2, r1
  406b02:	fa13 f388 	uxtah	r3, r3, r8
  406b06:	0c09      	lsrs	r1, r1, #16
  406b08:	1a9a      	subs	r2, r3, r2
  406b0a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406b0e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406b12:	b292      	uxth	r2, r2
  406b14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406b18:	45f4      	cmp	ip, lr
  406b1a:	f844 2b04 	str.w	r2, [r4], #4
  406b1e:	ea4f 4323 	mov.w	r3, r3, asr #16
  406b22:	d8e9      	bhi.n	406af8 <__mdiff+0x6c>
  406b24:	42af      	cmp	r7, r5
  406b26:	d917      	bls.n	406b58 <__mdiff+0xcc>
  406b28:	46a4      	mov	ip, r4
  406b2a:	46ae      	mov	lr, r5
  406b2c:	f85e 2b04 	ldr.w	r2, [lr], #4
  406b30:	fa13 f382 	uxtah	r3, r3, r2
  406b34:	1419      	asrs	r1, r3, #16
  406b36:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406b3a:	b29b      	uxth	r3, r3
  406b3c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406b40:	4577      	cmp	r7, lr
  406b42:	f84c 2b04 	str.w	r2, [ip], #4
  406b46:	ea4f 4321 	mov.w	r3, r1, asr #16
  406b4a:	d8ef      	bhi.n	406b2c <__mdiff+0xa0>
  406b4c:	43ed      	mvns	r5, r5
  406b4e:	442f      	add	r7, r5
  406b50:	f027 0703 	bic.w	r7, r7, #3
  406b54:	3704      	adds	r7, #4
  406b56:	443c      	add	r4, r7
  406b58:	3c04      	subs	r4, #4
  406b5a:	b922      	cbnz	r2, 406b66 <__mdiff+0xda>
  406b5c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406b60:	3e01      	subs	r6, #1
  406b62:	2b00      	cmp	r3, #0
  406b64:	d0fa      	beq.n	406b5c <__mdiff+0xd0>
  406b66:	6106      	str	r6, [r0, #16]
  406b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b6c:	2100      	movs	r1, #0
  406b6e:	f7ff fd73 	bl	406658 <_Balloc>
  406b72:	2201      	movs	r2, #1
  406b74:	2300      	movs	r3, #0
  406b76:	6102      	str	r2, [r0, #16]
  406b78:	6143      	str	r3, [r0, #20]
  406b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b7e:	4674      	mov	r4, lr
  406b80:	e7ab      	b.n	406ada <__mdiff+0x4e>
  406b82:	4633      	mov	r3, r6
  406b84:	f106 0414 	add.w	r4, r6, #20
  406b88:	f102 0514 	add.w	r5, r2, #20
  406b8c:	4616      	mov	r6, r2
  406b8e:	2701      	movs	r7, #1
  406b90:	4698      	mov	r8, r3
  406b92:	e7a2      	b.n	406ada <__mdiff+0x4e>

00406b94 <__d2b>:
  406b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b98:	b082      	sub	sp, #8
  406b9a:	2101      	movs	r1, #1
  406b9c:	461c      	mov	r4, r3
  406b9e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406ba2:	4615      	mov	r5, r2
  406ba4:	9e08      	ldr	r6, [sp, #32]
  406ba6:	f7ff fd57 	bl	406658 <_Balloc>
  406baa:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406bae:	4680      	mov	r8, r0
  406bb0:	b10f      	cbz	r7, 406bb6 <__d2b+0x22>
  406bb2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406bb6:	9401      	str	r4, [sp, #4]
  406bb8:	b31d      	cbz	r5, 406c02 <__d2b+0x6e>
  406bba:	a802      	add	r0, sp, #8
  406bbc:	f840 5d08 	str.w	r5, [r0, #-8]!
  406bc0:	f7ff fdda 	bl	406778 <__lo0bits>
  406bc4:	2800      	cmp	r0, #0
  406bc6:	d134      	bne.n	406c32 <__d2b+0x9e>
  406bc8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406bcc:	f8c8 2014 	str.w	r2, [r8, #20]
  406bd0:	2b00      	cmp	r3, #0
  406bd2:	bf0c      	ite	eq
  406bd4:	2101      	moveq	r1, #1
  406bd6:	2102      	movne	r1, #2
  406bd8:	f8c8 3018 	str.w	r3, [r8, #24]
  406bdc:	f8c8 1010 	str.w	r1, [r8, #16]
  406be0:	b9df      	cbnz	r7, 406c1a <__d2b+0x86>
  406be2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406be6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406bea:	6030      	str	r0, [r6, #0]
  406bec:	6918      	ldr	r0, [r3, #16]
  406bee:	f7ff fda3 	bl	406738 <__hi0bits>
  406bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406bf4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406bf8:	6018      	str	r0, [r3, #0]
  406bfa:	4640      	mov	r0, r8
  406bfc:	b002      	add	sp, #8
  406bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406c02:	a801      	add	r0, sp, #4
  406c04:	f7ff fdb8 	bl	406778 <__lo0bits>
  406c08:	9b01      	ldr	r3, [sp, #4]
  406c0a:	f8c8 3014 	str.w	r3, [r8, #20]
  406c0e:	2101      	movs	r1, #1
  406c10:	3020      	adds	r0, #32
  406c12:	f8c8 1010 	str.w	r1, [r8, #16]
  406c16:	2f00      	cmp	r7, #0
  406c18:	d0e3      	beq.n	406be2 <__d2b+0x4e>
  406c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c1c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406c20:	4407      	add	r7, r0
  406c22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406c26:	6037      	str	r7, [r6, #0]
  406c28:	6018      	str	r0, [r3, #0]
  406c2a:	4640      	mov	r0, r8
  406c2c:	b002      	add	sp, #8
  406c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406c32:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406c36:	f1c0 0220 	rsb	r2, r0, #32
  406c3a:	fa03 f202 	lsl.w	r2, r3, r2
  406c3e:	430a      	orrs	r2, r1
  406c40:	40c3      	lsrs	r3, r0
  406c42:	9301      	str	r3, [sp, #4]
  406c44:	f8c8 2014 	str.w	r2, [r8, #20]
  406c48:	e7c2      	b.n	406bd0 <__d2b+0x3c>
  406c4a:	bf00      	nop

00406c4c <_sbrk_r>:
  406c4c:	b538      	push	{r3, r4, r5, lr}
  406c4e:	4c07      	ldr	r4, [pc, #28]	; (406c6c <_sbrk_r+0x20>)
  406c50:	2300      	movs	r3, #0
  406c52:	4605      	mov	r5, r0
  406c54:	4608      	mov	r0, r1
  406c56:	6023      	str	r3, [r4, #0]
  406c58:	f7fc fb1e 	bl	403298 <_sbrk>
  406c5c:	1c43      	adds	r3, r0, #1
  406c5e:	d000      	beq.n	406c62 <_sbrk_r+0x16>
  406c60:	bd38      	pop	{r3, r4, r5, pc}
  406c62:	6823      	ldr	r3, [r4, #0]
  406c64:	2b00      	cmp	r3, #0
  406c66:	d0fb      	beq.n	406c60 <_sbrk_r+0x14>
  406c68:	602b      	str	r3, [r5, #0]
  406c6a:	bd38      	pop	{r3, r4, r5, pc}
  406c6c:	20000e7c 	.word	0x20000e7c

00406c70 <__ssprint_r>:
  406c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c74:	6893      	ldr	r3, [r2, #8]
  406c76:	b083      	sub	sp, #12
  406c78:	4690      	mov	r8, r2
  406c7a:	2b00      	cmp	r3, #0
  406c7c:	d070      	beq.n	406d60 <__ssprint_r+0xf0>
  406c7e:	4682      	mov	sl, r0
  406c80:	460c      	mov	r4, r1
  406c82:	6817      	ldr	r7, [r2, #0]
  406c84:	688d      	ldr	r5, [r1, #8]
  406c86:	6808      	ldr	r0, [r1, #0]
  406c88:	e042      	b.n	406d10 <__ssprint_r+0xa0>
  406c8a:	89a3      	ldrh	r3, [r4, #12]
  406c8c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406c90:	d02e      	beq.n	406cf0 <__ssprint_r+0x80>
  406c92:	6965      	ldr	r5, [r4, #20]
  406c94:	6921      	ldr	r1, [r4, #16]
  406c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406c9a:	eba0 0b01 	sub.w	fp, r0, r1
  406c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  406ca2:	f10b 0001 	add.w	r0, fp, #1
  406ca6:	106d      	asrs	r5, r5, #1
  406ca8:	4430      	add	r0, r6
  406caa:	42a8      	cmp	r0, r5
  406cac:	462a      	mov	r2, r5
  406cae:	bf84      	itt	hi
  406cb0:	4605      	movhi	r5, r0
  406cb2:	462a      	movhi	r2, r5
  406cb4:	055b      	lsls	r3, r3, #21
  406cb6:	d538      	bpl.n	406d2a <__ssprint_r+0xba>
  406cb8:	4611      	mov	r1, r2
  406cba:	4650      	mov	r0, sl
  406cbc:	f7ff f9aa 	bl	406014 <_malloc_r>
  406cc0:	2800      	cmp	r0, #0
  406cc2:	d03c      	beq.n	406d3e <__ssprint_r+0xce>
  406cc4:	465a      	mov	r2, fp
  406cc6:	6921      	ldr	r1, [r4, #16]
  406cc8:	9001      	str	r0, [sp, #4]
  406cca:	f7fc fc03 	bl	4034d4 <memcpy>
  406cce:	89a2      	ldrh	r2, [r4, #12]
  406cd0:	9b01      	ldr	r3, [sp, #4]
  406cd2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406cd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406cda:	81a2      	strh	r2, [r4, #12]
  406cdc:	eba5 020b 	sub.w	r2, r5, fp
  406ce0:	eb03 000b 	add.w	r0, r3, fp
  406ce4:	6165      	str	r5, [r4, #20]
  406ce6:	6123      	str	r3, [r4, #16]
  406ce8:	6020      	str	r0, [r4, #0]
  406cea:	60a2      	str	r2, [r4, #8]
  406cec:	4635      	mov	r5, r6
  406cee:	46b3      	mov	fp, r6
  406cf0:	465a      	mov	r2, fp
  406cf2:	4649      	mov	r1, r9
  406cf4:	f000 fa10 	bl	407118 <memmove>
  406cf8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  406cfc:	68a2      	ldr	r2, [r4, #8]
  406cfe:	6820      	ldr	r0, [r4, #0]
  406d00:	1b55      	subs	r5, r2, r5
  406d02:	4458      	add	r0, fp
  406d04:	1b9e      	subs	r6, r3, r6
  406d06:	60a5      	str	r5, [r4, #8]
  406d08:	6020      	str	r0, [r4, #0]
  406d0a:	f8c8 6008 	str.w	r6, [r8, #8]
  406d0e:	b33e      	cbz	r6, 406d60 <__ssprint_r+0xf0>
  406d10:	687e      	ldr	r6, [r7, #4]
  406d12:	463b      	mov	r3, r7
  406d14:	3708      	adds	r7, #8
  406d16:	2e00      	cmp	r6, #0
  406d18:	d0fa      	beq.n	406d10 <__ssprint_r+0xa0>
  406d1a:	42ae      	cmp	r6, r5
  406d1c:	f8d3 9000 	ldr.w	r9, [r3]
  406d20:	46ab      	mov	fp, r5
  406d22:	d2b2      	bcs.n	406c8a <__ssprint_r+0x1a>
  406d24:	4635      	mov	r5, r6
  406d26:	46b3      	mov	fp, r6
  406d28:	e7e2      	b.n	406cf0 <__ssprint_r+0x80>
  406d2a:	4650      	mov	r0, sl
  406d2c:	f000 fa58 	bl	4071e0 <_realloc_r>
  406d30:	4603      	mov	r3, r0
  406d32:	2800      	cmp	r0, #0
  406d34:	d1d2      	bne.n	406cdc <__ssprint_r+0x6c>
  406d36:	6921      	ldr	r1, [r4, #16]
  406d38:	4650      	mov	r0, sl
  406d3a:	f000 f907 	bl	406f4c <_free_r>
  406d3e:	230c      	movs	r3, #12
  406d40:	f8ca 3000 	str.w	r3, [sl]
  406d44:	89a3      	ldrh	r3, [r4, #12]
  406d46:	2200      	movs	r2, #0
  406d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406d4c:	f04f 30ff 	mov.w	r0, #4294967295
  406d50:	81a3      	strh	r3, [r4, #12]
  406d52:	f8c8 2008 	str.w	r2, [r8, #8]
  406d56:	f8c8 2004 	str.w	r2, [r8, #4]
  406d5a:	b003      	add	sp, #12
  406d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d60:	2000      	movs	r0, #0
  406d62:	f8c8 0004 	str.w	r0, [r8, #4]
  406d66:	b003      	add	sp, #12
  406d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406d6c <__ascii_wctomb>:
  406d6c:	b121      	cbz	r1, 406d78 <__ascii_wctomb+0xc>
  406d6e:	2aff      	cmp	r2, #255	; 0xff
  406d70:	d804      	bhi.n	406d7c <__ascii_wctomb+0x10>
  406d72:	700a      	strb	r2, [r1, #0]
  406d74:	2001      	movs	r0, #1
  406d76:	4770      	bx	lr
  406d78:	4608      	mov	r0, r1
  406d7a:	4770      	bx	lr
  406d7c:	238a      	movs	r3, #138	; 0x8a
  406d7e:	6003      	str	r3, [r0, #0]
  406d80:	f04f 30ff 	mov.w	r0, #4294967295
  406d84:	4770      	bx	lr
  406d86:	bf00      	nop

00406d88 <__register_exitproc>:
  406d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406d8c:	4d2c      	ldr	r5, [pc, #176]	; (406e40 <__register_exitproc+0xb8>)
  406d8e:	4606      	mov	r6, r0
  406d90:	6828      	ldr	r0, [r5, #0]
  406d92:	4698      	mov	r8, r3
  406d94:	460f      	mov	r7, r1
  406d96:	4691      	mov	r9, r2
  406d98:	f7ff f938 	bl	40600c <__retarget_lock_acquire_recursive>
  406d9c:	4b29      	ldr	r3, [pc, #164]	; (406e44 <__register_exitproc+0xbc>)
  406d9e:	681c      	ldr	r4, [r3, #0]
  406da0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406da4:	2b00      	cmp	r3, #0
  406da6:	d03e      	beq.n	406e26 <__register_exitproc+0x9e>
  406da8:	685a      	ldr	r2, [r3, #4]
  406daa:	2a1f      	cmp	r2, #31
  406dac:	dc1c      	bgt.n	406de8 <__register_exitproc+0x60>
  406dae:	f102 0e01 	add.w	lr, r2, #1
  406db2:	b176      	cbz	r6, 406dd2 <__register_exitproc+0x4a>
  406db4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406db8:	2401      	movs	r4, #1
  406dba:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406dbe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406dc2:	4094      	lsls	r4, r2
  406dc4:	4320      	orrs	r0, r4
  406dc6:	2e02      	cmp	r6, #2
  406dc8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406dcc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406dd0:	d023      	beq.n	406e1a <__register_exitproc+0x92>
  406dd2:	3202      	adds	r2, #2
  406dd4:	f8c3 e004 	str.w	lr, [r3, #4]
  406dd8:	6828      	ldr	r0, [r5, #0]
  406dda:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406dde:	f7ff f917 	bl	406010 <__retarget_lock_release_recursive>
  406de2:	2000      	movs	r0, #0
  406de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406de8:	4b17      	ldr	r3, [pc, #92]	; (406e48 <__register_exitproc+0xc0>)
  406dea:	b30b      	cbz	r3, 406e30 <__register_exitproc+0xa8>
  406dec:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406df0:	f3af 8000 	nop.w
  406df4:	4603      	mov	r3, r0
  406df6:	b1d8      	cbz	r0, 406e30 <__register_exitproc+0xa8>
  406df8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406dfc:	6002      	str	r2, [r0, #0]
  406dfe:	2100      	movs	r1, #0
  406e00:	6041      	str	r1, [r0, #4]
  406e02:	460a      	mov	r2, r1
  406e04:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406e08:	f04f 0e01 	mov.w	lr, #1
  406e0c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406e10:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406e14:	2e00      	cmp	r6, #0
  406e16:	d0dc      	beq.n	406dd2 <__register_exitproc+0x4a>
  406e18:	e7cc      	b.n	406db4 <__register_exitproc+0x2c>
  406e1a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406e1e:	430c      	orrs	r4, r1
  406e20:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406e24:	e7d5      	b.n	406dd2 <__register_exitproc+0x4a>
  406e26:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406e2a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406e2e:	e7bb      	b.n	406da8 <__register_exitproc+0x20>
  406e30:	6828      	ldr	r0, [r5, #0]
  406e32:	f7ff f8ed 	bl	406010 <__retarget_lock_release_recursive>
  406e36:	f04f 30ff 	mov.w	r0, #4294967295
  406e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406e3e:	bf00      	nop
  406e40:	20000450 	.word	0x20000450
  406e44:	004085ac 	.word	0x004085ac
  406e48:	00000000 	.word	0x00000000

00406e4c <_calloc_r>:
  406e4c:	b510      	push	{r4, lr}
  406e4e:	fb02 f101 	mul.w	r1, r2, r1
  406e52:	f7ff f8df 	bl	406014 <_malloc_r>
  406e56:	4604      	mov	r4, r0
  406e58:	b1d8      	cbz	r0, 406e92 <_calloc_r+0x46>
  406e5a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406e5e:	f022 0203 	bic.w	r2, r2, #3
  406e62:	3a04      	subs	r2, #4
  406e64:	2a24      	cmp	r2, #36	; 0x24
  406e66:	d818      	bhi.n	406e9a <_calloc_r+0x4e>
  406e68:	2a13      	cmp	r2, #19
  406e6a:	d914      	bls.n	406e96 <_calloc_r+0x4a>
  406e6c:	2300      	movs	r3, #0
  406e6e:	2a1b      	cmp	r2, #27
  406e70:	6003      	str	r3, [r0, #0]
  406e72:	6043      	str	r3, [r0, #4]
  406e74:	d916      	bls.n	406ea4 <_calloc_r+0x58>
  406e76:	2a24      	cmp	r2, #36	; 0x24
  406e78:	6083      	str	r3, [r0, #8]
  406e7a:	60c3      	str	r3, [r0, #12]
  406e7c:	bf11      	iteee	ne
  406e7e:	f100 0210 	addne.w	r2, r0, #16
  406e82:	6103      	streq	r3, [r0, #16]
  406e84:	6143      	streq	r3, [r0, #20]
  406e86:	f100 0218 	addeq.w	r2, r0, #24
  406e8a:	2300      	movs	r3, #0
  406e8c:	6013      	str	r3, [r2, #0]
  406e8e:	6053      	str	r3, [r2, #4]
  406e90:	6093      	str	r3, [r2, #8]
  406e92:	4620      	mov	r0, r4
  406e94:	bd10      	pop	{r4, pc}
  406e96:	4602      	mov	r2, r0
  406e98:	e7f7      	b.n	406e8a <_calloc_r+0x3e>
  406e9a:	2100      	movs	r1, #0
  406e9c:	f7fc fbb4 	bl	403608 <memset>
  406ea0:	4620      	mov	r0, r4
  406ea2:	bd10      	pop	{r4, pc}
  406ea4:	f100 0208 	add.w	r2, r0, #8
  406ea8:	e7ef      	b.n	406e8a <_calloc_r+0x3e>
  406eaa:	bf00      	nop

00406eac <_malloc_trim_r>:
  406eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406eae:	4f24      	ldr	r7, [pc, #144]	; (406f40 <_malloc_trim_r+0x94>)
  406eb0:	460c      	mov	r4, r1
  406eb2:	4606      	mov	r6, r0
  406eb4:	f7ff fbc4 	bl	406640 <__malloc_lock>
  406eb8:	68bb      	ldr	r3, [r7, #8]
  406eba:	685d      	ldr	r5, [r3, #4]
  406ebc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406ec0:	310f      	adds	r1, #15
  406ec2:	f025 0503 	bic.w	r5, r5, #3
  406ec6:	4429      	add	r1, r5
  406ec8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406ecc:	f021 010f 	bic.w	r1, r1, #15
  406ed0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406ed4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406ed8:	db07      	blt.n	406eea <_malloc_trim_r+0x3e>
  406eda:	2100      	movs	r1, #0
  406edc:	4630      	mov	r0, r6
  406ede:	f7ff feb5 	bl	406c4c <_sbrk_r>
  406ee2:	68bb      	ldr	r3, [r7, #8]
  406ee4:	442b      	add	r3, r5
  406ee6:	4298      	cmp	r0, r3
  406ee8:	d004      	beq.n	406ef4 <_malloc_trim_r+0x48>
  406eea:	4630      	mov	r0, r6
  406eec:	f7ff fbae 	bl	40664c <__malloc_unlock>
  406ef0:	2000      	movs	r0, #0
  406ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ef4:	4261      	negs	r1, r4
  406ef6:	4630      	mov	r0, r6
  406ef8:	f7ff fea8 	bl	406c4c <_sbrk_r>
  406efc:	3001      	adds	r0, #1
  406efe:	d00d      	beq.n	406f1c <_malloc_trim_r+0x70>
  406f00:	4b10      	ldr	r3, [pc, #64]	; (406f44 <_malloc_trim_r+0x98>)
  406f02:	68ba      	ldr	r2, [r7, #8]
  406f04:	6819      	ldr	r1, [r3, #0]
  406f06:	1b2d      	subs	r5, r5, r4
  406f08:	f045 0501 	orr.w	r5, r5, #1
  406f0c:	4630      	mov	r0, r6
  406f0e:	1b09      	subs	r1, r1, r4
  406f10:	6055      	str	r5, [r2, #4]
  406f12:	6019      	str	r1, [r3, #0]
  406f14:	f7ff fb9a 	bl	40664c <__malloc_unlock>
  406f18:	2001      	movs	r0, #1
  406f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406f1c:	2100      	movs	r1, #0
  406f1e:	4630      	mov	r0, r6
  406f20:	f7ff fe94 	bl	406c4c <_sbrk_r>
  406f24:	68ba      	ldr	r2, [r7, #8]
  406f26:	1a83      	subs	r3, r0, r2
  406f28:	2b0f      	cmp	r3, #15
  406f2a:	ddde      	ble.n	406eea <_malloc_trim_r+0x3e>
  406f2c:	4c06      	ldr	r4, [pc, #24]	; (406f48 <_malloc_trim_r+0x9c>)
  406f2e:	4905      	ldr	r1, [pc, #20]	; (406f44 <_malloc_trim_r+0x98>)
  406f30:	6824      	ldr	r4, [r4, #0]
  406f32:	f043 0301 	orr.w	r3, r3, #1
  406f36:	1b00      	subs	r0, r0, r4
  406f38:	6053      	str	r3, [r2, #4]
  406f3a:	6008      	str	r0, [r1, #0]
  406f3c:	e7d5      	b.n	406eea <_malloc_trim_r+0x3e>
  406f3e:	bf00      	nop
  406f40:	200005c0 	.word	0x200005c0
  406f44:	20000dac 	.word	0x20000dac
  406f48:	200009c8 	.word	0x200009c8

00406f4c <_free_r>:
  406f4c:	2900      	cmp	r1, #0
  406f4e:	d044      	beq.n	406fda <_free_r+0x8e>
  406f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f54:	460d      	mov	r5, r1
  406f56:	4680      	mov	r8, r0
  406f58:	f7ff fb72 	bl	406640 <__malloc_lock>
  406f5c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406f60:	4969      	ldr	r1, [pc, #420]	; (407108 <_free_r+0x1bc>)
  406f62:	f027 0301 	bic.w	r3, r7, #1
  406f66:	f1a5 0408 	sub.w	r4, r5, #8
  406f6a:	18e2      	adds	r2, r4, r3
  406f6c:	688e      	ldr	r6, [r1, #8]
  406f6e:	6850      	ldr	r0, [r2, #4]
  406f70:	42b2      	cmp	r2, r6
  406f72:	f020 0003 	bic.w	r0, r0, #3
  406f76:	d05e      	beq.n	407036 <_free_r+0xea>
  406f78:	07fe      	lsls	r6, r7, #31
  406f7a:	6050      	str	r0, [r2, #4]
  406f7c:	d40b      	bmi.n	406f96 <_free_r+0x4a>
  406f7e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406f82:	1be4      	subs	r4, r4, r7
  406f84:	f101 0e08 	add.w	lr, r1, #8
  406f88:	68a5      	ldr	r5, [r4, #8]
  406f8a:	4575      	cmp	r5, lr
  406f8c:	443b      	add	r3, r7
  406f8e:	d06d      	beq.n	40706c <_free_r+0x120>
  406f90:	68e7      	ldr	r7, [r4, #12]
  406f92:	60ef      	str	r7, [r5, #12]
  406f94:	60bd      	str	r5, [r7, #8]
  406f96:	1815      	adds	r5, r2, r0
  406f98:	686d      	ldr	r5, [r5, #4]
  406f9a:	07ed      	lsls	r5, r5, #31
  406f9c:	d53e      	bpl.n	40701c <_free_r+0xd0>
  406f9e:	f043 0201 	orr.w	r2, r3, #1
  406fa2:	6062      	str	r2, [r4, #4]
  406fa4:	50e3      	str	r3, [r4, r3]
  406fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406faa:	d217      	bcs.n	406fdc <_free_r+0x90>
  406fac:	08db      	lsrs	r3, r3, #3
  406fae:	1c58      	adds	r0, r3, #1
  406fb0:	109a      	asrs	r2, r3, #2
  406fb2:	684d      	ldr	r5, [r1, #4]
  406fb4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406fb8:	60a7      	str	r7, [r4, #8]
  406fba:	2301      	movs	r3, #1
  406fbc:	4093      	lsls	r3, r2
  406fbe:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406fc2:	432b      	orrs	r3, r5
  406fc4:	3a08      	subs	r2, #8
  406fc6:	60e2      	str	r2, [r4, #12]
  406fc8:	604b      	str	r3, [r1, #4]
  406fca:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406fce:	60fc      	str	r4, [r7, #12]
  406fd0:	4640      	mov	r0, r8
  406fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406fd6:	f7ff bb39 	b.w	40664c <__malloc_unlock>
  406fda:	4770      	bx	lr
  406fdc:	0a5a      	lsrs	r2, r3, #9
  406fde:	2a04      	cmp	r2, #4
  406fe0:	d852      	bhi.n	407088 <_free_r+0x13c>
  406fe2:	099a      	lsrs	r2, r3, #6
  406fe4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406fe8:	00ff      	lsls	r7, r7, #3
  406fea:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406fee:	19c8      	adds	r0, r1, r7
  406ff0:	59ca      	ldr	r2, [r1, r7]
  406ff2:	3808      	subs	r0, #8
  406ff4:	4290      	cmp	r0, r2
  406ff6:	d04f      	beq.n	407098 <_free_r+0x14c>
  406ff8:	6851      	ldr	r1, [r2, #4]
  406ffa:	f021 0103 	bic.w	r1, r1, #3
  406ffe:	428b      	cmp	r3, r1
  407000:	d232      	bcs.n	407068 <_free_r+0x11c>
  407002:	6892      	ldr	r2, [r2, #8]
  407004:	4290      	cmp	r0, r2
  407006:	d1f7      	bne.n	406ff8 <_free_r+0xac>
  407008:	68c3      	ldr	r3, [r0, #12]
  40700a:	60a0      	str	r0, [r4, #8]
  40700c:	60e3      	str	r3, [r4, #12]
  40700e:	609c      	str	r4, [r3, #8]
  407010:	60c4      	str	r4, [r0, #12]
  407012:	4640      	mov	r0, r8
  407014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407018:	f7ff bb18 	b.w	40664c <__malloc_unlock>
  40701c:	6895      	ldr	r5, [r2, #8]
  40701e:	4f3b      	ldr	r7, [pc, #236]	; (40710c <_free_r+0x1c0>)
  407020:	42bd      	cmp	r5, r7
  407022:	4403      	add	r3, r0
  407024:	d040      	beq.n	4070a8 <_free_r+0x15c>
  407026:	68d0      	ldr	r0, [r2, #12]
  407028:	60e8      	str	r0, [r5, #12]
  40702a:	f043 0201 	orr.w	r2, r3, #1
  40702e:	6085      	str	r5, [r0, #8]
  407030:	6062      	str	r2, [r4, #4]
  407032:	50e3      	str	r3, [r4, r3]
  407034:	e7b7      	b.n	406fa6 <_free_r+0x5a>
  407036:	07ff      	lsls	r7, r7, #31
  407038:	4403      	add	r3, r0
  40703a:	d407      	bmi.n	40704c <_free_r+0x100>
  40703c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407040:	1aa4      	subs	r4, r4, r2
  407042:	4413      	add	r3, r2
  407044:	68a0      	ldr	r0, [r4, #8]
  407046:	68e2      	ldr	r2, [r4, #12]
  407048:	60c2      	str	r2, [r0, #12]
  40704a:	6090      	str	r0, [r2, #8]
  40704c:	4a30      	ldr	r2, [pc, #192]	; (407110 <_free_r+0x1c4>)
  40704e:	6812      	ldr	r2, [r2, #0]
  407050:	f043 0001 	orr.w	r0, r3, #1
  407054:	4293      	cmp	r3, r2
  407056:	6060      	str	r0, [r4, #4]
  407058:	608c      	str	r4, [r1, #8]
  40705a:	d3b9      	bcc.n	406fd0 <_free_r+0x84>
  40705c:	4b2d      	ldr	r3, [pc, #180]	; (407114 <_free_r+0x1c8>)
  40705e:	4640      	mov	r0, r8
  407060:	6819      	ldr	r1, [r3, #0]
  407062:	f7ff ff23 	bl	406eac <_malloc_trim_r>
  407066:	e7b3      	b.n	406fd0 <_free_r+0x84>
  407068:	4610      	mov	r0, r2
  40706a:	e7cd      	b.n	407008 <_free_r+0xbc>
  40706c:	1811      	adds	r1, r2, r0
  40706e:	6849      	ldr	r1, [r1, #4]
  407070:	07c9      	lsls	r1, r1, #31
  407072:	d444      	bmi.n	4070fe <_free_r+0x1b2>
  407074:	6891      	ldr	r1, [r2, #8]
  407076:	68d2      	ldr	r2, [r2, #12]
  407078:	60ca      	str	r2, [r1, #12]
  40707a:	4403      	add	r3, r0
  40707c:	f043 0001 	orr.w	r0, r3, #1
  407080:	6091      	str	r1, [r2, #8]
  407082:	6060      	str	r0, [r4, #4]
  407084:	50e3      	str	r3, [r4, r3]
  407086:	e7a3      	b.n	406fd0 <_free_r+0x84>
  407088:	2a14      	cmp	r2, #20
  40708a:	d816      	bhi.n	4070ba <_free_r+0x16e>
  40708c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407090:	00ff      	lsls	r7, r7, #3
  407092:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407096:	e7aa      	b.n	406fee <_free_r+0xa2>
  407098:	10aa      	asrs	r2, r5, #2
  40709a:	2301      	movs	r3, #1
  40709c:	684d      	ldr	r5, [r1, #4]
  40709e:	4093      	lsls	r3, r2
  4070a0:	432b      	orrs	r3, r5
  4070a2:	604b      	str	r3, [r1, #4]
  4070a4:	4603      	mov	r3, r0
  4070a6:	e7b0      	b.n	40700a <_free_r+0xbe>
  4070a8:	f043 0201 	orr.w	r2, r3, #1
  4070ac:	614c      	str	r4, [r1, #20]
  4070ae:	610c      	str	r4, [r1, #16]
  4070b0:	60e5      	str	r5, [r4, #12]
  4070b2:	60a5      	str	r5, [r4, #8]
  4070b4:	6062      	str	r2, [r4, #4]
  4070b6:	50e3      	str	r3, [r4, r3]
  4070b8:	e78a      	b.n	406fd0 <_free_r+0x84>
  4070ba:	2a54      	cmp	r2, #84	; 0x54
  4070bc:	d806      	bhi.n	4070cc <_free_r+0x180>
  4070be:	0b1a      	lsrs	r2, r3, #12
  4070c0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4070c4:	00ff      	lsls	r7, r7, #3
  4070c6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4070ca:	e790      	b.n	406fee <_free_r+0xa2>
  4070cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4070d0:	d806      	bhi.n	4070e0 <_free_r+0x194>
  4070d2:	0bda      	lsrs	r2, r3, #15
  4070d4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4070d8:	00ff      	lsls	r7, r7, #3
  4070da:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4070de:	e786      	b.n	406fee <_free_r+0xa2>
  4070e0:	f240 5054 	movw	r0, #1364	; 0x554
  4070e4:	4282      	cmp	r2, r0
  4070e6:	d806      	bhi.n	4070f6 <_free_r+0x1aa>
  4070e8:	0c9a      	lsrs	r2, r3, #18
  4070ea:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4070ee:	00ff      	lsls	r7, r7, #3
  4070f0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4070f4:	e77b      	b.n	406fee <_free_r+0xa2>
  4070f6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4070fa:	257e      	movs	r5, #126	; 0x7e
  4070fc:	e777      	b.n	406fee <_free_r+0xa2>
  4070fe:	f043 0101 	orr.w	r1, r3, #1
  407102:	6061      	str	r1, [r4, #4]
  407104:	6013      	str	r3, [r2, #0]
  407106:	e763      	b.n	406fd0 <_free_r+0x84>
  407108:	200005c0 	.word	0x200005c0
  40710c:	200005c8 	.word	0x200005c8
  407110:	200009cc 	.word	0x200009cc
  407114:	20000ddc 	.word	0x20000ddc

00407118 <memmove>:
  407118:	4288      	cmp	r0, r1
  40711a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40711c:	d90d      	bls.n	40713a <memmove+0x22>
  40711e:	188b      	adds	r3, r1, r2
  407120:	4298      	cmp	r0, r3
  407122:	d20a      	bcs.n	40713a <memmove+0x22>
  407124:	1884      	adds	r4, r0, r2
  407126:	2a00      	cmp	r2, #0
  407128:	d051      	beq.n	4071ce <memmove+0xb6>
  40712a:	4622      	mov	r2, r4
  40712c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407130:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407134:	4299      	cmp	r1, r3
  407136:	d1f9      	bne.n	40712c <memmove+0x14>
  407138:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40713a:	2a0f      	cmp	r2, #15
  40713c:	d948      	bls.n	4071d0 <memmove+0xb8>
  40713e:	ea41 0300 	orr.w	r3, r1, r0
  407142:	079b      	lsls	r3, r3, #30
  407144:	d146      	bne.n	4071d4 <memmove+0xbc>
  407146:	f100 0410 	add.w	r4, r0, #16
  40714a:	f101 0310 	add.w	r3, r1, #16
  40714e:	4615      	mov	r5, r2
  407150:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407154:	f844 6c10 	str.w	r6, [r4, #-16]
  407158:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40715c:	f844 6c0c 	str.w	r6, [r4, #-12]
  407160:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407164:	f844 6c08 	str.w	r6, [r4, #-8]
  407168:	3d10      	subs	r5, #16
  40716a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40716e:	f844 6c04 	str.w	r6, [r4, #-4]
  407172:	2d0f      	cmp	r5, #15
  407174:	f103 0310 	add.w	r3, r3, #16
  407178:	f104 0410 	add.w	r4, r4, #16
  40717c:	d8e8      	bhi.n	407150 <memmove+0x38>
  40717e:	f1a2 0310 	sub.w	r3, r2, #16
  407182:	f023 030f 	bic.w	r3, r3, #15
  407186:	f002 0e0f 	and.w	lr, r2, #15
  40718a:	3310      	adds	r3, #16
  40718c:	f1be 0f03 	cmp.w	lr, #3
  407190:	4419      	add	r1, r3
  407192:	4403      	add	r3, r0
  407194:	d921      	bls.n	4071da <memmove+0xc2>
  407196:	1f1e      	subs	r6, r3, #4
  407198:	460d      	mov	r5, r1
  40719a:	4674      	mov	r4, lr
  40719c:	3c04      	subs	r4, #4
  40719e:	f855 7b04 	ldr.w	r7, [r5], #4
  4071a2:	f846 7f04 	str.w	r7, [r6, #4]!
  4071a6:	2c03      	cmp	r4, #3
  4071a8:	d8f8      	bhi.n	40719c <memmove+0x84>
  4071aa:	f1ae 0404 	sub.w	r4, lr, #4
  4071ae:	f024 0403 	bic.w	r4, r4, #3
  4071b2:	3404      	adds	r4, #4
  4071b4:	4421      	add	r1, r4
  4071b6:	4423      	add	r3, r4
  4071b8:	f002 0203 	and.w	r2, r2, #3
  4071bc:	b162      	cbz	r2, 4071d8 <memmove+0xc0>
  4071be:	3b01      	subs	r3, #1
  4071c0:	440a      	add	r2, r1
  4071c2:	f811 4b01 	ldrb.w	r4, [r1], #1
  4071c6:	f803 4f01 	strb.w	r4, [r3, #1]!
  4071ca:	428a      	cmp	r2, r1
  4071cc:	d1f9      	bne.n	4071c2 <memmove+0xaa>
  4071ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4071d0:	4603      	mov	r3, r0
  4071d2:	e7f3      	b.n	4071bc <memmove+0xa4>
  4071d4:	4603      	mov	r3, r0
  4071d6:	e7f2      	b.n	4071be <memmove+0xa6>
  4071d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4071da:	4672      	mov	r2, lr
  4071dc:	e7ee      	b.n	4071bc <memmove+0xa4>
  4071de:	bf00      	nop

004071e0 <_realloc_r>:
  4071e0:	2900      	cmp	r1, #0
  4071e2:	f000 8095 	beq.w	407310 <_realloc_r+0x130>
  4071e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4071ea:	460d      	mov	r5, r1
  4071ec:	4616      	mov	r6, r2
  4071ee:	b083      	sub	sp, #12
  4071f0:	4680      	mov	r8, r0
  4071f2:	f106 070b 	add.w	r7, r6, #11
  4071f6:	f7ff fa23 	bl	406640 <__malloc_lock>
  4071fa:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4071fe:	2f16      	cmp	r7, #22
  407200:	f02e 0403 	bic.w	r4, lr, #3
  407204:	f1a5 0908 	sub.w	r9, r5, #8
  407208:	d83c      	bhi.n	407284 <_realloc_r+0xa4>
  40720a:	2210      	movs	r2, #16
  40720c:	4617      	mov	r7, r2
  40720e:	42be      	cmp	r6, r7
  407210:	d83d      	bhi.n	40728e <_realloc_r+0xae>
  407212:	4294      	cmp	r4, r2
  407214:	da43      	bge.n	40729e <_realloc_r+0xbe>
  407216:	4bc4      	ldr	r3, [pc, #784]	; (407528 <_realloc_r+0x348>)
  407218:	6899      	ldr	r1, [r3, #8]
  40721a:	eb09 0004 	add.w	r0, r9, r4
  40721e:	4288      	cmp	r0, r1
  407220:	f000 80b4 	beq.w	40738c <_realloc_r+0x1ac>
  407224:	6843      	ldr	r3, [r0, #4]
  407226:	f023 0101 	bic.w	r1, r3, #1
  40722a:	4401      	add	r1, r0
  40722c:	6849      	ldr	r1, [r1, #4]
  40722e:	07c9      	lsls	r1, r1, #31
  407230:	d54c      	bpl.n	4072cc <_realloc_r+0xec>
  407232:	f01e 0f01 	tst.w	lr, #1
  407236:	f000 809b 	beq.w	407370 <_realloc_r+0x190>
  40723a:	4631      	mov	r1, r6
  40723c:	4640      	mov	r0, r8
  40723e:	f7fe fee9 	bl	406014 <_malloc_r>
  407242:	4606      	mov	r6, r0
  407244:	2800      	cmp	r0, #0
  407246:	d03a      	beq.n	4072be <_realloc_r+0xde>
  407248:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40724c:	f023 0301 	bic.w	r3, r3, #1
  407250:	444b      	add	r3, r9
  407252:	f1a0 0208 	sub.w	r2, r0, #8
  407256:	429a      	cmp	r2, r3
  407258:	f000 8121 	beq.w	40749e <_realloc_r+0x2be>
  40725c:	1f22      	subs	r2, r4, #4
  40725e:	2a24      	cmp	r2, #36	; 0x24
  407260:	f200 8107 	bhi.w	407472 <_realloc_r+0x292>
  407264:	2a13      	cmp	r2, #19
  407266:	f200 80db 	bhi.w	407420 <_realloc_r+0x240>
  40726a:	4603      	mov	r3, r0
  40726c:	462a      	mov	r2, r5
  40726e:	6811      	ldr	r1, [r2, #0]
  407270:	6019      	str	r1, [r3, #0]
  407272:	6851      	ldr	r1, [r2, #4]
  407274:	6059      	str	r1, [r3, #4]
  407276:	6892      	ldr	r2, [r2, #8]
  407278:	609a      	str	r2, [r3, #8]
  40727a:	4629      	mov	r1, r5
  40727c:	4640      	mov	r0, r8
  40727e:	f7ff fe65 	bl	406f4c <_free_r>
  407282:	e01c      	b.n	4072be <_realloc_r+0xde>
  407284:	f027 0707 	bic.w	r7, r7, #7
  407288:	2f00      	cmp	r7, #0
  40728a:	463a      	mov	r2, r7
  40728c:	dabf      	bge.n	40720e <_realloc_r+0x2e>
  40728e:	2600      	movs	r6, #0
  407290:	230c      	movs	r3, #12
  407292:	4630      	mov	r0, r6
  407294:	f8c8 3000 	str.w	r3, [r8]
  407298:	b003      	add	sp, #12
  40729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40729e:	462e      	mov	r6, r5
  4072a0:	1be3      	subs	r3, r4, r7
  4072a2:	2b0f      	cmp	r3, #15
  4072a4:	d81e      	bhi.n	4072e4 <_realloc_r+0x104>
  4072a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4072aa:	f003 0301 	and.w	r3, r3, #1
  4072ae:	4323      	orrs	r3, r4
  4072b0:	444c      	add	r4, r9
  4072b2:	f8c9 3004 	str.w	r3, [r9, #4]
  4072b6:	6863      	ldr	r3, [r4, #4]
  4072b8:	f043 0301 	orr.w	r3, r3, #1
  4072bc:	6063      	str	r3, [r4, #4]
  4072be:	4640      	mov	r0, r8
  4072c0:	f7ff f9c4 	bl	40664c <__malloc_unlock>
  4072c4:	4630      	mov	r0, r6
  4072c6:	b003      	add	sp, #12
  4072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4072cc:	f023 0303 	bic.w	r3, r3, #3
  4072d0:	18e1      	adds	r1, r4, r3
  4072d2:	4291      	cmp	r1, r2
  4072d4:	db1f      	blt.n	407316 <_realloc_r+0x136>
  4072d6:	68c3      	ldr	r3, [r0, #12]
  4072d8:	6882      	ldr	r2, [r0, #8]
  4072da:	462e      	mov	r6, r5
  4072dc:	60d3      	str	r3, [r2, #12]
  4072de:	460c      	mov	r4, r1
  4072e0:	609a      	str	r2, [r3, #8]
  4072e2:	e7dd      	b.n	4072a0 <_realloc_r+0xc0>
  4072e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4072e8:	eb09 0107 	add.w	r1, r9, r7
  4072ec:	f002 0201 	and.w	r2, r2, #1
  4072f0:	444c      	add	r4, r9
  4072f2:	f043 0301 	orr.w	r3, r3, #1
  4072f6:	4317      	orrs	r7, r2
  4072f8:	f8c9 7004 	str.w	r7, [r9, #4]
  4072fc:	604b      	str	r3, [r1, #4]
  4072fe:	6863      	ldr	r3, [r4, #4]
  407300:	f043 0301 	orr.w	r3, r3, #1
  407304:	3108      	adds	r1, #8
  407306:	6063      	str	r3, [r4, #4]
  407308:	4640      	mov	r0, r8
  40730a:	f7ff fe1f 	bl	406f4c <_free_r>
  40730e:	e7d6      	b.n	4072be <_realloc_r+0xde>
  407310:	4611      	mov	r1, r2
  407312:	f7fe be7f 	b.w	406014 <_malloc_r>
  407316:	f01e 0f01 	tst.w	lr, #1
  40731a:	d18e      	bne.n	40723a <_realloc_r+0x5a>
  40731c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407320:	eba9 0a01 	sub.w	sl, r9, r1
  407324:	f8da 1004 	ldr.w	r1, [sl, #4]
  407328:	f021 0103 	bic.w	r1, r1, #3
  40732c:	440b      	add	r3, r1
  40732e:	4423      	add	r3, r4
  407330:	4293      	cmp	r3, r2
  407332:	db25      	blt.n	407380 <_realloc_r+0x1a0>
  407334:	68c2      	ldr	r2, [r0, #12]
  407336:	6881      	ldr	r1, [r0, #8]
  407338:	4656      	mov	r6, sl
  40733a:	60ca      	str	r2, [r1, #12]
  40733c:	6091      	str	r1, [r2, #8]
  40733e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407342:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407346:	1f22      	subs	r2, r4, #4
  407348:	2a24      	cmp	r2, #36	; 0x24
  40734a:	60c1      	str	r1, [r0, #12]
  40734c:	6088      	str	r0, [r1, #8]
  40734e:	f200 8094 	bhi.w	40747a <_realloc_r+0x29a>
  407352:	2a13      	cmp	r2, #19
  407354:	d96f      	bls.n	407436 <_realloc_r+0x256>
  407356:	6829      	ldr	r1, [r5, #0]
  407358:	f8ca 1008 	str.w	r1, [sl, #8]
  40735c:	6869      	ldr	r1, [r5, #4]
  40735e:	f8ca 100c 	str.w	r1, [sl, #12]
  407362:	2a1b      	cmp	r2, #27
  407364:	f200 80a2 	bhi.w	4074ac <_realloc_r+0x2cc>
  407368:	3508      	adds	r5, #8
  40736a:	f10a 0210 	add.w	r2, sl, #16
  40736e:	e063      	b.n	407438 <_realloc_r+0x258>
  407370:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407374:	eba9 0a03 	sub.w	sl, r9, r3
  407378:	f8da 1004 	ldr.w	r1, [sl, #4]
  40737c:	f021 0103 	bic.w	r1, r1, #3
  407380:	1863      	adds	r3, r4, r1
  407382:	4293      	cmp	r3, r2
  407384:	f6ff af59 	blt.w	40723a <_realloc_r+0x5a>
  407388:	4656      	mov	r6, sl
  40738a:	e7d8      	b.n	40733e <_realloc_r+0x15e>
  40738c:	6841      	ldr	r1, [r0, #4]
  40738e:	f021 0b03 	bic.w	fp, r1, #3
  407392:	44a3      	add	fp, r4
  407394:	f107 0010 	add.w	r0, r7, #16
  407398:	4583      	cmp	fp, r0
  40739a:	da56      	bge.n	40744a <_realloc_r+0x26a>
  40739c:	f01e 0f01 	tst.w	lr, #1
  4073a0:	f47f af4b 	bne.w	40723a <_realloc_r+0x5a>
  4073a4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4073a8:	eba9 0a01 	sub.w	sl, r9, r1
  4073ac:	f8da 1004 	ldr.w	r1, [sl, #4]
  4073b0:	f021 0103 	bic.w	r1, r1, #3
  4073b4:	448b      	add	fp, r1
  4073b6:	4558      	cmp	r0, fp
  4073b8:	dce2      	bgt.n	407380 <_realloc_r+0x1a0>
  4073ba:	4656      	mov	r6, sl
  4073bc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4073c0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4073c4:	1f22      	subs	r2, r4, #4
  4073c6:	2a24      	cmp	r2, #36	; 0x24
  4073c8:	60c1      	str	r1, [r0, #12]
  4073ca:	6088      	str	r0, [r1, #8]
  4073cc:	f200 808f 	bhi.w	4074ee <_realloc_r+0x30e>
  4073d0:	2a13      	cmp	r2, #19
  4073d2:	f240 808a 	bls.w	4074ea <_realloc_r+0x30a>
  4073d6:	6829      	ldr	r1, [r5, #0]
  4073d8:	f8ca 1008 	str.w	r1, [sl, #8]
  4073dc:	6869      	ldr	r1, [r5, #4]
  4073de:	f8ca 100c 	str.w	r1, [sl, #12]
  4073e2:	2a1b      	cmp	r2, #27
  4073e4:	f200 808a 	bhi.w	4074fc <_realloc_r+0x31c>
  4073e8:	3508      	adds	r5, #8
  4073ea:	f10a 0210 	add.w	r2, sl, #16
  4073ee:	6829      	ldr	r1, [r5, #0]
  4073f0:	6011      	str	r1, [r2, #0]
  4073f2:	6869      	ldr	r1, [r5, #4]
  4073f4:	6051      	str	r1, [r2, #4]
  4073f6:	68a9      	ldr	r1, [r5, #8]
  4073f8:	6091      	str	r1, [r2, #8]
  4073fa:	eb0a 0107 	add.w	r1, sl, r7
  4073fe:	ebab 0207 	sub.w	r2, fp, r7
  407402:	f042 0201 	orr.w	r2, r2, #1
  407406:	6099      	str	r1, [r3, #8]
  407408:	604a      	str	r2, [r1, #4]
  40740a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40740e:	f003 0301 	and.w	r3, r3, #1
  407412:	431f      	orrs	r7, r3
  407414:	4640      	mov	r0, r8
  407416:	f8ca 7004 	str.w	r7, [sl, #4]
  40741a:	f7ff f917 	bl	40664c <__malloc_unlock>
  40741e:	e751      	b.n	4072c4 <_realloc_r+0xe4>
  407420:	682b      	ldr	r3, [r5, #0]
  407422:	6003      	str	r3, [r0, #0]
  407424:	686b      	ldr	r3, [r5, #4]
  407426:	6043      	str	r3, [r0, #4]
  407428:	2a1b      	cmp	r2, #27
  40742a:	d82d      	bhi.n	407488 <_realloc_r+0x2a8>
  40742c:	f100 0308 	add.w	r3, r0, #8
  407430:	f105 0208 	add.w	r2, r5, #8
  407434:	e71b      	b.n	40726e <_realloc_r+0x8e>
  407436:	4632      	mov	r2, r6
  407438:	6829      	ldr	r1, [r5, #0]
  40743a:	6011      	str	r1, [r2, #0]
  40743c:	6869      	ldr	r1, [r5, #4]
  40743e:	6051      	str	r1, [r2, #4]
  407440:	68a9      	ldr	r1, [r5, #8]
  407442:	6091      	str	r1, [r2, #8]
  407444:	461c      	mov	r4, r3
  407446:	46d1      	mov	r9, sl
  407448:	e72a      	b.n	4072a0 <_realloc_r+0xc0>
  40744a:	eb09 0107 	add.w	r1, r9, r7
  40744e:	ebab 0b07 	sub.w	fp, fp, r7
  407452:	f04b 0201 	orr.w	r2, fp, #1
  407456:	6099      	str	r1, [r3, #8]
  407458:	604a      	str	r2, [r1, #4]
  40745a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40745e:	f003 0301 	and.w	r3, r3, #1
  407462:	431f      	orrs	r7, r3
  407464:	4640      	mov	r0, r8
  407466:	f845 7c04 	str.w	r7, [r5, #-4]
  40746a:	f7ff f8ef 	bl	40664c <__malloc_unlock>
  40746e:	462e      	mov	r6, r5
  407470:	e728      	b.n	4072c4 <_realloc_r+0xe4>
  407472:	4629      	mov	r1, r5
  407474:	f7ff fe50 	bl	407118 <memmove>
  407478:	e6ff      	b.n	40727a <_realloc_r+0x9a>
  40747a:	4629      	mov	r1, r5
  40747c:	4630      	mov	r0, r6
  40747e:	461c      	mov	r4, r3
  407480:	46d1      	mov	r9, sl
  407482:	f7ff fe49 	bl	407118 <memmove>
  407486:	e70b      	b.n	4072a0 <_realloc_r+0xc0>
  407488:	68ab      	ldr	r3, [r5, #8]
  40748a:	6083      	str	r3, [r0, #8]
  40748c:	68eb      	ldr	r3, [r5, #12]
  40748e:	60c3      	str	r3, [r0, #12]
  407490:	2a24      	cmp	r2, #36	; 0x24
  407492:	d017      	beq.n	4074c4 <_realloc_r+0x2e4>
  407494:	f100 0310 	add.w	r3, r0, #16
  407498:	f105 0210 	add.w	r2, r5, #16
  40749c:	e6e7      	b.n	40726e <_realloc_r+0x8e>
  40749e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4074a2:	f023 0303 	bic.w	r3, r3, #3
  4074a6:	441c      	add	r4, r3
  4074a8:	462e      	mov	r6, r5
  4074aa:	e6f9      	b.n	4072a0 <_realloc_r+0xc0>
  4074ac:	68a9      	ldr	r1, [r5, #8]
  4074ae:	f8ca 1010 	str.w	r1, [sl, #16]
  4074b2:	68e9      	ldr	r1, [r5, #12]
  4074b4:	f8ca 1014 	str.w	r1, [sl, #20]
  4074b8:	2a24      	cmp	r2, #36	; 0x24
  4074ba:	d00c      	beq.n	4074d6 <_realloc_r+0x2f6>
  4074bc:	3510      	adds	r5, #16
  4074be:	f10a 0218 	add.w	r2, sl, #24
  4074c2:	e7b9      	b.n	407438 <_realloc_r+0x258>
  4074c4:	692b      	ldr	r3, [r5, #16]
  4074c6:	6103      	str	r3, [r0, #16]
  4074c8:	696b      	ldr	r3, [r5, #20]
  4074ca:	6143      	str	r3, [r0, #20]
  4074cc:	f105 0218 	add.w	r2, r5, #24
  4074d0:	f100 0318 	add.w	r3, r0, #24
  4074d4:	e6cb      	b.n	40726e <_realloc_r+0x8e>
  4074d6:	692a      	ldr	r2, [r5, #16]
  4074d8:	f8ca 2018 	str.w	r2, [sl, #24]
  4074dc:	696a      	ldr	r2, [r5, #20]
  4074de:	f8ca 201c 	str.w	r2, [sl, #28]
  4074e2:	3518      	adds	r5, #24
  4074e4:	f10a 0220 	add.w	r2, sl, #32
  4074e8:	e7a6      	b.n	407438 <_realloc_r+0x258>
  4074ea:	4632      	mov	r2, r6
  4074ec:	e77f      	b.n	4073ee <_realloc_r+0x20e>
  4074ee:	4629      	mov	r1, r5
  4074f0:	4630      	mov	r0, r6
  4074f2:	9301      	str	r3, [sp, #4]
  4074f4:	f7ff fe10 	bl	407118 <memmove>
  4074f8:	9b01      	ldr	r3, [sp, #4]
  4074fa:	e77e      	b.n	4073fa <_realloc_r+0x21a>
  4074fc:	68a9      	ldr	r1, [r5, #8]
  4074fe:	f8ca 1010 	str.w	r1, [sl, #16]
  407502:	68e9      	ldr	r1, [r5, #12]
  407504:	f8ca 1014 	str.w	r1, [sl, #20]
  407508:	2a24      	cmp	r2, #36	; 0x24
  40750a:	d003      	beq.n	407514 <_realloc_r+0x334>
  40750c:	3510      	adds	r5, #16
  40750e:	f10a 0218 	add.w	r2, sl, #24
  407512:	e76c      	b.n	4073ee <_realloc_r+0x20e>
  407514:	692a      	ldr	r2, [r5, #16]
  407516:	f8ca 2018 	str.w	r2, [sl, #24]
  40751a:	696a      	ldr	r2, [r5, #20]
  40751c:	f8ca 201c 	str.w	r2, [sl, #28]
  407520:	3518      	adds	r5, #24
  407522:	f10a 0220 	add.w	r2, sl, #32
  407526:	e762      	b.n	4073ee <_realloc_r+0x20e>
  407528:	200005c0 	.word	0x200005c0

0040752c <__aeabi_drsub>:
  40752c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407530:	e002      	b.n	407538 <__adddf3>
  407532:	bf00      	nop

00407534 <__aeabi_dsub>:
  407534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407538 <__adddf3>:
  407538:	b530      	push	{r4, r5, lr}
  40753a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40753e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407542:	ea94 0f05 	teq	r4, r5
  407546:	bf08      	it	eq
  407548:	ea90 0f02 	teqeq	r0, r2
  40754c:	bf1f      	itttt	ne
  40754e:	ea54 0c00 	orrsne.w	ip, r4, r0
  407552:	ea55 0c02 	orrsne.w	ip, r5, r2
  407556:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40755a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40755e:	f000 80e2 	beq.w	407726 <__adddf3+0x1ee>
  407562:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407566:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40756a:	bfb8      	it	lt
  40756c:	426d      	neglt	r5, r5
  40756e:	dd0c      	ble.n	40758a <__adddf3+0x52>
  407570:	442c      	add	r4, r5
  407572:	ea80 0202 	eor.w	r2, r0, r2
  407576:	ea81 0303 	eor.w	r3, r1, r3
  40757a:	ea82 0000 	eor.w	r0, r2, r0
  40757e:	ea83 0101 	eor.w	r1, r3, r1
  407582:	ea80 0202 	eor.w	r2, r0, r2
  407586:	ea81 0303 	eor.w	r3, r1, r3
  40758a:	2d36      	cmp	r5, #54	; 0x36
  40758c:	bf88      	it	hi
  40758e:	bd30      	pophi	{r4, r5, pc}
  407590:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407594:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407598:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40759c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4075a0:	d002      	beq.n	4075a8 <__adddf3+0x70>
  4075a2:	4240      	negs	r0, r0
  4075a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4075a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4075ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4075b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4075b4:	d002      	beq.n	4075bc <__adddf3+0x84>
  4075b6:	4252      	negs	r2, r2
  4075b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4075bc:	ea94 0f05 	teq	r4, r5
  4075c0:	f000 80a7 	beq.w	407712 <__adddf3+0x1da>
  4075c4:	f1a4 0401 	sub.w	r4, r4, #1
  4075c8:	f1d5 0e20 	rsbs	lr, r5, #32
  4075cc:	db0d      	blt.n	4075ea <__adddf3+0xb2>
  4075ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  4075d2:	fa22 f205 	lsr.w	r2, r2, r5
  4075d6:	1880      	adds	r0, r0, r2
  4075d8:	f141 0100 	adc.w	r1, r1, #0
  4075dc:	fa03 f20e 	lsl.w	r2, r3, lr
  4075e0:	1880      	adds	r0, r0, r2
  4075e2:	fa43 f305 	asr.w	r3, r3, r5
  4075e6:	4159      	adcs	r1, r3
  4075e8:	e00e      	b.n	407608 <__adddf3+0xd0>
  4075ea:	f1a5 0520 	sub.w	r5, r5, #32
  4075ee:	f10e 0e20 	add.w	lr, lr, #32
  4075f2:	2a01      	cmp	r2, #1
  4075f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4075f8:	bf28      	it	cs
  4075fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  4075fe:	fa43 f305 	asr.w	r3, r3, r5
  407602:	18c0      	adds	r0, r0, r3
  407604:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40760c:	d507      	bpl.n	40761e <__adddf3+0xe6>
  40760e:	f04f 0e00 	mov.w	lr, #0
  407612:	f1dc 0c00 	rsbs	ip, ip, #0
  407616:	eb7e 0000 	sbcs.w	r0, lr, r0
  40761a:	eb6e 0101 	sbc.w	r1, lr, r1
  40761e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407622:	d31b      	bcc.n	40765c <__adddf3+0x124>
  407624:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407628:	d30c      	bcc.n	407644 <__adddf3+0x10c>
  40762a:	0849      	lsrs	r1, r1, #1
  40762c:	ea5f 0030 	movs.w	r0, r0, rrx
  407630:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407634:	f104 0401 	add.w	r4, r4, #1
  407638:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40763c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407640:	f080 809a 	bcs.w	407778 <__adddf3+0x240>
  407644:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407648:	bf08      	it	eq
  40764a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40764e:	f150 0000 	adcs.w	r0, r0, #0
  407652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407656:	ea41 0105 	orr.w	r1, r1, r5
  40765a:	bd30      	pop	{r4, r5, pc}
  40765c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407660:	4140      	adcs	r0, r0
  407662:	eb41 0101 	adc.w	r1, r1, r1
  407666:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40766a:	f1a4 0401 	sub.w	r4, r4, #1
  40766e:	d1e9      	bne.n	407644 <__adddf3+0x10c>
  407670:	f091 0f00 	teq	r1, #0
  407674:	bf04      	itt	eq
  407676:	4601      	moveq	r1, r0
  407678:	2000      	moveq	r0, #0
  40767a:	fab1 f381 	clz	r3, r1
  40767e:	bf08      	it	eq
  407680:	3320      	addeq	r3, #32
  407682:	f1a3 030b 	sub.w	r3, r3, #11
  407686:	f1b3 0220 	subs.w	r2, r3, #32
  40768a:	da0c      	bge.n	4076a6 <__adddf3+0x16e>
  40768c:	320c      	adds	r2, #12
  40768e:	dd08      	ble.n	4076a2 <__adddf3+0x16a>
  407690:	f102 0c14 	add.w	ip, r2, #20
  407694:	f1c2 020c 	rsb	r2, r2, #12
  407698:	fa01 f00c 	lsl.w	r0, r1, ip
  40769c:	fa21 f102 	lsr.w	r1, r1, r2
  4076a0:	e00c      	b.n	4076bc <__adddf3+0x184>
  4076a2:	f102 0214 	add.w	r2, r2, #20
  4076a6:	bfd8      	it	le
  4076a8:	f1c2 0c20 	rsble	ip, r2, #32
  4076ac:	fa01 f102 	lsl.w	r1, r1, r2
  4076b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4076b4:	bfdc      	itt	le
  4076b6:	ea41 010c 	orrle.w	r1, r1, ip
  4076ba:	4090      	lslle	r0, r2
  4076bc:	1ae4      	subs	r4, r4, r3
  4076be:	bfa2      	ittt	ge
  4076c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4076c4:	4329      	orrge	r1, r5
  4076c6:	bd30      	popge	{r4, r5, pc}
  4076c8:	ea6f 0404 	mvn.w	r4, r4
  4076cc:	3c1f      	subs	r4, #31
  4076ce:	da1c      	bge.n	40770a <__adddf3+0x1d2>
  4076d0:	340c      	adds	r4, #12
  4076d2:	dc0e      	bgt.n	4076f2 <__adddf3+0x1ba>
  4076d4:	f104 0414 	add.w	r4, r4, #20
  4076d8:	f1c4 0220 	rsb	r2, r4, #32
  4076dc:	fa20 f004 	lsr.w	r0, r0, r4
  4076e0:	fa01 f302 	lsl.w	r3, r1, r2
  4076e4:	ea40 0003 	orr.w	r0, r0, r3
  4076e8:	fa21 f304 	lsr.w	r3, r1, r4
  4076ec:	ea45 0103 	orr.w	r1, r5, r3
  4076f0:	bd30      	pop	{r4, r5, pc}
  4076f2:	f1c4 040c 	rsb	r4, r4, #12
  4076f6:	f1c4 0220 	rsb	r2, r4, #32
  4076fa:	fa20 f002 	lsr.w	r0, r0, r2
  4076fe:	fa01 f304 	lsl.w	r3, r1, r4
  407702:	ea40 0003 	orr.w	r0, r0, r3
  407706:	4629      	mov	r1, r5
  407708:	bd30      	pop	{r4, r5, pc}
  40770a:	fa21 f004 	lsr.w	r0, r1, r4
  40770e:	4629      	mov	r1, r5
  407710:	bd30      	pop	{r4, r5, pc}
  407712:	f094 0f00 	teq	r4, #0
  407716:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40771a:	bf06      	itte	eq
  40771c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407720:	3401      	addeq	r4, #1
  407722:	3d01      	subne	r5, #1
  407724:	e74e      	b.n	4075c4 <__adddf3+0x8c>
  407726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40772a:	bf18      	it	ne
  40772c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407730:	d029      	beq.n	407786 <__adddf3+0x24e>
  407732:	ea94 0f05 	teq	r4, r5
  407736:	bf08      	it	eq
  407738:	ea90 0f02 	teqeq	r0, r2
  40773c:	d005      	beq.n	40774a <__adddf3+0x212>
  40773e:	ea54 0c00 	orrs.w	ip, r4, r0
  407742:	bf04      	itt	eq
  407744:	4619      	moveq	r1, r3
  407746:	4610      	moveq	r0, r2
  407748:	bd30      	pop	{r4, r5, pc}
  40774a:	ea91 0f03 	teq	r1, r3
  40774e:	bf1e      	ittt	ne
  407750:	2100      	movne	r1, #0
  407752:	2000      	movne	r0, #0
  407754:	bd30      	popne	{r4, r5, pc}
  407756:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40775a:	d105      	bne.n	407768 <__adddf3+0x230>
  40775c:	0040      	lsls	r0, r0, #1
  40775e:	4149      	adcs	r1, r1
  407760:	bf28      	it	cs
  407762:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407766:	bd30      	pop	{r4, r5, pc}
  407768:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40776c:	bf3c      	itt	cc
  40776e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407772:	bd30      	popcc	{r4, r5, pc}
  407774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407778:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40777c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407780:	f04f 0000 	mov.w	r0, #0
  407784:	bd30      	pop	{r4, r5, pc}
  407786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40778a:	bf1a      	itte	ne
  40778c:	4619      	movne	r1, r3
  40778e:	4610      	movne	r0, r2
  407790:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407794:	bf1c      	itt	ne
  407796:	460b      	movne	r3, r1
  407798:	4602      	movne	r2, r0
  40779a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40779e:	bf06      	itte	eq
  4077a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4077a4:	ea91 0f03 	teqeq	r1, r3
  4077a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4077ac:	bd30      	pop	{r4, r5, pc}
  4077ae:	bf00      	nop

004077b0 <__aeabi_ui2d>:
  4077b0:	f090 0f00 	teq	r0, #0
  4077b4:	bf04      	itt	eq
  4077b6:	2100      	moveq	r1, #0
  4077b8:	4770      	bxeq	lr
  4077ba:	b530      	push	{r4, r5, lr}
  4077bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4077c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4077c4:	f04f 0500 	mov.w	r5, #0
  4077c8:	f04f 0100 	mov.w	r1, #0
  4077cc:	e750      	b.n	407670 <__adddf3+0x138>
  4077ce:	bf00      	nop

004077d0 <__aeabi_i2d>:
  4077d0:	f090 0f00 	teq	r0, #0
  4077d4:	bf04      	itt	eq
  4077d6:	2100      	moveq	r1, #0
  4077d8:	4770      	bxeq	lr
  4077da:	b530      	push	{r4, r5, lr}
  4077dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4077e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4077e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4077e8:	bf48      	it	mi
  4077ea:	4240      	negmi	r0, r0
  4077ec:	f04f 0100 	mov.w	r1, #0
  4077f0:	e73e      	b.n	407670 <__adddf3+0x138>
  4077f2:	bf00      	nop

004077f4 <__aeabi_f2d>:
  4077f4:	0042      	lsls	r2, r0, #1
  4077f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4077fa:	ea4f 0131 	mov.w	r1, r1, rrx
  4077fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407802:	bf1f      	itttt	ne
  407804:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407808:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40780c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407810:	4770      	bxne	lr
  407812:	f092 0f00 	teq	r2, #0
  407816:	bf14      	ite	ne
  407818:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40781c:	4770      	bxeq	lr
  40781e:	b530      	push	{r4, r5, lr}
  407820:	f44f 7460 	mov.w	r4, #896	; 0x380
  407824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40782c:	e720      	b.n	407670 <__adddf3+0x138>
  40782e:	bf00      	nop

00407830 <__aeabi_ul2d>:
  407830:	ea50 0201 	orrs.w	r2, r0, r1
  407834:	bf08      	it	eq
  407836:	4770      	bxeq	lr
  407838:	b530      	push	{r4, r5, lr}
  40783a:	f04f 0500 	mov.w	r5, #0
  40783e:	e00a      	b.n	407856 <__aeabi_l2d+0x16>

00407840 <__aeabi_l2d>:
  407840:	ea50 0201 	orrs.w	r2, r0, r1
  407844:	bf08      	it	eq
  407846:	4770      	bxeq	lr
  407848:	b530      	push	{r4, r5, lr}
  40784a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40784e:	d502      	bpl.n	407856 <__aeabi_l2d+0x16>
  407850:	4240      	negs	r0, r0
  407852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407856:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40785a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40785e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407862:	f43f aedc 	beq.w	40761e <__adddf3+0xe6>
  407866:	f04f 0203 	mov.w	r2, #3
  40786a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40786e:	bf18      	it	ne
  407870:	3203      	addne	r2, #3
  407872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407876:	bf18      	it	ne
  407878:	3203      	addne	r2, #3
  40787a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40787e:	f1c2 0320 	rsb	r3, r2, #32
  407882:	fa00 fc03 	lsl.w	ip, r0, r3
  407886:	fa20 f002 	lsr.w	r0, r0, r2
  40788a:	fa01 fe03 	lsl.w	lr, r1, r3
  40788e:	ea40 000e 	orr.w	r0, r0, lr
  407892:	fa21 f102 	lsr.w	r1, r1, r2
  407896:	4414      	add	r4, r2
  407898:	e6c1      	b.n	40761e <__adddf3+0xe6>
  40789a:	bf00      	nop

0040789c <__aeabi_dmul>:
  40789c:	b570      	push	{r4, r5, r6, lr}
  40789e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4078a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4078a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4078aa:	bf1d      	ittte	ne
  4078ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4078b0:	ea94 0f0c 	teqne	r4, ip
  4078b4:	ea95 0f0c 	teqne	r5, ip
  4078b8:	f000 f8de 	bleq	407a78 <__aeabi_dmul+0x1dc>
  4078bc:	442c      	add	r4, r5
  4078be:	ea81 0603 	eor.w	r6, r1, r3
  4078c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4078c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4078ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4078ce:	bf18      	it	ne
  4078d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4078d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4078d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4078dc:	d038      	beq.n	407950 <__aeabi_dmul+0xb4>
  4078de:	fba0 ce02 	umull	ip, lr, r0, r2
  4078e2:	f04f 0500 	mov.w	r5, #0
  4078e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4078ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4078ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  4078f2:	f04f 0600 	mov.w	r6, #0
  4078f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4078fa:	f09c 0f00 	teq	ip, #0
  4078fe:	bf18      	it	ne
  407900:	f04e 0e01 	orrne.w	lr, lr, #1
  407904:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407908:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40790c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407910:	d204      	bcs.n	40791c <__aeabi_dmul+0x80>
  407912:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407916:	416d      	adcs	r5, r5
  407918:	eb46 0606 	adc.w	r6, r6, r6
  40791c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407920:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407924:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407928:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40792c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407930:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407934:	bf88      	it	hi
  407936:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40793a:	d81e      	bhi.n	40797a <__aeabi_dmul+0xde>
  40793c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407940:	bf08      	it	eq
  407942:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407946:	f150 0000 	adcs.w	r0, r0, #0
  40794a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40794e:	bd70      	pop	{r4, r5, r6, pc}
  407950:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407954:	ea46 0101 	orr.w	r1, r6, r1
  407958:	ea40 0002 	orr.w	r0, r0, r2
  40795c:	ea81 0103 	eor.w	r1, r1, r3
  407960:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407964:	bfc2      	ittt	gt
  407966:	ebd4 050c 	rsbsgt	r5, r4, ip
  40796a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40796e:	bd70      	popgt	{r4, r5, r6, pc}
  407970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407974:	f04f 0e00 	mov.w	lr, #0
  407978:	3c01      	subs	r4, #1
  40797a:	f300 80ab 	bgt.w	407ad4 <__aeabi_dmul+0x238>
  40797e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407982:	bfde      	ittt	le
  407984:	2000      	movle	r0, #0
  407986:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40798a:	bd70      	pople	{r4, r5, r6, pc}
  40798c:	f1c4 0400 	rsb	r4, r4, #0
  407990:	3c20      	subs	r4, #32
  407992:	da35      	bge.n	407a00 <__aeabi_dmul+0x164>
  407994:	340c      	adds	r4, #12
  407996:	dc1b      	bgt.n	4079d0 <__aeabi_dmul+0x134>
  407998:	f104 0414 	add.w	r4, r4, #20
  40799c:	f1c4 0520 	rsb	r5, r4, #32
  4079a0:	fa00 f305 	lsl.w	r3, r0, r5
  4079a4:	fa20 f004 	lsr.w	r0, r0, r4
  4079a8:	fa01 f205 	lsl.w	r2, r1, r5
  4079ac:	ea40 0002 	orr.w	r0, r0, r2
  4079b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4079b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4079b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4079bc:	fa21 f604 	lsr.w	r6, r1, r4
  4079c0:	eb42 0106 	adc.w	r1, r2, r6
  4079c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4079c8:	bf08      	it	eq
  4079ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4079ce:	bd70      	pop	{r4, r5, r6, pc}
  4079d0:	f1c4 040c 	rsb	r4, r4, #12
  4079d4:	f1c4 0520 	rsb	r5, r4, #32
  4079d8:	fa00 f304 	lsl.w	r3, r0, r4
  4079dc:	fa20 f005 	lsr.w	r0, r0, r5
  4079e0:	fa01 f204 	lsl.w	r2, r1, r4
  4079e4:	ea40 0002 	orr.w	r0, r0, r2
  4079e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4079ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4079f0:	f141 0100 	adc.w	r1, r1, #0
  4079f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4079f8:	bf08      	it	eq
  4079fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4079fe:	bd70      	pop	{r4, r5, r6, pc}
  407a00:	f1c4 0520 	rsb	r5, r4, #32
  407a04:	fa00 f205 	lsl.w	r2, r0, r5
  407a08:	ea4e 0e02 	orr.w	lr, lr, r2
  407a0c:	fa20 f304 	lsr.w	r3, r0, r4
  407a10:	fa01 f205 	lsl.w	r2, r1, r5
  407a14:	ea43 0302 	orr.w	r3, r3, r2
  407a18:	fa21 f004 	lsr.w	r0, r1, r4
  407a1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407a20:	fa21 f204 	lsr.w	r2, r1, r4
  407a24:	ea20 0002 	bic.w	r0, r0, r2
  407a28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407a2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407a30:	bf08      	it	eq
  407a32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407a36:	bd70      	pop	{r4, r5, r6, pc}
  407a38:	f094 0f00 	teq	r4, #0
  407a3c:	d10f      	bne.n	407a5e <__aeabi_dmul+0x1c2>
  407a3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407a42:	0040      	lsls	r0, r0, #1
  407a44:	eb41 0101 	adc.w	r1, r1, r1
  407a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407a4c:	bf08      	it	eq
  407a4e:	3c01      	subeq	r4, #1
  407a50:	d0f7      	beq.n	407a42 <__aeabi_dmul+0x1a6>
  407a52:	ea41 0106 	orr.w	r1, r1, r6
  407a56:	f095 0f00 	teq	r5, #0
  407a5a:	bf18      	it	ne
  407a5c:	4770      	bxne	lr
  407a5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407a62:	0052      	lsls	r2, r2, #1
  407a64:	eb43 0303 	adc.w	r3, r3, r3
  407a68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407a6c:	bf08      	it	eq
  407a6e:	3d01      	subeq	r5, #1
  407a70:	d0f7      	beq.n	407a62 <__aeabi_dmul+0x1c6>
  407a72:	ea43 0306 	orr.w	r3, r3, r6
  407a76:	4770      	bx	lr
  407a78:	ea94 0f0c 	teq	r4, ip
  407a7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407a80:	bf18      	it	ne
  407a82:	ea95 0f0c 	teqne	r5, ip
  407a86:	d00c      	beq.n	407aa2 <__aeabi_dmul+0x206>
  407a88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407a8c:	bf18      	it	ne
  407a8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407a92:	d1d1      	bne.n	407a38 <__aeabi_dmul+0x19c>
  407a94:	ea81 0103 	eor.w	r1, r1, r3
  407a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407a9c:	f04f 0000 	mov.w	r0, #0
  407aa0:	bd70      	pop	{r4, r5, r6, pc}
  407aa2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407aa6:	bf06      	itte	eq
  407aa8:	4610      	moveq	r0, r2
  407aaa:	4619      	moveq	r1, r3
  407aac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407ab0:	d019      	beq.n	407ae6 <__aeabi_dmul+0x24a>
  407ab2:	ea94 0f0c 	teq	r4, ip
  407ab6:	d102      	bne.n	407abe <__aeabi_dmul+0x222>
  407ab8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407abc:	d113      	bne.n	407ae6 <__aeabi_dmul+0x24a>
  407abe:	ea95 0f0c 	teq	r5, ip
  407ac2:	d105      	bne.n	407ad0 <__aeabi_dmul+0x234>
  407ac4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407ac8:	bf1c      	itt	ne
  407aca:	4610      	movne	r0, r2
  407acc:	4619      	movne	r1, r3
  407ace:	d10a      	bne.n	407ae6 <__aeabi_dmul+0x24a>
  407ad0:	ea81 0103 	eor.w	r1, r1, r3
  407ad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407ad8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407adc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407ae0:	f04f 0000 	mov.w	r0, #0
  407ae4:	bd70      	pop	{r4, r5, r6, pc}
  407ae6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407aea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407aee:	bd70      	pop	{r4, r5, r6, pc}

00407af0 <__aeabi_ddiv>:
  407af0:	b570      	push	{r4, r5, r6, lr}
  407af2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407af6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407afa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407afe:	bf1d      	ittte	ne
  407b00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407b04:	ea94 0f0c 	teqne	r4, ip
  407b08:	ea95 0f0c 	teqne	r5, ip
  407b0c:	f000 f8a7 	bleq	407c5e <__aeabi_ddiv+0x16e>
  407b10:	eba4 0405 	sub.w	r4, r4, r5
  407b14:	ea81 0e03 	eor.w	lr, r1, r3
  407b18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407b1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407b20:	f000 8088 	beq.w	407c34 <__aeabi_ddiv+0x144>
  407b24:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407b28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407b2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407b30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407b34:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407b38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407b3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407b40:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407b44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407b48:	429d      	cmp	r5, r3
  407b4a:	bf08      	it	eq
  407b4c:	4296      	cmpeq	r6, r2
  407b4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407b52:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407b56:	d202      	bcs.n	407b5e <__aeabi_ddiv+0x6e>
  407b58:	085b      	lsrs	r3, r3, #1
  407b5a:	ea4f 0232 	mov.w	r2, r2, rrx
  407b5e:	1ab6      	subs	r6, r6, r2
  407b60:	eb65 0503 	sbc.w	r5, r5, r3
  407b64:	085b      	lsrs	r3, r3, #1
  407b66:	ea4f 0232 	mov.w	r2, r2, rrx
  407b6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407b6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407b72:	ebb6 0e02 	subs.w	lr, r6, r2
  407b76:	eb75 0e03 	sbcs.w	lr, r5, r3
  407b7a:	bf22      	ittt	cs
  407b7c:	1ab6      	subcs	r6, r6, r2
  407b7e:	4675      	movcs	r5, lr
  407b80:	ea40 000c 	orrcs.w	r0, r0, ip
  407b84:	085b      	lsrs	r3, r3, #1
  407b86:	ea4f 0232 	mov.w	r2, r2, rrx
  407b8a:	ebb6 0e02 	subs.w	lr, r6, r2
  407b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407b92:	bf22      	ittt	cs
  407b94:	1ab6      	subcs	r6, r6, r2
  407b96:	4675      	movcs	r5, lr
  407b98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407b9c:	085b      	lsrs	r3, r3, #1
  407b9e:	ea4f 0232 	mov.w	r2, r2, rrx
  407ba2:	ebb6 0e02 	subs.w	lr, r6, r2
  407ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
  407baa:	bf22      	ittt	cs
  407bac:	1ab6      	subcs	r6, r6, r2
  407bae:	4675      	movcs	r5, lr
  407bb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407bb4:	085b      	lsrs	r3, r3, #1
  407bb6:	ea4f 0232 	mov.w	r2, r2, rrx
  407bba:	ebb6 0e02 	subs.w	lr, r6, r2
  407bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
  407bc2:	bf22      	ittt	cs
  407bc4:	1ab6      	subcs	r6, r6, r2
  407bc6:	4675      	movcs	r5, lr
  407bc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407bcc:	ea55 0e06 	orrs.w	lr, r5, r6
  407bd0:	d018      	beq.n	407c04 <__aeabi_ddiv+0x114>
  407bd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407bd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407bda:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407bde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407be2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407be6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407bea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407bee:	d1c0      	bne.n	407b72 <__aeabi_ddiv+0x82>
  407bf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407bf4:	d10b      	bne.n	407c0e <__aeabi_ddiv+0x11e>
  407bf6:	ea41 0100 	orr.w	r1, r1, r0
  407bfa:	f04f 0000 	mov.w	r0, #0
  407bfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407c02:	e7b6      	b.n	407b72 <__aeabi_ddiv+0x82>
  407c04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407c08:	bf04      	itt	eq
  407c0a:	4301      	orreq	r1, r0
  407c0c:	2000      	moveq	r0, #0
  407c0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407c12:	bf88      	it	hi
  407c14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407c18:	f63f aeaf 	bhi.w	40797a <__aeabi_dmul+0xde>
  407c1c:	ebb5 0c03 	subs.w	ip, r5, r3
  407c20:	bf04      	itt	eq
  407c22:	ebb6 0c02 	subseq.w	ip, r6, r2
  407c26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407c2a:	f150 0000 	adcs.w	r0, r0, #0
  407c2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407c32:	bd70      	pop	{r4, r5, r6, pc}
  407c34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407c38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407c3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407c40:	bfc2      	ittt	gt
  407c42:	ebd4 050c 	rsbsgt	r5, r4, ip
  407c46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407c4a:	bd70      	popgt	{r4, r5, r6, pc}
  407c4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407c50:	f04f 0e00 	mov.w	lr, #0
  407c54:	3c01      	subs	r4, #1
  407c56:	e690      	b.n	40797a <__aeabi_dmul+0xde>
  407c58:	ea45 0e06 	orr.w	lr, r5, r6
  407c5c:	e68d      	b.n	40797a <__aeabi_dmul+0xde>
  407c5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407c62:	ea94 0f0c 	teq	r4, ip
  407c66:	bf08      	it	eq
  407c68:	ea95 0f0c 	teqeq	r5, ip
  407c6c:	f43f af3b 	beq.w	407ae6 <__aeabi_dmul+0x24a>
  407c70:	ea94 0f0c 	teq	r4, ip
  407c74:	d10a      	bne.n	407c8c <__aeabi_ddiv+0x19c>
  407c76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407c7a:	f47f af34 	bne.w	407ae6 <__aeabi_dmul+0x24a>
  407c7e:	ea95 0f0c 	teq	r5, ip
  407c82:	f47f af25 	bne.w	407ad0 <__aeabi_dmul+0x234>
  407c86:	4610      	mov	r0, r2
  407c88:	4619      	mov	r1, r3
  407c8a:	e72c      	b.n	407ae6 <__aeabi_dmul+0x24a>
  407c8c:	ea95 0f0c 	teq	r5, ip
  407c90:	d106      	bne.n	407ca0 <__aeabi_ddiv+0x1b0>
  407c92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407c96:	f43f aefd 	beq.w	407a94 <__aeabi_dmul+0x1f8>
  407c9a:	4610      	mov	r0, r2
  407c9c:	4619      	mov	r1, r3
  407c9e:	e722      	b.n	407ae6 <__aeabi_dmul+0x24a>
  407ca0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407ca4:	bf18      	it	ne
  407ca6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407caa:	f47f aec5 	bne.w	407a38 <__aeabi_dmul+0x19c>
  407cae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407cb2:	f47f af0d 	bne.w	407ad0 <__aeabi_dmul+0x234>
  407cb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407cba:	f47f aeeb 	bne.w	407a94 <__aeabi_dmul+0x1f8>
  407cbe:	e712      	b.n	407ae6 <__aeabi_dmul+0x24a>

00407cc0 <__gedf2>:
  407cc0:	f04f 3cff 	mov.w	ip, #4294967295
  407cc4:	e006      	b.n	407cd4 <__cmpdf2+0x4>
  407cc6:	bf00      	nop

00407cc8 <__ledf2>:
  407cc8:	f04f 0c01 	mov.w	ip, #1
  407ccc:	e002      	b.n	407cd4 <__cmpdf2+0x4>
  407cce:	bf00      	nop

00407cd0 <__cmpdf2>:
  407cd0:	f04f 0c01 	mov.w	ip, #1
  407cd4:	f84d cd04 	str.w	ip, [sp, #-4]!
  407cd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407cdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407ce0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407ce4:	bf18      	it	ne
  407ce6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407cea:	d01b      	beq.n	407d24 <__cmpdf2+0x54>
  407cec:	b001      	add	sp, #4
  407cee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407cf2:	bf0c      	ite	eq
  407cf4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407cf8:	ea91 0f03 	teqne	r1, r3
  407cfc:	bf02      	ittt	eq
  407cfe:	ea90 0f02 	teqeq	r0, r2
  407d02:	2000      	moveq	r0, #0
  407d04:	4770      	bxeq	lr
  407d06:	f110 0f00 	cmn.w	r0, #0
  407d0a:	ea91 0f03 	teq	r1, r3
  407d0e:	bf58      	it	pl
  407d10:	4299      	cmppl	r1, r3
  407d12:	bf08      	it	eq
  407d14:	4290      	cmpeq	r0, r2
  407d16:	bf2c      	ite	cs
  407d18:	17d8      	asrcs	r0, r3, #31
  407d1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407d1e:	f040 0001 	orr.w	r0, r0, #1
  407d22:	4770      	bx	lr
  407d24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407d28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407d2c:	d102      	bne.n	407d34 <__cmpdf2+0x64>
  407d2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407d32:	d107      	bne.n	407d44 <__cmpdf2+0x74>
  407d34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407d38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407d3c:	d1d6      	bne.n	407cec <__cmpdf2+0x1c>
  407d3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407d42:	d0d3      	beq.n	407cec <__cmpdf2+0x1c>
  407d44:	f85d 0b04 	ldr.w	r0, [sp], #4
  407d48:	4770      	bx	lr
  407d4a:	bf00      	nop

00407d4c <__aeabi_cdrcmple>:
  407d4c:	4684      	mov	ip, r0
  407d4e:	4610      	mov	r0, r2
  407d50:	4662      	mov	r2, ip
  407d52:	468c      	mov	ip, r1
  407d54:	4619      	mov	r1, r3
  407d56:	4663      	mov	r3, ip
  407d58:	e000      	b.n	407d5c <__aeabi_cdcmpeq>
  407d5a:	bf00      	nop

00407d5c <__aeabi_cdcmpeq>:
  407d5c:	b501      	push	{r0, lr}
  407d5e:	f7ff ffb7 	bl	407cd0 <__cmpdf2>
  407d62:	2800      	cmp	r0, #0
  407d64:	bf48      	it	mi
  407d66:	f110 0f00 	cmnmi.w	r0, #0
  407d6a:	bd01      	pop	{r0, pc}

00407d6c <__aeabi_dcmpeq>:
  407d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d70:	f7ff fff4 	bl	407d5c <__aeabi_cdcmpeq>
  407d74:	bf0c      	ite	eq
  407d76:	2001      	moveq	r0, #1
  407d78:	2000      	movne	r0, #0
  407d7a:	f85d fb08 	ldr.w	pc, [sp], #8
  407d7e:	bf00      	nop

00407d80 <__aeabi_dcmplt>:
  407d80:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d84:	f7ff ffea 	bl	407d5c <__aeabi_cdcmpeq>
  407d88:	bf34      	ite	cc
  407d8a:	2001      	movcc	r0, #1
  407d8c:	2000      	movcs	r0, #0
  407d8e:	f85d fb08 	ldr.w	pc, [sp], #8
  407d92:	bf00      	nop

00407d94 <__aeabi_dcmple>:
  407d94:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d98:	f7ff ffe0 	bl	407d5c <__aeabi_cdcmpeq>
  407d9c:	bf94      	ite	ls
  407d9e:	2001      	movls	r0, #1
  407da0:	2000      	movhi	r0, #0
  407da2:	f85d fb08 	ldr.w	pc, [sp], #8
  407da6:	bf00      	nop

00407da8 <__aeabi_dcmpge>:
  407da8:	f84d ed08 	str.w	lr, [sp, #-8]!
  407dac:	f7ff ffce 	bl	407d4c <__aeabi_cdrcmple>
  407db0:	bf94      	ite	ls
  407db2:	2001      	movls	r0, #1
  407db4:	2000      	movhi	r0, #0
  407db6:	f85d fb08 	ldr.w	pc, [sp], #8
  407dba:	bf00      	nop

00407dbc <__aeabi_dcmpgt>:
  407dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
  407dc0:	f7ff ffc4 	bl	407d4c <__aeabi_cdrcmple>
  407dc4:	bf34      	ite	cc
  407dc6:	2001      	movcc	r0, #1
  407dc8:	2000      	movcs	r0, #0
  407dca:	f85d fb08 	ldr.w	pc, [sp], #8
  407dce:	bf00      	nop

00407dd0 <__aeabi_dcmpun>:
  407dd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407dd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407dd8:	d102      	bne.n	407de0 <__aeabi_dcmpun+0x10>
  407dda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407dde:	d10a      	bne.n	407df6 <__aeabi_dcmpun+0x26>
  407de0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407de4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407de8:	d102      	bne.n	407df0 <__aeabi_dcmpun+0x20>
  407dea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407dee:	d102      	bne.n	407df6 <__aeabi_dcmpun+0x26>
  407df0:	f04f 0000 	mov.w	r0, #0
  407df4:	4770      	bx	lr
  407df6:	f04f 0001 	mov.w	r0, #1
  407dfa:	4770      	bx	lr

00407dfc <__aeabi_d2iz>:
  407dfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407e00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407e04:	d215      	bcs.n	407e32 <__aeabi_d2iz+0x36>
  407e06:	d511      	bpl.n	407e2c <__aeabi_d2iz+0x30>
  407e08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407e0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407e10:	d912      	bls.n	407e38 <__aeabi_d2iz+0x3c>
  407e12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407e1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407e1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407e22:	fa23 f002 	lsr.w	r0, r3, r2
  407e26:	bf18      	it	ne
  407e28:	4240      	negne	r0, r0
  407e2a:	4770      	bx	lr
  407e2c:	f04f 0000 	mov.w	r0, #0
  407e30:	4770      	bx	lr
  407e32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407e36:	d105      	bne.n	407e44 <__aeabi_d2iz+0x48>
  407e38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407e3c:	bf08      	it	eq
  407e3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407e42:	4770      	bx	lr
  407e44:	f04f 0000 	mov.w	r0, #0
  407e48:	4770      	bx	lr
  407e4a:	bf00      	nop

00407e4c <__aeabi_uldivmod>:
  407e4c:	b953      	cbnz	r3, 407e64 <__aeabi_uldivmod+0x18>
  407e4e:	b94a      	cbnz	r2, 407e64 <__aeabi_uldivmod+0x18>
  407e50:	2900      	cmp	r1, #0
  407e52:	bf08      	it	eq
  407e54:	2800      	cmpeq	r0, #0
  407e56:	bf1c      	itt	ne
  407e58:	f04f 31ff 	movne.w	r1, #4294967295
  407e5c:	f04f 30ff 	movne.w	r0, #4294967295
  407e60:	f000 b97a 	b.w	408158 <__aeabi_idiv0>
  407e64:	f1ad 0c08 	sub.w	ip, sp, #8
  407e68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407e6c:	f000 f806 	bl	407e7c <__udivmoddi4>
  407e70:	f8dd e004 	ldr.w	lr, [sp, #4]
  407e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407e78:	b004      	add	sp, #16
  407e7a:	4770      	bx	lr

00407e7c <__udivmoddi4>:
  407e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407e80:	468c      	mov	ip, r1
  407e82:	460d      	mov	r5, r1
  407e84:	4604      	mov	r4, r0
  407e86:	9e08      	ldr	r6, [sp, #32]
  407e88:	2b00      	cmp	r3, #0
  407e8a:	d151      	bne.n	407f30 <__udivmoddi4+0xb4>
  407e8c:	428a      	cmp	r2, r1
  407e8e:	4617      	mov	r7, r2
  407e90:	d96d      	bls.n	407f6e <__udivmoddi4+0xf2>
  407e92:	fab2 fe82 	clz	lr, r2
  407e96:	f1be 0f00 	cmp.w	lr, #0
  407e9a:	d00b      	beq.n	407eb4 <__udivmoddi4+0x38>
  407e9c:	f1ce 0c20 	rsb	ip, lr, #32
  407ea0:	fa01 f50e 	lsl.w	r5, r1, lr
  407ea4:	fa20 fc0c 	lsr.w	ip, r0, ip
  407ea8:	fa02 f70e 	lsl.w	r7, r2, lr
  407eac:	ea4c 0c05 	orr.w	ip, ip, r5
  407eb0:	fa00 f40e 	lsl.w	r4, r0, lr
  407eb4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407eb8:	0c25      	lsrs	r5, r4, #16
  407eba:	fbbc f8fa 	udiv	r8, ip, sl
  407ebe:	fa1f f987 	uxth.w	r9, r7
  407ec2:	fb0a cc18 	mls	ip, sl, r8, ip
  407ec6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407eca:	fb08 f309 	mul.w	r3, r8, r9
  407ece:	42ab      	cmp	r3, r5
  407ed0:	d90a      	bls.n	407ee8 <__udivmoddi4+0x6c>
  407ed2:	19ed      	adds	r5, r5, r7
  407ed4:	f108 32ff 	add.w	r2, r8, #4294967295
  407ed8:	f080 8123 	bcs.w	408122 <__udivmoddi4+0x2a6>
  407edc:	42ab      	cmp	r3, r5
  407ede:	f240 8120 	bls.w	408122 <__udivmoddi4+0x2a6>
  407ee2:	f1a8 0802 	sub.w	r8, r8, #2
  407ee6:	443d      	add	r5, r7
  407ee8:	1aed      	subs	r5, r5, r3
  407eea:	b2a4      	uxth	r4, r4
  407eec:	fbb5 f0fa 	udiv	r0, r5, sl
  407ef0:	fb0a 5510 	mls	r5, sl, r0, r5
  407ef4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407ef8:	fb00 f909 	mul.w	r9, r0, r9
  407efc:	45a1      	cmp	r9, r4
  407efe:	d909      	bls.n	407f14 <__udivmoddi4+0x98>
  407f00:	19e4      	adds	r4, r4, r7
  407f02:	f100 33ff 	add.w	r3, r0, #4294967295
  407f06:	f080 810a 	bcs.w	40811e <__udivmoddi4+0x2a2>
  407f0a:	45a1      	cmp	r9, r4
  407f0c:	f240 8107 	bls.w	40811e <__udivmoddi4+0x2a2>
  407f10:	3802      	subs	r0, #2
  407f12:	443c      	add	r4, r7
  407f14:	eba4 0409 	sub.w	r4, r4, r9
  407f18:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407f1c:	2100      	movs	r1, #0
  407f1e:	2e00      	cmp	r6, #0
  407f20:	d061      	beq.n	407fe6 <__udivmoddi4+0x16a>
  407f22:	fa24 f40e 	lsr.w	r4, r4, lr
  407f26:	2300      	movs	r3, #0
  407f28:	6034      	str	r4, [r6, #0]
  407f2a:	6073      	str	r3, [r6, #4]
  407f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f30:	428b      	cmp	r3, r1
  407f32:	d907      	bls.n	407f44 <__udivmoddi4+0xc8>
  407f34:	2e00      	cmp	r6, #0
  407f36:	d054      	beq.n	407fe2 <__udivmoddi4+0x166>
  407f38:	2100      	movs	r1, #0
  407f3a:	e886 0021 	stmia.w	r6, {r0, r5}
  407f3e:	4608      	mov	r0, r1
  407f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f44:	fab3 f183 	clz	r1, r3
  407f48:	2900      	cmp	r1, #0
  407f4a:	f040 808e 	bne.w	40806a <__udivmoddi4+0x1ee>
  407f4e:	42ab      	cmp	r3, r5
  407f50:	d302      	bcc.n	407f58 <__udivmoddi4+0xdc>
  407f52:	4282      	cmp	r2, r0
  407f54:	f200 80fa 	bhi.w	40814c <__udivmoddi4+0x2d0>
  407f58:	1a84      	subs	r4, r0, r2
  407f5a:	eb65 0503 	sbc.w	r5, r5, r3
  407f5e:	2001      	movs	r0, #1
  407f60:	46ac      	mov	ip, r5
  407f62:	2e00      	cmp	r6, #0
  407f64:	d03f      	beq.n	407fe6 <__udivmoddi4+0x16a>
  407f66:	e886 1010 	stmia.w	r6, {r4, ip}
  407f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f6e:	b912      	cbnz	r2, 407f76 <__udivmoddi4+0xfa>
  407f70:	2701      	movs	r7, #1
  407f72:	fbb7 f7f2 	udiv	r7, r7, r2
  407f76:	fab7 fe87 	clz	lr, r7
  407f7a:	f1be 0f00 	cmp.w	lr, #0
  407f7e:	d134      	bne.n	407fea <__udivmoddi4+0x16e>
  407f80:	1beb      	subs	r3, r5, r7
  407f82:	0c3a      	lsrs	r2, r7, #16
  407f84:	fa1f fc87 	uxth.w	ip, r7
  407f88:	2101      	movs	r1, #1
  407f8a:	fbb3 f8f2 	udiv	r8, r3, r2
  407f8e:	0c25      	lsrs	r5, r4, #16
  407f90:	fb02 3318 	mls	r3, r2, r8, r3
  407f94:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407f98:	fb0c f308 	mul.w	r3, ip, r8
  407f9c:	42ab      	cmp	r3, r5
  407f9e:	d907      	bls.n	407fb0 <__udivmoddi4+0x134>
  407fa0:	19ed      	adds	r5, r5, r7
  407fa2:	f108 30ff 	add.w	r0, r8, #4294967295
  407fa6:	d202      	bcs.n	407fae <__udivmoddi4+0x132>
  407fa8:	42ab      	cmp	r3, r5
  407faa:	f200 80d1 	bhi.w	408150 <__udivmoddi4+0x2d4>
  407fae:	4680      	mov	r8, r0
  407fb0:	1aed      	subs	r5, r5, r3
  407fb2:	b2a3      	uxth	r3, r4
  407fb4:	fbb5 f0f2 	udiv	r0, r5, r2
  407fb8:	fb02 5510 	mls	r5, r2, r0, r5
  407fbc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  407fc0:	fb0c fc00 	mul.w	ip, ip, r0
  407fc4:	45a4      	cmp	ip, r4
  407fc6:	d907      	bls.n	407fd8 <__udivmoddi4+0x15c>
  407fc8:	19e4      	adds	r4, r4, r7
  407fca:	f100 33ff 	add.w	r3, r0, #4294967295
  407fce:	d202      	bcs.n	407fd6 <__udivmoddi4+0x15a>
  407fd0:	45a4      	cmp	ip, r4
  407fd2:	f200 80b8 	bhi.w	408146 <__udivmoddi4+0x2ca>
  407fd6:	4618      	mov	r0, r3
  407fd8:	eba4 040c 	sub.w	r4, r4, ip
  407fdc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407fe0:	e79d      	b.n	407f1e <__udivmoddi4+0xa2>
  407fe2:	4631      	mov	r1, r6
  407fe4:	4630      	mov	r0, r6
  407fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407fea:	f1ce 0420 	rsb	r4, lr, #32
  407fee:	fa05 f30e 	lsl.w	r3, r5, lr
  407ff2:	fa07 f70e 	lsl.w	r7, r7, lr
  407ff6:	fa20 f804 	lsr.w	r8, r0, r4
  407ffa:	0c3a      	lsrs	r2, r7, #16
  407ffc:	fa25 f404 	lsr.w	r4, r5, r4
  408000:	ea48 0803 	orr.w	r8, r8, r3
  408004:	fbb4 f1f2 	udiv	r1, r4, r2
  408008:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40800c:	fb02 4411 	mls	r4, r2, r1, r4
  408010:	fa1f fc87 	uxth.w	ip, r7
  408014:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408018:	fb01 f30c 	mul.w	r3, r1, ip
  40801c:	42ab      	cmp	r3, r5
  40801e:	fa00 f40e 	lsl.w	r4, r0, lr
  408022:	d909      	bls.n	408038 <__udivmoddi4+0x1bc>
  408024:	19ed      	adds	r5, r5, r7
  408026:	f101 30ff 	add.w	r0, r1, #4294967295
  40802a:	f080 808a 	bcs.w	408142 <__udivmoddi4+0x2c6>
  40802e:	42ab      	cmp	r3, r5
  408030:	f240 8087 	bls.w	408142 <__udivmoddi4+0x2c6>
  408034:	3902      	subs	r1, #2
  408036:	443d      	add	r5, r7
  408038:	1aeb      	subs	r3, r5, r3
  40803a:	fa1f f588 	uxth.w	r5, r8
  40803e:	fbb3 f0f2 	udiv	r0, r3, r2
  408042:	fb02 3310 	mls	r3, r2, r0, r3
  408046:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40804a:	fb00 f30c 	mul.w	r3, r0, ip
  40804e:	42ab      	cmp	r3, r5
  408050:	d907      	bls.n	408062 <__udivmoddi4+0x1e6>
  408052:	19ed      	adds	r5, r5, r7
  408054:	f100 38ff 	add.w	r8, r0, #4294967295
  408058:	d26f      	bcs.n	40813a <__udivmoddi4+0x2be>
  40805a:	42ab      	cmp	r3, r5
  40805c:	d96d      	bls.n	40813a <__udivmoddi4+0x2be>
  40805e:	3802      	subs	r0, #2
  408060:	443d      	add	r5, r7
  408062:	1aeb      	subs	r3, r5, r3
  408064:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408068:	e78f      	b.n	407f8a <__udivmoddi4+0x10e>
  40806a:	f1c1 0720 	rsb	r7, r1, #32
  40806e:	fa22 f807 	lsr.w	r8, r2, r7
  408072:	408b      	lsls	r3, r1
  408074:	fa05 f401 	lsl.w	r4, r5, r1
  408078:	ea48 0303 	orr.w	r3, r8, r3
  40807c:	fa20 fe07 	lsr.w	lr, r0, r7
  408080:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408084:	40fd      	lsrs	r5, r7
  408086:	ea4e 0e04 	orr.w	lr, lr, r4
  40808a:	fbb5 f9fc 	udiv	r9, r5, ip
  40808e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408092:	fb0c 5519 	mls	r5, ip, r9, r5
  408096:	fa1f f883 	uxth.w	r8, r3
  40809a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40809e:	fb09 f408 	mul.w	r4, r9, r8
  4080a2:	42ac      	cmp	r4, r5
  4080a4:	fa02 f201 	lsl.w	r2, r2, r1
  4080a8:	fa00 fa01 	lsl.w	sl, r0, r1
  4080ac:	d908      	bls.n	4080c0 <__udivmoddi4+0x244>
  4080ae:	18ed      	adds	r5, r5, r3
  4080b0:	f109 30ff 	add.w	r0, r9, #4294967295
  4080b4:	d243      	bcs.n	40813e <__udivmoddi4+0x2c2>
  4080b6:	42ac      	cmp	r4, r5
  4080b8:	d941      	bls.n	40813e <__udivmoddi4+0x2c2>
  4080ba:	f1a9 0902 	sub.w	r9, r9, #2
  4080be:	441d      	add	r5, r3
  4080c0:	1b2d      	subs	r5, r5, r4
  4080c2:	fa1f fe8e 	uxth.w	lr, lr
  4080c6:	fbb5 f0fc 	udiv	r0, r5, ip
  4080ca:	fb0c 5510 	mls	r5, ip, r0, r5
  4080ce:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4080d2:	fb00 f808 	mul.w	r8, r0, r8
  4080d6:	45a0      	cmp	r8, r4
  4080d8:	d907      	bls.n	4080ea <__udivmoddi4+0x26e>
  4080da:	18e4      	adds	r4, r4, r3
  4080dc:	f100 35ff 	add.w	r5, r0, #4294967295
  4080e0:	d229      	bcs.n	408136 <__udivmoddi4+0x2ba>
  4080e2:	45a0      	cmp	r8, r4
  4080e4:	d927      	bls.n	408136 <__udivmoddi4+0x2ba>
  4080e6:	3802      	subs	r0, #2
  4080e8:	441c      	add	r4, r3
  4080ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4080ee:	eba4 0408 	sub.w	r4, r4, r8
  4080f2:	fba0 8902 	umull	r8, r9, r0, r2
  4080f6:	454c      	cmp	r4, r9
  4080f8:	46c6      	mov	lr, r8
  4080fa:	464d      	mov	r5, r9
  4080fc:	d315      	bcc.n	40812a <__udivmoddi4+0x2ae>
  4080fe:	d012      	beq.n	408126 <__udivmoddi4+0x2aa>
  408100:	b156      	cbz	r6, 408118 <__udivmoddi4+0x29c>
  408102:	ebba 030e 	subs.w	r3, sl, lr
  408106:	eb64 0405 	sbc.w	r4, r4, r5
  40810a:	fa04 f707 	lsl.w	r7, r4, r7
  40810e:	40cb      	lsrs	r3, r1
  408110:	431f      	orrs	r7, r3
  408112:	40cc      	lsrs	r4, r1
  408114:	6037      	str	r7, [r6, #0]
  408116:	6074      	str	r4, [r6, #4]
  408118:	2100      	movs	r1, #0
  40811a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40811e:	4618      	mov	r0, r3
  408120:	e6f8      	b.n	407f14 <__udivmoddi4+0x98>
  408122:	4690      	mov	r8, r2
  408124:	e6e0      	b.n	407ee8 <__udivmoddi4+0x6c>
  408126:	45c2      	cmp	sl, r8
  408128:	d2ea      	bcs.n	408100 <__udivmoddi4+0x284>
  40812a:	ebb8 0e02 	subs.w	lr, r8, r2
  40812e:	eb69 0503 	sbc.w	r5, r9, r3
  408132:	3801      	subs	r0, #1
  408134:	e7e4      	b.n	408100 <__udivmoddi4+0x284>
  408136:	4628      	mov	r0, r5
  408138:	e7d7      	b.n	4080ea <__udivmoddi4+0x26e>
  40813a:	4640      	mov	r0, r8
  40813c:	e791      	b.n	408062 <__udivmoddi4+0x1e6>
  40813e:	4681      	mov	r9, r0
  408140:	e7be      	b.n	4080c0 <__udivmoddi4+0x244>
  408142:	4601      	mov	r1, r0
  408144:	e778      	b.n	408038 <__udivmoddi4+0x1bc>
  408146:	3802      	subs	r0, #2
  408148:	443c      	add	r4, r7
  40814a:	e745      	b.n	407fd8 <__udivmoddi4+0x15c>
  40814c:	4608      	mov	r0, r1
  40814e:	e708      	b.n	407f62 <__udivmoddi4+0xe6>
  408150:	f1a8 0802 	sub.w	r8, r8, #2
  408154:	443d      	add	r5, r7
  408156:	e72b      	b.n	407fb0 <__udivmoddi4+0x134>

00408158 <__aeabi_idiv0>:
  408158:	4770      	bx	lr
  40815a:	bf00      	nop
  40815c:	2044454c 	.word	0x2044454c
  408160:	73207369 	.word	0x73207369
  408164:	70706f74 	.word	0x70706f74
  408168:	00006465 	.word	0x00006465
  40816c:	2044454c 	.word	0x2044454c
  408170:	65726c61 	.word	0x65726c61
  408174:	20796461 	.word	0x20796461
  408178:	706f7473 	.word	0x706f7473
  40817c:	00646570 	.word	0x00646570
  408180:	00000000 	.word	0x00000000
  408184:	2044454c 	.word	0x2044454c
  408188:	65726c61 	.word	0x65726c61
  40818c:	20796461 	.word	0x20796461
  408190:	72617473 	.word	0x72617473
  408194:	0a646574 	.word	0x0a646574
  408198:	00000000 	.word	0x00000000
  40819c:	6e616863 	.word	0x6e616863
  4081a0:	6c2d6567 	.word	0x6c2d6567
  4081a4:	00006465 	.word	0x00006465
  4081a8:	6e616863 	.word	0x6e616863
  4081ac:	6c2d6567 	.word	0x6c2d6567
  4081b0:	4c206465 	.word	0x4c206465
  4081b4:	695f4445 	.word	0x695f4445
  4081b8:	4420746e 	.word	0x4420746e
  4081bc:	59414c45 	.word	0x59414c45
  4081c0:	3a736d5f 	.word	0x3a736d5f
  4081c4:	61684320 	.word	0x61684320
  4081c8:	7365676e 	.word	0x7365676e
  4081cc:	6c656420 	.word	0x6c656420
  4081d0:	75207961 	.word	0x75207961
  4081d4:	20646573 	.word	0x20646573
  4081d8:	4c207962 	.word	0x4c207962
  4081dc:	73204445 	.word	0x73204445
  4081e0:	69636570 	.word	0x69636570
  4081e4:	64656966 	.word	0x64656966
  4081e8:	20796220 	.word	0x20796220
  4081ec:	5f44454c 	.word	0x5f44454c
  4081f0:	20746e69 	.word	0x20746e69
  4081f4:	44206f74 	.word	0x44206f74
  4081f8:	59414c45 	.word	0x59414c45
  4081fc:	0d736d5f 	.word	0x0d736d5f
  408200:	0000000a 	.word	0x0000000a
  408204:	706f7473 	.word	0x706f7473
  408208:	64656c2d 	.word	0x64656c2d
  40820c:	00000000 	.word	0x00000000
  408210:	706f7473 	.word	0x706f7473
  408214:	64656c2d 	.word	0x64656c2d
  408218:	44454c20 	.word	0x44454c20
  40821c:	746e695f 	.word	0x746e695f
  408220:	7453203a 	.word	0x7453203a
  408224:	2073706f 	.word	0x2073706f
  408228:	6e696c62 	.word	0x6e696c62
  40822c:	676e696b 	.word	0x676e696b
  408230:	44454c20 	.word	0x44454c20
  408234:	65707320 	.word	0x65707320
  408238:	69666963 	.word	0x69666963
  40823c:	62206465 	.word	0x62206465
  408240:	454c2079 	.word	0x454c2079
  408244:	6e695f44 	.word	0x6e695f44
  408248:	000a0d74 	.word	0x000a0d74
  40824c:	00000000 	.word	0x00000000
  408250:	72617473 	.word	0x72617473
  408254:	656c2d74 	.word	0x656c2d74
  408258:	00000064 	.word	0x00000064
  40825c:	72617473 	.word	0x72617473
  408260:	656c2d74 	.word	0x656c2d74
  408264:	454c2064 	.word	0x454c2064
  408268:	6e695f44 	.word	0x6e695f44
  40826c:	45442074 	.word	0x45442074
  408270:	5f59414c 	.word	0x5f59414c
  408274:	203a736d 	.word	0x203a736d
  408278:	72617453 	.word	0x72617453
  40827c:	62207374 	.word	0x62207374
  408280:	6b6e696c 	.word	0x6b6e696c
  408284:	20676e69 	.word	0x20676e69
  408288:	2044454c 	.word	0x2044454c
  40828c:	63657073 	.word	0x63657073
  408290:	65696669 	.word	0x65696669
  408294:	79622064 	.word	0x79622064
  408298:	44454c20 	.word	0x44454c20
  40829c:	746e695f 	.word	0x746e695f
  4082a0:	726f6620 	.word	0x726f6620
  4082a4:	4c454420 	.word	0x4c454420
  4082a8:	6d5f5941 	.word	0x6d5f5941
  4082ac:	000a0d73 	.word	0x000a0d73
  4082b0:	00000000 	.word	0x00000000
  4082b4:	6b736174 	.word	0x6b736174
  4082b8:	6174732d 	.word	0x6174732d
  4082bc:	00007374 	.word	0x00007374
  4082c0:	6b736174 	.word	0x6b736174
  4082c4:	6174732d 	.word	0x6174732d
  4082c8:	203a7374 	.word	0x203a7374
  4082cc:	70736944 	.word	0x70736944
  4082d0:	7379616c 	.word	0x7379616c
  4082d4:	74206120 	.word	0x74206120
  4082d8:	656c6261 	.word	0x656c6261
  4082dc:	20666f20 	.word	0x20666f20
  4082e0:	6b736174 	.word	0x6b736174
  4082e4:	61747320 	.word	0x61747320
  4082e8:	69206574 	.word	0x69206574
  4082ec:	726f666e 	.word	0x726f666e
  4082f0:	6974616d 	.word	0x6974616d
  4082f4:	0a0d6e6f 	.word	0x0a0d6e6f
  4082f8:	00000000 	.word	0x00000000

004082fc <names_LEDs>:
  4082fc:	6b736154 6e696c42 44454c6b 61540031     TaskBlinkLED1.Ta
  40830c:	6c426b73 4c6b6e69 00324445 6b736154     skBlinkLED2.Task
  40831c:	6e696c42 44454c6b 00000033              BlinkLED3...

00408328 <taskListHdr>:
  408328:	656d614e 53090909 09746174 09697250     Name...Stat.Pri.
  408338:	70532f53 09656361 0d424354 0000000a     S/Space.TCB.....

00408348 <xChangeLEDCommand>:
  408348:	0040819c 004081a8 00400239 00000002     ..@...@.9.@.....

00408358 <xStartLEDCommand>:
  408358:	00408250 0040825c 0040032d 00000002     P.@.\.@.-.@.....

00408368 <xStopLEDCommand>:
  408368:	00408204 00408210 004002c1 00000001     ..@...@...@.....

00408378 <xTaskStatsCommand>:
  408378:	004082b4 004082c0 004003d1 00000000     ..@...@...@.....
  408388:	6f636e49 63657272 6f632074 6e616d6d     Incorrect comman
  408398:	61702064 656d6172 28726574 202e2973     d parameter(s). 
  4083a8:	746e4520 22207265 706c6568 6f742022      Enter "help" to
  4083b8:	65697620 20612077 7473696c 20666f20      view a list of 
  4083c8:	69617661 6c62616c 6f632065 6e616d6d     available comman
  4083d8:	0d2e7364 000a0d0a 6d6d6f43 20646e61     ds......Command 
  4083e8:	20746f6e 6f636572 73696e67 202e6465     not recognised. 
  4083f8:	746e4520 27207265 706c6568 6f742027      Enter 'help' to
  408408:	65697620 20612077 7473696c 20666f20      view a list of 
  408418:	69617661 6c62616c 6f632065 6e616d6d     available comman
  408428:	0d2e7364 000a0d0a 732f2e2e 462f6372     ds......../src/F
  408438:	52656572 2d534f54 73756c50 494c432d     reeRTOS-Plus-CLI
  408448:	6572462f 4f545265 4c435f53 00632e49     /FreeRTOS_CLI.c.
  408458:	706c6568 00000000 65680a0d 0d3a706c     help......help:.
  408468:	694c200a 20737473 206c6c61 20656874     . Lists all the 
  408478:	69676572 72657473 63206465 616d6d6f     registered comma
  408488:	0d73646e 000a0d0a                       nds.....

00408490 <xHelpCommand>:
  408490:	00408458 00408460 00400421 00000000     X.@.`.@.!.@.....
  4084a0:	732f2e2e 462f6372 52656572 2f534f54     ../src/FreeRTOS/
  4084b0:	74726f70 656c6261 4343472f 4d52412f     portable/GCC/ARM
  4084c0:	344d435f 6f702f46 632e7472 00000000     _CM4F/port.c....
  4084d0:	732f2e2e 462f6372 52656572 2f534f54     ../src/FreeRTOS/
  4084e0:	74726f70 656c6261 6d654d2f 676e614d     portable/MemMang
  4084f0:	6165682f 2e355f70 00000063 732f2e2e     /heap_5.c...../s
  408500:	462f6372 52656572 2f534f54 75657571     rc/FreeRTOS/queu
  408510:	00632e65 732f2e2e 462f6372 52656572     e.c.../src/FreeR
  408520:	2f534f54 6b736174 00632e73 09632509     TOS/tasks.c..%c.
  408530:	25097525 75250975 00000a0d 454c4449     %u.%u.%u....IDLE
  408540:	00000000 51726d54 00000000 732f2e2e     ....TmrQ....../s
  408550:	462f6372 52656572 2f534f54 656d6974     rc/FreeRTOS/time
  408560:	632e7372 00000000 20726d54 00637653     rs.c....Tmr Svc.
  408570:	00000a0d 6b736154 72616548 61656274     ....TaskHeartbea
  408580:	00000074 6b736154 54524155 0058545f     t...TaskUART_TX.
  408590:	6b736154 54524155 0058525f 732f2e2e     TaskUART_RX.../s
  4085a0:	6d2f6372 2e6e6961 00000063              rc/main.c...

004085ac <_global_impure_ptr>:
  4085ac:	20000028 00464e49 00666e69 004e414e     (.. INF.inf.NAN.
  4085bc:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  4085cc:	46454443 00000000 33323130 37363534     CDEF....01234567
  4085dc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4085ec:	0000296c 00000030                       l)..0...

004085f4 <blanks.7223>:
  4085f4:	20202020 20202020 20202020 20202020                     

00408604 <zeroes.7224>:
  408604:	30303030 30303030 30303030 30303030     0000000000000000
  408614:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  408624:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  408634:	00000000                                ....

00408638 <__mprec_bigtens>:
  408638:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408648:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408658:	7f73bf3c 75154fdd                       <.s..O.u

00408660 <__mprec_tens>:
  408660:	00000000 3ff00000 00000000 40240000     .......?......$@
  408670:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408680:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408690:	00000000 412e8480 00000000 416312d0     .......A......cA
  4086a0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4086b0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4086c0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4086d0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4086e0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4086f0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408700:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408710:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408720:	79d99db4 44ea7843                       ...yCx.D

00408728 <p05.6055>:
  408728:	00000005 00000019 0000007d              ........}...

00408734 <_ctype_>:
  408734:	20202000 20202020 28282020 20282828     .         ((((( 
  408744:	20202020 20202020 20202020 20202020                     
  408754:	10108820 10101010 10101010 10101010      ...............
  408764:	04040410 04040404 10040404 10101010     ................
  408774:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408784:	01010101 01010101 01010101 10101010     ................
  408794:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4087a4:	02020202 02020202 02020202 10101010     ................
  4087b4:	00000020 00000000 00000000 00000000      ...............
	...

00408838 <_init>:
  408838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40883a:	bf00      	nop
  40883c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40883e:	bc08      	pop	{r3}
  408840:	469e      	mov	lr, r3
  408842:	4770      	bx	lr

00408844 <__init_array_start>:
  408844:	00405015 	.word	0x00405015

00408848 <__frame_dummy_init_array_entry>:
  408848:	0040011d                                ..@.

0040884c <_fini>:
  40884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40884e:	bf00      	nop
  408850:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408852:	bc08      	pop	{r3}
  408854:	469e      	mov	lr, r3
  408856:	4770      	bx	lr

00408858 <__fini_array_start>:
  408858:	004000f9 	.word	0x004000f9
