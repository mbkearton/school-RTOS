
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032f8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20000000  004032f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000224  2000044c  00403744  0002044c  2**2
                  ALLOC
  3 .stack        00003000  20000670  00403968  0002044c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  6 .debug_info   000176a9  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000334f  00000000  00000000  00037b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000759c  00000000  00000000  0003aecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000868  00000000  00000000  00042467  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a88  00000000  00000000  00042ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018f90  00000000  00000000  00043757  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b993  00000000  00000000  0005c6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006bba4  00000000  00000000  0006807a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016e0  00000000  00000000  000d3c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 36 00 20 05 27 40 00 01 27 40 00 01 27 40 00     p6. .'@..'@..'@.
  400010:	01 27 40 00 01 27 40 00 01 27 40 00 00 00 00 00     .'@..'@..'@.....
	...
  40002c:	d1 02 40 00 01 27 40 00 00 00 00 00 71 03 40 00     ..@..'@.....q.@.
  40003c:	d5 03 40 00 01 27 40 00 01 27 40 00 01 27 40 00     ..@..'@..'@..'@.
  40004c:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  40005c:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  40006c:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  40007c:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  40008c:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  40009c:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  4000ac:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  4000bc:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  4000cc:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  4000dc:	01 27 40 00 01 27 40 00 01 27 40 00 01 27 40 00     .'@..'@..'@..'@.
  4000ec:	01 27 40 00 01 27 40 00 01 27 40 00                 .'@..'@..'@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000044c 	.word	0x2000044c
  400114:	00000000 	.word	0x00000000
  400118:	004032f8 	.word	0x004032f8

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004032f8 	.word	0x004032f8
  400158:	20000450 	.word	0x20000450
  40015c:	004032f8 	.word	0x004032f8
  400160:	00000000 	.word	0x00000000

00400164 <readButton>:
	// 0 == button NOT pressed
	// 1 == button pressed
	uint8_t butState;
	
	// capturing the inverted pin level (buttons are pulled-up)
	butState = !ioport_get_pin_level(decSW[uiButNum]);
  400164:	4b09      	ldr	r3, [pc, #36]	; (40018c <readButton+0x28>)
  400166:	5c1a      	ldrb	r2, [r3, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400168:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40016a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40016e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400172:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400174:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400176:	f002 021f 	and.w	r2, r2, #31
  40017a:	2301      	movs	r3, #1
  40017c:	fa03 f202 	lsl.w	r2, r3, r2
  400180:	420a      	tst	r2, r1

	return butState;
}
  400182:	bf0c      	ite	eq
  400184:	4618      	moveq	r0, r3
  400186:	2000      	movne	r0, #0
  400188:	4770      	bx	lr
  40018a:	bf00      	nop
  40018c:	20000000 	.word	0x20000000

00400190 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400190:	f100 0308 	add.w	r3, r0, #8
  400194:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
  400196:	f04f 32ff 	mov.w	r2, #4294967295
  40019a:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40019c:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40019e:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4001a0:	2300      	movs	r3, #0
  4001a2:	6003      	str	r3, [r0, #0]
  4001a4:	4770      	bx	lr

004001a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
  4001a6:	2300      	movs	r3, #0
  4001a8:	6103      	str	r3, [r0, #16]
  4001aa:	4770      	bx	lr

004001ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
  4001ac:	6843      	ldr	r3, [r0, #4]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
  4001ae:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4001b0:	689a      	ldr	r2, [r3, #8]
  4001b2:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
  4001b4:	689a      	ldr	r2, [r3, #8]
  4001b6:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
  4001b8:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
  4001ba:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  4001bc:	6803      	ldr	r3, [r0, #0]
  4001be:	3301      	adds	r3, #1
  4001c0:	6003      	str	r3, [r0, #0]
  4001c2:	4770      	bx	lr

004001c4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
  4001c4:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4001c6:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
  4001c8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001cc:	d002      	beq.n	4001d4 <vListInsert+0x10>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001ce:	f100 0208 	add.w	r2, r0, #8
  4001d2:	e002      	b.n	4001da <vListInsert+0x16>
        pxIterator = pxList->xListEnd.pxPrevious;
  4001d4:	6902      	ldr	r2, [r0, #16]
  4001d6:	e004      	b.n	4001e2 <vListInsert+0x1e>
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001d8:	461a      	mov	r2, r3
  4001da:	6853      	ldr	r3, [r2, #4]
  4001dc:	681c      	ldr	r4, [r3, #0]
  4001de:	42a5      	cmp	r5, r4
  4001e0:	d2fa      	bcs.n	4001d8 <vListInsert+0x14>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
  4001e2:	6853      	ldr	r3, [r2, #4]
  4001e4:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4001e6:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
  4001e8:	608a      	str	r2, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
  4001ea:	6051      	str	r1, [r2, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
  4001ec:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  4001ee:	6803      	ldr	r3, [r0, #0]
  4001f0:	3301      	adds	r3, #1
  4001f2:	6003      	str	r3, [r0, #0]
}
  4001f4:	bc30      	pop	{r4, r5}
  4001f6:	4770      	bx	lr

004001f8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
  4001f8:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4001fa:	6842      	ldr	r2, [r0, #4]
  4001fc:	6881      	ldr	r1, [r0, #8]
  4001fe:	6091      	str	r1, [r2, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400200:	6882      	ldr	r2, [r0, #8]
  400202:	6841      	ldr	r1, [r0, #4]
  400204:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
  400206:	685a      	ldr	r2, [r3, #4]
  400208:	4290      	cmp	r0, r2
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
  40020a:	bf04      	itt	eq
  40020c:	6882      	ldreq	r2, [r0, #8]
  40020e:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
  400210:	2200      	movs	r2, #0
  400212:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
  400214:	681a      	ldr	r2, [r3, #0]
  400216:	3a01      	subs	r2, #1
  400218:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
  40021a:	6818      	ldr	r0, [r3, #0]
}
  40021c:	4770      	bx	lr
	...

00400220 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
  400220:	4808      	ldr	r0, [pc, #32]	; (400244 <prvPortStartFirstTask+0x24>)
  400222:	6800      	ldr	r0, [r0, #0]
  400224:	6800      	ldr	r0, [r0, #0]
  400226:	f380 8808 	msr	MSP, r0
  40022a:	f04f 0000 	mov.w	r0, #0
  40022e:	f380 8814 	msr	CONTROL, r0
  400232:	b662      	cpsie	i
  400234:	b661      	cpsie	f
  400236:	f3bf 8f4f 	dsb	sy
  40023a:	f3bf 8f6f 	isb	sy
  40023e:	df00      	svc	0
  400240:	bf00      	nop
  400242:	0000      	.short	0x0000
  400244:	e000ed08 	.word	0xe000ed08

00400248 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
  400248:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400258 <vPortEnableVFP+0x10>
  40024c:	6801      	ldr	r1, [r0, #0]
  40024e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400252:	6001      	str	r1, [r0, #0]
  400254:	4770      	bx	lr
  400256:	0000      	.short	0x0000
  400258:	e000ed88 	.word	0xe000ed88

0040025c <prvTaskExitError>:
{
  40025c:	b500      	push	{lr}
  40025e:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0;
  400260:	2300      	movs	r3, #0
  400262:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
  400264:	4b0b      	ldr	r3, [pc, #44]	; (400294 <prvTaskExitError+0x38>)
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	f1b3 3fff 	cmp.w	r3, #4294967295
  40026c:	d003      	beq.n	400276 <prvTaskExitError+0x1a>
  40026e:	21e7      	movs	r1, #231	; 0xe7
  400270:	4809      	ldr	r0, [pc, #36]	; (400298 <prvTaskExitError+0x3c>)
  400272:	4b0a      	ldr	r3, [pc, #40]	; (40029c <prvTaskExitError+0x40>)
  400274:	4798      	blx	r3

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
  400276:	f04f 0350 	mov.w	r3, #80	; 0x50
  40027a:	f383 8811 	msr	BASEPRI, r3
  40027e:	f3bf 8f6f 	isb	sy
  400282:	f3bf 8f4f 	dsb	sy
    while( ulDummy == 0 )
  400286:	9b01      	ldr	r3, [sp, #4]
  400288:	2b00      	cmp	r3, #0
  40028a:	d0fc      	beq.n	400286 <prvTaskExitError+0x2a>
}
  40028c:	b003      	add	sp, #12
  40028e:	f85d fb04 	ldr.w	pc, [sp], #4
  400292:	bf00      	nop
  400294:	20000004 	.word	0x20000004
  400298:	004030bc 	.word	0x004030bc
  40029c:	00402b79 	.word	0x00402b79

004002a0 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
  4002a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4002a4:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
  4002a8:	f021 0101 	bic.w	r1, r1, #1
  4002ac:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
  4002b0:	4b05      	ldr	r3, [pc, #20]	; (4002c8 <pxPortInitialiseStack+0x28>)
  4002b2:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
  4002b6:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
  4002ba:	f06f 0302 	mvn.w	r3, #2
  4002be:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4002c2:	3844      	subs	r0, #68	; 0x44
  4002c4:	4770      	bx	lr
  4002c6:	bf00      	nop
  4002c8:	0040025d 	.word	0x0040025d
  4002cc:	00000000 	.word	0x00000000

004002d0 <SVC_Handler>:
    __asm volatile (
  4002d0:	4b07      	ldr	r3, [pc, #28]	; (4002f0 <pxCurrentTCBConst2>)
  4002d2:	6819      	ldr	r1, [r3, #0]
  4002d4:	6808      	ldr	r0, [r1, #0]
  4002d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002da:	f380 8809 	msr	PSP, r0
  4002de:	f3bf 8f6f 	isb	sy
  4002e2:	f04f 0000 	mov.w	r0, #0
  4002e6:	f380 8811 	msr	BASEPRI, r0
  4002ea:	4770      	bx	lr
  4002ec:	f3af 8000 	nop.w

004002f0 <pxCurrentTCBConst2>:
  4002f0:	20000490 	.word	0x20000490

004002f4 <vPortEnterCritical>:
{
  4002f4:	b508      	push	{r3, lr}
  4002f6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4002fa:	f383 8811 	msr	BASEPRI, r3
  4002fe:	f3bf 8f6f 	isb	sy
  400302:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
  400306:	4a09      	ldr	r2, [pc, #36]	; (40032c <vPortEnterCritical+0x38>)
  400308:	6813      	ldr	r3, [r2, #0]
  40030a:	3301      	adds	r3, #1
  40030c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
  40030e:	2b01      	cmp	r3, #1
  400310:	d000      	beq.n	400314 <vPortEnterCritical+0x20>
  400312:	bd08      	pop	{r3, pc}
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400314:	4b06      	ldr	r3, [pc, #24]	; (400330 <vPortEnterCritical+0x3c>)
  400316:	681b      	ldr	r3, [r3, #0]
  400318:	f013 0fff 	tst.w	r3, #255	; 0xff
  40031c:	d0f9      	beq.n	400312 <vPortEnterCritical+0x1e>
  40031e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  400322:	4804      	ldr	r0, [pc, #16]	; (400334 <vPortEnterCritical+0x40>)
  400324:	4b04      	ldr	r3, [pc, #16]	; (400338 <vPortEnterCritical+0x44>)
  400326:	4798      	blx	r3
}
  400328:	e7f3      	b.n	400312 <vPortEnterCritical+0x1e>
  40032a:	bf00      	nop
  40032c:	20000004 	.word	0x20000004
  400330:	e000ed04 	.word	0xe000ed04
  400334:	004030bc 	.word	0x004030bc
  400338:	00402b79 	.word	0x00402b79

0040033c <vPortExitCritical>:
{
  40033c:	b508      	push	{r3, lr}
    configASSERT( uxCriticalNesting );
  40033e:	4b08      	ldr	r3, [pc, #32]	; (400360 <vPortExitCritical+0x24>)
  400340:	681b      	ldr	r3, [r3, #0]
  400342:	b13b      	cbz	r3, 400354 <vPortExitCritical+0x18>
    uxCriticalNesting--;
  400344:	4a06      	ldr	r2, [pc, #24]	; (400360 <vPortExitCritical+0x24>)
  400346:	6813      	ldr	r3, [r2, #0]
  400348:	3b01      	subs	r3, #1
  40034a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
  40034c:	b90b      	cbnz	r3, 400352 <vPortExitCritical+0x16>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
  40034e:	f383 8811 	msr	BASEPRI, r3
  400352:	bd08      	pop	{r3, pc}
    configASSERT( uxCriticalNesting );
  400354:	f240 11ad 	movw	r1, #429	; 0x1ad
  400358:	4802      	ldr	r0, [pc, #8]	; (400364 <vPortExitCritical+0x28>)
  40035a:	4b03      	ldr	r3, [pc, #12]	; (400368 <vPortExitCritical+0x2c>)
  40035c:	4798      	blx	r3
  40035e:	e7f1      	b.n	400344 <vPortExitCritical+0x8>
  400360:	20000004 	.word	0x20000004
  400364:	004030bc 	.word	0x004030bc
  400368:	00402b79 	.word	0x00402b79
  40036c:	00000000 	.word	0x00000000

00400370 <PendSV_Handler>:
    __asm volatile
  400370:	f3ef 8009 	mrs	r0, PSP
  400374:	f3bf 8f6f 	isb	sy
  400378:	4b15      	ldr	r3, [pc, #84]	; (4003d0 <pxCurrentTCBConst>)
  40037a:	681a      	ldr	r2, [r3, #0]
  40037c:	f01e 0f10 	tst.w	lr, #16
  400380:	bf08      	it	eq
  400382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40038a:	6010      	str	r0, [r2, #0]
  40038c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400390:	f04f 0050 	mov.w	r0, #80	; 0x50
  400394:	f380 8811 	msr	BASEPRI, r0
  400398:	f3bf 8f4f 	dsb	sy
  40039c:	f3bf 8f6f 	isb	sy
  4003a0:	f001 fa9a 	bl	4018d8 <vTaskSwitchContext>
  4003a4:	f04f 0000 	mov.w	r0, #0
  4003a8:	f380 8811 	msr	BASEPRI, r0
  4003ac:	bc09      	pop	{r0, r3}
  4003ae:	6819      	ldr	r1, [r3, #0]
  4003b0:	6808      	ldr	r0, [r1, #0]
  4003b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003b6:	f01e 0f10 	tst.w	lr, #16
  4003ba:	bf08      	it	eq
  4003bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4003c0:	f380 8809 	msr	PSP, r0
  4003c4:	f3bf 8f6f 	isb	sy
  4003c8:	4770      	bx	lr
  4003ca:	bf00      	nop
  4003cc:	f3af 8000 	nop.w

004003d0 <pxCurrentTCBConst>:
  4003d0:	20000490 	.word	0x20000490

004003d4 <SysTick_Handler>:
{
  4003d4:	b508      	push	{r3, lr}
        __asm volatile
  4003d6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4003da:	f383 8811 	msr	BASEPRI, r3
  4003de:	f3bf 8f6f 	isb	sy
  4003e2:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <SysTick_Handler+0x28>)
  4003e8:	4798      	blx	r3
  4003ea:	b118      	cbz	r0, 4003f4 <SysTick_Handler+0x20>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4003ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003f0:	4b03      	ldr	r3, [pc, #12]	; (400400 <SysTick_Handler+0x2c>)
  4003f2:	601a      	str	r2, [r3, #0]
        __asm volatile
  4003f4:	2300      	movs	r3, #0
  4003f6:	f383 8811 	msr	BASEPRI, r3
  4003fa:	bd08      	pop	{r3, pc}
  4003fc:	00401525 	.word	0x00401525
  400400:	e000ed04 	.word	0xe000ed04

00400404 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
  400404:	4a08      	ldr	r2, [pc, #32]	; (400428 <vPortSetupTimerInterrupt+0x24>)
  400406:	2300      	movs	r3, #0
  400408:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  40040a:	4908      	ldr	r1, [pc, #32]	; (40042c <vPortSetupTimerInterrupt+0x28>)
  40040c:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  40040e:	4b08      	ldr	r3, [pc, #32]	; (400430 <vPortSetupTimerInterrupt+0x2c>)
  400410:	681b      	ldr	r3, [r3, #0]
  400412:	4908      	ldr	r1, [pc, #32]	; (400434 <vPortSetupTimerInterrupt+0x30>)
  400414:	fba1 1303 	umull	r1, r3, r1, r3
  400418:	099b      	lsrs	r3, r3, #6
  40041a:	3b01      	subs	r3, #1
  40041c:	4906      	ldr	r1, [pc, #24]	; (400438 <vPortSetupTimerInterrupt+0x34>)
  40041e:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400420:	2307      	movs	r3, #7
  400422:	6013      	str	r3, [r2, #0]
  400424:	4770      	bx	lr
  400426:	bf00      	nop
  400428:	e000e010 	.word	0xe000e010
  40042c:	e000e018 	.word	0xe000e018
  400430:	20000018 	.word	0x20000018
  400434:	10624dd3 	.word	0x10624dd3
  400438:	e000e014 	.word	0xe000e014

0040043c <xPortStartScheduler>:
{
  40043c:	b510      	push	{r4, lr}
  40043e:	b082      	sub	sp, #8
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400440:	4b36      	ldr	r3, [pc, #216]	; (40051c <xPortStartScheduler+0xe0>)
  400442:	681a      	ldr	r2, [r3, #0]
  400444:	4b36      	ldr	r3, [pc, #216]	; (400520 <xPortStartScheduler+0xe4>)
  400446:	429a      	cmp	r2, r3
  400448:	d01e      	beq.n	400488 <xPortStartScheduler+0x4c>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  40044a:	4b34      	ldr	r3, [pc, #208]	; (40051c <xPortStartScheduler+0xe0>)
  40044c:	681a      	ldr	r2, [r3, #0]
  40044e:	4b35      	ldr	r3, [pc, #212]	; (400524 <xPortStartScheduler+0xe8>)
  400450:	429a      	cmp	r2, r3
  400452:	d01f      	beq.n	400494 <xPortStartScheduler+0x58>
            ulOriginalPriority = *pucFirstUserPriorityRegister;
  400454:	4b34      	ldr	r3, [pc, #208]	; (400528 <xPortStartScheduler+0xec>)
  400456:	781a      	ldrb	r2, [r3, #0]
  400458:	b2d2      	uxtb	r2, r2
  40045a:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40045c:	22ff      	movs	r2, #255	; 0xff
  40045e:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400460:	781b      	ldrb	r3, [r3, #0]
  400462:	b2db      	uxtb	r3, r3
  400464:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400468:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40046c:	f003 0350 	and.w	r3, r3, #80	; 0x50
  400470:	4a2e      	ldr	r2, [pc, #184]	; (40052c <xPortStartScheduler+0xf0>)
  400472:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400474:	2207      	movs	r2, #7
  400476:	4b2e      	ldr	r3, [pc, #184]	; (400530 <xPortStartScheduler+0xf4>)
  400478:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40047a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40047e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400482:	d01e      	beq.n	4004c2 <xPortStartScheduler+0x86>
  400484:	2206      	movs	r2, #6
  400486:	e00c      	b.n	4004a2 <xPortStartScheduler+0x66>
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400488:	f44f 7197 	mov.w	r1, #302	; 0x12e
  40048c:	4829      	ldr	r0, [pc, #164]	; (400534 <xPortStartScheduler+0xf8>)
  40048e:	4b2a      	ldr	r3, [pc, #168]	; (400538 <xPortStartScheduler+0xfc>)
  400490:	4798      	blx	r3
  400492:	e7da      	b.n	40044a <xPortStartScheduler+0xe>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400494:	f240 112f 	movw	r1, #303	; 0x12f
  400498:	4826      	ldr	r0, [pc, #152]	; (400534 <xPortStartScheduler+0xf8>)
  40049a:	4b27      	ldr	r3, [pc, #156]	; (400538 <xPortStartScheduler+0xfc>)
  40049c:	4798      	blx	r3
  40049e:	e7d9      	b.n	400454 <xPortStartScheduler+0x18>
  4004a0:	460a      	mov	r2, r1
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4004a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4004a6:	005b      	lsls	r3, r3, #1
  4004a8:	b2db      	uxtb	r3, r3
  4004aa:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4004ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4004b2:	1e51      	subs	r1, r2, #1
  4004b4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4004b8:	d1f2      	bne.n	4004a0 <xPortStartScheduler+0x64>
  4004ba:	4b1d      	ldr	r3, [pc, #116]	; (400530 <xPortStartScheduler+0xf4>)
  4004bc:	601a      	str	r2, [r3, #0]
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  4004be:	2a03      	cmp	r2, #3
  4004c0:	d004      	beq.n	4004cc <xPortStartScheduler+0x90>
  4004c2:	f240 1161 	movw	r1, #353	; 0x161
  4004c6:	481b      	ldr	r0, [pc, #108]	; (400534 <xPortStartScheduler+0xf8>)
  4004c8:	4b1b      	ldr	r3, [pc, #108]	; (400538 <xPortStartScheduler+0xfc>)
  4004ca:	4798      	blx	r3
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4004cc:	4a18      	ldr	r2, [pc, #96]	; (400530 <xPortStartScheduler+0xf4>)
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4004ce:	6813      	ldr	r3, [r2, #0]
  4004d0:	021b      	lsls	r3, r3, #8
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4004d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4004d6:	6013      	str	r3, [r2, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
  4004d8:	9b01      	ldr	r3, [sp, #4]
  4004da:	b2db      	uxtb	r3, r3
  4004dc:	4a12      	ldr	r2, [pc, #72]	; (400528 <xPortStartScheduler+0xec>)
  4004de:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
  4004e0:	4b16      	ldr	r3, [pc, #88]	; (40053c <xPortStartScheduler+0x100>)
  4004e2:	681a      	ldr	r2, [r3, #0]
  4004e4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4004e8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
  4004ea:	681a      	ldr	r2, [r3, #0]
  4004ec:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4004f0:	601a      	str	r2, [r3, #0]
    vPortSetupTimerInterrupt();
  4004f2:	4b13      	ldr	r3, [pc, #76]	; (400540 <xPortStartScheduler+0x104>)
  4004f4:	4798      	blx	r3
    uxCriticalNesting = 0;
  4004f6:	2400      	movs	r4, #0
  4004f8:	4b12      	ldr	r3, [pc, #72]	; (400544 <xPortStartScheduler+0x108>)
  4004fa:	601c      	str	r4, [r3, #0]
    vPortEnableVFP();
  4004fc:	4b12      	ldr	r3, [pc, #72]	; (400548 <xPortStartScheduler+0x10c>)
  4004fe:	4798      	blx	r3
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400500:	4a12      	ldr	r2, [pc, #72]	; (40054c <xPortStartScheduler+0x110>)
  400502:	6813      	ldr	r3, [r2, #0]
  400504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400508:	6013      	str	r3, [r2, #0]
    prvPortStartFirstTask();
  40050a:	4b11      	ldr	r3, [pc, #68]	; (400550 <xPortStartScheduler+0x114>)
  40050c:	4798      	blx	r3
    vTaskSwitchContext();
  40050e:	4b11      	ldr	r3, [pc, #68]	; (400554 <xPortStartScheduler+0x118>)
  400510:	4798      	blx	r3
    prvTaskExitError();
  400512:	4b11      	ldr	r3, [pc, #68]	; (400558 <xPortStartScheduler+0x11c>)
  400514:	4798      	blx	r3
}
  400516:	4620      	mov	r0, r4
  400518:	b002      	add	sp, #8
  40051a:	bd10      	pop	{r4, pc}
  40051c:	e000ed00 	.word	0xe000ed00
  400520:	410fc271 	.word	0x410fc271
  400524:	410fc270 	.word	0x410fc270
  400528:	e000e400 	.word	0xe000e400
  40052c:	20000468 	.word	0x20000468
  400530:	2000046c 	.word	0x2000046c
  400534:	004030bc 	.word	0x004030bc
  400538:	00402b79 	.word	0x00402b79
  40053c:	e000ed20 	.word	0xe000ed20
  400540:	00400405 	.word	0x00400405
  400544:	20000004 	.word	0x20000004
  400548:	00400249 	.word	0x00400249
  40054c:	e000ef34 	.word	0xe000ef34
  400550:	00400221 	.word	0x00400221
  400554:	004018d9 	.word	0x004018d9
  400558:	0040025d 	.word	0x0040025d

0040055c <prvInsertBlockIntoFreeList>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert )
{
  40055c:	b410      	push	{r4}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40055e:	4a13      	ldr	r2, [pc, #76]	; (4005ac <prvInsertBlockIntoFreeList+0x50>)
  400560:	e000      	b.n	400564 <prvInsertBlockIntoFreeList+0x8>
  400562:	461a      	mov	r2, r3
  400564:	6813      	ldr	r3, [r2, #0]
  400566:	4283      	cmp	r3, r0
  400568:	d3fb      	bcc.n	400562 <prvInsertBlockIntoFreeList+0x6>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40056a:	6851      	ldr	r1, [r2, #4]
  40056c:	1854      	adds	r4, r2, r1
  40056e:	42a0      	cmp	r0, r4
  400570:	d00a      	beq.n	400588 <prvInsertBlockIntoFreeList+0x2c>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  400572:	6841      	ldr	r1, [r0, #4]
  400574:	1844      	adds	r4, r0, r1
  400576:	42a3      	cmp	r3, r4
  400578:	d00b      	beq.n	400592 <prvInsertBlockIntoFreeList+0x36>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  40057a:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
  40057c:	4290      	cmp	r0, r2
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40057e:	bf18      	it	ne
  400580:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
  400582:	f85d 4b04 	ldr.w	r4, [sp], #4
  400586:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400588:	6840      	ldr	r0, [r0, #4]
  40058a:	4401      	add	r1, r0
  40058c:	6051      	str	r1, [r2, #4]
  40058e:	4610      	mov	r0, r2
  400590:	e7ef      	b.n	400572 <prvInsertBlockIntoFreeList+0x16>
        if( pxIterator->pxNextFreeBlock != pxEnd )
  400592:	4c07      	ldr	r4, [pc, #28]	; (4005b0 <prvInsertBlockIntoFreeList+0x54>)
  400594:	6824      	ldr	r4, [r4, #0]
  400596:	42a3      	cmp	r3, r4
  400598:	d006      	beq.n	4005a8 <prvInsertBlockIntoFreeList+0x4c>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  40059a:	685b      	ldr	r3, [r3, #4]
  40059c:	4419      	add	r1, r3
  40059e:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4005a0:	6813      	ldr	r3, [r2, #0]
  4005a2:	681b      	ldr	r3, [r3, #0]
  4005a4:	6003      	str	r3, [r0, #0]
  4005a6:	e7e9      	b.n	40057c <prvInsertBlockIntoFreeList+0x20>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4005a8:	6003      	str	r3, [r0, #0]
  4005aa:	e7e7      	b.n	40057c <prvInsertBlockIntoFreeList+0x20>
  4005ac:	20000488 	.word	0x20000488
  4005b0:	20000470 	.word	0x20000470

004005b4 <pvPortMalloc>:
{
  4005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005b6:	4604      	mov	r4, r0
    configASSERT( pxEnd );
  4005b8:	4b2f      	ldr	r3, [pc, #188]	; (400678 <pvPortMalloc+0xc4>)
  4005ba:	681b      	ldr	r3, [r3, #0]
  4005bc:	b1eb      	cbz	r3, 4005fa <pvPortMalloc+0x46>
    vTaskSuspendAll();
  4005be:	4b2f      	ldr	r3, [pc, #188]	; (40067c <pvPortMalloc+0xc8>)
  4005c0:	4798      	blx	r3
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4005c2:	4b2f      	ldr	r3, [pc, #188]	; (400680 <pvPortMalloc+0xcc>)
  4005c4:	681d      	ldr	r5, [r3, #0]
  4005c6:	4225      	tst	r5, r4
  4005c8:	d14d      	bne.n	400666 <pvPortMalloc+0xb2>
            if( ( xWantedSize > 0 ) &&
  4005ca:	2c00      	cmp	r4, #0
  4005cc:	d04e      	beq.n	40066c <pvPortMalloc+0xb8>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
  4005ce:	f104 0108 	add.w	r1, r4, #8
            if( ( xWantedSize > 0 ) &&
  4005d2:	428c      	cmp	r4, r1
  4005d4:	d24a      	bcs.n	40066c <pvPortMalloc+0xb8>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4005d6:	f011 0f07 	tst.w	r1, #7
  4005da:	d005      	beq.n	4005e8 <pvPortMalloc+0x34>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) >
  4005dc:	f021 0307 	bic.w	r3, r1, #7
  4005e0:	3308      	adds	r3, #8
  4005e2:	4299      	cmp	r1, r3
  4005e4:	d242      	bcs.n	40066c <pvPortMalloc+0xb8>
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4005e6:	4619      	mov	r1, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  4005e8:	2900      	cmp	r1, #0
  4005ea:	d03c      	beq.n	400666 <pvPortMalloc+0xb2>
  4005ec:	4b25      	ldr	r3, [pc, #148]	; (400684 <pvPortMalloc+0xd0>)
  4005ee:	681e      	ldr	r6, [r3, #0]
  4005f0:	42b1      	cmp	r1, r6
  4005f2:	d838      	bhi.n	400666 <pvPortMalloc+0xb2>
                pxBlock = xStart.pxNextFreeBlock;
  4005f4:	4a24      	ldr	r2, [pc, #144]	; (400688 <pvPortMalloc+0xd4>)
  4005f6:	6814      	ldr	r4, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4005f8:	e006      	b.n	400608 <pvPortMalloc+0x54>
    configASSERT( pxEnd );
  4005fa:	218e      	movs	r1, #142	; 0x8e
  4005fc:	4823      	ldr	r0, [pc, #140]	; (40068c <pvPortMalloc+0xd8>)
  4005fe:	4b24      	ldr	r3, [pc, #144]	; (400690 <pvPortMalloc+0xdc>)
  400600:	4798      	blx	r3
  400602:	e7dc      	b.n	4005be <pvPortMalloc+0xa>
  400604:	4622      	mov	r2, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
  400606:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400608:	6863      	ldr	r3, [r4, #4]
  40060a:	4299      	cmp	r1, r3
  40060c:	d902      	bls.n	400614 <pvPortMalloc+0x60>
  40060e:	6823      	ldr	r3, [r4, #0]
  400610:	2b00      	cmp	r3, #0
  400612:	d1f7      	bne.n	400604 <pvPortMalloc+0x50>
                if( pxBlock != pxEnd )
  400614:	4b18      	ldr	r3, [pc, #96]	; (400678 <pvPortMalloc+0xc4>)
  400616:	681b      	ldr	r3, [r3, #0]
  400618:	429c      	cmp	r4, r3
  40061a:	d024      	beq.n	400666 <pvPortMalloc+0xb2>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  40061c:	6817      	ldr	r7, [r2, #0]
  40061e:	3708      	adds	r7, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400620:	6823      	ldr	r3, [r4, #0]
  400622:	6013      	str	r3, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400624:	6863      	ldr	r3, [r4, #4]
  400626:	1a5b      	subs	r3, r3, r1
  400628:	2b10      	cmp	r3, #16
  40062a:	d816      	bhi.n	40065a <pvPortMalloc+0xa6>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  40062c:	6862      	ldr	r2, [r4, #4]
  40062e:	1ab6      	subs	r6, r6, r2
  400630:	4914      	ldr	r1, [pc, #80]	; (400684 <pvPortMalloc+0xd0>)
  400632:	600e      	str	r6, [r1, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  400634:	4917      	ldr	r1, [pc, #92]	; (400694 <pvPortMalloc+0xe0>)
  400636:	6809      	ldr	r1, [r1, #0]
  400638:	428e      	cmp	r6, r1
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  40063a:	bf3c      	itt	cc
  40063c:	4915      	ldrcc	r1, [pc, #84]	; (400694 <pvPortMalloc+0xe0>)
  40063e:	600e      	strcc	r6, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
  400640:	4315      	orrs	r5, r2
  400642:	6065      	str	r5, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
  400644:	2300      	movs	r3, #0
  400646:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
  400648:	4a13      	ldr	r2, [pc, #76]	; (400698 <pvPortMalloc+0xe4>)
  40064a:	6813      	ldr	r3, [r2, #0]
  40064c:	3301      	adds	r3, #1
  40064e:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
  400650:	4b12      	ldr	r3, [pc, #72]	; (40069c <pvPortMalloc+0xe8>)
  400652:	4798      	blx	r3
            if( pvReturn == NULL )
  400654:	b167      	cbz	r7, 400670 <pvPortMalloc+0xbc>
}
  400656:	4638      	mov	r0, r7
  400658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  40065a:	1860      	adds	r0, r4, r1
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40065c:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
  40065e:	6061      	str	r1, [r4, #4]
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400660:	4b0f      	ldr	r3, [pc, #60]	; (4006a0 <pvPortMalloc+0xec>)
  400662:	4798      	blx	r3
  400664:	e7e2      	b.n	40062c <pvPortMalloc+0x78>
    ( void ) xTaskResumeAll();
  400666:	4b0d      	ldr	r3, [pc, #52]	; (40069c <pvPortMalloc+0xe8>)
  400668:	4798      	blx	r3
  40066a:	e001      	b.n	400670 <pvPortMalloc+0xbc>
  40066c:	4b0b      	ldr	r3, [pc, #44]	; (40069c <pvPortMalloc+0xe8>)
  40066e:	4798      	blx	r3
                vApplicationMallocFailedHook();
  400670:	4b0c      	ldr	r3, [pc, #48]	; (4006a4 <pvPortMalloc+0xf0>)
  400672:	4798      	blx	r3
  400674:	2700      	movs	r7, #0
    return pvReturn;
  400676:	e7ee      	b.n	400656 <pvPortMalloc+0xa2>
  400678:	20000470 	.word	0x20000470
  40067c:	00401509 	.word	0x00401509
  400680:	20000474 	.word	0x20000474
  400684:	20000478 	.word	0x20000478
  400688:	20000488 	.word	0x20000488
  40068c:	004030ec 	.word	0x004030ec
  400690:	00402b79 	.word	0x00402b79
  400694:	2000047c 	.word	0x2000047c
  400698:	20000480 	.word	0x20000480
  40069c:	004016e1 	.word	0x004016e1
  4006a0:	0040055d 	.word	0x0040055d
  4006a4:	00402ba5 	.word	0x00402ba5

004006a8 <vPortFree>:
    if( pv != NULL )
  4006a8:	2800      	cmp	r0, #0
  4006aa:	d044      	beq.n	400736 <vPortFree+0x8e>
{
  4006ac:	b510      	push	{r4, lr}
  4006ae:	4604      	mov	r4, r0
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006b0:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4006b4:	4b20      	ldr	r3, [pc, #128]	; (400738 <vPortFree+0x90>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	421a      	tst	r2, r3
  4006ba:	d011      	beq.n	4006e0 <vPortFree+0x38>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006bc:	f850 3c08 	ldr.w	r3, [r0, #-8]
  4006c0:	b1f3      	cbz	r3, 400700 <vPortFree+0x58>
  4006c2:	f240 112d 	movw	r1, #301	; 0x12d
  4006c6:	481d      	ldr	r0, [pc, #116]	; (40073c <vPortFree+0x94>)
  4006c8:	4b1d      	ldr	r3, [pc, #116]	; (400740 <vPortFree+0x98>)
  4006ca:	4798      	blx	r3
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006d0:	4a19      	ldr	r2, [pc, #100]	; (400738 <vPortFree+0x90>)
  4006d2:	6812      	ldr	r2, [r2, #0]
  4006d4:	4213      	tst	r3, r2
  4006d6:	d002      	beq.n	4006de <vPortFree+0x36>
            if( pxLink->pxNextFreeBlock == NULL )
  4006d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4006dc:	b1a1      	cbz	r1, 400708 <vPortFree+0x60>
  4006de:	bd10      	pop	{r4, pc}
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
  4006e4:	4815      	ldr	r0, [pc, #84]	; (40073c <vPortFree+0x94>)
  4006e6:	4b16      	ldr	r3, [pc, #88]	; (400740 <vPortFree+0x98>)
  4006e8:	4798      	blx	r3
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006ea:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4006ee:	2b00      	cmp	r3, #0
  4006f0:	d1e7      	bne.n	4006c2 <vPortFree+0x1a>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006f6:	4a10      	ldr	r2, [pc, #64]	; (400738 <vPortFree+0x90>)
  4006f8:	6812      	ldr	r2, [r2, #0]
  4006fa:	4213      	tst	r3, r2
  4006fc:	d0ef      	beq.n	4006de <vPortFree+0x36>
  4006fe:	e003      	b.n	400708 <vPortFree+0x60>
  400700:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400704:	4a0c      	ldr	r2, [pc, #48]	; (400738 <vPortFree+0x90>)
  400706:	6812      	ldr	r2, [r2, #0]
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
  400708:	ea23 0302 	bic.w	r3, r3, r2
  40070c:	f844 3c04 	str.w	r3, [r4, #-4]
                vTaskSuspendAll();
  400710:	4b0c      	ldr	r3, [pc, #48]	; (400744 <vPortFree+0x9c>)
  400712:	4798      	blx	r3
                    xFreeBytesRemaining += pxLink->xBlockSize;
  400714:	4a0c      	ldr	r2, [pc, #48]	; (400748 <vPortFree+0xa0>)
  400716:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40071a:	6811      	ldr	r1, [r2, #0]
  40071c:	440b      	add	r3, r1
  40071e:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  400720:	f1a4 0008 	sub.w	r0, r4, #8
  400724:	4b09      	ldr	r3, [pc, #36]	; (40074c <vPortFree+0xa4>)
  400726:	4798      	blx	r3
                    xNumberOfSuccessfulFrees++;
  400728:	4a09      	ldr	r2, [pc, #36]	; (400750 <vPortFree+0xa8>)
  40072a:	6813      	ldr	r3, [r2, #0]
  40072c:	3301      	adds	r3, #1
  40072e:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
  400730:	4b08      	ldr	r3, [pc, #32]	; (400754 <vPortFree+0xac>)
  400732:	4798      	blx	r3
}
  400734:	bd10      	pop	{r4, pc}
  400736:	4770      	bx	lr
  400738:	20000474 	.word	0x20000474
  40073c:	004030ec 	.word	0x004030ec
  400740:	00402b79 	.word	0x00402b79
  400744:	00401509 	.word	0x00401509
  400748:	20000478 	.word	0x20000478
  40074c:	0040055d 	.word	0x0040055d
  400750:	20000484 	.word	0x20000484
  400754:	004016e1 	.word	0x004016e1

00400758 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40075c:	4605      	mov	r5, r0
    BaseType_t xDefinedRegions = 0;
    size_t xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
  40075e:	4b35      	ldr	r3, [pc, #212]	; (400834 <vPortDefineHeapRegions+0xdc>)
  400760:	681b      	ldr	r3, [r3, #0]
  400762:	b123      	cbz	r3, 40076e <vPortDefineHeapRegions+0x16>
  400764:	f240 11a3 	movw	r1, #419	; 0x1a3
  400768:	4833      	ldr	r0, [pc, #204]	; (400838 <vPortDefineHeapRegions+0xe0>)
  40076a:	4b34      	ldr	r3, [pc, #208]	; (40083c <vPortDefineHeapRegions+0xe4>)
  40076c:	4798      	blx	r3

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

    while( pxHeapRegion->xSizeInBytes > 0 )
  40076e:	f8d5 b004 	ldr.w	fp, [r5, #4]
  400772:	f1bb 0f00 	cmp.w	fp, #0
  400776:	d052      	beq.n	40081e <vPortDefineHeapRegions+0xc6>
  400778:	3508      	adds	r5, #8
  40077a:	2600      	movs	r6, #0
  40077c:	46b0      	mov	r8, r6
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != NULL );
  40077e:	4f2d      	ldr	r7, [pc, #180]	; (400834 <vPortDefineHeapRegions+0xdc>)

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( xAddress > ( size_t ) pxEnd );
  400780:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400838 <vPortDefineHeapRegions+0xe0>
  400784:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 40083c <vPortDefineHeapRegions+0xe4>
  400788:	e01d      	b.n	4007c6 <vPortDefineHeapRegions+0x6e>
            configASSERT( pxEnd != NULL );
  40078a:	683b      	ldr	r3, [r7, #0]
  40078c:	b373      	cbz	r3, 4007ec <vPortDefineHeapRegions+0x94>
            configASSERT( xAddress > ( size_t ) pxEnd );
  40078e:	683b      	ldr	r3, [r7, #0]
  400790:	42a3      	cmp	r3, r4
  400792:	d230      	bcs.n	4007f6 <vPortDefineHeapRegions+0x9e>
        }

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
  400794:	6839      	ldr	r1, [r7, #0]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + xTotalRegionSize;
  400796:	eb0b 0304 	add.w	r3, fp, r4
        xAddress -= xHeapStructSize;
  40079a:	3b08      	subs	r3, #8
        xAddress &= ~portBYTE_ALIGNMENT_MASK;
  40079c:	f023 0307 	bic.w	r3, r3, #7
        pxEnd = ( BlockLink_t * ) xAddress;
  4007a0:	603b      	str	r3, [r7, #0]
        pxEnd->xBlockSize = 0;
  4007a2:	2200      	movs	r2, #0
  4007a4:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = NULL;
  4007a6:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  4007a8:	4622      	mov	r2, r4
        pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  4007aa:	1b18      	subs	r0, r3, r4
  4007ac:	6060      	str	r0, [r4, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  4007ae:	6023      	str	r3, [r4, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
  4007b0:	b101      	cbz	r1, 4007b4 <vPortDefineHeapRegions+0x5c>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  4007b2:	600c      	str	r4, [r1, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  4007b4:	6853      	ldr	r3, [r2, #4]
  4007b6:	4498      	add	r8, r3

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
  4007b8:	3601      	adds	r6, #1
  4007ba:	3508      	adds	r5, #8
    while( pxHeapRegion->xSizeInBytes > 0 )
  4007bc:	f855 bc04 	ldr.w	fp, [r5, #-4]
  4007c0:	f1bb 0f00 	cmp.w	fp, #0
  4007c4:	d01c      	beq.n	400800 <vPortDefineHeapRegions+0xa8>
        xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  4007c6:	f855 4c08 	ldr.w	r4, [r5, #-8]
        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4007ca:	f014 0f07 	tst.w	r4, #7
  4007ce:	d006      	beq.n	4007de <vPortDefineHeapRegions+0x86>
            xAddress += ( portBYTE_ALIGNMENT - 1 );
  4007d0:	1de2      	adds	r2, r4, #7
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007d2:	f022 0207 	bic.w	r2, r2, #7
            xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  4007d6:	44a3      	add	fp, r4
  4007d8:	ebab 0b02 	sub.w	fp, fp, r2
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007dc:	4614      	mov	r4, r2
        if( xDefinedRegions == 0 )
  4007de:	2e00      	cmp	r6, #0
  4007e0:	d1d3      	bne.n	40078a <vPortDefineHeapRegions+0x32>
            xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  4007e2:	4b17      	ldr	r3, [pc, #92]	; (400840 <vPortDefineHeapRegions+0xe8>)
  4007e4:	601c      	str	r4, [r3, #0]
            xStart.xBlockSize = ( size_t ) 0;
  4007e6:	2200      	movs	r2, #0
  4007e8:	605a      	str	r2, [r3, #4]
  4007ea:	e7d3      	b.n	400794 <vPortDefineHeapRegions+0x3c>
            configASSERT( pxEnd != NULL );
  4007ec:	f240 11c5 	movw	r1, #453	; 0x1c5
  4007f0:	4650      	mov	r0, sl
  4007f2:	47c8      	blx	r9
  4007f4:	e7cb      	b.n	40078e <vPortDefineHeapRegions+0x36>
            configASSERT( xAddress > ( size_t ) pxEnd );
  4007f6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  4007fa:	4650      	mov	r0, sl
  4007fc:	47c8      	blx	r9
  4007fe:	e7c9      	b.n	400794 <vPortDefineHeapRegions+0x3c>
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  400800:	4b10      	ldr	r3, [pc, #64]	; (400844 <vPortDefineHeapRegions+0xec>)
  400802:	f8c3 8000 	str.w	r8, [r3]
    xFreeBytesRemaining = xTotalHeapSize;
  400806:	4b10      	ldr	r3, [pc, #64]	; (400848 <vPortDefineHeapRegions+0xf0>)
  400808:	f8c3 8000 	str.w	r8, [r3]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
  40080c:	f1b8 0f00 	cmp.w	r8, #0
  400810:	d00a      	beq.n	400828 <vPortDefineHeapRegions+0xd0>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  400812:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400816:	4b0d      	ldr	r3, [pc, #52]	; (40084c <vPortDefineHeapRegions+0xf4>)
  400818:	601a      	str	r2, [r3, #0]
}
  40081a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  40081e:	2300      	movs	r3, #0
  400820:	4a08      	ldr	r2, [pc, #32]	; (400844 <vPortDefineHeapRegions+0xec>)
  400822:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
  400824:	4a08      	ldr	r2, [pc, #32]	; (400848 <vPortDefineHeapRegions+0xf0>)
  400826:	6013      	str	r3, [r2, #0]
    configASSERT( xTotalHeapSize );
  400828:	f240 11f1 	movw	r1, #497	; 0x1f1
  40082c:	4802      	ldr	r0, [pc, #8]	; (400838 <vPortDefineHeapRegions+0xe0>)
  40082e:	4b03      	ldr	r3, [pc, #12]	; (40083c <vPortDefineHeapRegions+0xe4>)
  400830:	4798      	blx	r3
  400832:	e7ee      	b.n	400812 <vPortDefineHeapRegions+0xba>
  400834:	20000470 	.word	0x20000470
  400838:	004030ec 	.word	0x004030ec
  40083c:	00402b79 	.word	0x00402b79
  400840:	20000488 	.word	0x20000488
  400844:	2000047c 	.word	0x2000047c
  400848:	20000478 	.word	0x20000478
  40084c:	20000474 	.word	0x20000474

00400850 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
  400850:	b510      	push	{r4, lr}
  400852:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
  400854:	4b04      	ldr	r3, [pc, #16]	; (400868 <prvIsQueueEmpty+0x18>)
  400856:	4798      	blx	r3
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
  400858:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
  40085a:	4b04      	ldr	r3, [pc, #16]	; (40086c <prvIsQueueEmpty+0x1c>)
  40085c:	4798      	blx	r3

    return xReturn;
}
  40085e:	fab4 f084 	clz	r0, r4
  400862:	0940      	lsrs	r0, r0, #5
  400864:	bd10      	pop	{r4, pc}
  400866:	bf00      	nop
  400868:	004002f5 	.word	0x004002f5
  40086c:	0040033d 	.word	0x0040033d

00400870 <prvCopyDataToQueue>:
{
  400870:	b570      	push	{r4, r5, r6, lr}
  400872:	4604      	mov	r4, r0
  400874:	4616      	mov	r6, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400876:	6b85      	ldr	r5, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400878:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40087a:	b95a      	cbnz	r2, 400894 <prvCopyDataToQueue+0x24>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40087c:	6803      	ldr	r3, [r0, #0]
    BaseType_t xReturn = pdFALSE;
  40087e:	2000      	movs	r0, #0
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400880:	b113      	cbz	r3, 400888 <prvCopyDataToQueue+0x18>
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  400882:	3501      	adds	r5, #1
  400884:	63a5      	str	r5, [r4, #56]	; 0x38
}
  400886:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400888:	68a0      	ldr	r0, [r4, #8]
  40088a:	4b17      	ldr	r3, [pc, #92]	; (4008e8 <prvCopyDataToQueue+0x78>)
  40088c:	4798      	blx	r3
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
  40088e:	2300      	movs	r3, #0
  400890:	60a3      	str	r3, [r4, #8]
  400892:	e7f6      	b.n	400882 <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
  400894:	b96e      	cbnz	r6, 4008b2 <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400896:	6840      	ldr	r0, [r0, #4]
  400898:	4b14      	ldr	r3, [pc, #80]	; (4008ec <prvCopyDataToQueue+0x7c>)
  40089a:	4798      	blx	r3
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  40089c:	6863      	ldr	r3, [r4, #4]
  40089e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008a0:	4413      	add	r3, r2
  4008a2:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008a4:	68a2      	ldr	r2, [r4, #8]
  4008a6:	4293      	cmp	r3, r2
  4008a8:	d319      	bcc.n	4008de <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
  4008aa:	6823      	ldr	r3, [r4, #0]
  4008ac:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
  4008ae:	2000      	movs	r0, #0
  4008b0:	e7e7      	b.n	400882 <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  4008b2:	68c0      	ldr	r0, [r0, #12]
  4008b4:	4b0d      	ldr	r3, [pc, #52]	; (4008ec <prvCopyDataToQueue+0x7c>)
  4008b6:	4798      	blx	r3
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  4008b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008ba:	4252      	negs	r2, r2
  4008bc:	68e3      	ldr	r3, [r4, #12]
  4008be:	4413      	add	r3, r2
  4008c0:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008c2:	6821      	ldr	r1, [r4, #0]
  4008c4:	428b      	cmp	r3, r1
  4008c6:	d202      	bcs.n	4008ce <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  4008c8:	68a3      	ldr	r3, [r4, #8]
  4008ca:	441a      	add	r2, r3
  4008cc:	60e2      	str	r2, [r4, #12]
        if( xPosition == queueOVERWRITE )
  4008ce:	2e02      	cmp	r6, #2
  4008d0:	d001      	beq.n	4008d6 <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
  4008d2:	2000      	movs	r0, #0
  4008d4:	e7d5      	b.n	400882 <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4008d6:	b125      	cbz	r5, 4008e2 <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
  4008d8:	3d01      	subs	r5, #1
    BaseType_t xReturn = pdFALSE;
  4008da:	2000      	movs	r0, #0
  4008dc:	e7d1      	b.n	400882 <prvCopyDataToQueue+0x12>
  4008de:	2000      	movs	r0, #0
  4008e0:	e7cf      	b.n	400882 <prvCopyDataToQueue+0x12>
  4008e2:	2000      	movs	r0, #0
  4008e4:	e7cd      	b.n	400882 <prvCopyDataToQueue+0x12>
  4008e6:	bf00      	nop
  4008e8:	00401d11 	.word	0x00401d11
  4008ec:	00402c21 	.word	0x00402c21

004008f0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
  4008f0:	b570      	push	{r4, r5, r6, lr}
  4008f2:	b082      	sub	sp, #8
  4008f4:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4008f6:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  4008f8:	b15c      	cbz	r4, 400912 <prvNotifyQueueSetContainer+0x22>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4008fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4008fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4008fe:	429a      	cmp	r2, r3
  400900:	d20d      	bcs.n	40091e <prvNotifyQueueSetContainer+0x2e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400902:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400906:	429a      	cmp	r2, r3
  400908:	d30f      	bcc.n	40092a <prvNotifyQueueSetContainer+0x3a>
        BaseType_t xReturn = pdFALSE;
  40090a:	2600      	movs	r6, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
  40090c:	4630      	mov	r0, r6
  40090e:	b002      	add	sp, #8
  400910:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400912:	f640 31d5 	movw	r1, #3029	; 0xbd5
  400916:	4817      	ldr	r0, [pc, #92]	; (400974 <prvNotifyQueueSetContainer+0x84>)
  400918:	4b17      	ldr	r3, [pc, #92]	; (400978 <prvNotifyQueueSetContainer+0x88>)
  40091a:	4798      	blx	r3
  40091c:	e7ed      	b.n	4008fa <prvNotifyQueueSetContainer+0xa>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40091e:	f640 31d6 	movw	r1, #3030	; 0xbd6
  400922:	4814      	ldr	r0, [pc, #80]	; (400974 <prvNotifyQueueSetContainer+0x84>)
  400924:	4b14      	ldr	r3, [pc, #80]	; (400978 <prvNotifyQueueSetContainer+0x88>)
  400926:	4798      	blx	r3
  400928:	e7eb      	b.n	400902 <prvNotifyQueueSetContainer+0x12>
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40092a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  40092e:	b26d      	sxtb	r5, r5
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
  400930:	2200      	movs	r2, #0
  400932:	a901      	add	r1, sp, #4
  400934:	4620      	mov	r0, r4
  400936:	4b11      	ldr	r3, [pc, #68]	; (40097c <prvNotifyQueueSetContainer+0x8c>)
  400938:	4798      	blx	r3
  40093a:	4606      	mov	r6, r0
            if( cTxLock == queueUNLOCKED )
  40093c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400940:	d006      	beq.n	400950 <prvNotifyQueueSetContainer+0x60>
                configASSERT( cTxLock != queueINT8_MAX );
  400942:	2d7f      	cmp	r5, #127	; 0x7f
  400944:	d00f      	beq.n	400966 <prvNotifyQueueSetContainer+0x76>
                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400946:	3501      	adds	r5, #1
  400948:	b26d      	sxtb	r5, r5
  40094a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  40094e:	e7dd      	b.n	40090c <prvNotifyQueueSetContainer+0x1c>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400950:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400952:	2b00      	cmp	r3, #0
  400954:	d0da      	beq.n	40090c <prvNotifyQueueSetContainer+0x1c>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400956:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40095a:	4b09      	ldr	r3, [pc, #36]	; (400980 <prvNotifyQueueSetContainer+0x90>)
  40095c:	4798      	blx	r3
  40095e:	2800      	cmp	r0, #0
                        xReturn = pdTRUE;
  400960:	bf18      	it	ne
  400962:	2601      	movne	r6, #1
  400964:	e7d2      	b.n	40090c <prvNotifyQueueSetContainer+0x1c>
                configASSERT( cTxLock != queueINT8_MAX );
  400966:	f640 31f6 	movw	r1, #3062	; 0xbf6
  40096a:	4802      	ldr	r0, [pc, #8]	; (400974 <prvNotifyQueueSetContainer+0x84>)
  40096c:	4b02      	ldr	r3, [pc, #8]	; (400978 <prvNotifyQueueSetContainer+0x88>)
  40096e:	4798      	blx	r3
  400970:	e7e9      	b.n	400946 <prvNotifyQueueSetContainer+0x56>
  400972:	bf00      	nop
  400974:	00403118 	.word	0x00403118
  400978:	00402b79 	.word	0x00402b79
  40097c:	00400871 	.word	0x00400871
  400980:	00401b4d 	.word	0x00401b4d

00400984 <prvCopyDataFromQueue>:
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400984:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400986:	b172      	cbz	r2, 4009a6 <prvCopyDataFromQueue+0x22>
{
  400988:	b510      	push	{r4, lr}
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  40098a:	68c3      	ldr	r3, [r0, #12]
  40098c:	4413      	add	r3, r2
  40098e:	60c3      	str	r3, [r0, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400990:	6884      	ldr	r4, [r0, #8]
  400992:	42a3      	cmp	r3, r4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  400994:	bf24      	itt	cs
  400996:	6803      	ldrcs	r3, [r0, #0]
  400998:	60c3      	strcs	r3, [r0, #12]
  40099a:	460c      	mov	r4, r1
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  40099c:	68c1      	ldr	r1, [r0, #12]
  40099e:	4620      	mov	r0, r4
  4009a0:	4b01      	ldr	r3, [pc, #4]	; (4009a8 <prvCopyDataFromQueue+0x24>)
  4009a2:	4798      	blx	r3
  4009a4:	bd10      	pop	{r4, pc}
  4009a6:	4770      	bx	lr
  4009a8:	00402c21 	.word	0x00402c21

004009ac <prvUnlockQueue>:
{
  4009ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009b0:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
  4009b2:	4b23      	ldr	r3, [pc, #140]	; (400a40 <prvUnlockQueue+0x94>)
  4009b4:	4798      	blx	r3
        int8_t cTxLock = pxQueue->cTxLock;
  4009b6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4009ba:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  4009bc:	2c00      	cmp	r4, #0
  4009be:	dd18      	ble.n	4009f2 <prvUnlockQueue+0x46>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4009c0:	4e20      	ldr	r6, [pc, #128]	; (400a44 <prvUnlockQueue+0x98>)
                            vTaskMissedYield();
  4009c2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400a50 <prvUnlockQueue+0xa4>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009c6:	4f20      	ldr	r7, [pc, #128]	; (400a48 <prvUnlockQueue+0x9c>)
  4009c8:	e008      	b.n	4009dc <prvUnlockQueue+0x30>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4009cc:	b18b      	cbz	r3, 4009f2 <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4009d2:	47b8      	blx	r7
  4009d4:	b958      	cbnz	r0, 4009ee <prvUnlockQueue+0x42>
  4009d6:	3c01      	subs	r4, #1
  4009d8:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  4009da:	b154      	cbz	r4, 4009f2 <prvUnlockQueue+0x46>
                    if( pxQueue->pxQueueSetContainer != NULL )
  4009dc:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4009de:	2b00      	cmp	r3, #0
  4009e0:	d0f3      	beq.n	4009ca <prvUnlockQueue+0x1e>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4009e2:	4628      	mov	r0, r5
  4009e4:	47b0      	blx	r6
  4009e6:	2800      	cmp	r0, #0
  4009e8:	d0f5      	beq.n	4009d6 <prvUnlockQueue+0x2a>
                            vTaskMissedYield();
  4009ea:	47c0      	blx	r8
  4009ec:	e7f3      	b.n	4009d6 <prvUnlockQueue+0x2a>
                                vTaskMissedYield();
  4009ee:	47c0      	blx	r8
  4009f0:	e7f1      	b.n	4009d6 <prvUnlockQueue+0x2a>
        pxQueue->cTxLock = queueUNLOCKED;
  4009f2:	23ff      	movs	r3, #255	; 0xff
  4009f4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
  4009f8:	4b14      	ldr	r3, [pc, #80]	; (400a4c <prvUnlockQueue+0xa0>)
  4009fa:	4798      	blx	r3
    taskENTER_CRITICAL();
  4009fc:	4b10      	ldr	r3, [pc, #64]	; (400a40 <prvUnlockQueue+0x94>)
  4009fe:	4798      	blx	r3
        int8_t cRxLock = pxQueue->cRxLock;
  400a00:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400a04:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400a06:	2c00      	cmp	r4, #0
  400a08:	dd12      	ble.n	400a30 <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a0a:	692b      	ldr	r3, [r5, #16]
  400a0c:	b183      	cbz	r3, 400a30 <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a0e:	f105 0710 	add.w	r7, r5, #16
  400a12:	4e0d      	ldr	r6, [pc, #52]	; (400a48 <prvUnlockQueue+0x9c>)
                    vTaskMissedYield();
  400a14:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400a50 <prvUnlockQueue+0xa4>
  400a18:	e004      	b.n	400a24 <prvUnlockQueue+0x78>
  400a1a:	3c01      	subs	r4, #1
  400a1c:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400a1e:	b13c      	cbz	r4, 400a30 <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a20:	692b      	ldr	r3, [r5, #16]
  400a22:	b12b      	cbz	r3, 400a30 <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a24:	4638      	mov	r0, r7
  400a26:	47b0      	blx	r6
  400a28:	2800      	cmp	r0, #0
  400a2a:	d0f6      	beq.n	400a1a <prvUnlockQueue+0x6e>
                    vTaskMissedYield();
  400a2c:	47c0      	blx	r8
  400a2e:	e7f4      	b.n	400a1a <prvUnlockQueue+0x6e>
        pxQueue->cRxLock = queueUNLOCKED;
  400a30:	23ff      	movs	r3, #255	; 0xff
  400a32:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
  400a36:	4b05      	ldr	r3, [pc, #20]	; (400a4c <prvUnlockQueue+0xa0>)
  400a38:	4798      	blx	r3
  400a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a3e:	bf00      	nop
  400a40:	004002f5 	.word	0x004002f5
  400a44:	004008f1 	.word	0x004008f1
  400a48:	00401b4d 	.word	0x00401b4d
  400a4c:	0040033d 	.word	0x0040033d
  400a50:	00401ce5 	.word	0x00401ce5

00400a54 <xQueueGenericReset>:
{
  400a54:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
  400a56:	b150      	cbz	r0, 400a6e <xQueueGenericReset+0x1a>
  400a58:	460d      	mov	r5, r1
  400a5a:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
  400a5c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
  400a5e:	b963      	cbnz	r3, 400a7a <xQueueGenericReset+0x26>
    configASSERT( xReturn != pdFAIL );
  400a60:	f240 1145 	movw	r1, #325	; 0x145
  400a64:	4821      	ldr	r0, [pc, #132]	; (400aec <xQueueGenericReset+0x98>)
  400a66:	4b22      	ldr	r3, [pc, #136]	; (400af0 <xQueueGenericReset+0x9c>)
  400a68:	4798      	blx	r3
  400a6a:	2000      	movs	r0, #0
    return xReturn;
  400a6c:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxQueue );
  400a6e:	f44f 7188 	mov.w	r1, #272	; 0x110
  400a72:	481e      	ldr	r0, [pc, #120]	; (400aec <xQueueGenericReset+0x98>)
  400a74:	4b1e      	ldr	r3, [pc, #120]	; (400af0 <xQueueGenericReset+0x9c>)
  400a76:	4798      	blx	r3
  400a78:	e7f2      	b.n	400a60 <xQueueGenericReset+0xc>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
  400a7a:	f04f 32ff 	mov.w	r2, #4294967295
  400a7e:	fbb2 f3f3 	udiv	r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
  400a82:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400a84:	4293      	cmp	r3, r2
  400a86:	d3eb      	bcc.n	400a60 <xQueueGenericReset+0xc>
        taskENTER_CRITICAL();
  400a88:	4b1a      	ldr	r3, [pc, #104]	; (400af4 <xQueueGenericReset+0xa0>)
  400a8a:	4798      	blx	r3
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a8c:	6822      	ldr	r2, [r4, #0]
  400a8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a92:	fb03 f301 	mul.w	r3, r3, r1
  400a96:	18d0      	adds	r0, r2, r3
  400a98:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a9a:	2000      	movs	r0, #0
  400a9c:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400a9e:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400aa0:	1a5b      	subs	r3, r3, r1
  400aa2:	4413      	add	r3, r2
  400aa4:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
  400aa6:	23ff      	movs	r3, #255	; 0xff
  400aa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
  400aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
  400ab0:	b9a5      	cbnz	r5, 400adc <xQueueGenericReset+0x88>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ab2:	6923      	ldr	r3, [r4, #16]
  400ab4:	b91b      	cbnz	r3, 400abe <xQueueGenericReset+0x6a>
        taskEXIT_CRITICAL();
  400ab6:	4b10      	ldr	r3, [pc, #64]	; (400af8 <xQueueGenericReset+0xa4>)
  400ab8:	4798      	blx	r3
    BaseType_t xReturn = pdPASS;
  400aba:	2001      	movs	r0, #1
  400abc:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400abe:	f104 0010 	add.w	r0, r4, #16
  400ac2:	4b0e      	ldr	r3, [pc, #56]	; (400afc <xQueueGenericReset+0xa8>)
  400ac4:	4798      	blx	r3
  400ac6:	2800      	cmp	r0, #0
  400ac8:	d0f5      	beq.n	400ab6 <xQueueGenericReset+0x62>
                        queueYIELD_IF_USING_PREEMPTION();
  400aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ace:	4b0c      	ldr	r3, [pc, #48]	; (400b00 <xQueueGenericReset+0xac>)
  400ad0:	601a      	str	r2, [r3, #0]
  400ad2:	f3bf 8f4f 	dsb	sy
  400ad6:	f3bf 8f6f 	isb	sy
  400ada:	e7ec      	b.n	400ab6 <xQueueGenericReset+0x62>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400adc:	f104 0010 	add.w	r0, r4, #16
  400ae0:	4d08      	ldr	r5, [pc, #32]	; (400b04 <xQueueGenericReset+0xb0>)
  400ae2:	47a8      	blx	r5
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400ae4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ae8:	47a8      	blx	r5
  400aea:	e7e4      	b.n	400ab6 <xQueueGenericReset+0x62>
  400aec:	00403118 	.word	0x00403118
  400af0:	00402b79 	.word	0x00402b79
  400af4:	004002f5 	.word	0x004002f5
  400af8:	0040033d 	.word	0x0040033d
  400afc:	00401b4d 	.word	0x00401b4d
  400b00:	e000ed04 	.word	0xe000ed04
  400b04:	00400191 	.word	0x00400191

00400b08 <xQueueGenericCreate>:
    {
  400b08:	b570      	push	{r4, r5, r6, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400b0a:	b308      	cbz	r0, 400b50 <xQueueGenericCreate+0x48>
  400b0c:	460d      	mov	r5, r1
  400b0e:	4606      	mov	r6, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400b10:	f04f 33ff 	mov.w	r3, #4294967295
  400b14:	fbb3 f3f0 	udiv	r3, r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400b18:	428b      	cmp	r3, r1
  400b1a:	d319      	bcc.n	400b50 <xQueueGenericCreate+0x48>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
  400b1c:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400b20:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
  400b24:	d814      	bhi.n	400b50 <xQueueGenericCreate+0x48>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400b26:	304c      	adds	r0, #76	; 0x4c
  400b28:	4b0d      	ldr	r3, [pc, #52]	; (400b60 <xQueueGenericCreate+0x58>)
  400b2a:	4798      	blx	r3
            if( pxNewQueue != NULL )
  400b2c:	4604      	mov	r4, r0
  400b2e:	b158      	cbz	r0, 400b48 <xQueueGenericCreate+0x40>
    if( uxItemSize == ( UBaseType_t ) 0 )
  400b30:	b165      	cbz	r5, 400b4c <xQueueGenericCreate+0x44>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400b32:	f100 034c 	add.w	r3, r0, #76	; 0x4c
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400b36:	6003      	str	r3, [r0, #0]
    pxNewQueue->uxLength = uxQueueLength;
  400b38:	63e6      	str	r6, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
  400b3a:	6425      	str	r5, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400b3c:	2101      	movs	r1, #1
  400b3e:	4620      	mov	r0, r4
  400b40:	4b08      	ldr	r3, [pc, #32]	; (400b64 <xQueueGenericCreate+0x5c>)
  400b42:	4798      	blx	r3
            pxNewQueue->pxQueueSetContainer = NULL;
  400b44:	2300      	movs	r3, #0
  400b46:	64a3      	str	r3, [r4, #72]	; 0x48
    }
  400b48:	4620      	mov	r0, r4
  400b4a:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400b4c:	6020      	str	r0, [r4, #0]
  400b4e:	e7f3      	b.n	400b38 <xQueueGenericCreate+0x30>
            configASSERT( pxNewQueue );
  400b50:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
  400b54:	4804      	ldr	r0, [pc, #16]	; (400b68 <xQueueGenericCreate+0x60>)
  400b56:	4b05      	ldr	r3, [pc, #20]	; (400b6c <xQueueGenericCreate+0x64>)
  400b58:	4798      	blx	r3
        Queue_t * pxNewQueue = NULL;
  400b5a:	2400      	movs	r4, #0
        return pxNewQueue;
  400b5c:	e7f4      	b.n	400b48 <xQueueGenericCreate+0x40>
  400b5e:	bf00      	nop
  400b60:	004005b5 	.word	0x004005b5
  400b64:	00400a55 	.word	0x00400a55
  400b68:	00403118 	.word	0x00403118
  400b6c:	00402b79 	.word	0x00402b79

00400b70 <xQueueGenericSend>:
{
  400b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b74:	b085      	sub	sp, #20
  400b76:	4689      	mov	r9, r1
  400b78:	9201      	str	r2, [sp, #4]
  400b7a:	461e      	mov	r6, r3
    configASSERT( pxQueue );
  400b7c:	4604      	mov	r4, r0
  400b7e:	b1a8      	cbz	r0, 400bac <xQueueGenericSend+0x3c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b80:	f1b9 0f00 	cmp.w	r9, #0
  400b84:	d018      	beq.n	400bb8 <xQueueGenericSend+0x48>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b86:	2e02      	cmp	r6, #2
  400b88:	d01f      	beq.n	400bca <xQueueGenericSend+0x5a>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400b8a:	4b67      	ldr	r3, [pc, #412]	; (400d28 <xQueueGenericSend+0x1b8>)
  400b8c:	4798      	blx	r3
  400b8e:	b930      	cbnz	r0, 400b9e <xQueueGenericSend+0x2e>
  400b90:	9b01      	ldr	r3, [sp, #4]
  400b92:	b123      	cbz	r3, 400b9e <xQueueGenericSend+0x2e>
  400b94:	f240 3133 	movw	r1, #819	; 0x333
  400b98:	4864      	ldr	r0, [pc, #400]	; (400d2c <xQueueGenericSend+0x1bc>)
  400b9a:	4b65      	ldr	r3, [pc, #404]	; (400d30 <xQueueGenericSend+0x1c0>)
  400b9c:	4798      	blx	r3
{
  400b9e:	f04f 0a00 	mov.w	sl, #0
        taskENTER_CRITICAL();
  400ba2:	4d64      	ldr	r5, [pc, #400]	; (400d34 <xQueueGenericSend+0x1c4>)
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400ba4:	4f64      	ldr	r7, [pc, #400]	; (400d38 <xQueueGenericSend+0x1c8>)
                    portYIELD_WITHIN_API();
  400ba6:	f8df 819c 	ldr.w	r8, [pc, #412]	; 400d44 <xQueueGenericSend+0x1d4>
  400baa:	e05e      	b.n	400c6a <xQueueGenericSend+0xfa>
    configASSERT( pxQueue );
  400bac:	f240 312e 	movw	r1, #814	; 0x32e
  400bb0:	485e      	ldr	r0, [pc, #376]	; (400d2c <xQueueGenericSend+0x1bc>)
  400bb2:	4b5f      	ldr	r3, [pc, #380]	; (400d30 <xQueueGenericSend+0x1c0>)
  400bb4:	4798      	blx	r3
  400bb6:	e7e3      	b.n	400b80 <xQueueGenericSend+0x10>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400bb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400bba:	2b00      	cmp	r3, #0
  400bbc:	d0e3      	beq.n	400b86 <xQueueGenericSend+0x16>
  400bbe:	f240 312f 	movw	r1, #815	; 0x32f
  400bc2:	485a      	ldr	r0, [pc, #360]	; (400d2c <xQueueGenericSend+0x1bc>)
  400bc4:	4b5a      	ldr	r3, [pc, #360]	; (400d30 <xQueueGenericSend+0x1c0>)
  400bc6:	4798      	blx	r3
  400bc8:	e7dd      	b.n	400b86 <xQueueGenericSend+0x16>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400bca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400bcc:	2b01      	cmp	r3, #1
  400bce:	d0dc      	beq.n	400b8a <xQueueGenericSend+0x1a>
  400bd0:	f44f 714c 	mov.w	r1, #816	; 0x330
  400bd4:	4855      	ldr	r0, [pc, #340]	; (400d2c <xQueueGenericSend+0x1bc>)
  400bd6:	4b56      	ldr	r3, [pc, #344]	; (400d30 <xQueueGenericSend+0x1c0>)
  400bd8:	4798      	blx	r3
  400bda:	e7d6      	b.n	400b8a <xQueueGenericSend+0x1a>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400bdc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400bde:	4632      	mov	r2, r6
  400be0:	4649      	mov	r1, r9
  400be2:	4620      	mov	r0, r4
  400be4:	4b55      	ldr	r3, [pc, #340]	; (400d3c <xQueueGenericSend+0x1cc>)
  400be6:	4798      	blx	r3
                        if( pxQueue->pxQueueSetContainer != NULL )
  400be8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400bea:	b1a3      	cbz	r3, 400c16 <xQueueGenericSend+0xa6>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400bec:	2e02      	cmp	r6, #2
  400bee:	f000 8096 	beq.w	400d1e <xQueueGenericSend+0x1ae>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  400bf2:	4620      	mov	r0, r4
  400bf4:	4b52      	ldr	r3, [pc, #328]	; (400d40 <xQueueGenericSend+0x1d0>)
  400bf6:	4798      	blx	r3
  400bf8:	b138      	cbz	r0, 400c0a <xQueueGenericSend+0x9a>
                                queueYIELD_IF_USING_PREEMPTION();
  400bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bfe:	4b51      	ldr	r3, [pc, #324]	; (400d44 <xQueueGenericSend+0x1d4>)
  400c00:	601a      	str	r2, [r3, #0]
  400c02:	f3bf 8f4f 	dsb	sy
  400c06:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
  400c0a:	4b4f      	ldr	r3, [pc, #316]	; (400d48 <xQueueGenericSend+0x1d8>)
  400c0c:	4798      	blx	r3
                return pdPASS;
  400c0e:	2001      	movs	r0, #1
}
  400c10:	b005      	add	sp, #20
  400c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c18:	b953      	cbnz	r3, 400c30 <xQueueGenericSend+0xc0>
                            else if( xYieldRequired != pdFALSE )
  400c1a:	2800      	cmp	r0, #0
  400c1c:	d0f5      	beq.n	400c0a <xQueueGenericSend+0x9a>
                                queueYIELD_IF_USING_PREEMPTION();
  400c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c22:	4b48      	ldr	r3, [pc, #288]	; (400d44 <xQueueGenericSend+0x1d4>)
  400c24:	601a      	str	r2, [r3, #0]
  400c26:	f3bf 8f4f 	dsb	sy
  400c2a:	f3bf 8f6f 	isb	sy
  400c2e:	e7ec      	b.n	400c0a <xQueueGenericSend+0x9a>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c30:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c34:	4b45      	ldr	r3, [pc, #276]	; (400d4c <xQueueGenericSend+0x1dc>)
  400c36:	4798      	blx	r3
  400c38:	2800      	cmp	r0, #0
  400c3a:	d0e6      	beq.n	400c0a <xQueueGenericSend+0x9a>
                                    queueYIELD_IF_USING_PREEMPTION();
  400c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c40:	4b40      	ldr	r3, [pc, #256]	; (400d44 <xQueueGenericSend+0x1d4>)
  400c42:	601a      	str	r2, [r3, #0]
  400c44:	f3bf 8f4f 	dsb	sy
  400c48:	f3bf 8f6f 	isb	sy
  400c4c:	e7dd      	b.n	400c0a <xQueueGenericSend+0x9a>
                    taskEXIT_CRITICAL();
  400c4e:	4b3e      	ldr	r3, [pc, #248]	; (400d48 <xQueueGenericSend+0x1d8>)
  400c50:	4798      	blx	r3
                    return errQUEUE_FULL;
  400c52:	2000      	movs	r0, #0
  400c54:	e7dc      	b.n	400c10 <xQueueGenericSend+0xa0>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400c56:	a802      	add	r0, sp, #8
  400c58:	47b8      	blx	r7
  400c5a:	e013      	b.n	400c84 <xQueueGenericSend+0x114>
                prvUnlockQueue( pxQueue );
  400c5c:	4620      	mov	r0, r4
  400c5e:	4b3c      	ldr	r3, [pc, #240]	; (400d50 <xQueueGenericSend+0x1e0>)
  400c60:	4798      	blx	r3
                ( void ) xTaskResumeAll();
  400c62:	4b3c      	ldr	r3, [pc, #240]	; (400d54 <xQueueGenericSend+0x1e4>)
  400c64:	4798      	blx	r3
  400c66:	f04f 0a01 	mov.w	sl, #1
        taskENTER_CRITICAL();
  400c6a:	47a8      	blx	r5
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400c6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c70:	429a      	cmp	r2, r3
  400c72:	d3b3      	bcc.n	400bdc <xQueueGenericSend+0x6c>
  400c74:	2e02      	cmp	r6, #2
  400c76:	d048      	beq.n	400d0a <xQueueGenericSend+0x19a>
                if( xTicksToWait == ( TickType_t ) 0 )
  400c78:	9b01      	ldr	r3, [sp, #4]
  400c7a:	2b00      	cmp	r3, #0
  400c7c:	d0e7      	beq.n	400c4e <xQueueGenericSend+0xde>
                else if( xEntryTimeSet == pdFALSE )
  400c7e:	f1ba 0f00 	cmp.w	sl, #0
  400c82:	d0e8      	beq.n	400c56 <xQueueGenericSend+0xe6>
        taskEXIT_CRITICAL();
  400c84:	4b30      	ldr	r3, [pc, #192]	; (400d48 <xQueueGenericSend+0x1d8>)
  400c86:	4798      	blx	r3
        vTaskSuspendAll();
  400c88:	4b33      	ldr	r3, [pc, #204]	; (400d58 <xQueueGenericSend+0x1e8>)
  400c8a:	4798      	blx	r3
        prvLockQueue( pxQueue );
  400c8c:	47a8      	blx	r5
  400c8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400c92:	b25b      	sxtb	r3, r3
  400c94:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c98:	bf04      	itt	eq
  400c9a:	2300      	moveq	r3, #0
  400c9c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400ca0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400ca4:	b25b      	sxtb	r3, r3
  400ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400caa:	bf04      	itt	eq
  400cac:	2300      	moveq	r3, #0
  400cae:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400cb2:	4b25      	ldr	r3, [pc, #148]	; (400d48 <xQueueGenericSend+0x1d8>)
  400cb4:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400cb6:	a901      	add	r1, sp, #4
  400cb8:	a802      	add	r0, sp, #8
  400cba:	4b28      	ldr	r3, [pc, #160]	; (400d5c <xQueueGenericSend+0x1ec>)
  400cbc:	4798      	blx	r3
  400cbe:	b9e8      	cbnz	r0, 400cfc <xQueueGenericSend+0x18c>
    taskENTER_CRITICAL();
  400cc0:	47a8      	blx	r5
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400cc2:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400cc6:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
    taskEXIT_CRITICAL();
  400cca:	4b1f      	ldr	r3, [pc, #124]	; (400d48 <xQueueGenericSend+0x1d8>)
  400ccc:	4798      	blx	r3
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400cce:	45d3      	cmp	fp, sl
  400cd0:	d1c4      	bne.n	400c5c <xQueueGenericSend+0xec>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400cd2:	9901      	ldr	r1, [sp, #4]
  400cd4:	f104 0010 	add.w	r0, r4, #16
  400cd8:	4b21      	ldr	r3, [pc, #132]	; (400d60 <xQueueGenericSend+0x1f0>)
  400cda:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
  400cdc:	4620      	mov	r0, r4
  400cde:	4b1c      	ldr	r3, [pc, #112]	; (400d50 <xQueueGenericSend+0x1e0>)
  400ce0:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
  400ce2:	4b1c      	ldr	r3, [pc, #112]	; (400d54 <xQueueGenericSend+0x1e4>)
  400ce4:	4798      	blx	r3
  400ce6:	2800      	cmp	r0, #0
  400ce8:	d1bd      	bne.n	400c66 <xQueueGenericSend+0xf6>
                    portYIELD_WITHIN_API();
  400cea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400cee:	f8c8 3000 	str.w	r3, [r8]
  400cf2:	f3bf 8f4f 	dsb	sy
  400cf6:	f3bf 8f6f 	isb	sy
  400cfa:	e7b4      	b.n	400c66 <xQueueGenericSend+0xf6>
            prvUnlockQueue( pxQueue );
  400cfc:	4620      	mov	r0, r4
  400cfe:	4b14      	ldr	r3, [pc, #80]	; (400d50 <xQueueGenericSend+0x1e0>)
  400d00:	4798      	blx	r3
            ( void ) xTaskResumeAll();
  400d02:	4b14      	ldr	r3, [pc, #80]	; (400d54 <xQueueGenericSend+0x1e4>)
  400d04:	4798      	blx	r3
            return errQUEUE_FULL;
  400d06:	2000      	movs	r0, #0
  400d08:	e782      	b.n	400c10 <xQueueGenericSend+0xa0>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400d0a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400d0c:	2202      	movs	r2, #2
  400d0e:	4649      	mov	r1, r9
  400d10:	4620      	mov	r0, r4
  400d12:	4b0a      	ldr	r3, [pc, #40]	; (400d3c <xQueueGenericSend+0x1cc>)
  400d14:	4798      	blx	r3
                        if( pxQueue->pxQueueSetContainer != NULL )
  400d16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d18:	2b00      	cmp	r3, #0
  400d1a:	f43f af7c 	beq.w	400c16 <xQueueGenericSend+0xa6>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400d1e:	2d00      	cmp	r5, #0
  400d20:	f43f af67 	beq.w	400bf2 <xQueueGenericSend+0x82>
  400d24:	e771      	b.n	400c0a <xQueueGenericSend+0x9a>
  400d26:	bf00      	nop
  400d28:	00401cf1 	.word	0x00401cf1
  400d2c:	00403118 	.word	0x00403118
  400d30:	00402b79 	.word	0x00402b79
  400d34:	004002f5 	.word	0x004002f5
  400d38:	00401c41 	.word	0x00401c41
  400d3c:	00400871 	.word	0x00400871
  400d40:	004008f1 	.word	0x004008f1
  400d44:	e000ed04 	.word	0xe000ed04
  400d48:	0040033d 	.word	0x0040033d
  400d4c:	00401b4d 	.word	0x00401b4d
  400d50:	004009ad 	.word	0x004009ad
  400d54:	004016e1 	.word	0x004016e1
  400d58:	00401509 	.word	0x00401509
  400d5c:	00401c59 	.word	0x00401c59
  400d60:	00401aad 	.word	0x00401aad

00400d64 <xQueueReceive>:
{
  400d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d68:	b084      	sub	sp, #16
  400d6a:	4688      	mov	r8, r1
  400d6c:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
  400d6e:	4604      	mov	r4, r0
  400d70:	b198      	cbz	r0, 400d9a <xQueueReceive+0x36>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d72:	f1b8 0f00 	cmp.w	r8, #0
  400d76:	d016      	beq.n	400da6 <xQueueReceive+0x42>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400d78:	4b4d      	ldr	r3, [pc, #308]	; (400eb0 <xQueueReceive+0x14c>)
  400d7a:	4798      	blx	r3
  400d7c:	b930      	cbnz	r0, 400d8c <xQueueReceive+0x28>
  400d7e:	9b01      	ldr	r3, [sp, #4]
  400d80:	b123      	cbz	r3, 400d8c <xQueueReceive+0x28>
  400d82:	f240 515a 	movw	r1, #1370	; 0x55a
  400d86:	484b      	ldr	r0, [pc, #300]	; (400eb4 <xQueueReceive+0x150>)
  400d88:	4b4b      	ldr	r3, [pc, #300]	; (400eb8 <xQueueReceive+0x154>)
  400d8a:	4798      	blx	r3
{
  400d8c:	f04f 0a00 	mov.w	sl, #0
        taskENTER_CRITICAL();
  400d90:	4d4a      	ldr	r5, [pc, #296]	; (400ebc <xQueueReceive+0x158>)
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400d92:	4e4b      	ldr	r6, [pc, #300]	; (400ec0 <xQueueReceive+0x15c>)
                    portYIELD_WITHIN_API();
  400d94:	f8df 9138 	ldr.w	r9, [pc, #312]	; 400ed0 <xQueueReceive+0x16c>
  400d98:	e044      	b.n	400e24 <xQueueReceive+0xc0>
    configASSERT( ( pxQueue ) );
  400d9a:	f240 5151 	movw	r1, #1361	; 0x551
  400d9e:	4845      	ldr	r0, [pc, #276]	; (400eb4 <xQueueReceive+0x150>)
  400da0:	4b45      	ldr	r3, [pc, #276]	; (400eb8 <xQueueReceive+0x154>)
  400da2:	4798      	blx	r3
  400da4:	e7e5      	b.n	400d72 <xQueueReceive+0xe>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400da8:	2b00      	cmp	r3, #0
  400daa:	d0e5      	beq.n	400d78 <xQueueReceive+0x14>
  400dac:	f240 5155 	movw	r1, #1365	; 0x555
  400db0:	4840      	ldr	r0, [pc, #256]	; (400eb4 <xQueueReceive+0x150>)
  400db2:	4b41      	ldr	r3, [pc, #260]	; (400eb8 <xQueueReceive+0x154>)
  400db4:	4798      	blx	r3
  400db6:	e7df      	b.n	400d78 <xQueueReceive+0x14>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
  400db8:	4641      	mov	r1, r8
  400dba:	4620      	mov	r0, r4
  400dbc:	4b41      	ldr	r3, [pc, #260]	; (400ec4 <xQueueReceive+0x160>)
  400dbe:	4798      	blx	r3
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  400dc0:	1e7b      	subs	r3, r7, #1
  400dc2:	63a3      	str	r3, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400dc4:	6923      	ldr	r3, [r4, #16]
  400dc6:	b92b      	cbnz	r3, 400dd4 <xQueueReceive+0x70>
                taskEXIT_CRITICAL();
  400dc8:	4b3f      	ldr	r3, [pc, #252]	; (400ec8 <xQueueReceive+0x164>)
  400dca:	4798      	blx	r3
                return pdPASS;
  400dcc:	2001      	movs	r0, #1
}
  400dce:	b004      	add	sp, #16
  400dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400dd4:	f104 0010 	add.w	r0, r4, #16
  400dd8:	4b3c      	ldr	r3, [pc, #240]	; (400ecc <xQueueReceive+0x168>)
  400dda:	4798      	blx	r3
  400ddc:	2800      	cmp	r0, #0
  400dde:	d0f3      	beq.n	400dc8 <xQueueReceive+0x64>
                        queueYIELD_IF_USING_PREEMPTION();
  400de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400de4:	4b3a      	ldr	r3, [pc, #232]	; (400ed0 <xQueueReceive+0x16c>)
  400de6:	601a      	str	r2, [r3, #0]
  400de8:	f3bf 8f4f 	dsb	sy
  400dec:	f3bf 8f6f 	isb	sy
  400df0:	e7ea      	b.n	400dc8 <xQueueReceive+0x64>
                    taskEXIT_CRITICAL();
  400df2:	4b35      	ldr	r3, [pc, #212]	; (400ec8 <xQueueReceive+0x164>)
  400df4:	4798      	blx	r3
                    return errQUEUE_EMPTY;
  400df6:	2000      	movs	r0, #0
  400df8:	e7e9      	b.n	400dce <xQueueReceive+0x6a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400dfa:	a802      	add	r0, sp, #8
  400dfc:	47b0      	blx	r6
  400dfe:	e01b      	b.n	400e38 <xQueueReceive+0xd4>
                prvUnlockQueue( pxQueue );
  400e00:	4620      	mov	r0, r4
  400e02:	4b34      	ldr	r3, [pc, #208]	; (400ed4 <xQueueReceive+0x170>)
  400e04:	4798      	blx	r3
                ( void ) xTaskResumeAll();
  400e06:	4b34      	ldr	r3, [pc, #208]	; (400ed8 <xQueueReceive+0x174>)
  400e08:	4798      	blx	r3
  400e0a:	e009      	b.n	400e20 <xQueueReceive+0xbc>
            prvUnlockQueue( pxQueue );
  400e0c:	4620      	mov	r0, r4
  400e0e:	4b31      	ldr	r3, [pc, #196]	; (400ed4 <xQueueReceive+0x170>)
  400e10:	4798      	blx	r3
            ( void ) xTaskResumeAll();
  400e12:	4b31      	ldr	r3, [pc, #196]	; (400ed8 <xQueueReceive+0x174>)
  400e14:	4798      	blx	r3
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400e16:	4620      	mov	r0, r4
  400e18:	4b30      	ldr	r3, [pc, #192]	; (400edc <xQueueReceive+0x178>)
  400e1a:	4798      	blx	r3
  400e1c:	2800      	cmp	r0, #0
  400e1e:	d144      	bne.n	400eaa <xQueueReceive+0x146>
  400e20:	f04f 0a01 	mov.w	sl, #1
        taskENTER_CRITICAL();
  400e24:	47a8      	blx	r5
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400e26:	6ba7      	ldr	r7, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400e28:	2f00      	cmp	r7, #0
  400e2a:	d1c5      	bne.n	400db8 <xQueueReceive+0x54>
                if( xTicksToWait == ( TickType_t ) 0 )
  400e2c:	9b01      	ldr	r3, [sp, #4]
  400e2e:	2b00      	cmp	r3, #0
  400e30:	d0df      	beq.n	400df2 <xQueueReceive+0x8e>
                else if( xEntryTimeSet == pdFALSE )
  400e32:	f1ba 0f00 	cmp.w	sl, #0
  400e36:	d0e0      	beq.n	400dfa <xQueueReceive+0x96>
        taskEXIT_CRITICAL();
  400e38:	4b23      	ldr	r3, [pc, #140]	; (400ec8 <xQueueReceive+0x164>)
  400e3a:	4798      	blx	r3
        vTaskSuspendAll();
  400e3c:	4b28      	ldr	r3, [pc, #160]	; (400ee0 <xQueueReceive+0x17c>)
  400e3e:	4798      	blx	r3
        prvLockQueue( pxQueue );
  400e40:	47a8      	blx	r5
  400e42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400e46:	b25b      	sxtb	r3, r3
  400e48:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e4c:	bf04      	itt	eq
  400e4e:	2300      	moveq	r3, #0
  400e50:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400e54:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400e58:	b25b      	sxtb	r3, r3
  400e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e5e:	bf04      	itt	eq
  400e60:	2300      	moveq	r3, #0
  400e62:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400e66:	4b18      	ldr	r3, [pc, #96]	; (400ec8 <xQueueReceive+0x164>)
  400e68:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400e6a:	a901      	add	r1, sp, #4
  400e6c:	a802      	add	r0, sp, #8
  400e6e:	4b1d      	ldr	r3, [pc, #116]	; (400ee4 <xQueueReceive+0x180>)
  400e70:	4798      	blx	r3
  400e72:	2800      	cmp	r0, #0
  400e74:	d1ca      	bne.n	400e0c <xQueueReceive+0xa8>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400e76:	4620      	mov	r0, r4
  400e78:	4b18      	ldr	r3, [pc, #96]	; (400edc <xQueueReceive+0x178>)
  400e7a:	4798      	blx	r3
  400e7c:	2800      	cmp	r0, #0
  400e7e:	d0bf      	beq.n	400e00 <xQueueReceive+0x9c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400e80:	9901      	ldr	r1, [sp, #4]
  400e82:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e86:	4b18      	ldr	r3, [pc, #96]	; (400ee8 <xQueueReceive+0x184>)
  400e88:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
  400e8a:	4620      	mov	r0, r4
  400e8c:	4b11      	ldr	r3, [pc, #68]	; (400ed4 <xQueueReceive+0x170>)
  400e8e:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
  400e90:	4b11      	ldr	r3, [pc, #68]	; (400ed8 <xQueueReceive+0x174>)
  400e92:	4798      	blx	r3
  400e94:	2800      	cmp	r0, #0
  400e96:	d1c3      	bne.n	400e20 <xQueueReceive+0xbc>
                    portYIELD_WITHIN_API();
  400e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400e9c:	f8c9 3000 	str.w	r3, [r9]
  400ea0:	f3bf 8f4f 	dsb	sy
  400ea4:	f3bf 8f6f 	isb	sy
  400ea8:	e7ba      	b.n	400e20 <xQueueReceive+0xbc>
                return errQUEUE_EMPTY;
  400eaa:	2000      	movs	r0, #0
  400eac:	e78f      	b.n	400dce <xQueueReceive+0x6a>
  400eae:	bf00      	nop
  400eb0:	00401cf1 	.word	0x00401cf1
  400eb4:	00403118 	.word	0x00403118
  400eb8:	00402b79 	.word	0x00402b79
  400ebc:	004002f5 	.word	0x004002f5
  400ec0:	00401c41 	.word	0x00401c41
  400ec4:	00400985 	.word	0x00400985
  400ec8:	0040033d 	.word	0x0040033d
  400ecc:	00401b4d 	.word	0x00401b4d
  400ed0:	e000ed04 	.word	0xe000ed04
  400ed4:	004009ad 	.word	0x004009ad
  400ed8:	004016e1 	.word	0x004016e1
  400edc:	00400851 	.word	0x00400851
  400ee0:	00401509 	.word	0x00401509
  400ee4:	00401c59 	.word	0x00401c59
  400ee8:	00401aad 	.word	0x00401aad

00400eec <uxQueueMessagesWaiting>:
{
  400eec:	b510      	push	{r4, lr}
    configASSERT( xQueue );
  400eee:	4604      	mov	r4, r0
  400ef0:	b130      	cbz	r0, 400f00 <uxQueueMessagesWaiting+0x14>
    taskENTER_CRITICAL();
  400ef2:	4b06      	ldr	r3, [pc, #24]	; (400f0c <uxQueueMessagesWaiting+0x20>)
  400ef4:	4798      	blx	r3
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
  400ef6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    taskEXIT_CRITICAL();
  400ef8:	4b05      	ldr	r3, [pc, #20]	; (400f10 <uxQueueMessagesWaiting+0x24>)
  400efa:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
  400efc:	4620      	mov	r0, r4
  400efe:	bd10      	pop	{r4, pc}
    configASSERT( xQueue );
  400f00:	f240 71e3 	movw	r1, #2019	; 0x7e3
  400f04:	4803      	ldr	r0, [pc, #12]	; (400f14 <uxQueueMessagesWaiting+0x28>)
  400f06:	4b04      	ldr	r3, [pc, #16]	; (400f18 <uxQueueMessagesWaiting+0x2c>)
  400f08:	4798      	blx	r3
  400f0a:	e7f2      	b.n	400ef2 <uxQueueMessagesWaiting+0x6>
  400f0c:	004002f5 	.word	0x004002f5
  400f10:	0040033d 	.word	0x0040033d
  400f14:	00403118 	.word	0x00403118
  400f18:	00402b79 	.word	0x00402b79

00400f1c <vQueueAddToRegistry>:
    {
  400f1c:	b570      	push	{r4, r5, r6, lr}
  400f1e:	460d      	mov	r5, r1
        configASSERT( xQueue );
  400f20:	4604      	mov	r4, r0
  400f22:	b1b8      	cbz	r0, 400f54 <vQueueAddToRegistry+0x38>
        if( pcQueueName != NULL )
  400f24:	b1ad      	cbz	r5, 400f52 <vQueueAddToRegistry+0x36>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  400f26:	4b12      	ldr	r3, [pc, #72]	; (400f70 <vQueueAddToRegistry+0x54>)
  400f28:	685b      	ldr	r3, [r3, #4]
  400f2a:	429c      	cmp	r4, r3
  400f2c:	d018      	beq.n	400f60 <vQueueAddToRegistry+0x44>
  400f2e:	4a10      	ldr	r2, [pc, #64]	; (400f70 <vQueueAddToRegistry+0x54>)
  400f30:	2100      	movs	r1, #0
  400f32:	460b      	mov	r3, r1
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  400f34:	4616      	mov	r6, r2
  400f36:	b1a9      	cbz	r1, 400f64 <vQueueAddToRegistry+0x48>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400f38:	3301      	adds	r3, #1
  400f3a:	2b08      	cmp	r3, #8
  400f3c:	d006      	beq.n	400f4c <vQueueAddToRegistry+0x30>
  400f3e:	3208      	adds	r2, #8
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  400f40:	6850      	ldr	r0, [r2, #4]
  400f42:	4284      	cmp	r4, r0
  400f44:	d1f7      	bne.n	400f36 <vQueueAddToRegistry+0x1a>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  400f46:	490a      	ldr	r1, [pc, #40]	; (400f70 <vQueueAddToRegistry+0x54>)
  400f48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
        if( pxEntryToWrite != NULL )
  400f4c:	b109      	cbz	r1, 400f52 <vQueueAddToRegistry+0x36>
            pxEntryToWrite->pcQueueName = pcQueueName;
  400f4e:	600d      	str	r5, [r1, #0]
            pxEntryToWrite->xHandle = xQueue;
  400f50:	604c      	str	r4, [r1, #4]
  400f52:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( xQueue );
  400f54:	f640 21c8 	movw	r1, #2760	; 0xac8
  400f58:	4806      	ldr	r0, [pc, #24]	; (400f74 <vQueueAddToRegistry+0x58>)
  400f5a:	4b07      	ldr	r3, [pc, #28]	; (400f78 <vQueueAddToRegistry+0x5c>)
  400f5c:	4798      	blx	r3
  400f5e:	e7e1      	b.n	400f24 <vQueueAddToRegistry+0x8>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  400f60:	2300      	movs	r3, #0
  400f62:	e7f0      	b.n	400f46 <vQueueAddToRegistry+0x2a>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  400f64:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  400f68:	2800      	cmp	r0, #0
  400f6a:	bf08      	it	eq
  400f6c:	4611      	moveq	r1, r2
  400f6e:	e7e3      	b.n	400f38 <vQueueAddToRegistry+0x1c>
  400f70:	2000060c 	.word	0x2000060c
  400f74:	00403118 	.word	0x00403118
  400f78:	00402b79 	.word	0x00402b79

00400f7c <vQueueWaitForMessageRestricted>:
    {
  400f7c:	b570      	push	{r4, r5, r6, lr}
  400f7e:	4604      	mov	r4, r0
  400f80:	460d      	mov	r5, r1
  400f82:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
  400f84:	4b11      	ldr	r3, [pc, #68]	; (400fcc <vQueueWaitForMessageRestricted+0x50>)
  400f86:	4798      	blx	r3
  400f88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400f8c:	b25b      	sxtb	r3, r3
  400f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f92:	bf04      	itt	eq
  400f94:	2300      	moveq	r3, #0
  400f96:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400f9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400f9e:	b25b      	sxtb	r3, r3
  400fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fa4:	bf04      	itt	eq
  400fa6:	2300      	moveq	r3, #0
  400fa8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400fac:	4b08      	ldr	r3, [pc, #32]	; (400fd0 <vQueueWaitForMessageRestricted+0x54>)
  400fae:	4798      	blx	r3
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  400fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400fb2:	b11b      	cbz	r3, 400fbc <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
  400fb4:	4620      	mov	r0, r4
  400fb6:	4b07      	ldr	r3, [pc, #28]	; (400fd4 <vQueueWaitForMessageRestricted+0x58>)
  400fb8:	4798      	blx	r3
  400fba:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  400fbc:	4632      	mov	r2, r6
  400fbe:	4629      	mov	r1, r5
  400fc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fc4:	4b04      	ldr	r3, [pc, #16]	; (400fd8 <vQueueWaitForMessageRestricted+0x5c>)
  400fc6:	4798      	blx	r3
  400fc8:	e7f4      	b.n	400fb4 <vQueueWaitForMessageRestricted+0x38>
  400fca:	bf00      	nop
  400fcc:	004002f5 	.word	0x004002f5
  400fd0:	0040033d 	.word	0x0040033d
  400fd4:	004009ad 	.word	0x004009ad
  400fd8:	00401aed 	.word	0x00401aed

00400fdc <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400fdc:	4b07      	ldr	r3, [pc, #28]	; (400ffc <prvResetNextTaskUnblockTime+0x20>)
  400fde:	681b      	ldr	r3, [r3, #0]
  400fe0:	681b      	ldr	r3, [r3, #0]
  400fe2:	b133      	cbz	r3, 400ff2 <prvResetNextTaskUnblockTime+0x16>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  400fe4:	4b05      	ldr	r3, [pc, #20]	; (400ffc <prvResetNextTaskUnblockTime+0x20>)
  400fe6:	681b      	ldr	r3, [r3, #0]
  400fe8:	68db      	ldr	r3, [r3, #12]
  400fea:	681a      	ldr	r2, [r3, #0]
  400fec:	4b04      	ldr	r3, [pc, #16]	; (401000 <prvResetNextTaskUnblockTime+0x24>)
  400fee:	601a      	str	r2, [r3, #0]
  400ff0:	4770      	bx	lr
        xNextTaskUnblockTime = portMAX_DELAY;
  400ff2:	f04f 32ff 	mov.w	r2, #4294967295
  400ff6:	4b02      	ldr	r3, [pc, #8]	; (401000 <prvResetNextTaskUnblockTime+0x24>)
  400ff8:	601a      	str	r2, [r3, #0]
  400ffa:	4770      	bx	lr
  400ffc:	20000494 	.word	0x20000494
  401000:	2000057c 	.word	0x2000057c

00401004 <prvTaskIsTaskSuspended>:
    {
  401004:	b510      	push	{r4, lr}
        configASSERT( xTask );
  401006:	4604      	mov	r4, r0
  401008:	b128      	cbz	r0, 401016 <prvTaskIsTaskSuspended+0x12>
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  40100a:	6962      	ldr	r2, [r4, #20]
  40100c:	4b0a      	ldr	r3, [pc, #40]	; (401038 <prvTaskIsTaskSuspended+0x34>)
  40100e:	429a      	cmp	r2, r3
  401010:	d007      	beq.n	401022 <prvTaskIsTaskSuspended+0x1e>
        BaseType_t xReturn = pdFALSE;
  401012:	2000      	movs	r0, #0
  401014:	bd10      	pop	{r4, pc}
        configASSERT( xTask );
  401016:	f240 7127 	movw	r1, #1831	; 0x727
  40101a:	4808      	ldr	r0, [pc, #32]	; (40103c <prvTaskIsTaskSuspended+0x38>)
  40101c:	4b08      	ldr	r3, [pc, #32]	; (401040 <prvTaskIsTaskSuspended+0x3c>)
  40101e:	4798      	blx	r3
  401020:	e7f3      	b.n	40100a <prvTaskIsTaskSuspended+0x6>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  401022:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  401024:	4b07      	ldr	r3, [pc, #28]	; (401044 <prvTaskIsTaskSuspended+0x40>)
  401026:	4298      	cmp	r0, r3
  401028:	d003      	beq.n	401032 <prvTaskIsTaskSuspended+0x2e>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
  40102a:	fab0 f080 	clz	r0, r0
  40102e:	0940      	lsrs	r0, r0, #5
  401030:	bd10      	pop	{r4, pc}
        BaseType_t xReturn = pdFALSE;
  401032:	2000      	movs	r0, #0
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  401034:	bd10      	pop	{r4, pc}
  401036:	bf00      	nop
  401038:	200005a0 	.word	0x200005a0
  40103c:	00403130 	.word	0x00403130
  401040:	00402b79 	.word	0x00402b79
  401044:	20000588 	.word	0x20000588

00401048 <prvIdleTask>:
{
  401048:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40104a:	4d16      	ldr	r5, [pc, #88]	; (4010a4 <prvIdleTask+0x5c>)
                taskENTER_CRITICAL();
  40104c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4010bc <prvIdleTask+0x74>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401050:	4f15      	ldr	r7, [pc, #84]	; (4010a8 <prvIdleTask+0x60>)
                    taskYIELD();
  401052:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4010c0 <prvIdleTask+0x78>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401056:	682b      	ldr	r3, [r5, #0]
  401058:	b1bb      	cbz	r3, 40108a <prvIdleTask+0x42>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40105a:	4e14      	ldr	r6, [pc, #80]	; (4010ac <prvIdleTask+0x64>)
                taskENTER_CRITICAL();
  40105c:	47c0      	blx	r8
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40105e:	68fb      	ldr	r3, [r7, #12]
  401060:	68dc      	ldr	r4, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401062:	1d20      	adds	r0, r4, #4
  401064:	47b0      	blx	r6
                    --uxCurrentNumberOfTasks;
  401066:	4a12      	ldr	r2, [pc, #72]	; (4010b0 <prvIdleTask+0x68>)
  401068:	6813      	ldr	r3, [r2, #0]
  40106a:	3b01      	subs	r3, #1
  40106c:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
  40106e:	682b      	ldr	r3, [r5, #0]
  401070:	3b01      	subs	r3, #1
  401072:	602b      	str	r3, [r5, #0]
                taskEXIT_CRITICAL();
  401074:	4b0f      	ldr	r3, [pc, #60]	; (4010b4 <prvIdleTask+0x6c>)
  401076:	4798      	blx	r3
                vPortFreeStack( pxTCB->pxStack );
  401078:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40107a:	f8df a048 	ldr.w	sl, [pc, #72]	; 4010c4 <prvIdleTask+0x7c>
  40107e:	47d0      	blx	sl
                vPortFree( pxTCB );
  401080:	4620      	mov	r0, r4
  401082:	47d0      	blx	sl
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401084:	682b      	ldr	r3, [r5, #0]
  401086:	2b00      	cmp	r3, #0
  401088:	d1e8      	bne.n	40105c <prvIdleTask+0x14>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40108a:	4b0b      	ldr	r3, [pc, #44]	; (4010b8 <prvIdleTask+0x70>)
  40108c:	681b      	ldr	r3, [r3, #0]
  40108e:	2b01      	cmp	r3, #1
  401090:	d9e1      	bls.n	401056 <prvIdleTask+0xe>
                    taskYIELD();
  401092:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401096:	f8c9 3000 	str.w	r3, [r9]
  40109a:	f3bf 8f4f 	dsb	sy
  40109e:	f3bf 8f6f 	isb	sy
  4010a2:	e7d8      	b.n	401056 <prvIdleTask+0xe>
  4010a4:	20000540 	.word	0x20000540
  4010a8:	200005b4 	.word	0x200005b4
  4010ac:	004001f9 	.word	0x004001f9
  4010b0:	2000053c 	.word	0x2000053c
  4010b4:	0040033d 	.word	0x0040033d
  4010b8:	2000049c 	.word	0x2000049c
  4010bc:	004002f5 	.word	0x004002f5
  4010c0:	e000ed04 	.word	0xe000ed04
  4010c4:	004006a9 	.word	0x004006a9

004010c8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
  4010c8:	b570      	push	{r4, r5, r6, lr}
  4010ca:	4604      	mov	r4, r0
  4010cc:	460e      	mov	r6, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
  4010ce:	4b24      	ldr	r3, [pc, #144]	; (401160 <prvAddCurrentTaskToDelayedList+0x98>)
  4010d0:	681d      	ldr	r5, [r3, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4010d2:	4b24      	ldr	r3, [pc, #144]	; (401164 <prvAddCurrentTaskToDelayedList+0x9c>)
  4010d4:	6818      	ldr	r0, [r3, #0]
  4010d6:	3004      	adds	r0, #4
  4010d8:	4b23      	ldr	r3, [pc, #140]	; (401168 <prvAddCurrentTaskToDelayedList+0xa0>)
  4010da:	4798      	blx	r3
  4010dc:	b948      	cbnz	r0, 4010f2 <prvAddCurrentTaskToDelayedList+0x2a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  4010de:	4b21      	ldr	r3, [pc, #132]	; (401164 <prvAddCurrentTaskToDelayedList+0x9c>)
  4010e0:	681a      	ldr	r2, [r3, #0]
  4010e2:	4922      	ldr	r1, [pc, #136]	; (40116c <prvAddCurrentTaskToDelayedList+0xa4>)
  4010e4:	680b      	ldr	r3, [r1, #0]
  4010e6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4010e8:	2201      	movs	r2, #1
  4010ea:	4082      	lsls	r2, r0
  4010ec:	ea23 0302 	bic.w	r3, r3, r2
  4010f0:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4010f2:	f1b4 3fff 	cmp.w	r4, #4294967295
  4010f6:	d013      	beq.n	401120 <prvAddCurrentTaskToDelayedList+0x58>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
  4010f8:	442c      	add	r4, r5

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  4010fa:	4b1a      	ldr	r3, [pc, #104]	; (401164 <prvAddCurrentTaskToDelayedList+0x9c>)
  4010fc:	681b      	ldr	r3, [r3, #0]
  4010fe:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
  401100:	42a5      	cmp	r5, r4
  401102:	d824      	bhi.n	40114e <prvAddCurrentTaskToDelayedList+0x86>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401104:	4b1a      	ldr	r3, [pc, #104]	; (401170 <prvAddCurrentTaskToDelayedList+0xa8>)
  401106:	6818      	ldr	r0, [r3, #0]
  401108:	4b16      	ldr	r3, [pc, #88]	; (401164 <prvAddCurrentTaskToDelayedList+0x9c>)
  40110a:	6819      	ldr	r1, [r3, #0]
  40110c:	3104      	adds	r1, #4
  40110e:	4b19      	ldr	r3, [pc, #100]	; (401174 <prvAddCurrentTaskToDelayedList+0xac>)
  401110:	4798      	blx	r3

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
  401112:	4b19      	ldr	r3, [pc, #100]	; (401178 <prvAddCurrentTaskToDelayedList+0xb0>)
  401114:	681b      	ldr	r3, [r3, #0]
  401116:	429c      	cmp	r4, r3
                    {
                        xNextTaskUnblockTime = xTimeToWake;
  401118:	bf3c      	itt	cc
  40111a:	4b17      	ldrcc	r3, [pc, #92]	; (401178 <prvAddCurrentTaskToDelayedList+0xb0>)
  40111c:	601c      	strcc	r4, [r3, #0]
  40111e:	bd70      	pop	{r4, r5, r6, pc}
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401120:	2e00      	cmp	r6, #0
  401122:	d0e9      	beq.n	4010f8 <prvAddCurrentTaskToDelayedList+0x30>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401124:	4a15      	ldr	r2, [pc, #84]	; (40117c <prvAddCurrentTaskToDelayedList+0xb4>)
  401126:	6851      	ldr	r1, [r2, #4]
  401128:	4b0e      	ldr	r3, [pc, #56]	; (401164 <prvAddCurrentTaskToDelayedList+0x9c>)
  40112a:	6818      	ldr	r0, [r3, #0]
  40112c:	6081      	str	r1, [r0, #8]
  40112e:	6818      	ldr	r0, [r3, #0]
  401130:	688c      	ldr	r4, [r1, #8]
  401132:	60c4      	str	r4, [r0, #12]
  401134:	688c      	ldr	r4, [r1, #8]
  401136:	6818      	ldr	r0, [r3, #0]
  401138:	3004      	adds	r0, #4
  40113a:	6060      	str	r0, [r4, #4]
  40113c:	6818      	ldr	r0, [r3, #0]
  40113e:	3004      	adds	r0, #4
  401140:	6088      	str	r0, [r1, #8]
  401142:	681b      	ldr	r3, [r3, #0]
  401144:	615a      	str	r2, [r3, #20]
  401146:	6813      	ldr	r3, [r2, #0]
  401148:	3301      	adds	r3, #1
  40114a:	6013      	str	r3, [r2, #0]
  40114c:	bd70      	pop	{r4, r5, r6, pc}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40114e:	4b0c      	ldr	r3, [pc, #48]	; (401180 <prvAddCurrentTaskToDelayedList+0xb8>)
  401150:	6818      	ldr	r0, [r3, #0]
  401152:	4b04      	ldr	r3, [pc, #16]	; (401164 <prvAddCurrentTaskToDelayedList+0x9c>)
  401154:	6819      	ldr	r1, [r3, #0]
  401156:	3104      	adds	r1, #4
  401158:	4b06      	ldr	r3, [pc, #24]	; (401174 <prvAddCurrentTaskToDelayedList+0xac>)
  40115a:	4798      	blx	r3
  40115c:	bd70      	pop	{r4, r5, r6, pc}
  40115e:	bf00      	nop
  401160:	200005c8 	.word	0x200005c8
  401164:	20000490 	.word	0x20000490
  401168:	004001f9 	.word	0x004001f9
  40116c:	2000054c 	.word	0x2000054c
  401170:	20000494 	.word	0x20000494
  401174:	004001c5 	.word	0x004001c5
  401178:	2000057c 	.word	0x2000057c
  40117c:	200005a0 	.word	0x200005a0
  401180:	20000498 	.word	0x20000498

00401184 <xTaskCreate>:
    {
  401184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401188:	b083      	sub	sp, #12
  40118a:	4683      	mov	fp, r0
  40118c:	460e      	mov	r6, r1
  40118e:	9301      	str	r3, [sp, #4]
  401190:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401192:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  401196:	0097      	lsls	r7, r2, #2
  401198:	4638      	mov	r0, r7
  40119a:	4b6e      	ldr	r3, [pc, #440]	; (401354 <xTaskCreate+0x1d0>)
  40119c:	4798      	blx	r3
                if( pxStack != NULL )
  40119e:	2800      	cmp	r0, #0
  4011a0:	f000 80a5 	beq.w	4012ee <xTaskCreate+0x16a>
  4011a4:	4680      	mov	r8, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  4011a6:	2064      	movs	r0, #100	; 0x64
  4011a8:	4b6a      	ldr	r3, [pc, #424]	; (401354 <xTaskCreate+0x1d0>)
  4011aa:	4798      	blx	r3
                    if( pxNewTCB != NULL )
  4011ac:	4604      	mov	r4, r0
  4011ae:	2800      	cmp	r0, #0
  4011b0:	f000 809a 	beq.w	4012e8 <xTaskCreate+0x164>
                        pxNewTCB->pxStack = pxStack;
  4011b4:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  4011b8:	463a      	mov	r2, r7
  4011ba:	21a5      	movs	r1, #165	; 0xa5
  4011bc:	4640      	mov	r0, r8
  4011be:	4b66      	ldr	r3, [pc, #408]	; (401358 <xTaskCreate+0x1d4>)
  4011c0:	4798      	blx	r3
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  4011c2:	3f04      	subs	r7, #4
  4011c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4011c6:	441f      	add	r7, r3
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  4011c8:	f027 0707 	bic.w	r7, r7, #7
    if( pcName != NULL )
  4011cc:	2e00      	cmp	r6, #0
  4011ce:	f000 8091 	beq.w	4012f4 <xTaskCreate+0x170>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4011d2:	7833      	ldrb	r3, [r6, #0]
  4011d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            if( pcName[ x ] == ( char ) 0x00 )
  4011d8:	7833      	ldrb	r3, [r6, #0]
  4011da:	b15b      	cbz	r3, 4011f4 <xTaskCreate+0x70>
  4011dc:	4633      	mov	r3, r6
  4011de:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4011e2:	3613      	adds	r6, #19
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4011e4:	7859      	ldrb	r1, [r3, #1]
  4011e6:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
  4011ea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4011ee:	b109      	cbz	r1, 4011f4 <xTaskCreate+0x70>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4011f0:	42b3      	cmp	r3, r6
  4011f2:	d1f7      	bne.n	4011e4 <xTaskCreate+0x60>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4011f4:	2300      	movs	r3, #0
  4011f6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    configASSERT( uxPriority < configMAX_PRIORITIES );
  4011fa:	2d07      	cmp	r5, #7
  4011fc:	d87e      	bhi.n	4012fc <xTaskCreate+0x178>
  4011fe:	2d07      	cmp	r5, #7
  401200:	bf28      	it	cs
  401202:	2507      	movcs	r5, #7
    pxNewTCB->uxPriority = uxPriority;
  401204:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
  401206:	64a5      	str	r5, [r4, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
  401208:	2600      	movs	r6, #0
  40120a:	64e6      	str	r6, [r4, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  40120c:	f104 0804 	add.w	r8, r4, #4
  401210:	4640      	mov	r0, r8
  401212:	f8df 919c 	ldr.w	r9, [pc, #412]	; 4013b0 <xTaskCreate+0x22c>
  401216:	47c8      	blx	r9
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401218:	f104 0018 	add.w	r0, r4, #24
  40121c:	47c8      	blx	r9
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40121e:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401220:	f1c5 0508 	rsb	r5, r5, #8
  401224:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401226:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
  401228:	6526      	str	r6, [r4, #80]	; 0x50
  40122a:	6566      	str	r6, [r4, #84]	; 0x54
  40122c:	65a6      	str	r6, [r4, #88]	; 0x58
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
  40122e:	65e6      	str	r6, [r4, #92]	; 0x5c
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
  401230:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401234:	9a01      	ldr	r2, [sp, #4]
  401236:	4659      	mov	r1, fp
  401238:	4638      	mov	r0, r7
  40123a:	4b48      	ldr	r3, [pc, #288]	; (40135c <xTaskCreate+0x1d8>)
  40123c:	4798      	blx	r3
  40123e:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
  401240:	f1ba 0f00 	cmp.w	sl, #0
  401244:	d001      	beq.n	40124a <xTaskCreate+0xc6>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401246:	f8ca 4000 	str.w	r4, [sl]
    taskENTER_CRITICAL();
  40124a:	4b45      	ldr	r3, [pc, #276]	; (401360 <xTaskCreate+0x1dc>)
  40124c:	4798      	blx	r3
        uxCurrentNumberOfTasks++;
  40124e:	4a45      	ldr	r2, [pc, #276]	; (401364 <xTaskCreate+0x1e0>)
  401250:	6813      	ldr	r3, [r2, #0]
  401252:	3301      	adds	r3, #1
  401254:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
  401256:	4b44      	ldr	r3, [pc, #272]	; (401368 <xTaskCreate+0x1e4>)
  401258:	681b      	ldr	r3, [r3, #0]
  40125a:	2b00      	cmp	r3, #0
  40125c:	d054      	beq.n	401308 <xTaskCreate+0x184>
            if( xSchedulerRunning == pdFALSE )
  40125e:	4b43      	ldr	r3, [pc, #268]	; (40136c <xTaskCreate+0x1e8>)
  401260:	681b      	ldr	r3, [r3, #0]
  401262:	b93b      	cbnz	r3, 401274 <xTaskCreate+0xf0>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401264:	4b40      	ldr	r3, [pc, #256]	; (401368 <xTaskCreate+0x1e4>)
  401266:	681b      	ldr	r3, [r3, #0]
  401268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40126a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40126c:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
  40126e:	bf9c      	itt	ls
  401270:	4b3d      	ldrls	r3, [pc, #244]	; (401368 <xTaskCreate+0x1e4>)
  401272:	601c      	strls	r4, [r3, #0]
        uxTaskNumber++;
  401274:	4a3e      	ldr	r2, [pc, #248]	; (401370 <xTaskCreate+0x1ec>)
  401276:	6813      	ldr	r3, [r2, #0]
  401278:	3301      	adds	r3, #1
  40127a:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
  40127c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40127e:	493d      	ldr	r1, [pc, #244]	; (401374 <xTaskCreate+0x1f0>)
  401280:	6808      	ldr	r0, [r1, #0]
  401282:	2201      	movs	r2, #1
  401284:	409a      	lsls	r2, r3
  401286:	4302      	orrs	r2, r0
  401288:	600a      	str	r2, [r1, #0]
  40128a:	4a3b      	ldr	r2, [pc, #236]	; (401378 <xTaskCreate+0x1f4>)
  40128c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401290:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401294:	685b      	ldr	r3, [r3, #4]
  401296:	60a3      	str	r3, [r4, #8]
  401298:	6899      	ldr	r1, [r3, #8]
  40129a:	60e1      	str	r1, [r4, #12]
  40129c:	6899      	ldr	r1, [r3, #8]
  40129e:	f8c1 8004 	str.w	r8, [r1, #4]
  4012a2:	f8c3 8008 	str.w	r8, [r3, #8]
  4012a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4012a8:	0083      	lsls	r3, r0, #2
  4012aa:	1819      	adds	r1, r3, r0
  4012ac:	0089      	lsls	r1, r1, #2
  4012ae:	1855      	adds	r5, r2, r1
  4012b0:	6165      	str	r5, [r4, #20]
  4012b2:	5851      	ldr	r1, [r2, r1]
  4012b4:	3101      	adds	r1, #1
  4012b6:	4403      	add	r3, r0
  4012b8:	009b      	lsls	r3, r3, #2
  4012ba:	50d1      	str	r1, [r2, r3]
    taskEXIT_CRITICAL();
  4012bc:	4b2f      	ldr	r3, [pc, #188]	; (40137c <xTaskCreate+0x1f8>)
  4012be:	4798      	blx	r3
    if( xSchedulerRunning != pdFALSE )
  4012c0:	4b2a      	ldr	r3, [pc, #168]	; (40136c <xTaskCreate+0x1e8>)
  4012c2:	681b      	ldr	r3, [r3, #0]
  4012c4:	2b00      	cmp	r3, #0
  4012c6:	d03f      	beq.n	401348 <xTaskCreate+0x1c4>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4012c8:	4b27      	ldr	r3, [pc, #156]	; (401368 <xTaskCreate+0x1e4>)
  4012ca:	681b      	ldr	r3, [r3, #0]
  4012cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4012ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4012d0:	429a      	cmp	r2, r3
  4012d2:	d23d      	bcs.n	401350 <xTaskCreate+0x1cc>
            taskYIELD_IF_USING_PREEMPTION();
  4012d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012d8:	4b29      	ldr	r3, [pc, #164]	; (401380 <xTaskCreate+0x1fc>)
  4012da:	601a      	str	r2, [r3, #0]
  4012dc:	f3bf 8f4f 	dsb	sy
  4012e0:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
  4012e4:	2001      	movs	r0, #1
  4012e6:	e030      	b.n	40134a <xTaskCreate+0x1c6>
                        vPortFreeStack( pxStack );
  4012e8:	4640      	mov	r0, r8
  4012ea:	4b26      	ldr	r3, [pc, #152]	; (401384 <xTaskCreate+0x200>)
  4012ec:	4798      	blx	r3
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4012ee:	f04f 30ff 	mov.w	r0, #4294967295
  4012f2:	e02a      	b.n	40134a <xTaskCreate+0x1c6>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
  4012f4:	2300      	movs	r3, #0
  4012f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  4012fa:	e77e      	b.n	4011fa <xTaskCreate+0x76>
    configASSERT( uxPriority < configMAX_PRIORITIES );
  4012fc:	f240 3197 	movw	r1, #919	; 0x397
  401300:	4821      	ldr	r0, [pc, #132]	; (401388 <xTaskCreate+0x204>)
  401302:	4b22      	ldr	r3, [pc, #136]	; (40138c <xTaskCreate+0x208>)
  401304:	4798      	blx	r3
  401306:	e77a      	b.n	4011fe <xTaskCreate+0x7a>
            pxCurrentTCB = pxNewTCB;
  401308:	4b17      	ldr	r3, [pc, #92]	; (401368 <xTaskCreate+0x1e4>)
  40130a:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40130c:	6813      	ldr	r3, [r2, #0]
  40130e:	2b01      	cmp	r3, #1
  401310:	d1b0      	bne.n	401274 <xTaskCreate+0xf0>
  401312:	4d19      	ldr	r5, [pc, #100]	; (401378 <xTaskCreate+0x1f4>)
  401314:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401318:	4e1d      	ldr	r6, [pc, #116]	; (401390 <xTaskCreate+0x20c>)
  40131a:	4628      	mov	r0, r5
  40131c:	47b0      	blx	r6
  40131e:	3514      	adds	r5, #20
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401320:	42af      	cmp	r7, r5
  401322:	d1fa      	bne.n	40131a <xTaskCreate+0x196>
    vListInitialise( &xDelayedTaskList1 );
  401324:	4f1b      	ldr	r7, [pc, #108]	; (401394 <xTaskCreate+0x210>)
  401326:	4638      	mov	r0, r7
  401328:	4d19      	ldr	r5, [pc, #100]	; (401390 <xTaskCreate+0x20c>)
  40132a:	47a8      	blx	r5
    vListInitialise( &xDelayedTaskList2 );
  40132c:	4e1a      	ldr	r6, [pc, #104]	; (401398 <xTaskCreate+0x214>)
  40132e:	4630      	mov	r0, r6
  401330:	47a8      	blx	r5
    vListInitialise( &xPendingReadyList );
  401332:	481a      	ldr	r0, [pc, #104]	; (40139c <xTaskCreate+0x218>)
  401334:	47a8      	blx	r5
            vListInitialise( &xTasksWaitingTermination );
  401336:	481a      	ldr	r0, [pc, #104]	; (4013a0 <xTaskCreate+0x21c>)
  401338:	47a8      	blx	r5
            vListInitialise( &xSuspendedTaskList );
  40133a:	481a      	ldr	r0, [pc, #104]	; (4013a4 <xTaskCreate+0x220>)
  40133c:	47a8      	blx	r5
    pxDelayedTaskList = &xDelayedTaskList1;
  40133e:	4b1a      	ldr	r3, [pc, #104]	; (4013a8 <xTaskCreate+0x224>)
  401340:	601f      	str	r7, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401342:	4b1a      	ldr	r3, [pc, #104]	; (4013ac <xTaskCreate+0x228>)
  401344:	601e      	str	r6, [r3, #0]
  401346:	e795      	b.n	401274 <xTaskCreate+0xf0>
            xReturn = pdPASS;
  401348:	2001      	movs	r0, #1
    }
  40134a:	b003      	add	sp, #12
  40134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            xReturn = pdPASS;
  401350:	2001      	movs	r0, #1
        return xReturn;
  401352:	e7fa      	b.n	40134a <xTaskCreate+0x1c6>
  401354:	004005b5 	.word	0x004005b5
  401358:	00402d55 	.word	0x00402d55
  40135c:	004002a1 	.word	0x004002a1
  401360:	004002f5 	.word	0x004002f5
  401364:	2000053c 	.word	0x2000053c
  401368:	20000490 	.word	0x20000490
  40136c:	2000059c 	.word	0x2000059c
  401370:	20000548 	.word	0x20000548
  401374:	2000054c 	.word	0x2000054c
  401378:	2000049c 	.word	0x2000049c
  40137c:	0040033d 	.word	0x0040033d
  401380:	e000ed04 	.word	0xe000ed04
  401384:	004006a9 	.word	0x004006a9
  401388:	00403130 	.word	0x00403130
  40138c:	00402b79 	.word	0x00402b79
  401390:	00400191 	.word	0x00400191
  401394:	20000550 	.word	0x20000550
  401398:	20000564 	.word	0x20000564
  40139c:	20000588 	.word	0x20000588
  4013a0:	200005b4 	.word	0x200005b4
  4013a4:	200005a0 	.word	0x200005a0
  4013a8:	20000494 	.word	0x20000494
  4013ac:	20000498 	.word	0x20000498
  4013b0:	004001a7 	.word	0x004001a7

004013b4 <vTaskResume>:
    {
  4013b4:	b538      	push	{r3, r4, r5, lr}
        configASSERT( xTaskToResume );
  4013b6:	b168      	cbz	r0, 4013d4 <vTaskResume+0x20>
  4013b8:	4604      	mov	r4, r0
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
  4013ba:	4b23      	ldr	r3, [pc, #140]	; (401448 <vTaskResume+0x94>)
  4013bc:	681b      	ldr	r3, [r3, #0]
  4013be:	4298      	cmp	r0, r3
  4013c0:	d041      	beq.n	401446 <vTaskResume+0x92>
            taskENTER_CRITICAL();
  4013c2:	4b22      	ldr	r3, [pc, #136]	; (40144c <vTaskResume+0x98>)
  4013c4:	4798      	blx	r3
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
  4013c6:	4620      	mov	r0, r4
  4013c8:	4b21      	ldr	r3, [pc, #132]	; (401450 <vTaskResume+0x9c>)
  4013ca:	4798      	blx	r3
  4013cc:	b950      	cbnz	r0, 4013e4 <vTaskResume+0x30>
            taskEXIT_CRITICAL();
  4013ce:	4b21      	ldr	r3, [pc, #132]	; (401454 <vTaskResume+0xa0>)
  4013d0:	4798      	blx	r3
    }
  4013d2:	bd38      	pop	{r3, r4, r5, pc}
        configASSERT( xTaskToResume );
  4013d4:	f240 7151 	movw	r1, #1873	; 0x751
  4013d8:	481f      	ldr	r0, [pc, #124]	; (401458 <vTaskResume+0xa4>)
  4013da:	4b20      	ldr	r3, [pc, #128]	; (40145c <vTaskResume+0xa8>)
  4013dc:	4798      	blx	r3
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
  4013de:	4b1a      	ldr	r3, [pc, #104]	; (401448 <vTaskResume+0x94>)
  4013e0:	681b      	ldr	r3, [r3, #0]
  4013e2:	bd38      	pop	{r3, r4, r5, pc}
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4013e4:	1d25      	adds	r5, r4, #4
  4013e6:	4628      	mov	r0, r5
  4013e8:	4b1d      	ldr	r3, [pc, #116]	; (401460 <vTaskResume+0xac>)
  4013ea:	4798      	blx	r3
                    prvAddTaskToReadyList( pxTCB );
  4013ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4013ee:	491d      	ldr	r1, [pc, #116]	; (401464 <vTaskResume+0xb0>)
  4013f0:	6808      	ldr	r0, [r1, #0]
  4013f2:	2201      	movs	r2, #1
  4013f4:	409a      	lsls	r2, r3
  4013f6:	4302      	orrs	r2, r0
  4013f8:	600a      	str	r2, [r1, #0]
  4013fa:	4a1b      	ldr	r2, [pc, #108]	; (401468 <vTaskResume+0xb4>)
  4013fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401400:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401404:	685b      	ldr	r3, [r3, #4]
  401406:	60a3      	str	r3, [r4, #8]
  401408:	6899      	ldr	r1, [r3, #8]
  40140a:	60e1      	str	r1, [r4, #12]
  40140c:	6899      	ldr	r1, [r3, #8]
  40140e:	604d      	str	r5, [r1, #4]
  401410:	609d      	str	r5, [r3, #8]
  401412:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401414:	0083      	lsls	r3, r0, #2
  401416:	1819      	adds	r1, r3, r0
  401418:	0089      	lsls	r1, r1, #2
  40141a:	1855      	adds	r5, r2, r1
  40141c:	6165      	str	r5, [r4, #20]
  40141e:	5851      	ldr	r1, [r2, r1]
  401420:	3101      	adds	r1, #1
  401422:	4403      	add	r3, r0
  401424:	009b      	lsls	r3, r3, #2
  401426:	50d1      	str	r1, [r2, r3]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401428:	4b07      	ldr	r3, [pc, #28]	; (401448 <vTaskResume+0x94>)
  40142a:	681b      	ldr	r3, [r3, #0]
  40142c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401430:	429a      	cmp	r2, r3
  401432:	d3cc      	bcc.n	4013ce <vTaskResume+0x1a>
                        taskYIELD_IF_USING_PREEMPTION();
  401434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401438:	4b0c      	ldr	r3, [pc, #48]	; (40146c <vTaskResume+0xb8>)
  40143a:	601a      	str	r2, [r3, #0]
  40143c:	f3bf 8f4f 	dsb	sy
  401440:	f3bf 8f6f 	isb	sy
  401444:	e7c3      	b.n	4013ce <vTaskResume+0x1a>
  401446:	bd38      	pop	{r3, r4, r5, pc}
  401448:	20000490 	.word	0x20000490
  40144c:	004002f5 	.word	0x004002f5
  401450:	00401005 	.word	0x00401005
  401454:	0040033d 	.word	0x0040033d
  401458:	00403130 	.word	0x00403130
  40145c:	00402b79 	.word	0x00402b79
  401460:	004001f9 	.word	0x004001f9
  401464:	2000054c 	.word	0x2000054c
  401468:	2000049c 	.word	0x2000049c
  40146c:	e000ed04 	.word	0xe000ed04

00401470 <vTaskStartScheduler>:
{
  401470:	b510      	push	{r4, lr}
  401472:	b082      	sub	sp, #8
            xReturn = xTaskCreate( prvIdleTask,
  401474:	4b18      	ldr	r3, [pc, #96]	; (4014d8 <vTaskStartScheduler+0x68>)
  401476:	9301      	str	r3, [sp, #4]
  401478:	2300      	movs	r3, #0
  40147a:	9300      	str	r3, [sp, #0]
  40147c:	2282      	movs	r2, #130	; 0x82
  40147e:	4917      	ldr	r1, [pc, #92]	; (4014dc <vTaskStartScheduler+0x6c>)
  401480:	4817      	ldr	r0, [pc, #92]	; (4014e0 <vTaskStartScheduler+0x70>)
  401482:	4c18      	ldr	r4, [pc, #96]	; (4014e4 <vTaskStartScheduler+0x74>)
  401484:	47a0      	blx	r4
            if( xReturn == pdPASS )
  401486:	2801      	cmp	r0, #1
  401488:	d006      	beq.n	401498 <vTaskStartScheduler+0x28>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  40148a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40148e:	d01c      	beq.n	4014ca <vTaskStartScheduler+0x5a>
    ( void ) uxTopUsedPriority;
  401490:	4b15      	ldr	r3, [pc, #84]	; (4014e8 <vTaskStartScheduler+0x78>)
  401492:	681b      	ldr	r3, [r3, #0]
}
  401494:	b002      	add	sp, #8
  401496:	bd10      	pop	{r4, pc}
                xReturn = xTimerCreateTimerTask();
  401498:	4b14      	ldr	r3, [pc, #80]	; (4014ec <vTaskStartScheduler+0x7c>)
  40149a:	4798      	blx	r3
    if( xReturn == pdPASS )
  40149c:	2801      	cmp	r0, #1
  40149e:	d1f4      	bne.n	40148a <vTaskStartScheduler+0x1a>
        __asm volatile
  4014a0:	f04f 0350 	mov.w	r3, #80	; 0x50
  4014a4:	f383 8811 	msr	BASEPRI, r3
  4014a8:	f3bf 8f6f 	isb	sy
  4014ac:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
  4014b0:	f04f 32ff 	mov.w	r2, #4294967295
  4014b4:	4b0e      	ldr	r3, [pc, #56]	; (4014f0 <vTaskStartScheduler+0x80>)
  4014b6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
  4014b8:	2201      	movs	r2, #1
  4014ba:	4b0e      	ldr	r3, [pc, #56]	; (4014f4 <vTaskStartScheduler+0x84>)
  4014bc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  4014be:	2200      	movs	r2, #0
  4014c0:	4b0d      	ldr	r3, [pc, #52]	; (4014f8 <vTaskStartScheduler+0x88>)
  4014c2:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
  4014c4:	4b0d      	ldr	r3, [pc, #52]	; (4014fc <vTaskStartScheduler+0x8c>)
  4014c6:	4798      	blx	r3
  4014c8:	e7e2      	b.n	401490 <vTaskStartScheduler+0x20>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4014ca:	f44f 6104 	mov.w	r1, #2112	; 0x840
  4014ce:	480c      	ldr	r0, [pc, #48]	; (401500 <vTaskStartScheduler+0x90>)
  4014d0:	4b0c      	ldr	r3, [pc, #48]	; (401504 <vTaskStartScheduler+0x94>)
  4014d2:	4798      	blx	r3
  4014d4:	e7dc      	b.n	401490 <vTaskStartScheduler+0x20>
  4014d6:	bf00      	nop
  4014d8:	20000578 	.word	0x20000578
  4014dc:	00403148 	.word	0x00403148
  4014e0:	00401049 	.word	0x00401049
  4014e4:	00401185 	.word	0x00401185
  4014e8:	20000008 	.word	0x20000008
  4014ec:	0040212d 	.word	0x0040212d
  4014f0:	2000057c 	.word	0x2000057c
  4014f4:	2000059c 	.word	0x2000059c
  4014f8:	200005c8 	.word	0x200005c8
  4014fc:	0040043d 	.word	0x0040043d
  401500:	00403130 	.word	0x00403130
  401504:	00402b79 	.word	0x00402b79

00401508 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
  401508:	4a02      	ldr	r2, [pc, #8]	; (401514 <vTaskSuspendAll+0xc>)
  40150a:	6813      	ldr	r3, [r2, #0]
  40150c:	3301      	adds	r3, #1
  40150e:	6013      	str	r3, [r2, #0]
    portMEMORY_BARRIER();
  401510:	4770      	bx	lr
  401512:	bf00      	nop
  401514:	20000544 	.word	0x20000544

00401518 <xTaskGetTickCount>:
        xTicks = xTickCount;
  401518:	4b01      	ldr	r3, [pc, #4]	; (401520 <xTaskGetTickCount+0x8>)
  40151a:	6818      	ldr	r0, [r3, #0]
}
  40151c:	4770      	bx	lr
  40151e:	bf00      	nop
  401520:	200005c8 	.word	0x200005c8

00401524 <xTaskIncrementTick>:
{
  401524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401528:	4b5f      	ldr	r3, [pc, #380]	; (4016a8 <xTaskIncrementTick+0x184>)
  40152a:	681b      	ldr	r3, [r3, #0]
  40152c:	2b00      	cmp	r3, #0
  40152e:	f040 80b3 	bne.w	401698 <xTaskIncrementTick+0x174>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  401532:	4b5e      	ldr	r3, [pc, #376]	; (4016ac <xTaskIncrementTick+0x188>)
  401534:	681c      	ldr	r4, [r3, #0]
  401536:	f104 0b01 	add.w	fp, r4, #1
        xTickCount = xConstTickCount;
  40153a:	f8c3 b000 	str.w	fp, [r3]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  40153e:	f1bb 0f00 	cmp.w	fp, #0
  401542:	d10f      	bne.n	401564 <xTaskIncrementTick+0x40>
            taskSWITCH_DELAYED_LISTS();
  401544:	4b5a      	ldr	r3, [pc, #360]	; (4016b0 <xTaskIncrementTick+0x18c>)
  401546:	681b      	ldr	r3, [r3, #0]
  401548:	681b      	ldr	r3, [r3, #0]
  40154a:	bb13      	cbnz	r3, 401592 <xTaskIncrementTick+0x6e>
  40154c:	4a58      	ldr	r2, [pc, #352]	; (4016b0 <xTaskIncrementTick+0x18c>)
  40154e:	6811      	ldr	r1, [r2, #0]
  401550:	4b58      	ldr	r3, [pc, #352]	; (4016b4 <xTaskIncrementTick+0x190>)
  401552:	6818      	ldr	r0, [r3, #0]
  401554:	6010      	str	r0, [r2, #0]
  401556:	6019      	str	r1, [r3, #0]
  401558:	4a57      	ldr	r2, [pc, #348]	; (4016b8 <xTaskIncrementTick+0x194>)
  40155a:	6813      	ldr	r3, [r2, #0]
  40155c:	3301      	adds	r3, #1
  40155e:	6013      	str	r3, [r2, #0]
  401560:	4b56      	ldr	r3, [pc, #344]	; (4016bc <xTaskIncrementTick+0x198>)
  401562:	4798      	blx	r3
        if( xConstTickCount >= xNextTaskUnblockTime )
  401564:	4b56      	ldr	r3, [pc, #344]	; (4016c0 <xTaskIncrementTick+0x19c>)
  401566:	681b      	ldr	r3, [r3, #0]
  401568:	459b      	cmp	fp, r3
  40156a:	d218      	bcs.n	40159e <xTaskIncrementTick+0x7a>
    BaseType_t xSwitchRequired = pdFALSE;
  40156c:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40156e:	4b55      	ldr	r3, [pc, #340]	; (4016c4 <xTaskIncrementTick+0x1a0>)
  401570:	681b      	ldr	r3, [r3, #0]
  401572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401574:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401578:	009b      	lsls	r3, r3, #2
  40157a:	4a53      	ldr	r2, [pc, #332]	; (4016c8 <xTaskIncrementTick+0x1a4>)
  40157c:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
  40157e:	2b02      	cmp	r3, #2
  401580:	bf28      	it	cs
  401582:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
  401584:	4b51      	ldr	r3, [pc, #324]	; (4016cc <xTaskIncrementTick+0x1a8>)
  401586:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
  401588:	2b00      	cmp	r3, #0
  40158a:	bf18      	it	ne
  40158c:	2001      	movne	r0, #1
  40158e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
  401592:	f640 21c7 	movw	r1, #2759	; 0xac7
  401596:	484e      	ldr	r0, [pc, #312]	; (4016d0 <xTaskIncrementTick+0x1ac>)
  401598:	4b4e      	ldr	r3, [pc, #312]	; (4016d4 <xTaskIncrementTick+0x1b0>)
  40159a:	4798      	blx	r3
  40159c:	e7d6      	b.n	40154c <xTaskIncrementTick+0x28>
  40159e:	2000      	movs	r0, #0
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015a0:	4943      	ldr	r1, [pc, #268]	; (4016b0 <xTaskIncrementTick+0x18c>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  4015a2:	4607      	mov	r7, r0
                    prvAddTaskToReadyList( pxTCB );
  4015a4:	4d4c      	ldr	r5, [pc, #304]	; (4016d8 <xTaskIncrementTick+0x1b4>)
  4015a6:	f04f 0e01 	mov.w	lr, #1
  4015aa:	4a47      	ldr	r2, [pc, #284]	; (4016c8 <xTaskIncrementTick+0x1a4>)
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4015ac:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4016c4 <xTaskIncrementTick+0x1a0>
  4015b0:	e036      	b.n	401620 <xTaskIncrementTick+0xfc>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4015b2:	f04f 32ff 	mov.w	r2, #4294967295
  4015b6:	4b42      	ldr	r3, [pc, #264]	; (4016c0 <xTaskIncrementTick+0x19c>)
  4015b8:	601a      	str	r2, [r3, #0]
                    break;
  4015ba:	e7d8      	b.n	40156e <xTaskIncrementTick+0x4a>
                        xNextTaskUnblockTime = xItemValue;
  4015bc:	4b40      	ldr	r3, [pc, #256]	; (4016c0 <xTaskIncrementTick+0x19c>)
  4015be:	601e      	str	r6, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
  4015c0:	e7d5      	b.n	40156e <xTaskIncrementTick+0x4a>
                    prvAddTaskToReadyList( pxTCB );
  4015c2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  4015c4:	f8d5 a000 	ldr.w	sl, [r5]
  4015c8:	fa0e f906 	lsl.w	r9, lr, r6
  4015cc:	ea49 090a 	orr.w	r9, r9, sl
  4015d0:	f8c5 9000 	str.w	r9, [r5]
  4015d4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4015d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  4015dc:	6876      	ldr	r6, [r6, #4]
  4015de:	609e      	str	r6, [r3, #8]
  4015e0:	68b4      	ldr	r4, [r6, #8]
  4015e2:	60dc      	str	r4, [r3, #12]
  4015e4:	68b4      	ldr	r4, [r6, #8]
  4015e6:	f8c4 c004 	str.w	ip, [r4, #4]
  4015ea:	f8c6 c008 	str.w	ip, [r6, #8]
  4015ee:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
  4015f2:	ea4f 0689 	mov.w	r6, r9, lsl #2
  4015f6:	eb06 0c09 	add.w	ip, r6, r9
  4015fa:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
  4015fe:	f8c3 a014 	str.w	sl, [r3, #20]
  401602:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
  401606:	f10c 0c01 	add.w	ip, ip, #1
  40160a:	444e      	add	r6, r9
  40160c:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401610:	f8d8 c000 	ldr.w	ip, [r8]
  401614:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  401616:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
  40161a:	429e      	cmp	r6, r3
  40161c:	bf28      	it	cs
  40161e:	2001      	movcs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401620:	680b      	ldr	r3, [r1, #0]
  401622:	681b      	ldr	r3, [r3, #0]
  401624:	2b00      	cmp	r3, #0
  401626:	d0c4      	beq.n	4015b2 <xTaskIncrementTick+0x8e>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401628:	680b      	ldr	r3, [r1, #0]
  40162a:	68db      	ldr	r3, [r3, #12]
  40162c:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40162e:	685e      	ldr	r6, [r3, #4]
                    if( xConstTickCount < xItemValue )
  401630:	45b3      	cmp	fp, r6
  401632:	d3c3      	bcc.n	4015bc <xTaskIncrementTick+0x98>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401634:	f8d3 9014 	ldr.w	r9, [r3, #20]
  401638:	689e      	ldr	r6, [r3, #8]
  40163a:	68dc      	ldr	r4, [r3, #12]
  40163c:	60b4      	str	r4, [r6, #8]
  40163e:	68de      	ldr	r6, [r3, #12]
  401640:	689c      	ldr	r4, [r3, #8]
  401642:	6074      	str	r4, [r6, #4]
  401644:	f103 0c04 	add.w	ip, r3, #4
  401648:	f8d9 6004 	ldr.w	r6, [r9, #4]
  40164c:	4566      	cmp	r6, ip
  40164e:	bf04      	itt	eq
  401650:	68de      	ldreq	r6, [r3, #12]
  401652:	f8c9 6004 	streq.w	r6, [r9, #4]
  401656:	615f      	str	r7, [r3, #20]
  401658:	f8d9 6000 	ldr.w	r6, [r9]
  40165c:	3e01      	subs	r6, #1
  40165e:	f8c9 6000 	str.w	r6, [r9]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401662:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
  401666:	f1b9 0f00 	cmp.w	r9, #0
  40166a:	d0aa      	beq.n	4015c2 <xTaskIncrementTick+0x9e>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  40166c:	69de      	ldr	r6, [r3, #28]
  40166e:	6a1c      	ldr	r4, [r3, #32]
  401670:	60b4      	str	r4, [r6, #8]
  401672:	6a1e      	ldr	r6, [r3, #32]
  401674:	69dc      	ldr	r4, [r3, #28]
  401676:	6074      	str	r4, [r6, #4]
  401678:	f103 0a18 	add.w	sl, r3, #24
  40167c:	f8d9 6004 	ldr.w	r6, [r9, #4]
  401680:	4556      	cmp	r6, sl
  401682:	bf04      	itt	eq
  401684:	6a1e      	ldreq	r6, [r3, #32]
  401686:	f8c9 6004 	streq.w	r6, [r9, #4]
  40168a:	629f      	str	r7, [r3, #40]	; 0x28
  40168c:	f8d9 6000 	ldr.w	r6, [r9]
  401690:	3e01      	subs	r6, #1
  401692:	f8c9 6000 	str.w	r6, [r9]
  401696:	e794      	b.n	4015c2 <xTaskIncrementTick+0x9e>
        ++xPendedTicks;
  401698:	4a10      	ldr	r2, [pc, #64]	; (4016dc <xTaskIncrementTick+0x1b8>)
  40169a:	6813      	ldr	r3, [r2, #0]
  40169c:	3301      	adds	r3, #1
  40169e:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
  4016a0:	2000      	movs	r0, #0
}
  4016a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016a6:	bf00      	nop
  4016a8:	20000544 	.word	0x20000544
  4016ac:	200005c8 	.word	0x200005c8
  4016b0:	20000494 	.word	0x20000494
  4016b4:	20000498 	.word	0x20000498
  4016b8:	20000580 	.word	0x20000580
  4016bc:	00400fdd 	.word	0x00400fdd
  4016c0:	2000057c 	.word	0x2000057c
  4016c4:	20000490 	.word	0x20000490
  4016c8:	2000049c 	.word	0x2000049c
  4016cc:	200005cc 	.word	0x200005cc
  4016d0:	00403130 	.word	0x00403130
  4016d4:	00402b79 	.word	0x00402b79
  4016d8:	2000054c 	.word	0x2000054c
  4016dc:	20000584 	.word	0x20000584

004016e0 <xTaskResumeAll>:
{
  4016e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    configASSERT( uxSchedulerSuspended );
  4016e4:	4b57      	ldr	r3, [pc, #348]	; (401844 <xTaskResumeAll+0x164>)
  4016e6:	681b      	ldr	r3, [r3, #0]
  4016e8:	2b00      	cmp	r3, #0
  4016ea:	d07a      	beq.n	4017e2 <xTaskResumeAll+0x102>
    taskENTER_CRITICAL();
  4016ec:	4b56      	ldr	r3, [pc, #344]	; (401848 <xTaskResumeAll+0x168>)
  4016ee:	4798      	blx	r3
        --uxSchedulerSuspended;
  4016f0:	4b54      	ldr	r3, [pc, #336]	; (401844 <xTaskResumeAll+0x164>)
  4016f2:	681a      	ldr	r2, [r3, #0]
  4016f4:	3a01      	subs	r2, #1
  4016f6:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4016f8:	681b      	ldr	r3, [r3, #0]
  4016fa:	2b00      	cmp	r3, #0
  4016fc:	f040 809a 	bne.w	401834 <xTaskResumeAll+0x154>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401700:	4b52      	ldr	r3, [pc, #328]	; (40184c <xTaskResumeAll+0x16c>)
  401702:	681b      	ldr	r3, [r3, #0]
  401704:	2b00      	cmp	r3, #0
  401706:	d072      	beq.n	4017ee <xTaskResumeAll+0x10e>
  401708:	2300      	movs	r3, #0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40170a:	4951      	ldr	r1, [pc, #324]	; (401850 <xTaskResumeAll+0x170>)
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  40170c:	461c      	mov	r4, r3
                    prvAddTaskToReadyList( pxTCB );
  40170e:	4851      	ldr	r0, [pc, #324]	; (401854 <xTaskResumeAll+0x174>)
  401710:	2601      	movs	r6, #1
  401712:	4a51      	ldr	r2, [pc, #324]	; (401858 <xTaskResumeAll+0x178>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401714:	f8df a164 	ldr.w	sl, [pc, #356]	; 40187c <xTaskResumeAll+0x19c>
                        xYieldPending = pdTRUE;
  401718:	f8df e154 	ldr.w	lr, [pc, #340]	; 401870 <xTaskResumeAll+0x190>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40171c:	680d      	ldr	r5, [r1, #0]
  40171e:	2d00      	cmp	r5, #0
  401720:	d067      	beq.n	4017f2 <xTaskResumeAll+0x112>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401722:	68cb      	ldr	r3, [r1, #12]
  401724:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401726:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
  40172a:	69dd      	ldr	r5, [r3, #28]
  40172c:	6a1f      	ldr	r7, [r3, #32]
  40172e:	60af      	str	r7, [r5, #8]
  401730:	6a1d      	ldr	r5, [r3, #32]
  401732:	69df      	ldr	r7, [r3, #28]
  401734:	606f      	str	r7, [r5, #4]
  401736:	f103 0818 	add.w	r8, r3, #24
  40173a:	f8dc 5004 	ldr.w	r5, [ip, #4]
  40173e:	4545      	cmp	r5, r8
  401740:	bf04      	itt	eq
  401742:	6a1d      	ldreq	r5, [r3, #32]
  401744:	f8cc 5004 	streq.w	r5, [ip, #4]
  401748:	629c      	str	r4, [r3, #40]	; 0x28
  40174a:	f8dc 5000 	ldr.w	r5, [ip]
  40174e:	3d01      	subs	r5, #1
  401750:	f8cc 5000 	str.w	r5, [ip]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401754:	f8d3 c014 	ldr.w	ip, [r3, #20]
  401758:	689d      	ldr	r5, [r3, #8]
  40175a:	68df      	ldr	r7, [r3, #12]
  40175c:	60af      	str	r7, [r5, #8]
  40175e:	68dd      	ldr	r5, [r3, #12]
  401760:	689f      	ldr	r7, [r3, #8]
  401762:	606f      	str	r7, [r5, #4]
  401764:	f103 0804 	add.w	r8, r3, #4
  401768:	f8dc 5004 	ldr.w	r5, [ip, #4]
  40176c:	4545      	cmp	r5, r8
  40176e:	bf04      	itt	eq
  401770:	68dd      	ldreq	r5, [r3, #12]
  401772:	f8cc 5004 	streq.w	r5, [ip, #4]
  401776:	615c      	str	r4, [r3, #20]
  401778:	f8dc 5000 	ldr.w	r5, [ip]
  40177c:	3d01      	subs	r5, #1
  40177e:	f8cc 5000 	str.w	r5, [ip]
                    prvAddTaskToReadyList( pxTCB );
  401782:	6add      	ldr	r5, [r3, #44]	; 0x2c
  401784:	f8d0 9000 	ldr.w	r9, [r0]
  401788:	fa06 fc05 	lsl.w	ip, r6, r5
  40178c:	ea4c 0c09 	orr.w	ip, ip, r9
  401790:	f8c0 c000 	str.w	ip, [r0]
  401794:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401798:	eb02 0585 	add.w	r5, r2, r5, lsl #2
  40179c:	686d      	ldr	r5, [r5, #4]
  40179e:	609d      	str	r5, [r3, #8]
  4017a0:	68af      	ldr	r7, [r5, #8]
  4017a2:	60df      	str	r7, [r3, #12]
  4017a4:	68af      	ldr	r7, [r5, #8]
  4017a6:	f8c7 8004 	str.w	r8, [r7, #4]
  4017aa:	f8c5 8008 	str.w	r8, [r5, #8]
  4017ae:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
  4017b2:	ea4f 0588 	mov.w	r5, r8, lsl #2
  4017b6:	eb05 0c08 	add.w	ip, r5, r8
  4017ba:	eb02 098c 	add.w	r9, r2, ip, lsl #2
  4017be:	f8c3 9014 	str.w	r9, [r3, #20]
  4017c2:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
  4017c6:	f10c 0c01 	add.w	ip, ip, #1
  4017ca:	4445      	add	r5, r8
  4017cc:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4017d0:	f8da 5000 	ldr.w	r5, [sl]
  4017d4:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  4017d6:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  4017d8:	42af      	cmp	r7, r5
  4017da:	d39f      	bcc.n	40171c <xTaskResumeAll+0x3c>
                        xYieldPending = pdTRUE;
  4017dc:	f8ce 6000 	str.w	r6, [lr]
  4017e0:	e79c      	b.n	40171c <xTaskResumeAll+0x3c>
    configASSERT( uxSchedulerSuspended );
  4017e2:	f640 01b3 	movw	r1, #2227	; 0x8b3
  4017e6:	481d      	ldr	r0, [pc, #116]	; (40185c <xTaskResumeAll+0x17c>)
  4017e8:	4b1d      	ldr	r3, [pc, #116]	; (401860 <xTaskResumeAll+0x180>)
  4017ea:	4798      	blx	r3
  4017ec:	e77e      	b.n	4016ec <xTaskResumeAll+0xc>
    BaseType_t xAlreadyYielded = pdFALSE;
  4017ee:	2400      	movs	r4, #0
  4017f0:	e021      	b.n	401836 <xTaskResumeAll+0x156>
                if( pxTCB != NULL )
  4017f2:	b10b      	cbz	r3, 4017f8 <xTaskResumeAll+0x118>
                    prvResetNextTaskUnblockTime();
  4017f4:	4b1b      	ldr	r3, [pc, #108]	; (401864 <xTaskResumeAll+0x184>)
  4017f6:	4798      	blx	r3
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
  4017f8:	4b1b      	ldr	r3, [pc, #108]	; (401868 <xTaskResumeAll+0x188>)
  4017fa:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
  4017fc:	b16c      	cbz	r4, 40181a <xTaskResumeAll+0x13a>
                            if( xTaskIncrementTick() != pdFALSE )
  4017fe:	4d1b      	ldr	r5, [pc, #108]	; (40186c <xTaskResumeAll+0x18c>)
                                xYieldPending = pdTRUE;
  401800:	4f1b      	ldr	r7, [pc, #108]	; (401870 <xTaskResumeAll+0x190>)
  401802:	2601      	movs	r6, #1
  401804:	e001      	b.n	40180a <xTaskResumeAll+0x12a>
                        } while( xPendedCounts > ( TickType_t ) 0U );
  401806:	3c01      	subs	r4, #1
  401808:	d004      	beq.n	401814 <xTaskResumeAll+0x134>
                            if( xTaskIncrementTick() != pdFALSE )
  40180a:	47a8      	blx	r5
  40180c:	2800      	cmp	r0, #0
  40180e:	d0fa      	beq.n	401806 <xTaskResumeAll+0x126>
                                xYieldPending = pdTRUE;
  401810:	603e      	str	r6, [r7, #0]
  401812:	e7f8      	b.n	401806 <xTaskResumeAll+0x126>
                        xPendedTicks = 0;
  401814:	2200      	movs	r2, #0
  401816:	4b14      	ldr	r3, [pc, #80]	; (401868 <xTaskResumeAll+0x188>)
  401818:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
  40181a:	4b15      	ldr	r3, [pc, #84]	; (401870 <xTaskResumeAll+0x190>)
  40181c:	681b      	ldr	r3, [r3, #0]
  40181e:	b17b      	cbz	r3, 401840 <xTaskResumeAll+0x160>
                    taskYIELD_IF_USING_PREEMPTION();
  401820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401824:	4b13      	ldr	r3, [pc, #76]	; (401874 <xTaskResumeAll+0x194>)
  401826:	601a      	str	r2, [r3, #0]
  401828:	f3bf 8f4f 	dsb	sy
  40182c:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
  401830:	2401      	movs	r4, #1
  401832:	e000      	b.n	401836 <xTaskResumeAll+0x156>
    BaseType_t xAlreadyYielded = pdFALSE;
  401834:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
  401836:	4b10      	ldr	r3, [pc, #64]	; (401878 <xTaskResumeAll+0x198>)
  401838:	4798      	blx	r3
}
  40183a:	4620      	mov	r0, r4
  40183c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
  401840:	2400      	movs	r4, #0
  401842:	e7f8      	b.n	401836 <xTaskResumeAll+0x156>
  401844:	20000544 	.word	0x20000544
  401848:	004002f5 	.word	0x004002f5
  40184c:	2000053c 	.word	0x2000053c
  401850:	20000588 	.word	0x20000588
  401854:	2000054c 	.word	0x2000054c
  401858:	2000049c 	.word	0x2000049c
  40185c:	00403130 	.word	0x00403130
  401860:	00402b79 	.word	0x00402b79
  401864:	00400fdd 	.word	0x00400fdd
  401868:	20000584 	.word	0x20000584
  40186c:	00401525 	.word	0x00401525
  401870:	200005cc 	.word	0x200005cc
  401874:	e000ed04 	.word	0xe000ed04
  401878:	0040033d 	.word	0x0040033d
  40187c:	20000490 	.word	0x20000490

00401880 <vTaskDelay>:
    {
  401880:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
  401882:	b160      	cbz	r0, 40189e <vTaskDelay+0x1e>
  401884:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
  401886:	4b0d      	ldr	r3, [pc, #52]	; (4018bc <vTaskDelay+0x3c>)
  401888:	681b      	ldr	r3, [r3, #0]
  40188a:	b98b      	cbnz	r3, 4018b0 <vTaskDelay+0x30>
            vTaskSuspendAll();
  40188c:	4b0c      	ldr	r3, [pc, #48]	; (4018c0 <vTaskDelay+0x40>)
  40188e:	4798      	blx	r3
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401890:	2100      	movs	r1, #0
  401892:	4620      	mov	r0, r4
  401894:	4b0b      	ldr	r3, [pc, #44]	; (4018c4 <vTaskDelay+0x44>)
  401896:	4798      	blx	r3
            xAlreadyYielded = xTaskResumeAll();
  401898:	4b0b      	ldr	r3, [pc, #44]	; (4018c8 <vTaskDelay+0x48>)
  40189a:	4798      	blx	r3
        if( xAlreadyYielded == pdFALSE )
  40189c:	b938      	cbnz	r0, 4018ae <vTaskDelay+0x2e>
            portYIELD_WITHIN_API();
  40189e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018a2:	4b0a      	ldr	r3, [pc, #40]	; (4018cc <vTaskDelay+0x4c>)
  4018a4:	601a      	str	r2, [r3, #0]
  4018a6:	f3bf 8f4f 	dsb	sy
  4018aa:	f3bf 8f6f 	isb	sy
  4018ae:	bd10      	pop	{r4, pc}
            configASSERT( uxSchedulerSuspended == 0 );
  4018b0:	f240 5149 	movw	r1, #1353	; 0x549
  4018b4:	4806      	ldr	r0, [pc, #24]	; (4018d0 <vTaskDelay+0x50>)
  4018b6:	4b07      	ldr	r3, [pc, #28]	; (4018d4 <vTaskDelay+0x54>)
  4018b8:	4798      	blx	r3
  4018ba:	e7e7      	b.n	40188c <vTaskDelay+0xc>
  4018bc:	20000544 	.word	0x20000544
  4018c0:	00401509 	.word	0x00401509
  4018c4:	004010c9 	.word	0x004010c9
  4018c8:	004016e1 	.word	0x004016e1
  4018cc:	e000ed04 	.word	0xe000ed04
  4018d0:	00403130 	.word	0x00403130
  4018d4:	00402b79 	.word	0x00402b79

004018d8 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4018d8:	4b2b      	ldr	r3, [pc, #172]	; (401988 <vTaskSwitchContext+0xb0>)
  4018da:	681b      	ldr	r3, [r3, #0]
  4018dc:	2b00      	cmp	r3, #0
  4018de:	d134      	bne.n	40194a <vTaskSwitchContext+0x72>
{
  4018e0:	b510      	push	{r4, lr}
        xYieldPending = pdFALSE;
  4018e2:	2200      	movs	r2, #0
  4018e4:	4b29      	ldr	r3, [pc, #164]	; (40198c <vTaskSwitchContext+0xb4>)
  4018e6:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
  4018e8:	4b29      	ldr	r3, [pc, #164]	; (401990 <vTaskSwitchContext+0xb8>)
  4018ea:	681b      	ldr	r3, [r3, #0]
  4018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018ee:	681a      	ldr	r2, [r3, #0]
  4018f0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4018f4:	d02d      	beq.n	401952 <vTaskSwitchContext+0x7a>
  4018f6:	4b26      	ldr	r3, [pc, #152]	; (401990 <vTaskSwitchContext+0xb8>)
  4018f8:	6818      	ldr	r0, [r3, #0]
  4018fa:	6819      	ldr	r1, [r3, #0]
  4018fc:	3134      	adds	r1, #52	; 0x34
  4018fe:	4b25      	ldr	r3, [pc, #148]	; (401994 <vTaskSwitchContext+0xbc>)
  401900:	4798      	blx	r3
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401902:	4b25      	ldr	r3, [pc, #148]	; (401998 <vTaskSwitchContext+0xc0>)
  401904:	681c      	ldr	r4, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  401906:	fab4 f484 	clz	r4, r4
  40190a:	b2e4      	uxtb	r4, r4
  40190c:	f1c4 041f 	rsb	r4, r4, #31
  401910:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401914:	009b      	lsls	r3, r3, #2
  401916:	4a21      	ldr	r2, [pc, #132]	; (40199c <vTaskSwitchContext+0xc4>)
  401918:	58d3      	ldr	r3, [r2, r3]
  40191a:	b33b      	cbz	r3, 40196c <vTaskSwitchContext+0x94>
  40191c:	4b1f      	ldr	r3, [pc, #124]	; (40199c <vTaskSwitchContext+0xc4>)
  40191e:	00a2      	lsls	r2, r4, #2
  401920:	1911      	adds	r1, r2, r4
  401922:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401926:	6848      	ldr	r0, [r1, #4]
  401928:	6840      	ldr	r0, [r0, #4]
  40192a:	6048      	str	r0, [r1, #4]
  40192c:	4422      	add	r2, r4
  40192e:	460b      	mov	r3, r1
  401930:	3308      	adds	r3, #8
  401932:	4298      	cmp	r0, r3
  401934:	d020      	beq.n	401978 <vTaskSwitchContext+0xa0>
  401936:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40193a:	4b18      	ldr	r3, [pc, #96]	; (40199c <vTaskSwitchContext+0xc4>)
  40193c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401940:	6863      	ldr	r3, [r4, #4]
  401942:	68da      	ldr	r2, [r3, #12]
  401944:	4b12      	ldr	r3, [pc, #72]	; (401990 <vTaskSwitchContext+0xb8>)
  401946:	601a      	str	r2, [r3, #0]
  401948:	bd10      	pop	{r4, pc}
        xYieldPending = pdTRUE;
  40194a:	2201      	movs	r2, #1
  40194c:	4b0f      	ldr	r3, [pc, #60]	; (40198c <vTaskSwitchContext+0xb4>)
  40194e:	601a      	str	r2, [r3, #0]
  401950:	4770      	bx	lr
        taskCHECK_FOR_STACK_OVERFLOW();
  401952:	685a      	ldr	r2, [r3, #4]
  401954:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401958:	d1cd      	bne.n	4018f6 <vTaskSwitchContext+0x1e>
  40195a:	689a      	ldr	r2, [r3, #8]
  40195c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401960:	d1c9      	bne.n	4018f6 <vTaskSwitchContext+0x1e>
  401962:	68db      	ldr	r3, [r3, #12]
  401964:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401968:	d1c5      	bne.n	4018f6 <vTaskSwitchContext+0x1e>
  40196a:	e7ca      	b.n	401902 <vTaskSwitchContext+0x2a>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40196c:	f640 4102 	movw	r1, #3074	; 0xc02
  401970:	480b      	ldr	r0, [pc, #44]	; (4019a0 <vTaskSwitchContext+0xc8>)
  401972:	4b0c      	ldr	r3, [pc, #48]	; (4019a4 <vTaskSwitchContext+0xcc>)
  401974:	4798      	blx	r3
  401976:	e7d1      	b.n	40191c <vTaskSwitchContext+0x44>
  401978:	6841      	ldr	r1, [r0, #4]
  40197a:	4613      	mov	r3, r2
  40197c:	4a07      	ldr	r2, [pc, #28]	; (40199c <vTaskSwitchContext+0xc4>)
  40197e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401982:	6059      	str	r1, [r3, #4]
  401984:	e7d7      	b.n	401936 <vTaskSwitchContext+0x5e>
  401986:	bf00      	nop
  401988:	20000544 	.word	0x20000544
  40198c:	200005cc 	.word	0x200005cc
  401990:	20000490 	.word	0x20000490
  401994:	00402bbd 	.word	0x00402bbd
  401998:	2000054c 	.word	0x2000054c
  40199c:	2000049c 	.word	0x2000049c
  4019a0:	00403130 	.word	0x00403130
  4019a4:	00402b79 	.word	0x00402b79

004019a8 <vTaskSuspend>:
    {
  4019a8:	b538      	push	{r3, r4, r5, lr}
  4019aa:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
  4019ac:	4b2f      	ldr	r3, [pc, #188]	; (401a6c <vTaskSuspend+0xc4>)
  4019ae:	4798      	blx	r3
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  4019b0:	2c00      	cmp	r4, #0
  4019b2:	d02f      	beq.n	401a14 <vTaskSuspend+0x6c>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4019b4:	1d25      	adds	r5, r4, #4
  4019b6:	4628      	mov	r0, r5
  4019b8:	4b2d      	ldr	r3, [pc, #180]	; (401a70 <vTaskSuspend+0xc8>)
  4019ba:	4798      	blx	r3
  4019bc:	b970      	cbnz	r0, 4019dc <vTaskSuspend+0x34>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4019be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4019c0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4019c4:	009b      	lsls	r3, r3, #2
  4019c6:	492b      	ldr	r1, [pc, #172]	; (401a74 <vTaskSuspend+0xcc>)
  4019c8:	58cb      	ldr	r3, [r1, r3]
  4019ca:	b93b      	cbnz	r3, 4019dc <vTaskSuspend+0x34>
  4019cc:	482a      	ldr	r0, [pc, #168]	; (401a78 <vTaskSuspend+0xd0>)
  4019ce:	6803      	ldr	r3, [r0, #0]
  4019d0:	2101      	movs	r1, #1
  4019d2:	fa01 f202 	lsl.w	r2, r1, r2
  4019d6:	ea23 0202 	bic.w	r2, r3, r2
  4019da:	6002      	str	r2, [r0, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4019dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4019de:	b11b      	cbz	r3, 4019e8 <vTaskSuspend+0x40>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4019e0:	f104 0018 	add.w	r0, r4, #24
  4019e4:	4b22      	ldr	r3, [pc, #136]	; (401a70 <vTaskSuspend+0xc8>)
  4019e6:	4798      	blx	r3
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
  4019e8:	4629      	mov	r1, r5
  4019ea:	4824      	ldr	r0, [pc, #144]	; (401a7c <vTaskSuspend+0xd4>)
  4019ec:	4b24      	ldr	r3, [pc, #144]	; (401a80 <vTaskSuspend+0xd8>)
  4019ee:	4798      	blx	r3
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
  4019f0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  4019f4:	b2db      	uxtb	r3, r3
  4019f6:	2b01      	cmp	r3, #1
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
  4019f8:	bf04      	itt	eq
  4019fa:	2300      	moveq	r3, #0
  4019fc:	f884 3060 	strbeq.w	r3, [r4, #96]	; 0x60
        taskEXIT_CRITICAL();
  401a00:	4b20      	ldr	r3, [pc, #128]	; (401a84 <vTaskSuspend+0xdc>)
  401a02:	4798      	blx	r3
        if( xSchedulerRunning != pdFALSE )
  401a04:	4b20      	ldr	r3, [pc, #128]	; (401a88 <vTaskSuspend+0xe0>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	b93b      	cbnz	r3, 401a1a <vTaskSuspend+0x72>
        if( pxTCB == pxCurrentTCB )
  401a0a:	4b20      	ldr	r3, [pc, #128]	; (401a8c <vTaskSuspend+0xe4>)
  401a0c:	681b      	ldr	r3, [r3, #0]
  401a0e:	429c      	cmp	r4, r3
  401a10:	d00a      	beq.n	401a28 <vTaskSuspend+0x80>
  401a12:	bd38      	pop	{r3, r4, r5, pc}
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  401a14:	4b1d      	ldr	r3, [pc, #116]	; (401a8c <vTaskSuspend+0xe4>)
  401a16:	681c      	ldr	r4, [r3, #0]
  401a18:	e7cc      	b.n	4019b4 <vTaskSuspend+0xc>
            taskENTER_CRITICAL();
  401a1a:	4b14      	ldr	r3, [pc, #80]	; (401a6c <vTaskSuspend+0xc4>)
  401a1c:	4798      	blx	r3
                prvResetNextTaskUnblockTime();
  401a1e:	4b1c      	ldr	r3, [pc, #112]	; (401a90 <vTaskSuspend+0xe8>)
  401a20:	4798      	blx	r3
            taskEXIT_CRITICAL();
  401a22:	4b18      	ldr	r3, [pc, #96]	; (401a84 <vTaskSuspend+0xdc>)
  401a24:	4798      	blx	r3
  401a26:	e7f0      	b.n	401a0a <vTaskSuspend+0x62>
            if( xSchedulerRunning != pdFALSE )
  401a28:	4b17      	ldr	r3, [pc, #92]	; (401a88 <vTaskSuspend+0xe0>)
  401a2a:	681b      	ldr	r3, [r3, #0]
  401a2c:	b18b      	cbz	r3, 401a52 <vTaskSuspend+0xaa>
                configASSERT( uxSchedulerSuspended == 0 );
  401a2e:	4b19      	ldr	r3, [pc, #100]	; (401a94 <vTaskSuspend+0xec>)
  401a30:	681b      	ldr	r3, [r3, #0]
  401a32:	b943      	cbnz	r3, 401a46 <vTaskSuspend+0x9e>
                portYIELD_WITHIN_API();
  401a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a38:	4b17      	ldr	r3, [pc, #92]	; (401a98 <vTaskSuspend+0xf0>)
  401a3a:	601a      	str	r2, [r3, #0]
  401a3c:	f3bf 8f4f 	dsb	sy
  401a40:	f3bf 8f6f 	isb	sy
  401a44:	bd38      	pop	{r3, r4, r5, pc}
                configASSERT( uxSchedulerSuspended == 0 );
  401a46:	f240 61fd 	movw	r1, #1789	; 0x6fd
  401a4a:	4814      	ldr	r0, [pc, #80]	; (401a9c <vTaskSuspend+0xf4>)
  401a4c:	4b14      	ldr	r3, [pc, #80]	; (401aa0 <vTaskSuspend+0xf8>)
  401a4e:	4798      	blx	r3
  401a50:	e7f0      	b.n	401a34 <vTaskSuspend+0x8c>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
  401a52:	4b0a      	ldr	r3, [pc, #40]	; (401a7c <vTaskSuspend+0xd4>)
  401a54:	681a      	ldr	r2, [r3, #0]
  401a56:	4b13      	ldr	r3, [pc, #76]	; (401aa4 <vTaskSuspend+0xfc>)
  401a58:	681b      	ldr	r3, [r3, #0]
  401a5a:	429a      	cmp	r2, r3
  401a5c:	d002      	beq.n	401a64 <vTaskSuspend+0xbc>
                    vTaskSwitchContext();
  401a5e:	4b12      	ldr	r3, [pc, #72]	; (401aa8 <vTaskSuspend+0x100>)
  401a60:	4798      	blx	r3
    }
  401a62:	e7d6      	b.n	401a12 <vTaskSuspend+0x6a>
                    pxCurrentTCB = NULL;
  401a64:	2200      	movs	r2, #0
  401a66:	4b09      	ldr	r3, [pc, #36]	; (401a8c <vTaskSuspend+0xe4>)
  401a68:	601a      	str	r2, [r3, #0]
  401a6a:	bd38      	pop	{r3, r4, r5, pc}
  401a6c:	004002f5 	.word	0x004002f5
  401a70:	004001f9 	.word	0x004001f9
  401a74:	2000049c 	.word	0x2000049c
  401a78:	2000054c 	.word	0x2000054c
  401a7c:	200005a0 	.word	0x200005a0
  401a80:	004001ad 	.word	0x004001ad
  401a84:	0040033d 	.word	0x0040033d
  401a88:	2000059c 	.word	0x2000059c
  401a8c:	20000490 	.word	0x20000490
  401a90:	00400fdd 	.word	0x00400fdd
  401a94:	20000544 	.word	0x20000544
  401a98:	e000ed04 	.word	0xe000ed04
  401a9c:	00403130 	.word	0x00403130
  401aa0:	00402b79 	.word	0x00402b79
  401aa4:	2000053c 	.word	0x2000053c
  401aa8:	004018d9 	.word	0x004018d9

00401aac <vTaskPlaceOnEventList>:
{
  401aac:	b538      	push	{r3, r4, r5, lr}
  401aae:	460c      	mov	r4, r1
    configASSERT( pxEventList );
  401ab0:	4605      	mov	r5, r0
  401ab2:	b150      	cbz	r0, 401aca <vTaskPlaceOnEventList+0x1e>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401ab4:	4b08      	ldr	r3, [pc, #32]	; (401ad8 <vTaskPlaceOnEventList+0x2c>)
  401ab6:	6819      	ldr	r1, [r3, #0]
  401ab8:	3118      	adds	r1, #24
  401aba:	4628      	mov	r0, r5
  401abc:	4b07      	ldr	r3, [pc, #28]	; (401adc <vTaskPlaceOnEventList+0x30>)
  401abe:	4798      	blx	r3
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  401ac0:	2101      	movs	r1, #1
  401ac2:	4620      	mov	r0, r4
  401ac4:	4b06      	ldr	r3, [pc, #24]	; (401ae0 <vTaskPlaceOnEventList+0x34>)
  401ac6:	4798      	blx	r3
  401ac8:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxEventList );
  401aca:	f640 411c 	movw	r1, #3100	; 0xc1c
  401ace:	4805      	ldr	r0, [pc, #20]	; (401ae4 <vTaskPlaceOnEventList+0x38>)
  401ad0:	4b05      	ldr	r3, [pc, #20]	; (401ae8 <vTaskPlaceOnEventList+0x3c>)
  401ad2:	4798      	blx	r3
  401ad4:	e7ee      	b.n	401ab4 <vTaskPlaceOnEventList+0x8>
  401ad6:	bf00      	nop
  401ad8:	20000490 	.word	0x20000490
  401adc:	004001c5 	.word	0x004001c5
  401ae0:	004010c9 	.word	0x004010c9
  401ae4:	00403130 	.word	0x00403130
  401ae8:	00402b79 	.word	0x00402b79

00401aec <vTaskPlaceOnEventListRestricted>:
    {
  401aec:	b570      	push	{r4, r5, r6, lr}
  401aee:	460e      	mov	r6, r1
  401af0:	4615      	mov	r5, r2
        configASSERT( pxEventList );
  401af2:	4604      	mov	r4, r0
  401af4:	b1d8      	cbz	r0, 401b2e <vTaskPlaceOnEventListRestricted+0x42>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401af6:	6862      	ldr	r2, [r4, #4]
  401af8:	4b10      	ldr	r3, [pc, #64]	; (401b3c <vTaskPlaceOnEventListRestricted+0x50>)
  401afa:	6819      	ldr	r1, [r3, #0]
  401afc:	61ca      	str	r2, [r1, #28]
  401afe:	6819      	ldr	r1, [r3, #0]
  401b00:	6890      	ldr	r0, [r2, #8]
  401b02:	6208      	str	r0, [r1, #32]
  401b04:	6890      	ldr	r0, [r2, #8]
  401b06:	6819      	ldr	r1, [r3, #0]
  401b08:	3118      	adds	r1, #24
  401b0a:	6041      	str	r1, [r0, #4]
  401b0c:	6819      	ldr	r1, [r3, #0]
  401b0e:	3118      	adds	r1, #24
  401b10:	6091      	str	r1, [r2, #8]
  401b12:	681b      	ldr	r3, [r3, #0]
  401b14:	629c      	str	r4, [r3, #40]	; 0x28
  401b16:	6823      	ldr	r3, [r4, #0]
  401b18:	3301      	adds	r3, #1
  401b1a:	6023      	str	r3, [r4, #0]
            xTicksToWait = portMAX_DELAY;
  401b1c:	2d00      	cmp	r5, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401b1e:	4629      	mov	r1, r5
  401b20:	bf0c      	ite	eq
  401b22:	4630      	moveq	r0, r6
  401b24:	f04f 30ff 	movne.w	r0, #4294967295
  401b28:	4b05      	ldr	r3, [pc, #20]	; (401b40 <vTaskPlaceOnEventListRestricted+0x54>)
  401b2a:	4798      	blx	r3
  401b2c:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxEventList );
  401b2e:	f640 4152 	movw	r1, #3154	; 0xc52
  401b32:	4804      	ldr	r0, [pc, #16]	; (401b44 <vTaskPlaceOnEventListRestricted+0x58>)
  401b34:	4b04      	ldr	r3, [pc, #16]	; (401b48 <vTaskPlaceOnEventListRestricted+0x5c>)
  401b36:	4798      	blx	r3
  401b38:	e7dd      	b.n	401af6 <vTaskPlaceOnEventListRestricted+0xa>
  401b3a:	bf00      	nop
  401b3c:	20000490 	.word	0x20000490
  401b40:	004010c9 	.word	0x004010c9
  401b44:	00403130 	.word	0x00403130
  401b48:	00402b79 	.word	0x00402b79

00401b4c <xTaskRemoveFromEventList>:
{
  401b4c:	b538      	push	{r3, r4, r5, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401b4e:	68c3      	ldr	r3, [r0, #12]
  401b50:	68dc      	ldr	r4, [r3, #12]
    configASSERT( pxUnblockedTCB );
  401b52:	2c00      	cmp	r4, #0
  401b54:	d051      	beq.n	401bfa <xTaskRemoveFromEventList+0xae>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
  401b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401b58:	69e2      	ldr	r2, [r4, #28]
  401b5a:	6a21      	ldr	r1, [r4, #32]
  401b5c:	6091      	str	r1, [r2, #8]
  401b5e:	6a22      	ldr	r2, [r4, #32]
  401b60:	69e1      	ldr	r1, [r4, #28]
  401b62:	6051      	str	r1, [r2, #4]
  401b64:	f104 0118 	add.w	r1, r4, #24
  401b68:	685a      	ldr	r2, [r3, #4]
  401b6a:	428a      	cmp	r2, r1
  401b6c:	bf04      	itt	eq
  401b6e:	6a22      	ldreq	r2, [r4, #32]
  401b70:	605a      	streq	r2, [r3, #4]
  401b72:	2200      	movs	r2, #0
  401b74:	62a2      	str	r2, [r4, #40]	; 0x28
  401b76:	681a      	ldr	r2, [r3, #0]
  401b78:	3a01      	subs	r2, #1
  401b7a:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b7c:	4b28      	ldr	r3, [pc, #160]	; (401c20 <xTaskRemoveFromEventList+0xd4>)
  401b7e:	681b      	ldr	r3, [r3, #0]
  401b80:	2b00      	cmp	r3, #0
  401b82:	d140      	bne.n	401c06 <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
  401b84:	6963      	ldr	r3, [r4, #20]
  401b86:	68a2      	ldr	r2, [r4, #8]
  401b88:	68e1      	ldr	r1, [r4, #12]
  401b8a:	6091      	str	r1, [r2, #8]
  401b8c:	68e2      	ldr	r2, [r4, #12]
  401b8e:	68a1      	ldr	r1, [r4, #8]
  401b90:	6051      	str	r1, [r2, #4]
  401b92:	1d21      	adds	r1, r4, #4
  401b94:	685a      	ldr	r2, [r3, #4]
  401b96:	428a      	cmp	r2, r1
  401b98:	bf04      	itt	eq
  401b9a:	68e2      	ldreq	r2, [r4, #12]
  401b9c:	605a      	streq	r2, [r3, #4]
  401b9e:	2200      	movs	r2, #0
  401ba0:	6162      	str	r2, [r4, #20]
  401ba2:	681a      	ldr	r2, [r3, #0]
  401ba4:	3a01      	subs	r2, #1
  401ba6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
  401ba8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401baa:	481e      	ldr	r0, [pc, #120]	; (401c24 <xTaskRemoveFromEventList+0xd8>)
  401bac:	6805      	ldr	r5, [r0, #0]
  401bae:	2201      	movs	r2, #1
  401bb0:	409a      	lsls	r2, r3
  401bb2:	432a      	orrs	r2, r5
  401bb4:	6002      	str	r2, [r0, #0]
  401bb6:	4a1c      	ldr	r2, [pc, #112]	; (401c28 <xTaskRemoveFromEventList+0xdc>)
  401bb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401bbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401bc0:	685b      	ldr	r3, [r3, #4]
  401bc2:	60a3      	str	r3, [r4, #8]
  401bc4:	6898      	ldr	r0, [r3, #8]
  401bc6:	60e0      	str	r0, [r4, #12]
  401bc8:	6898      	ldr	r0, [r3, #8]
  401bca:	6041      	str	r1, [r0, #4]
  401bcc:	6099      	str	r1, [r3, #8]
  401bce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401bd0:	0083      	lsls	r3, r0, #2
  401bd2:	1819      	adds	r1, r3, r0
  401bd4:	0089      	lsls	r1, r1, #2
  401bd6:	1855      	adds	r5, r2, r1
  401bd8:	6165      	str	r5, [r4, #20]
  401bda:	5851      	ldr	r1, [r2, r1]
  401bdc:	3101      	adds	r1, #1
  401bde:	4403      	add	r3, r0
  401be0:	009b      	lsls	r3, r3, #2
  401be2:	50d1      	str	r1, [r2, r3]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401be4:	4b11      	ldr	r3, [pc, #68]	; (401c2c <xTaskRemoveFromEventList+0xe0>)
  401be6:	681b      	ldr	r3, [r3, #0]
  401be8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bec:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
  401bee:	bf83      	ittte	hi
  401bf0:	2001      	movhi	r0, #1
  401bf2:	4b0f      	ldrhi	r3, [pc, #60]	; (401c30 <xTaskRemoveFromEventList+0xe4>)
  401bf4:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
  401bf6:	2000      	movls	r0, #0
}
  401bf8:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxUnblockedTCB );
  401bfa:	f640 4182 	movw	r1, #3202	; 0xc82
  401bfe:	480d      	ldr	r0, [pc, #52]	; (401c34 <xTaskRemoveFromEventList+0xe8>)
  401c00:	4b0d      	ldr	r3, [pc, #52]	; (401c38 <xTaskRemoveFromEventList+0xec>)
  401c02:	4798      	blx	r3
  401c04:	e7a7      	b.n	401b56 <xTaskRemoveFromEventList+0xa>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401c06:	4b0d      	ldr	r3, [pc, #52]	; (401c3c <xTaskRemoveFromEventList+0xf0>)
  401c08:	685a      	ldr	r2, [r3, #4]
  401c0a:	61e2      	str	r2, [r4, #28]
  401c0c:	6890      	ldr	r0, [r2, #8]
  401c0e:	6220      	str	r0, [r4, #32]
  401c10:	6890      	ldr	r0, [r2, #8]
  401c12:	6041      	str	r1, [r0, #4]
  401c14:	6091      	str	r1, [r2, #8]
  401c16:	62a3      	str	r3, [r4, #40]	; 0x28
  401c18:	681a      	ldr	r2, [r3, #0]
  401c1a:	3201      	adds	r2, #1
  401c1c:	601a      	str	r2, [r3, #0]
  401c1e:	e7e1      	b.n	401be4 <xTaskRemoveFromEventList+0x98>
  401c20:	20000544 	.word	0x20000544
  401c24:	2000054c 	.word	0x2000054c
  401c28:	2000049c 	.word	0x2000049c
  401c2c:	20000490 	.word	0x20000490
  401c30:	200005cc 	.word	0x200005cc
  401c34:	00403130 	.word	0x00403130
  401c38:	00402b79 	.word	0x00402b79
  401c3c:	20000588 	.word	0x20000588

00401c40 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
  401c40:	4b03      	ldr	r3, [pc, #12]	; (401c50 <vTaskInternalSetTimeOutState+0x10>)
  401c42:	681b      	ldr	r3, [r3, #0]
  401c44:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
  401c46:	4b03      	ldr	r3, [pc, #12]	; (401c54 <vTaskInternalSetTimeOutState+0x14>)
  401c48:	681b      	ldr	r3, [r3, #0]
  401c4a:	6043      	str	r3, [r0, #4]
  401c4c:	4770      	bx	lr
  401c4e:	bf00      	nop
  401c50:	20000580 	.word	0x20000580
  401c54:	200005c8 	.word	0x200005c8

00401c58 <xTaskCheckForTimeOut>:
{
  401c58:	b570      	push	{r4, r5, r6, lr}
  401c5a:	460c      	mov	r4, r1
    configASSERT( pxTimeOut );
  401c5c:	4605      	mov	r5, r0
  401c5e:	b1d0      	cbz	r0, 401c96 <xTaskCheckForTimeOut+0x3e>
    configASSERT( pxTicksToWait );
  401c60:	b1fc      	cbz	r4, 401ca2 <xTaskCheckForTimeOut+0x4a>
    taskENTER_CRITICAL();
  401c62:	4b19      	ldr	r3, [pc, #100]	; (401cc8 <xTaskCheckForTimeOut+0x70>)
  401c64:	4798      	blx	r3
        const TickType_t xConstTickCount = xTickCount;
  401c66:	4b19      	ldr	r3, [pc, #100]	; (401ccc <xTaskCheckForTimeOut+0x74>)
  401c68:	681b      	ldr	r3, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
  401c6a:	6822      	ldr	r2, [r4, #0]
  401c6c:	f1b2 3fff 	cmp.w	r2, #4294967295
  401c70:	d028      	beq.n	401cc4 <xTaskCheckForTimeOut+0x6c>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401c72:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401c74:	4816      	ldr	r0, [pc, #88]	; (401cd0 <xTaskCheckForTimeOut+0x78>)
  401c76:	6800      	ldr	r0, [r0, #0]
  401c78:	682e      	ldr	r6, [r5, #0]
  401c7a:	4286      	cmp	r6, r0
  401c7c:	d001      	beq.n	401c82 <xTaskCheckForTimeOut+0x2a>
  401c7e:	428b      	cmp	r3, r1
  401c80:	d215      	bcs.n	401cae <xTaskCheckForTimeOut+0x56>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401c82:	1a5b      	subs	r3, r3, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401c84:	4293      	cmp	r3, r2
  401c86:	d316      	bcc.n	401cb6 <xTaskCheckForTimeOut+0x5e>
            *pxTicksToWait = ( TickType_t ) 0;
  401c88:	2300      	movs	r3, #0
  401c8a:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401c8c:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
  401c8e:	4b11      	ldr	r3, [pc, #68]	; (401cd4 <xTaskCheckForTimeOut+0x7c>)
  401c90:	4798      	blx	r3
}
  401c92:	4620      	mov	r0, r4
  401c94:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( pxTimeOut );
  401c96:	f640 41fd 	movw	r1, #3325	; 0xcfd
  401c9a:	480f      	ldr	r0, [pc, #60]	; (401cd8 <xTaskCheckForTimeOut+0x80>)
  401c9c:	4b0f      	ldr	r3, [pc, #60]	; (401cdc <xTaskCheckForTimeOut+0x84>)
  401c9e:	4798      	blx	r3
  401ca0:	e7de      	b.n	401c60 <xTaskCheckForTimeOut+0x8>
    configASSERT( pxTicksToWait );
  401ca2:	f640 41fe 	movw	r1, #3326	; 0xcfe
  401ca6:	480c      	ldr	r0, [pc, #48]	; (401cd8 <xTaskCheckForTimeOut+0x80>)
  401ca8:	4b0c      	ldr	r3, [pc, #48]	; (401cdc <xTaskCheckForTimeOut+0x84>)
  401caa:	4798      	blx	r3
  401cac:	e7d9      	b.n	401c62 <xTaskCheckForTimeOut+0xa>
            *pxTicksToWait = ( TickType_t ) 0;
  401cae:	2300      	movs	r3, #0
  401cb0:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401cb2:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
  401cb4:	e7eb      	b.n	401c8e <xTaskCheckForTimeOut+0x36>
            *pxTicksToWait -= xElapsedTime;
  401cb6:	1ad3      	subs	r3, r2, r3
  401cb8:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
  401cba:	4628      	mov	r0, r5
  401cbc:	4b08      	ldr	r3, [pc, #32]	; (401ce0 <xTaskCheckForTimeOut+0x88>)
  401cbe:	4798      	blx	r3
            xReturn = pdFALSE;
  401cc0:	2400      	movs	r4, #0
  401cc2:	e7e4      	b.n	401c8e <xTaskCheckForTimeOut+0x36>
                xReturn = pdFALSE;
  401cc4:	2400      	movs	r4, #0
  401cc6:	e7e2      	b.n	401c8e <xTaskCheckForTimeOut+0x36>
  401cc8:	004002f5 	.word	0x004002f5
  401ccc:	200005c8 	.word	0x200005c8
  401cd0:	20000580 	.word	0x20000580
  401cd4:	0040033d 	.word	0x0040033d
  401cd8:	00403130 	.word	0x00403130
  401cdc:	00402b79 	.word	0x00402b79
  401ce0:	00401c41 	.word	0x00401c41

00401ce4 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
  401ce4:	2201      	movs	r2, #1
  401ce6:	4b01      	ldr	r3, [pc, #4]	; (401cec <vTaskMissedYield+0x8>)
  401ce8:	601a      	str	r2, [r3, #0]
  401cea:	4770      	bx	lr
  401cec:	200005cc 	.word	0x200005cc

00401cf0 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
  401cf0:	4b05      	ldr	r3, [pc, #20]	; (401d08 <xTaskGetSchedulerState+0x18>)
  401cf2:	681b      	ldr	r3, [r3, #0]
  401cf4:	b133      	cbz	r3, 401d04 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401cf6:	4b05      	ldr	r3, [pc, #20]	; (401d0c <xTaskGetSchedulerState+0x1c>)
  401cf8:	681b      	ldr	r3, [r3, #0]
                xReturn = taskSCHEDULER_SUSPENDED;
  401cfa:	2b00      	cmp	r3, #0
  401cfc:	bf0c      	ite	eq
  401cfe:	2002      	moveq	r0, #2
  401d00:	2000      	movne	r0, #0
  401d02:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
  401d04:	2001      	movs	r0, #1
    }
  401d06:	4770      	bx	lr
  401d08:	2000059c 	.word	0x2000059c
  401d0c:	20000544 	.word	0x20000544

00401d10 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
  401d10:	2800      	cmp	r0, #0
  401d12:	d04d      	beq.n	401db0 <xTaskPriorityDisinherit+0xa0>
    {
  401d14:	b570      	push	{r4, r5, r6, lr}
  401d16:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
  401d18:	4b27      	ldr	r3, [pc, #156]	; (401db8 <xTaskPriorityDisinherit+0xa8>)
  401d1a:	681b      	ldr	r3, [r3, #0]
  401d1c:	4298      	cmp	r0, r3
  401d1e:	d004      	beq.n	401d2a <xTaskPriorityDisinherit+0x1a>
  401d20:	f241 014f 	movw	r1, #4175	; 0x104f
  401d24:	4825      	ldr	r0, [pc, #148]	; (401dbc <xTaskPriorityDisinherit+0xac>)
  401d26:	4b26      	ldr	r3, [pc, #152]	; (401dc0 <xTaskPriorityDisinherit+0xb0>)
  401d28:	4798      	blx	r3
            configASSERT( pxTCB->uxMutexesHeld );
  401d2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401d2c:	b14b      	cbz	r3, 401d42 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
  401d2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401d30:	3b01      	subs	r3, #1
  401d32:	64e3      	str	r3, [r4, #76]	; 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401d36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  401d38:	4291      	cmp	r1, r2
  401d3a:	d03b      	beq.n	401db4 <xTaskPriorityDisinherit+0xa4>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401d3c:	b13b      	cbz	r3, 401d4e <xTaskPriorityDisinherit+0x3e>
        BaseType_t xReturn = pdFALSE;
  401d3e:	2000      	movs	r0, #0
    }
  401d40:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB->uxMutexesHeld );
  401d42:	f241 0150 	movw	r1, #4176	; 0x1050
  401d46:	481d      	ldr	r0, [pc, #116]	; (401dbc <xTaskPriorityDisinherit+0xac>)
  401d48:	4b1d      	ldr	r3, [pc, #116]	; (401dc0 <xTaskPriorityDisinherit+0xb0>)
  401d4a:	4798      	blx	r3
  401d4c:	e7ef      	b.n	401d2e <xTaskPriorityDisinherit+0x1e>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401d4e:	1d25      	adds	r5, r4, #4
  401d50:	4628      	mov	r0, r5
  401d52:	4b1c      	ldr	r3, [pc, #112]	; (401dc4 <xTaskPriorityDisinherit+0xb4>)
  401d54:	4798      	blx	r3
  401d56:	b938      	cbnz	r0, 401d68 <xTaskPriorityDisinherit+0x58>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
  401d58:	491b      	ldr	r1, [pc, #108]	; (401dc8 <xTaskPriorityDisinherit+0xb8>)
  401d5a:	680b      	ldr	r3, [r1, #0]
  401d5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401d5e:	2201      	movs	r2, #1
  401d60:	4082      	lsls	r2, r0
  401d62:	ea23 0302 	bic.w	r3, r3, r2
  401d66:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d6c:	f1c3 0208 	rsb	r2, r3, #8
  401d70:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
  401d72:	4915      	ldr	r1, [pc, #84]	; (401dc8 <xTaskPriorityDisinherit+0xb8>)
  401d74:	680e      	ldr	r6, [r1, #0]
  401d76:	2001      	movs	r0, #1
  401d78:	fa00 f203 	lsl.w	r2, r0, r3
  401d7c:	4332      	orrs	r2, r6
  401d7e:	600a      	str	r2, [r1, #0]
  401d80:	4a12      	ldr	r2, [pc, #72]	; (401dcc <xTaskPriorityDisinherit+0xbc>)
  401d82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401d86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401d8a:	685b      	ldr	r3, [r3, #4]
  401d8c:	60a3      	str	r3, [r4, #8]
  401d8e:	6899      	ldr	r1, [r3, #8]
  401d90:	60e1      	str	r1, [r4, #12]
  401d92:	6899      	ldr	r1, [r3, #8]
  401d94:	604d      	str	r5, [r1, #4]
  401d96:	609d      	str	r5, [r3, #8]
  401d98:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  401d9a:	00ab      	lsls	r3, r5, #2
  401d9c:	1959      	adds	r1, r3, r5
  401d9e:	0089      	lsls	r1, r1, #2
  401da0:	1856      	adds	r6, r2, r1
  401da2:	6166      	str	r6, [r4, #20]
  401da4:	5851      	ldr	r1, [r2, r1]
  401da6:	4401      	add	r1, r0
  401da8:	442b      	add	r3, r5
  401daa:	009b      	lsls	r3, r3, #2
  401dac:	50d1      	str	r1, [r2, r3]
  401dae:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xReturn = pdFALSE;
  401db0:	2000      	movs	r0, #0
  401db2:	4770      	bx	lr
  401db4:	2000      	movs	r0, #0
  401db6:	bd70      	pop	{r4, r5, r6, pc}
  401db8:	20000490 	.word	0x20000490
  401dbc:	00403130 	.word	0x00403130
  401dc0:	00402b79 	.word	0x00402b79
  401dc4:	004001f9 	.word	0x004001f9
  401dc8:	2000054c 	.word	0x2000054c
  401dcc:	2000049c 	.word	0x2000049c

00401dd0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
  401dd0:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401dd2:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401dd4:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
  401dd6:	4291      	cmp	r1, r2
  401dd8:	d80c      	bhi.n	401df4 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dda:	1ad2      	subs	r2, r2, r3
  401ddc:	6983      	ldr	r3, [r0, #24]
  401dde:	429a      	cmp	r2, r3
  401de0:	d301      	bcc.n	401de6 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
  401de2:	2001      	movs	r0, #1
  401de4:	bd08      	pop	{r3, pc}
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401de6:	1d01      	adds	r1, r0, #4
  401de8:	4b09      	ldr	r3, [pc, #36]	; (401e10 <prvInsertTimerInActiveList+0x40>)
  401dea:	6818      	ldr	r0, [r3, #0]
  401dec:	4b09      	ldr	r3, [pc, #36]	; (401e14 <prvInsertTimerInActiveList+0x44>)
  401dee:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  401df0:	2000      	movs	r0, #0
  401df2:	bd08      	pop	{r3, pc}
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401df4:	429a      	cmp	r2, r3
  401df6:	d201      	bcs.n	401dfc <prvInsertTimerInActiveList+0x2c>
  401df8:	4299      	cmp	r1, r3
  401dfa:	d206      	bcs.n	401e0a <prvInsertTimerInActiveList+0x3a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401dfc:	1d01      	adds	r1, r0, #4
  401dfe:	4b06      	ldr	r3, [pc, #24]	; (401e18 <prvInsertTimerInActiveList+0x48>)
  401e00:	6818      	ldr	r0, [r3, #0]
  401e02:	4b04      	ldr	r3, [pc, #16]	; (401e14 <prvInsertTimerInActiveList+0x44>)
  401e04:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  401e06:	2000      	movs	r0, #0
  401e08:	bd08      	pop	{r3, pc}
                xProcessTimerNow = pdTRUE;
  401e0a:	2001      	movs	r0, #1
            }
        }

        return xProcessTimerNow;
    }
  401e0c:	bd08      	pop	{r3, pc}
  401e0e:	bf00      	nop
  401e10:	200005d4 	.word	0x200005d4
  401e14:	004001c5 	.word	0x004001c5
  401e18:	200005d0 	.word	0x200005d0

00401e1c <prvReloadTimer>:
    {
  401e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e1e:	4604      	mov	r4, r0
  401e20:	460d      	mov	r5, r1
  401e22:	4617      	mov	r7, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401e24:	4e07      	ldr	r6, [pc, #28]	; (401e44 <prvReloadTimer+0x28>)
  401e26:	e004      	b.n	401e32 <prvReloadTimer+0x16>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
  401e28:	69a3      	ldr	r3, [r4, #24]
  401e2a:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401e2c:	6a23      	ldr	r3, [r4, #32]
  401e2e:	4620      	mov	r0, r4
  401e30:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401e32:	69a1      	ldr	r1, [r4, #24]
  401e34:	462b      	mov	r3, r5
  401e36:	463a      	mov	r2, r7
  401e38:	4429      	add	r1, r5
  401e3a:	4620      	mov	r0, r4
  401e3c:	47b0      	blx	r6
  401e3e:	2800      	cmp	r0, #0
  401e40:	d1f2      	bne.n	401e28 <prvReloadTimer+0xc>
    }
  401e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e44:	00401dd1 	.word	0x00401dd1

00401e48 <prvProcessExpiredTimer>:
    {
  401e48:	b570      	push	{r4, r5, r6, lr}
  401e4a:	4605      	mov	r5, r0
  401e4c:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401e4e:	4b0d      	ldr	r3, [pc, #52]	; (401e84 <prvProcessExpiredTimer+0x3c>)
  401e50:	681b      	ldr	r3, [r3, #0]
  401e52:	68db      	ldr	r3, [r3, #12]
  401e54:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401e56:	1d20      	adds	r0, r4, #4
  401e58:	4b0b      	ldr	r3, [pc, #44]	; (401e88 <prvProcessExpiredTimer+0x40>)
  401e5a:	4798      	blx	r3
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401e5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401e60:	f013 0f04 	tst.w	r3, #4
  401e64:	d107      	bne.n	401e76 <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401e66:	f023 0301 	bic.w	r3, r3, #1
  401e6a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401e6e:	6a23      	ldr	r3, [r4, #32]
  401e70:	4620      	mov	r0, r4
  401e72:	4798      	blx	r3
  401e74:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
  401e76:	4632      	mov	r2, r6
  401e78:	4629      	mov	r1, r5
  401e7a:	4620      	mov	r0, r4
  401e7c:	4b03      	ldr	r3, [pc, #12]	; (401e8c <prvProcessExpiredTimer+0x44>)
  401e7e:	4798      	blx	r3
  401e80:	e7f5      	b.n	401e6e <prvProcessExpiredTimer+0x26>
  401e82:	bf00      	nop
  401e84:	200005d0 	.word	0x200005d0
  401e88:	004001f9 	.word	0x004001f9
  401e8c:	00401e1d 	.word	0x00401e1d

00401e90 <prvSampleTimeNow>:
    {
  401e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e94:	4680      	mov	r8, r0
        xTimeNow = xTaskGetTickCount();
  401e96:	4b14      	ldr	r3, [pc, #80]	; (401ee8 <prvSampleTimeNow+0x58>)
  401e98:	4798      	blx	r3
  401e9a:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
  401e9c:	4b13      	ldr	r3, [pc, #76]	; (401eec <prvSampleTimeNow+0x5c>)
  401e9e:	681b      	ldr	r3, [r3, #0]
  401ea0:	4298      	cmp	r0, r3
  401ea2:	d307      	bcc.n	401eb4 <prvSampleTimeNow+0x24>
            *pxTimerListsWereSwitched = pdFALSE;
  401ea4:	2300      	movs	r3, #0
  401ea6:	f8c8 3000 	str.w	r3, [r8]
        xLastTime = xTimeNow;
  401eaa:	4b10      	ldr	r3, [pc, #64]	; (401eec <prvSampleTimeNow+0x5c>)
  401eac:	601c      	str	r4, [r3, #0]
    }
  401eae:	4620      	mov	r0, r4
  401eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401eb4:	4b0e      	ldr	r3, [pc, #56]	; (401ef0 <prvSampleTimeNow+0x60>)
  401eb6:	681b      	ldr	r3, [r3, #0]
  401eb8:	681a      	ldr	r2, [r3, #0]
  401eba:	b15a      	cbz	r2, 401ed4 <prvSampleTimeNow+0x44>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401ebc:	f04f 37ff 	mov.w	r7, #4294967295
  401ec0:	4e0c      	ldr	r6, [pc, #48]	; (401ef4 <prvSampleTimeNow+0x64>)
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401ec2:	4d0b      	ldr	r5, [pc, #44]	; (401ef0 <prvSampleTimeNow+0x60>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401ec4:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401ec6:	4639      	mov	r1, r7
  401ec8:	6818      	ldr	r0, [r3, #0]
  401eca:	47b0      	blx	r6
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401ecc:	682b      	ldr	r3, [r5, #0]
  401ece:	681a      	ldr	r2, [r3, #0]
  401ed0:	2a00      	cmp	r2, #0
  401ed2:	d1f7      	bne.n	401ec4 <prvSampleTimeNow+0x34>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
  401ed4:	4a08      	ldr	r2, [pc, #32]	; (401ef8 <prvSampleTimeNow+0x68>)
  401ed6:	6810      	ldr	r0, [r2, #0]
  401ed8:	4905      	ldr	r1, [pc, #20]	; (401ef0 <prvSampleTimeNow+0x60>)
  401eda:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
  401edc:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
  401ede:	2301      	movs	r3, #1
  401ee0:	f8c8 3000 	str.w	r3, [r8]
  401ee4:	e7e1      	b.n	401eaa <prvSampleTimeNow+0x1a>
  401ee6:	bf00      	nop
  401ee8:	00401519 	.word	0x00401519
  401eec:	20000600 	.word	0x20000600
  401ef0:	200005d0 	.word	0x200005d0
  401ef4:	00401e49 	.word	0x00401e49
  401ef8:	200005d4 	.word	0x200005d4

00401efc <prvTimerTask>:
    {
  401efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f00:	b087      	sub	sp, #28
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401f02:	4e5e      	ldr	r6, [pc, #376]	; (40207c <prvTimerTask+0x180>)
                ( void ) xTaskResumeAll();
  401f04:	4f5e      	ldr	r7, [pc, #376]	; (402080 <prvTimerTask+0x184>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401f06:	4d5f      	ldr	r5, [pc, #380]	; (402084 <prvTimerTask+0x188>)
                        portYIELD_WITHIN_API();
  401f08:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 4020b4 <prvTimerTask+0x1b8>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f0c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 4020b8 <prvTimerTask+0x1bc>
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401f10:	6833      	ldr	r3, [r6, #0]
  401f12:	681a      	ldr	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
  401f14:	b192      	cbz	r2, 401f3c <prvTimerTask+0x40>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f16:	68db      	ldr	r3, [r3, #12]
  401f18:	f8d3 a000 	ldr.w	sl, [r3]
        vTaskSuspendAll();
  401f1c:	4b5a      	ldr	r3, [pc, #360]	; (402088 <prvTimerTask+0x18c>)
  401f1e:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401f20:	a802      	add	r0, sp, #8
  401f22:	4b5a      	ldr	r3, [pc, #360]	; (40208c <prvTimerTask+0x190>)
  401f24:	4798      	blx	r3
  401f26:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401f28:	9a02      	ldr	r2, [sp, #8]
  401f2a:	bb42      	cbnz	r2, 401f7e <prvTimerTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401f2c:	4550      	cmp	r0, sl
  401f2e:	d315      	bcc.n	401f5c <prvTimerTask+0x60>
                    ( void ) xTaskResumeAll();
  401f30:	47b8      	blx	r7
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401f32:	4621      	mov	r1, r4
  401f34:	4650      	mov	r0, sl
  401f36:	4b56      	ldr	r3, [pc, #344]	; (402090 <prvTimerTask+0x194>)
  401f38:	4798      	blx	r3
  401f3a:	e01e      	b.n	401f7a <prvTimerTask+0x7e>
        vTaskSuspendAll();
  401f3c:	4b52      	ldr	r3, [pc, #328]	; (402088 <prvTimerTask+0x18c>)
  401f3e:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401f40:	a802      	add	r0, sp, #8
  401f42:	4b52      	ldr	r3, [pc, #328]	; (40208c <prvTimerTask+0x190>)
  401f44:	4798      	blx	r3
  401f46:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401f48:	9b02      	ldr	r3, [sp, #8]
  401f4a:	b9c3      	cbnz	r3, 401f7e <prvTimerTask+0x82>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401f4c:	4b51      	ldr	r3, [pc, #324]	; (402094 <prvTimerTask+0x198>)
  401f4e:	681b      	ldr	r3, [r3, #0]
  401f50:	681a      	ldr	r2, [r3, #0]
  401f52:	fab2 f282 	clz	r2, r2
  401f56:	0952      	lsrs	r2, r2, #5
            xNextExpireTime = ( TickType_t ) 0U;
  401f58:	f04f 0a00 	mov.w	sl, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401f5c:	ebaa 0104 	sub.w	r1, sl, r4
  401f60:	6828      	ldr	r0, [r5, #0]
  401f62:	4b4d      	ldr	r3, [pc, #308]	; (402098 <prvTimerTask+0x19c>)
  401f64:	4798      	blx	r3
                    if( xTaskResumeAll() == pdFALSE )
  401f66:	47b8      	blx	r7
  401f68:	b938      	cbnz	r0, 401f7a <prvTimerTask+0x7e>
                        portYIELD_WITHIN_API();
  401f6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401f6e:	f8c9 3000 	str.w	r3, [r9]
  401f72:	f3bf 8f4f 	dsb	sy
  401f76:	f3bf 8f6f 	isb	sy
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401f7a:	4c48      	ldr	r4, [pc, #288]	; (40209c <prvTimerTask+0x1a0>)
  401f7c:	e008      	b.n	401f90 <prvTimerTask+0x94>
                ( void ) xTaskResumeAll();
  401f7e:	47b8      	blx	r7
  401f80:	e7fb      	b.n	401f7a <prvTimerTask+0x7e>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401f82:	9905      	ldr	r1, [sp, #20]
  401f84:	9804      	ldr	r0, [sp, #16]
  401f86:	9b03      	ldr	r3, [sp, #12]
  401f88:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401f8a:	9b02      	ldr	r3, [sp, #8]
  401f8c:	2b00      	cmp	r3, #0
  401f8e:	da08      	bge.n	401fa2 <prvTimerTask+0xa6>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401f90:	2200      	movs	r2, #0
  401f92:	a902      	add	r1, sp, #8
  401f94:	6828      	ldr	r0, [r5, #0]
  401f96:	47a0      	blx	r4
  401f98:	2800      	cmp	r0, #0
  401f9a:	d0b9      	beq.n	401f10 <prvTimerTask+0x14>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401f9c:	9b02      	ldr	r3, [sp, #8]
  401f9e:	2b00      	cmp	r3, #0
  401fa0:	dbef      	blt.n	401f82 <prvTimerTask+0x86>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401fa2:	f8dd a010 	ldr.w	sl, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  401fa6:	f8da 3014 	ldr.w	r3, [sl, #20]
  401faa:	b113      	cbz	r3, 401fb2 <prvTimerTask+0xb6>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fac:	f10a 0004 	add.w	r0, sl, #4
  401fb0:	47c0      	blx	r8
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401fb2:	a801      	add	r0, sp, #4
  401fb4:	4b35      	ldr	r3, [pc, #212]	; (40208c <prvTimerTask+0x190>)
  401fb6:	4798      	blx	r3
  401fb8:	4683      	mov	fp, r0
                switch( xMessage.xMessageID )
  401fba:	9b02      	ldr	r3, [sp, #8]
  401fbc:	3b01      	subs	r3, #1
  401fbe:	2b08      	cmp	r3, #8
  401fc0:	d8e6      	bhi.n	401f90 <prvTimerTask+0x94>
  401fc2:	e8df f003 	tbb	[pc, r3]
  401fc6:	0505      	.short	0x0505
  401fc8:	054d342d 	.word	0x054d342d
  401fcc:	2d05      	.short	0x2d05
  401fce:	34          	.byte	0x34
  401fcf:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401fd0:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401fd4:	f043 0301 	orr.w	r3, r3, #1
  401fd8:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  401fdc:	9903      	ldr	r1, [sp, #12]
  401fde:	f8da 0018 	ldr.w	r0, [sl, #24]
  401fe2:	460b      	mov	r3, r1
  401fe4:	465a      	mov	r2, fp
  401fe6:	4401      	add	r1, r0
  401fe8:	4650      	mov	r0, sl
  401fea:	4c2d      	ldr	r4, [pc, #180]	; (4020a0 <prvTimerTask+0x1a4>)
  401fec:	47a0      	blx	r4
  401fee:	2800      	cmp	r0, #0
  401ff0:	d0c3      	beq.n	401f7a <prvTimerTask+0x7e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401ff2:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401ff6:	f013 0f04 	tst.w	r3, #4
  401ffa:	d108      	bne.n	40200e <prvTimerTask+0x112>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401ffc:	f023 0301 	bic.w	r3, r3, #1
  402000:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402004:	f8da 3020 	ldr.w	r3, [sl, #32]
  402008:	4650      	mov	r0, sl
  40200a:	4798      	blx	r3
  40200c:	e7b5      	b.n	401f7a <prvTimerTask+0x7e>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
  40200e:	f8da 3018 	ldr.w	r3, [sl, #24]
  402012:	465a      	mov	r2, fp
  402014:	9903      	ldr	r1, [sp, #12]
  402016:	4419      	add	r1, r3
  402018:	4650      	mov	r0, sl
  40201a:	4b22      	ldr	r3, [pc, #136]	; (4020a4 <prvTimerTask+0x1a8>)
  40201c:	4798      	blx	r3
  40201e:	e7f1      	b.n	402004 <prvTimerTask+0x108>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  402020:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  402024:	f023 0301 	bic.w	r3, r3, #1
  402028:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  40202c:	e7a5      	b.n	401f7a <prvTimerTask+0x7e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  40202e:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  402032:	f043 0301 	orr.w	r3, r3, #1
  402036:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40203a:	9b03      	ldr	r3, [sp, #12]
  40203c:	f8ca 3018 	str.w	r3, [sl, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402040:	b143      	cbz	r3, 402054 <prvTimerTask+0x158>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402042:	f8da 1018 	ldr.w	r1, [sl, #24]
  402046:	465b      	mov	r3, fp
  402048:	465a      	mov	r2, fp
  40204a:	4459      	add	r1, fp
  40204c:	4650      	mov	r0, sl
  40204e:	4c14      	ldr	r4, [pc, #80]	; (4020a0 <prvTimerTask+0x1a4>)
  402050:	47a0      	blx	r4
  402052:	e792      	b.n	401f7a <prvTimerTask+0x7e>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402054:	f240 3159 	movw	r1, #857	; 0x359
  402058:	4813      	ldr	r0, [pc, #76]	; (4020a8 <prvTimerTask+0x1ac>)
  40205a:	4b14      	ldr	r3, [pc, #80]	; (4020ac <prvTimerTask+0x1b0>)
  40205c:	4798      	blx	r3
  40205e:	e7f0      	b.n	402042 <prvTimerTask+0x146>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  402060:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  402064:	f013 0f02 	tst.w	r3, #2
  402068:	d004      	beq.n	402074 <prvTimerTask+0x178>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  40206a:	f023 0301 	bic.w	r3, r3, #1
  40206e:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  402072:	e782      	b.n	401f7a <prvTimerTask+0x7e>
                                    vPortFree( pxTimer );
  402074:	4650      	mov	r0, sl
  402076:	4b0e      	ldr	r3, [pc, #56]	; (4020b0 <prvTimerTask+0x1b4>)
  402078:	4798      	blx	r3
  40207a:	e77e      	b.n	401f7a <prvTimerTask+0x7e>
  40207c:	200005d0 	.word	0x200005d0
  402080:	004016e1 	.word	0x004016e1
  402084:	20000604 	.word	0x20000604
  402088:	00401509 	.word	0x00401509
  40208c:	00401e91 	.word	0x00401e91
  402090:	00401e49 	.word	0x00401e49
  402094:	200005d4 	.word	0x200005d4
  402098:	00400f7d 	.word	0x00400f7d
  40209c:	00400d65 	.word	0x00400d65
  4020a0:	00401dd1 	.word	0x00401dd1
  4020a4:	00401e1d 	.word	0x00401e1d
  4020a8:	00403158 	.word	0x00403158
  4020ac:	00402b79 	.word	0x00402b79
  4020b0:	004006a9 	.word	0x004006a9
  4020b4:	e000ed04 	.word	0xe000ed04
  4020b8:	004001f9 	.word	0x004001f9

004020bc <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
  4020bc:	b570      	push	{r4, r5, r6, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
  4020be:	4b10      	ldr	r3, [pc, #64]	; (402100 <prvCheckForValidListAndQueue+0x44>)
  4020c0:	4798      	blx	r3
        {
            if( xTimerQueue == NULL )
  4020c2:	4b10      	ldr	r3, [pc, #64]	; (402104 <prvCheckForValidListAndQueue+0x48>)
  4020c4:	681b      	ldr	r3, [r3, #0]
  4020c6:	b113      	cbz	r3, 4020ce <prvCheckForValidListAndQueue+0x12>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
  4020c8:	4b0f      	ldr	r3, [pc, #60]	; (402108 <prvCheckForValidListAndQueue+0x4c>)
  4020ca:	4798      	blx	r3
  4020cc:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &xActiveTimerList1 );
  4020ce:	4d0f      	ldr	r5, [pc, #60]	; (40210c <prvCheckForValidListAndQueue+0x50>)
  4020d0:	4628      	mov	r0, r5
  4020d2:	4e0f      	ldr	r6, [pc, #60]	; (402110 <prvCheckForValidListAndQueue+0x54>)
  4020d4:	47b0      	blx	r6
                vListInitialise( &xActiveTimerList2 );
  4020d6:	4c0f      	ldr	r4, [pc, #60]	; (402114 <prvCheckForValidListAndQueue+0x58>)
  4020d8:	4620      	mov	r0, r4
  4020da:	47b0      	blx	r6
                pxCurrentTimerList = &xActiveTimerList1;
  4020dc:	4b0e      	ldr	r3, [pc, #56]	; (402118 <prvCheckForValidListAndQueue+0x5c>)
  4020de:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
  4020e0:	4b0e      	ldr	r3, [pc, #56]	; (40211c <prvCheckForValidListAndQueue+0x60>)
  4020e2:	601c      	str	r4, [r3, #0]
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4020e4:	2200      	movs	r2, #0
  4020e6:	2110      	movs	r1, #16
  4020e8:	2005      	movs	r0, #5
  4020ea:	4b0d      	ldr	r3, [pc, #52]	; (402120 <prvCheckForValidListAndQueue+0x64>)
  4020ec:	4798      	blx	r3
  4020ee:	4b05      	ldr	r3, [pc, #20]	; (402104 <prvCheckForValidListAndQueue+0x48>)
  4020f0:	6018      	str	r0, [r3, #0]
                        if( xTimerQueue != NULL )
  4020f2:	2800      	cmp	r0, #0
  4020f4:	d0e8      	beq.n	4020c8 <prvCheckForValidListAndQueue+0xc>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4020f6:	490b      	ldr	r1, [pc, #44]	; (402124 <prvCheckForValidListAndQueue+0x68>)
  4020f8:	4b0b      	ldr	r3, [pc, #44]	; (402128 <prvCheckForValidListAndQueue+0x6c>)
  4020fa:	4798      	blx	r3
  4020fc:	e7e4      	b.n	4020c8 <prvCheckForValidListAndQueue+0xc>
  4020fe:	bf00      	nop
  402100:	004002f5 	.word	0x004002f5
  402104:	20000604 	.word	0x20000604
  402108:	0040033d 	.word	0x0040033d
  40210c:	200005d8 	.word	0x200005d8
  402110:	00400191 	.word	0x00400191
  402114:	200005ec 	.word	0x200005ec
  402118:	200005d0 	.word	0x200005d0
  40211c:	200005d4 	.word	0x200005d4
  402120:	00400b09 	.word	0x00400b09
  402124:	00403150 	.word	0x00403150
  402128:	00400f1d 	.word	0x00400f1d

0040212c <xTimerCreateTimerTask>:
    {
  40212c:	b510      	push	{r4, lr}
  40212e:	b082      	sub	sp, #8
        prvCheckForValidListAndQueue();
  402130:	4b0d      	ldr	r3, [pc, #52]	; (402168 <xTimerCreateTimerTask+0x3c>)
  402132:	4798      	blx	r3
        if( xTimerQueue != NULL )
  402134:	4b0d      	ldr	r3, [pc, #52]	; (40216c <xTimerCreateTimerTask+0x40>)
  402136:	681b      	ldr	r3, [r3, #0]
  402138:	b17b      	cbz	r3, 40215a <xTimerCreateTimerTask+0x2e>
                    xReturn = xTaskCreate( prvTimerTask,
  40213a:	4b0d      	ldr	r3, [pc, #52]	; (402170 <xTimerCreateTimerTask+0x44>)
  40213c:	9301      	str	r3, [sp, #4]
  40213e:	2307      	movs	r3, #7
  402140:	9300      	str	r3, [sp, #0]
  402142:	2300      	movs	r3, #0
  402144:	f44f 7282 	mov.w	r2, #260	; 0x104
  402148:	490a      	ldr	r1, [pc, #40]	; (402174 <xTimerCreateTimerTask+0x48>)
  40214a:	480b      	ldr	r0, [pc, #44]	; (402178 <xTimerCreateTimerTask+0x4c>)
  40214c:	4c0b      	ldr	r4, [pc, #44]	; (40217c <xTimerCreateTimerTask+0x50>)
  40214e:	47a0      	blx	r4
        configASSERT( xReturn );
  402150:	4603      	mov	r3, r0
  402152:	b110      	cbz	r0, 40215a <xTimerCreateTimerTask+0x2e>
    }
  402154:	4618      	mov	r0, r3
  402156:	b002      	add	sp, #8
  402158:	bd10      	pop	{r4, pc}
        configASSERT( xReturn );
  40215a:	f240 1119 	movw	r1, #281	; 0x119
  40215e:	4808      	ldr	r0, [pc, #32]	; (402180 <xTimerCreateTimerTask+0x54>)
  402160:	4b08      	ldr	r3, [pc, #32]	; (402184 <xTimerCreateTimerTask+0x58>)
  402162:	4798      	blx	r3
  402164:	2300      	movs	r3, #0
        return xReturn;
  402166:	e7f5      	b.n	402154 <xTimerCreateTimerTask+0x28>
  402168:	004020bd 	.word	0x004020bd
  40216c:	20000604 	.word	0x20000604
  402170:	20000608 	.word	0x20000608
  402174:	00403174 	.word	0x00403174
  402178:	00401efd 	.word	0x00401efd
  40217c:	00401185 	.word	0x00401185
  402180:	00403158 	.word	0x00403158
  402184:	00402b79 	.word	0x00402b79

00402188 <toggleLED>:
}

// 
uint8_t toggleLED(uint8_t uiLedNum)
{
	ioport_set_pin_level(decLED[uiLedNum], !ioport_get_pin_level(decLED[uiLedNum]));
  402188:	4b09      	ldr	r3, [pc, #36]	; (4021b0 <toggleLED+0x28>)
  40218a:	5c1a      	ldrb	r2, [r3, r0]
	return pin >> 5;
  40218c:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40218e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402192:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402196:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402198:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  40219a:	f002 011f 	and.w	r1, r2, #31
  40219e:	2201      	movs	r2, #1
  4021a0:	408a      	lsls	r2, r1
	if (level) {
  4021a2:	4210      	tst	r0, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4021a4:	bf0c      	ite	eq
  4021a6:	631a      	streq	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4021a8:	635a      	strne	r2, [r3, #52]	; 0x34

	return SUCCESS; // dummy return
}
  4021aa:	4b02      	ldr	r3, [pc, #8]	; (4021b4 <toggleLED+0x2c>)
  4021ac:	7818      	ldrb	r0, [r3, #0]
  4021ae:	4770      	bx	lr
  4021b0:	20000010 	.word	0x20000010
  4021b4:	2000000c 	.word	0x2000000c

004021b8 <taskHeartbeat>:
// toggles an LED on and off every 0.5 second
// heartbeat task created up to four times: 
//     *    1 onboard LED uncontrolled
//     *	3 extension board LEDs controlled by button functions
void taskHeartbeat( void * pvParameters )
{
  4021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Block for 500ms. */
	const TickType_t xDelay = 500 / portTICK_PERIOD_MS;	// SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ = 4MHz

	// casting sent parameter back to what it was originally
	const uint8_t* ledNum = (uint8_t*) pvParameters;
	const uint8_t led = *ledNum;
  4021ba:	7807      	ldrb	r7, [r0, #0]

	while(FOREVER)
	{	// actual task
		toggleLED(led);		// toggle LED state
  4021bc:	4e04      	ldr	r6, [pc, #16]	; (4021d0 <taskHeartbeat+0x18>)
		vTaskDelay( xDelay );	// then wait 0.5 
  4021be:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  4021c2:	4c04      	ldr	r4, [pc, #16]	; (4021d4 <taskHeartbeat+0x1c>)
		toggleLED(led);		// toggle LED state
  4021c4:	4638      	mov	r0, r7
  4021c6:	47b0      	blx	r6
		vTaskDelay( xDelay );	// then wait 0.5 
  4021c8:	4628      	mov	r0, r5
  4021ca:	47a0      	blx	r4
  4021cc:	e7fa      	b.n	4021c4 <taskHeartbeat+0xc>
  4021ce:	bf00      	nop
  4021d0:	00402189 	.word	0x00402189
  4021d4:	00401881 	.word	0x00401881

004021d8 <taskBlinkLED>:

// blinks target LED at the rate specified by the delay;
// delay is determined from message received from current system control task
// delay is bounded by min and max values
void taskBlinkLED( void * pvParameters )
{
  4021d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4021dc:	b083      	sub	sp, #12
	/* Block for 500ms. */
	TickType_t xDelay = 500;	// SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ = 4MHz

	// casting sent parameter back to what it was originally
	const struct DataBlinkLED data = *(struct DataBlinkLED*) pvParameters;
  4021de:	f890 8000 	ldrb.w	r8, [r0]
  4021e2:	6845      	ldr	r5, [r0, #4]

	enum ledQueueMessage message = 0;	// preparing mailbox...
  4021e4:	2300      	movs	r3, #0
  4021e6:	f88d 3007 	strb.w	r3, [sp, #7]
	TickType_t xDelay = 500;	// SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ = 4MHz
  4021ea:	f44f 74fa 	mov.w	r4, #500	; 0x1f4

	while(FOREVER)
	{	// actual task
		if (uxQueueMessagesWaiting(data.led_queue_handle))
  4021ee:	4f10      	ldr	r7, [pc, #64]	; (402230 <taskBlinkLED+0x58>)
		{			
			// retrieving message from mailbox
			xQueueReceive(data.led_queue_handle, &message, 0);
  4021f0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 40223c <taskBlinkLED+0x64>
				xDelay -= DELTADELAY;
			}
		}
	
		// toggle LED and wait for delay period
		toggleLED(data.led_number);				// toggle LED state
  4021f4:	4e0f      	ldr	r6, [pc, #60]	; (402234 <taskBlinkLED+0x5c>)
  4021f6:	e008      	b.n	40220a <taskBlinkLED+0x32>
			if (message == INCREMENT && xDelay < MAXDELAY)
  4021f8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
  4021fc:	d200      	bcs.n	402200 <taskBlinkLED+0x28>
				xDelay += DELTADELAY;
  4021fe:	3432      	adds	r4, #50	; 0x32
		toggleLED(data.led_number);				// toggle LED state
  402200:	4640      	mov	r0, r8
  402202:	47b0      	blx	r6
		vTaskDelay( xDelay / portTICK_PERIOD_MS);	// then wait 0.5
  402204:	4620      	mov	r0, r4
  402206:	4b0c      	ldr	r3, [pc, #48]	; (402238 <taskBlinkLED+0x60>)
  402208:	4798      	blx	r3
		if (uxQueueMessagesWaiting(data.led_queue_handle))
  40220a:	4628      	mov	r0, r5
  40220c:	47b8      	blx	r7
  40220e:	2800      	cmp	r0, #0
  402210:	d0f6      	beq.n	402200 <taskBlinkLED+0x28>
			xQueueReceive(data.led_queue_handle, &message, 0);
  402212:	2200      	movs	r2, #0
  402214:	f10d 0107 	add.w	r1, sp, #7
  402218:	4628      	mov	r0, r5
  40221a:	47c8      	blx	r9
			if (message == INCREMENT && xDelay < MAXDELAY)
  40221c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402220:	2b02      	cmp	r3, #2
  402222:	d0e9      	beq.n	4021f8 <taskBlinkLED+0x20>
			else if (message == DECREMENT && xDelay > MINDELAY)
  402224:	2b01      	cmp	r3, #1
  402226:	d1eb      	bne.n	402200 <taskBlinkLED+0x28>
  402228:	2cc8      	cmp	r4, #200	; 0xc8
				xDelay -= DELTADELAY;
  40222a:	bf88      	it	hi
  40222c:	3c32      	subhi	r4, #50	; 0x32
  40222e:	e7e7      	b.n	402200 <taskBlinkLED+0x28>
  402230:	00400eed 	.word	0x00400eed
  402234:	00402189 	.word	0x00402189
  402238:	00401881 	.word	0x00401881
  40223c:	00400d65 	.word	0x00400d65

00402240 <taskSystemControl>:

//
//
//
void taskSystemControl(void * pvParameters )
{
  402240:	b5f0      	push	{r4, r5, r6, r7, lr}
  402242:	b09f      	sub	sp, #124	; 0x7c
	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
	const TickType_t xDebounceDelay = 15 / portTICK_PERIOD_MS;
	
	const struct DataSystemControl data = *(struct DataSystemControl*) pvParameters;
  402244:	ac0e      	add	r4, sp, #56	; 0x38
  402246:	4605      	mov	r5, r0
  402248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40224a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40224c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40224e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402254:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  402258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char uart_message[50]; 
	enum ledQueueMessage message = 0;
  40225c:	2300      	movs	r3, #0
  40225e:	f88d 3003 	strb.w	r3, [sp, #3]

	while (FOREVER)
	{
		if (readButton(FIRST))							// poll button
  402262:	4c23      	ldr	r4, [pc, #140]	; (4022f0 <taskSystemControl+0xb0>)
		{
			vTaskDelay(xDebounceDelay);					// wait a moment
  402264:	4d23      	ldr	r5, [pc, #140]	; (4022f4 <taskSystemControl+0xb4>)
			if (readButton(FIRST))						// take action if valid
			{
				message = DECREMENT;
  402266:	2601      	movs	r6, #1
  402268:	e01e      	b.n	4022a8 <taskSystemControl+0x68>
			vTaskDelay(xDebounceDelay);					// wait a moment
  40226a:	200f      	movs	r0, #15
  40226c:	47a8      	blx	r5
			if (readButton(FIRST))						// take action if valid
  40226e:	2000      	movs	r0, #0
  402270:	47a0      	blx	r4
  402272:	b1e8      	cbz	r0, 4022b0 <taskSystemControl+0x70>
				message = DECREMENT;
  402274:	a91e      	add	r1, sp, #120	; 0x78
  402276:	f801 6d75 	strb.w	r6, [r1, #-117]!
				xQueueSendToBack(data.led_queue_handle, (void*) &message, (TickType_t) 10);
  40227a:	2300      	movs	r3, #0
  40227c:	220a      	movs	r2, #10
  40227e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  402280:	4f1d      	ldr	r7, [pc, #116]	; (4022f8 <taskSystemControl+0xb8>)
  402282:	47b8      	blx	r7
  402284:	e014      	b.n	4022b0 <taskSystemControl+0x70>
			}
		}												
		
		if (readButton(SECOND))
		{	// debounce
			vTaskDelay(xDebounceDelay);
  402286:	200f      	movs	r0, #15
  402288:	47a8      	blx	r5
			if (readButton(SECOND))
  40228a:	4630      	mov	r0, r6
  40228c:	47a0      	blx	r4
  40228e:	b198      	cbz	r0, 4022b8 <taskSystemControl+0x78>
			{
				message = INCREMENT;
  402290:	a91e      	add	r1, sp, #120	; 0x78
  402292:	2302      	movs	r3, #2
  402294:	f801 3d75 	strb.w	r3, [r1, #-117]!
				xQueueSendToBack(data.led_queue_handle, (void*) &message, (TickType_t) 10);
  402298:	2300      	movs	r3, #0
  40229a:	220a      	movs	r2, #10
  40229c:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40229e:	4f16      	ldr	r7, [pc, #88]	; (4022f8 <taskSystemControl+0xb8>)
  4022a0:	47b8      	blx	r7
  4022a2:	e009      	b.n	4022b8 <taskSystemControl+0x78>
				// resuming next LED control task and immediately suspending self
				vTaskResume(data.next_task_handle);
				vTaskSuspend(NULL);
			}
		}
		vTaskDelay(xDelay);
  4022a4:	2064      	movs	r0, #100	; 0x64
  4022a6:	47a8      	blx	r5
		if (readButton(FIRST))							// poll button
  4022a8:	2000      	movs	r0, #0
  4022aa:	47a0      	blx	r4
  4022ac:	2800      	cmp	r0, #0
  4022ae:	d1dc      	bne.n	40226a <taskSystemControl+0x2a>
		if (readButton(SECOND))
  4022b0:	4630      	mov	r0, r6
  4022b2:	47a0      	blx	r4
  4022b4:	2800      	cmp	r0, #0
  4022b6:	d1e6      	bne.n	402286 <taskSystemControl+0x46>
		if (readButton(THIRD))
  4022b8:	2002      	movs	r0, #2
  4022ba:	47a0      	blx	r4
  4022bc:	2800      	cmp	r0, #0
  4022be:	d0f1      	beq.n	4022a4 <taskSystemControl+0x64>
			vTaskDelay(xDebounceDelay);
  4022c0:	200f      	movs	r0, #15
  4022c2:	47a8      	blx	r5
			if (readButton(THIRD))	// if valid, change control to next LED taskSystemControl
  4022c4:	2002      	movs	r0, #2
  4022c6:	47a0      	blx	r4
  4022c8:	2800      	cmp	r0, #0
  4022ca:	d0eb      	beq.n	4022a4 <taskSystemControl+0x64>
				strcpy(uart_message , data.uart_next_led_message);
  4022cc:	a911      	add	r1, sp, #68	; 0x44
  4022ce:	a801      	add	r0, sp, #4
  4022d0:	4b0a      	ldr	r3, [pc, #40]	; (4022fc <taskSystemControl+0xbc>)
  4022d2:	4798      	blx	r3
				xQueueSendToBack(data.uart_queue_handle, (void*) &uart_message, (TickType_t) 10);
  4022d4:	2300      	movs	r3, #0
  4022d6:	220a      	movs	r2, #10
  4022d8:	a901      	add	r1, sp, #4
  4022da:	9810      	ldr	r0, [sp, #64]	; 0x40
  4022dc:	4f06      	ldr	r7, [pc, #24]	; (4022f8 <taskSystemControl+0xb8>)
  4022de:	47b8      	blx	r7
				vTaskResume(data.next_task_handle);
  4022e0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4022e2:	4b07      	ldr	r3, [pc, #28]	; (402300 <taskSystemControl+0xc0>)
  4022e4:	4798      	blx	r3
				vTaskSuspend(NULL);
  4022e6:	2000      	movs	r0, #0
  4022e8:	4b06      	ldr	r3, [pc, #24]	; (402304 <taskSystemControl+0xc4>)
  4022ea:	4798      	blx	r3
  4022ec:	e7da      	b.n	4022a4 <taskSystemControl+0x64>
  4022ee:	bf00      	nop
  4022f0:	00400165 	.word	0x00400165
  4022f4:	00401881 	.word	0x00401881
  4022f8:	00400b71 	.word	0x00400b71
  4022fc:	00402df1 	.word	0x00402df1
  402300:	004013b5 	.word	0x004013b5
  402304:	004019a9 	.word	0x004019a9

00402308 <taskUART>:
	}
}

void taskUART(void* pvParameters)
{
  402308:	b5f0      	push	{r4, r5, r6, r7, lr}
  40230a:	b08f      	sub	sp, #60	; 0x3c
	const struct UARTData data = *(struct UARTData*) pvParameters;
  40230c:	6806      	ldr	r6, [r0, #0]
	
	char message[50];
	
	while (FOREVER)
	{	
		if (xQueueReceive(data.uart_queue_handle, &message, portMAX_DELAY ) == pdTRUE)
  40230e:	4d09      	ldr	r5, [pc, #36]	; (402334 <taskUART+0x2c>)
		{
			UARTPutStr(EDBG_UART, message, strlen(message));
  402310:	4f09      	ldr	r7, [pc, #36]	; (402338 <taskUART+0x30>)
		if (xQueueReceive(data.uart_queue_handle, &message, portMAX_DELAY ) == pdTRUE)
  402312:	f04f 34ff 	mov.w	r4, #4294967295
  402316:	4622      	mov	r2, r4
  402318:	a901      	add	r1, sp, #4
  40231a:	4630      	mov	r0, r6
  40231c:	47a8      	blx	r5
  40231e:	2801      	cmp	r0, #1
  402320:	d1f9      	bne.n	402316 <taskUART+0xe>
			UARTPutStr(EDBG_UART, message, strlen(message));
  402322:	a801      	add	r0, sp, #4
  402324:	4b05      	ldr	r3, [pc, #20]	; (40233c <taskUART+0x34>)
  402326:	4798      	blx	r3
  402328:	b2c2      	uxtb	r2, r0
  40232a:	a901      	add	r1, sp, #4
  40232c:	4638      	mov	r0, r7
  40232e:	4b04      	ldr	r3, [pc, #16]	; (402340 <taskUART+0x38>)
  402330:	4798      	blx	r3
  402332:	e7ee      	b.n	402312 <taskUART+0xa>
  402334:	00400d65 	.word	0x00400d65
  402338:	400e0600 	.word	0x400e0600
  40233c:	00402ec1 	.word	0x00402ec1
  402340:	004024c5 	.word	0x004024c5

00402344 <OITExpansionBoardInit>:
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)


void OITExpansionBoardInit(void)
{
  402344:	b410      	push	{r4}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402346:	4a44      	ldr	r2, [pc, #272]	; (402458 <OITExpansionBoardInit+0x114>)
  402348:	2304      	movs	r3, #4
  40234a:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40234c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402350:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402352:	2308      	movs	r3, #8
  402354:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402356:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40235a:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40235c:	4b3f      	ldr	r3, [pc, #252]	; (40245c <OITExpansionBoardInit+0x118>)
  40235e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  402362:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402364:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402368:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40236a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40236e:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402370:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402374:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402376:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  40237a:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40237c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402380:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402382:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  402386:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402388:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40238c:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40238e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402392:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402394:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  402396:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40239a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40239c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  4023a0:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4023a2:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4023a4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  4023a8:	675c      	str	r4, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4023aa:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4023ae:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4023b2:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4023b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4023ba:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4023bc:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4023c0:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4023c2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4023c6:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4023c8:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  4023ca:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4023ce:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4023d0:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  4023d4:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4023d6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4023d8:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  4023dc:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4023de:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4023e2:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4023e6:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4023ea:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4023ee:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4023f0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4023f4:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4023f6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4023fa:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4023fc:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4023fe:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402402:	6f18      	ldr	r0, [r3, #112]	; 0x70
  402404:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  402408:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40240a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40240c:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  402410:	6758      	str	r0, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  402412:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402416:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  40241a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40241e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402422:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402424:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  402428:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40242a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40242e:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  402430:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  402432:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402436:	6f11      	ldr	r1, [r2, #112]	; 0x70
  402438:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  40243c:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40243e:	6f51      	ldr	r1, [r2, #116]	; 0x74
  402440:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  402444:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_ESR = mask;
  402446:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40244a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	base->PIO_AIMER = mask;
  40244e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	Init4Led5BtnBoardExt1();
#endif
#ifdef OIT_4LED_5BTN_BOARD_EXT3
	Init4Led5BtnBoardExt3();
#endif
}
  402452:	f85d 4b04 	ldr.w	r4, [sp], #4
  402456:	4770      	bx	lr
  402458:	400e1000 	.word	0x400e1000
  40245c:	400e0e00 	.word	0x400e0e00

00402460 <initUART>:
// 
// 
//
uint8_t
initUART (Uart * pUart)
{
  402460:	b510      	push	{r4, lr}
  402462:	4604      	mov	r4, r0
		base->PIO_PUDR = mask;
  402464:	4b12      	ldr	r3, [pc, #72]	; (4024b0 <initUART+0x50>)
  402466:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40246a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40246c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402470:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402472:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402478:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40247a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40247e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402480:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402482:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  402486:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402488:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40248a:	2007      	movs	r0, #7
  40248c:	4b09      	ldr	r3, [pc, #36]	; (4024b4 <initUART+0x54>)
  40248e:	4798      	blx	r3
	ioport_disable_port(IOPORT_PIOA, PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
	sysclk_enable_peripheral_clock(ID_UART0);

	// Configure UART Control Registers
	// Reset and Disable RX and TX
	pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
  402490:	23ac      	movs	r3, #172	; 0xac
  402492:	6023      	str	r3, [r4, #0]
	}
       
	if(retVal != 1)
	{
		// Set The Actual BAUD to Control Register
		pUart->UART_BRGR = cd;
  402494:	2334      	movs	r3, #52	; 0x34
  402496:	6223      	str	r3, [r4, #32]

		// Configure Mode
		pUart->UART_MR = UART_SERIAL_PARITY;
  402498:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40249c:	6063      	str	r3, [r4, #4]
	       
		// Disable PDC Channel
		pUart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40249e:	f240 2302 	movw	r3, #514	; 0x202
  4024a2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	       
		// Enable RX and TX
		pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4024a6:	2350      	movs	r3, #80	; 0x50
  4024a8:	6023      	str	r3, [r4, #0]
	}
       
	return retVal;
}
  4024aa:	2000      	movs	r0, #0
  4024ac:	bd10      	pop	{r4, pc}
  4024ae:	bf00      	nop
  4024b0:	400e0e00 	.word	0x400e0e00
  4024b4:	004026ad 	.word	0x004026ad

004024b8 <UARTPutC>:
//
void
UARTPutC (Uart * pUart, char data)
{	
	// Wait for Transmitter to be Ready
	while((pUart->UART_SR & UART_SR_TXRDY) == 0)
  4024b8:	6943      	ldr	r3, [r0, #20]
  4024ba:	f013 0f02 	tst.w	r3, #2
  4024be:	d0fb      	beq.n	4024b8 <UARTPutC>
	{
		
	}
	pUart->UART_THR = data;
  4024c0:	61c1      	str	r1, [r0, #28]
  4024c2:	4770      	bx	lr

004024c4 <UARTPutStr>:
}

void
UARTPutStr (Uart * pUart, char * data, uint8_t len)
{	
	for (int i = 0; i < len; ++i)
  4024c4:	b162      	cbz	r2, 4024e0 <UARTPutStr+0x1c>
{	
  4024c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4024c8:	4615      	mov	r5, r2
  4024ca:	4606      	mov	r6, r0
  4024cc:	460c      	mov	r4, r1
  4024ce:	440d      	add	r5, r1
	{
		UARTPutC(pUart, data[i]);
  4024d0:	4f04      	ldr	r7, [pc, #16]	; (4024e4 <UARTPutStr+0x20>)
  4024d2:	f814 1b01 	ldrb.w	r1, [r4], #1
  4024d6:	4630      	mov	r0, r6
  4024d8:	47b8      	blx	r7
	for (int i = 0; i < len; ++i)
  4024da:	42ac      	cmp	r4, r5
  4024dc:	d1f9      	bne.n	4024d2 <UARTPutStr+0xe>
  4024de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024e0:	4770      	bx	lr
  4024e2:	bf00      	nop
  4024e4:	004024b9 	.word	0x004024b9

004024e8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4024e8:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4024ea:	480e      	ldr	r0, [pc, #56]	; (402524 <sysclk_init+0x3c>)
  4024ec:	4b0e      	ldr	r3, [pc, #56]	; (402528 <sysclk_init+0x40>)
  4024ee:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4024f0:	213e      	movs	r1, #62	; 0x3e
  4024f2:	2000      	movs	r0, #0
  4024f4:	4b0d      	ldr	r3, [pc, #52]	; (40252c <sysclk_init+0x44>)
  4024f6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4024f8:	4c0d      	ldr	r4, [pc, #52]	; (402530 <sysclk_init+0x48>)
  4024fa:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4024fc:	2800      	cmp	r0, #0
  4024fe:	d0fc      	beq.n	4024fa <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402500:	4b0c      	ldr	r3, [pc, #48]	; (402534 <sysclk_init+0x4c>)
  402502:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402504:	4a0c      	ldr	r2, [pc, #48]	; (402538 <sysclk_init+0x50>)
  402506:	4b0d      	ldr	r3, [pc, #52]	; (40253c <sysclk_init+0x54>)
  402508:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40250a:	4c0d      	ldr	r4, [pc, #52]	; (402540 <sysclk_init+0x58>)
  40250c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40250e:	2800      	cmp	r0, #0
  402510:	d0fc      	beq.n	40250c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402512:	2010      	movs	r0, #16
  402514:	4b0b      	ldr	r3, [pc, #44]	; (402544 <sysclk_init+0x5c>)
  402516:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402518:	4b0b      	ldr	r3, [pc, #44]	; (402548 <sysclk_init+0x60>)
  40251a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40251c:	480b      	ldr	r0, [pc, #44]	; (40254c <sysclk_init+0x64>)
  40251e:	4b02      	ldr	r3, [pc, #8]	; (402528 <sysclk_init+0x40>)
  402520:	4798      	blx	r3
  402522:	bd10      	pop	{r4, pc}
  402524:	07270e00 	.word	0x07270e00
  402528:	004028d9 	.word	0x004028d9
  40252c:	00402629 	.word	0x00402629
  402530:	0040267d 	.word	0x0040267d
  402534:	0040268d 	.word	0x0040268d
  402538:	200f3f01 	.word	0x200f3f01
  40253c:	400e0400 	.word	0x400e0400
  402540:	0040269d 	.word	0x0040269d
  402544:	004025c5 	.word	0x004025c5
  402548:	004027cd 	.word	0x004027cd
  40254c:	05b8d800 	.word	0x05b8d800

00402550 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  402550:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402556:	4b18      	ldr	r3, [pc, #96]	; (4025b8 <board_init+0x68>)
  402558:	605a      	str	r2, [r3, #4]
  40255a:	2009      	movs	r0, #9
  40255c:	4c17      	ldr	r4, [pc, #92]	; (4025bc <board_init+0x6c>)
  40255e:	47a0      	blx	r4
  402560:	200a      	movs	r0, #10
  402562:	47a0      	blx	r4
  402564:	200b      	movs	r0, #11
  402566:	47a0      	blx	r4
  402568:	200c      	movs	r0, #12
  40256a:	47a0      	blx	r4
  40256c:	200d      	movs	r0, #13
  40256e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402570:	4b13      	ldr	r3, [pc, #76]	; (4025c0 <board_init+0x70>)
  402572:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402576:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402578:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40257c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40257e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  402582:	2204      	movs	r2, #4
  402584:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402586:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40258a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40258c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402590:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402592:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402598:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40259a:	f021 0104 	bic.w	r1, r1, #4
  40259e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4025a0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4025a2:	f021 0104 	bic.w	r1, r1, #4
  4025a6:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4025a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4025ac:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4025b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4025b4:	bd10      	pop	{r4, pc}
  4025b6:	bf00      	nop
  4025b8:	400e1850 	.word	0x400e1850
  4025bc:	004026ad 	.word	0x004026ad
  4025c0:	400e1400 	.word	0x400e1400

004025c4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4025c4:	4a17      	ldr	r2, [pc, #92]	; (402624 <pmc_switch_mck_to_pllack+0x60>)
  4025c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4025cc:	4318      	orrs	r0, r3
  4025ce:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4025d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4025d2:	f013 0f08 	tst.w	r3, #8
  4025d6:	d10a      	bne.n	4025ee <pmc_switch_mck_to_pllack+0x2a>
  4025d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4025dc:	4911      	ldr	r1, [pc, #68]	; (402624 <pmc_switch_mck_to_pllack+0x60>)
  4025de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4025e0:	f012 0f08 	tst.w	r2, #8
  4025e4:	d103      	bne.n	4025ee <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4025e6:	3b01      	subs	r3, #1
  4025e8:	d1f9      	bne.n	4025de <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4025ea:	2001      	movs	r0, #1
  4025ec:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4025ee:	4a0d      	ldr	r2, [pc, #52]	; (402624 <pmc_switch_mck_to_pllack+0x60>)
  4025f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025f2:	f023 0303 	bic.w	r3, r3, #3
  4025f6:	f043 0302 	orr.w	r3, r3, #2
  4025fa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4025fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4025fe:	f013 0f08 	tst.w	r3, #8
  402602:	d10a      	bne.n	40261a <pmc_switch_mck_to_pllack+0x56>
  402604:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402608:	4906      	ldr	r1, [pc, #24]	; (402624 <pmc_switch_mck_to_pllack+0x60>)
  40260a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40260c:	f012 0f08 	tst.w	r2, #8
  402610:	d105      	bne.n	40261e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402612:	3b01      	subs	r3, #1
  402614:	d1f9      	bne.n	40260a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402616:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402618:	4770      	bx	lr
	return 0;
  40261a:	2000      	movs	r0, #0
  40261c:	4770      	bx	lr
  40261e:	2000      	movs	r0, #0
  402620:	4770      	bx	lr
  402622:	bf00      	nop
  402624:	400e0400 	.word	0x400e0400

00402628 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402628:	b9c8      	cbnz	r0, 40265e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40262a:	4a11      	ldr	r2, [pc, #68]	; (402670 <pmc_switch_mainck_to_xtal+0x48>)
  40262c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40262e:	0209      	lsls	r1, r1, #8
  402630:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402632:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402636:	f023 0303 	bic.w	r3, r3, #3
  40263a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40263e:	f043 0301 	orr.w	r3, r3, #1
  402642:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402644:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402646:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402648:	f013 0f01 	tst.w	r3, #1
  40264c:	d0fb      	beq.n	402646 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40264e:	4a08      	ldr	r2, [pc, #32]	; (402670 <pmc_switch_mainck_to_xtal+0x48>)
  402650:	6a13      	ldr	r3, [r2, #32]
  402652:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40265a:	6213      	str	r3, [r2, #32]
  40265c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40265e:	4904      	ldr	r1, [pc, #16]	; (402670 <pmc_switch_mainck_to_xtal+0x48>)
  402660:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402662:	4a04      	ldr	r2, [pc, #16]	; (402674 <pmc_switch_mainck_to_xtal+0x4c>)
  402664:	401a      	ands	r2, r3
  402666:	4b04      	ldr	r3, [pc, #16]	; (402678 <pmc_switch_mainck_to_xtal+0x50>)
  402668:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40266a:	620b      	str	r3, [r1, #32]
  40266c:	4770      	bx	lr
  40266e:	bf00      	nop
  402670:	400e0400 	.word	0x400e0400
  402674:	fec8fffc 	.word	0xfec8fffc
  402678:	01370002 	.word	0x01370002

0040267c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40267c:	4b02      	ldr	r3, [pc, #8]	; (402688 <pmc_osc_is_ready_mainck+0xc>)
  40267e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402680:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402684:	4770      	bx	lr
  402686:	bf00      	nop
  402688:	400e0400 	.word	0x400e0400

0040268c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40268c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402690:	4b01      	ldr	r3, [pc, #4]	; (402698 <pmc_disable_pllack+0xc>)
  402692:	629a      	str	r2, [r3, #40]	; 0x28
  402694:	4770      	bx	lr
  402696:	bf00      	nop
  402698:	400e0400 	.word	0x400e0400

0040269c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40269c:	4b02      	ldr	r3, [pc, #8]	; (4026a8 <pmc_is_locked_pllack+0xc>)
  40269e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4026a0:	f000 0002 	and.w	r0, r0, #2
  4026a4:	4770      	bx	lr
  4026a6:	bf00      	nop
  4026a8:	400e0400 	.word	0x400e0400

004026ac <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4026ac:	282f      	cmp	r0, #47	; 0x2f
  4026ae:	d81e      	bhi.n	4026ee <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4026b0:	281f      	cmp	r0, #31
  4026b2:	d80c      	bhi.n	4026ce <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4026b4:	4b11      	ldr	r3, [pc, #68]	; (4026fc <pmc_enable_periph_clk+0x50>)
  4026b6:	699a      	ldr	r2, [r3, #24]
  4026b8:	2301      	movs	r3, #1
  4026ba:	4083      	lsls	r3, r0
  4026bc:	4393      	bics	r3, r2
  4026be:	d018      	beq.n	4026f2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4026c0:	2301      	movs	r3, #1
  4026c2:	fa03 f000 	lsl.w	r0, r3, r0
  4026c6:	4b0d      	ldr	r3, [pc, #52]	; (4026fc <pmc_enable_periph_clk+0x50>)
  4026c8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4026ca:	2000      	movs	r0, #0
  4026cc:	4770      	bx	lr
		ul_id -= 32;
  4026ce:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4026d0:	4b0a      	ldr	r3, [pc, #40]	; (4026fc <pmc_enable_periph_clk+0x50>)
  4026d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4026d6:	2301      	movs	r3, #1
  4026d8:	4083      	lsls	r3, r0
  4026da:	4393      	bics	r3, r2
  4026dc:	d00b      	beq.n	4026f6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4026de:	2301      	movs	r3, #1
  4026e0:	fa03 f000 	lsl.w	r0, r3, r0
  4026e4:	4b05      	ldr	r3, [pc, #20]	; (4026fc <pmc_enable_periph_clk+0x50>)
  4026e6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4026ea:	2000      	movs	r0, #0
  4026ec:	4770      	bx	lr
		return 1;
  4026ee:	2001      	movs	r0, #1
  4026f0:	4770      	bx	lr
	return 0;
  4026f2:	2000      	movs	r0, #0
  4026f4:	4770      	bx	lr
  4026f6:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4026f8:	4770      	bx	lr
  4026fa:	bf00      	nop
  4026fc:	400e0400 	.word	0x400e0400

00402700 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402700:	e7fe      	b.n	402700 <Dummy_Handler>
	...

00402704 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402704:	b500      	push	{lr}
  402706:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  402708:	4b25      	ldr	r3, [pc, #148]	; (4027a0 <Reset_Handler+0x9c>)
  40270a:	4a26      	ldr	r2, [pc, #152]	; (4027a4 <Reset_Handler+0xa0>)
  40270c:	429a      	cmp	r2, r3
  40270e:	d010      	beq.n	402732 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  402710:	4b25      	ldr	r3, [pc, #148]	; (4027a8 <Reset_Handler+0xa4>)
  402712:	4a23      	ldr	r2, [pc, #140]	; (4027a0 <Reset_Handler+0x9c>)
  402714:	429a      	cmp	r2, r3
  402716:	d20c      	bcs.n	402732 <Reset_Handler+0x2e>
  402718:	3b01      	subs	r3, #1
  40271a:	1a9b      	subs	r3, r3, r2
  40271c:	f023 0303 	bic.w	r3, r3, #3
  402720:	3304      	adds	r3, #4
  402722:	4413      	add	r3, r2
  402724:	491f      	ldr	r1, [pc, #124]	; (4027a4 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  402726:	f851 0b04 	ldr.w	r0, [r1], #4
  40272a:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  40272e:	429a      	cmp	r2, r3
  402730:	d1f9      	bne.n	402726 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402732:	4b1e      	ldr	r3, [pc, #120]	; (4027ac <Reset_Handler+0xa8>)
  402734:	4a1e      	ldr	r2, [pc, #120]	; (4027b0 <Reset_Handler+0xac>)
  402736:	429a      	cmp	r2, r3
  402738:	d20a      	bcs.n	402750 <Reset_Handler+0x4c>
  40273a:	3b01      	subs	r3, #1
  40273c:	1a9b      	subs	r3, r3, r2
  40273e:	f023 0303 	bic.w	r3, r3, #3
  402742:	3304      	adds	r3, #4
  402744:	4413      	add	r3, r2
		*pDest++ = 0;
  402746:	2100      	movs	r1, #0
  402748:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  40274c:	4293      	cmp	r3, r2
  40274e:	d1fb      	bne.n	402748 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402750:	4a18      	ldr	r2, [pc, #96]	; (4027b4 <Reset_Handler+0xb0>)
  402752:	4b19      	ldr	r3, [pc, #100]	; (4027b8 <Reset_Handler+0xb4>)
  402754:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402758:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40275a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40275e:	fab3 f383 	clz	r3, r3
  402762:	095b      	lsrs	r3, r3, #5
  402764:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402766:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  402768:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40276c:	2200      	movs	r2, #0
  40276e:	4b13      	ldr	r3, [pc, #76]	; (4027bc <Reset_Handler+0xb8>)
  402770:	701a      	strb	r2, [r3, #0]
	return flags;
  402772:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402774:	4a12      	ldr	r2, [pc, #72]	; (4027c0 <Reset_Handler+0xbc>)
  402776:	6813      	ldr	r3, [r2, #0]
  402778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40277c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40277e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402782:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402786:	b129      	cbz	r1, 402794 <Reset_Handler+0x90>
		cpu_irq_enable();
  402788:	2201      	movs	r2, #1
  40278a:	4b0c      	ldr	r3, [pc, #48]	; (4027bc <Reset_Handler+0xb8>)
  40278c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40278e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402792:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  402794:	4b0b      	ldr	r3, [pc, #44]	; (4027c4 <Reset_Handler+0xc0>)
  402796:	4798      	blx	r3

	/* Branch to main function */
	main();
  402798:	4b0b      	ldr	r3, [pc, #44]	; (4027c8 <Reset_Handler+0xc4>)
  40279a:	4798      	blx	r3
  40279c:	e7fe      	b.n	40279c <Reset_Handler+0x98>
  40279e:	bf00      	nop
  4027a0:	20000000 	.word	0x20000000
  4027a4:	004032f8 	.word	0x004032f8
  4027a8:	2000044c 	.word	0x2000044c
  4027ac:	20000670 	.word	0x20000670
  4027b0:	2000044c 	.word	0x2000044c
  4027b4:	e000ed00 	.word	0xe000ed00
  4027b8:	00400000 	.word	0x00400000
  4027bc:	20000014 	.word	0x20000014
  4027c0:	e000ed88 	.word	0xe000ed88
  4027c4:	00402bd1 	.word	0x00402bd1
  4027c8:	0040294d 	.word	0x0040294d

004027cc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4027cc:	4b3b      	ldr	r3, [pc, #236]	; (4028bc <SystemCoreClockUpdate+0xf0>)
  4027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027d0:	f003 0303 	and.w	r3, r3, #3
  4027d4:	2b01      	cmp	r3, #1
  4027d6:	d01d      	beq.n	402814 <SystemCoreClockUpdate+0x48>
  4027d8:	b183      	cbz	r3, 4027fc <SystemCoreClockUpdate+0x30>
  4027da:	2b02      	cmp	r3, #2
  4027dc:	d036      	beq.n	40284c <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4027de:	4b37      	ldr	r3, [pc, #220]	; (4028bc <SystemCoreClockUpdate+0xf0>)
  4027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027e6:	2b70      	cmp	r3, #112	; 0x70
  4027e8:	d05f      	beq.n	4028aa <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4027ea:	4b34      	ldr	r3, [pc, #208]	; (4028bc <SystemCoreClockUpdate+0xf0>)
  4027ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027ee:	4934      	ldr	r1, [pc, #208]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  4027f0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4027f4:	680b      	ldr	r3, [r1, #0]
  4027f6:	40d3      	lsrs	r3, r2
  4027f8:	600b      	str	r3, [r1, #0]
  4027fa:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4027fc:	4b31      	ldr	r3, [pc, #196]	; (4028c4 <SystemCoreClockUpdate+0xf8>)
  4027fe:	695b      	ldr	r3, [r3, #20]
  402800:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402804:	bf14      	ite	ne
  402806:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40280a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40280e:	4b2c      	ldr	r3, [pc, #176]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  402810:	601a      	str	r2, [r3, #0]
  402812:	e7e4      	b.n	4027de <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402814:	4b29      	ldr	r3, [pc, #164]	; (4028bc <SystemCoreClockUpdate+0xf0>)
  402816:	6a1b      	ldr	r3, [r3, #32]
  402818:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40281c:	d003      	beq.n	402826 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40281e:	4a2a      	ldr	r2, [pc, #168]	; (4028c8 <SystemCoreClockUpdate+0xfc>)
  402820:	4b27      	ldr	r3, [pc, #156]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  402822:	601a      	str	r2, [r3, #0]
  402824:	e7db      	b.n	4027de <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402826:	4a29      	ldr	r2, [pc, #164]	; (4028cc <SystemCoreClockUpdate+0x100>)
  402828:	4b25      	ldr	r3, [pc, #148]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  40282a:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40282c:	4b23      	ldr	r3, [pc, #140]	; (4028bc <SystemCoreClockUpdate+0xf0>)
  40282e:	6a1b      	ldr	r3, [r3, #32]
  402830:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402834:	2b10      	cmp	r3, #16
  402836:	d005      	beq.n	402844 <SystemCoreClockUpdate+0x78>
  402838:	2b20      	cmp	r3, #32
  40283a:	d1d0      	bne.n	4027de <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  40283c:	4a22      	ldr	r2, [pc, #136]	; (4028c8 <SystemCoreClockUpdate+0xfc>)
  40283e:	4b20      	ldr	r3, [pc, #128]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  402840:	601a      	str	r2, [r3, #0]
				break;
  402842:	e7cc      	b.n	4027de <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  402844:	4a22      	ldr	r2, [pc, #136]	; (4028d0 <SystemCoreClockUpdate+0x104>)
  402846:	4b1e      	ldr	r3, [pc, #120]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  402848:	601a      	str	r2, [r3, #0]
				break;
  40284a:	e7c8      	b.n	4027de <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40284c:	4b1b      	ldr	r3, [pc, #108]	; (4028bc <SystemCoreClockUpdate+0xf0>)
  40284e:	6a1b      	ldr	r3, [r3, #32]
  402850:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402854:	d016      	beq.n	402884 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402856:	4a1c      	ldr	r2, [pc, #112]	; (4028c8 <SystemCoreClockUpdate+0xfc>)
  402858:	4b19      	ldr	r3, [pc, #100]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  40285a:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  40285c:	4b17      	ldr	r3, [pc, #92]	; (4028bc <SystemCoreClockUpdate+0xf0>)
  40285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402860:	f003 0303 	and.w	r3, r3, #3
  402864:	2b02      	cmp	r3, #2
  402866:	d1ba      	bne.n	4027de <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402868:	4a14      	ldr	r2, [pc, #80]	; (4028bc <SystemCoreClockUpdate+0xf0>)
  40286a:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40286c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40286e:	4814      	ldr	r0, [pc, #80]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402870:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402874:	6803      	ldr	r3, [r0, #0]
  402876:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40287a:	b2d2      	uxtb	r2, r2
  40287c:	fbb3 f3f2 	udiv	r3, r3, r2
  402880:	6003      	str	r3, [r0, #0]
  402882:	e7ac      	b.n	4027de <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402884:	4a11      	ldr	r2, [pc, #68]	; (4028cc <SystemCoreClockUpdate+0x100>)
  402886:	4b0e      	ldr	r3, [pc, #56]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  402888:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40288a:	4b0c      	ldr	r3, [pc, #48]	; (4028bc <SystemCoreClockUpdate+0xf0>)
  40288c:	6a1b      	ldr	r3, [r3, #32]
  40288e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402892:	2b10      	cmp	r3, #16
  402894:	d005      	beq.n	4028a2 <SystemCoreClockUpdate+0xd6>
  402896:	2b20      	cmp	r3, #32
  402898:	d1e0      	bne.n	40285c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  40289a:	4a0b      	ldr	r2, [pc, #44]	; (4028c8 <SystemCoreClockUpdate+0xfc>)
  40289c:	4b08      	ldr	r3, [pc, #32]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  40289e:	601a      	str	r2, [r3, #0]
				break;
  4028a0:	e7dc      	b.n	40285c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4028a2:	4a0b      	ldr	r2, [pc, #44]	; (4028d0 <SystemCoreClockUpdate+0x104>)
  4028a4:	4b06      	ldr	r3, [pc, #24]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  4028a6:	601a      	str	r2, [r3, #0]
				break;
  4028a8:	e7d8      	b.n	40285c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4028aa:	4a05      	ldr	r2, [pc, #20]	; (4028c0 <SystemCoreClockUpdate+0xf4>)
  4028ac:	6813      	ldr	r3, [r2, #0]
  4028ae:	4909      	ldr	r1, [pc, #36]	; (4028d4 <SystemCoreClockUpdate+0x108>)
  4028b0:	fba1 1303 	umull	r1, r3, r1, r3
  4028b4:	085b      	lsrs	r3, r3, #1
  4028b6:	6013      	str	r3, [r2, #0]
  4028b8:	4770      	bx	lr
  4028ba:	bf00      	nop
  4028bc:	400e0400 	.word	0x400e0400
  4028c0:	20000018 	.word	0x20000018
  4028c4:	400e1810 	.word	0x400e1810
  4028c8:	00b71b00 	.word	0x00b71b00
  4028cc:	003d0900 	.word	0x003d0900
  4028d0:	007a1200 	.word	0x007a1200
  4028d4:	aaaaaaab 	.word	0xaaaaaaab

004028d8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4028d8:	4b12      	ldr	r3, [pc, #72]	; (402924 <system_init_flash+0x4c>)
  4028da:	4298      	cmp	r0, r3
  4028dc:	d911      	bls.n	402902 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4028de:	4b12      	ldr	r3, [pc, #72]	; (402928 <system_init_flash+0x50>)
  4028e0:	4298      	cmp	r0, r3
  4028e2:	d913      	bls.n	40290c <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4028e4:	4b11      	ldr	r3, [pc, #68]	; (40292c <system_init_flash+0x54>)
  4028e6:	4298      	cmp	r0, r3
  4028e8:	d914      	bls.n	402914 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4028ea:	4b11      	ldr	r3, [pc, #68]	; (402930 <system_init_flash+0x58>)
  4028ec:	4298      	cmp	r0, r3
  4028ee:	d915      	bls.n	40291c <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4028f0:	4b10      	ldr	r3, [pc, #64]	; (402934 <system_init_flash+0x5c>)
  4028f2:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4028f4:	bf94      	ite	ls
  4028f6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4028fa:	4a0f      	ldrhi	r2, [pc, #60]	; (402938 <system_init_flash+0x60>)
  4028fc:	4b0f      	ldr	r3, [pc, #60]	; (40293c <system_init_flash+0x64>)
  4028fe:	601a      	str	r2, [r3, #0]
  402900:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402902:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402906:	4b0d      	ldr	r3, [pc, #52]	; (40293c <system_init_flash+0x64>)
  402908:	601a      	str	r2, [r3, #0]
  40290a:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40290c:	4a0c      	ldr	r2, [pc, #48]	; (402940 <system_init_flash+0x68>)
  40290e:	4b0b      	ldr	r3, [pc, #44]	; (40293c <system_init_flash+0x64>)
  402910:	601a      	str	r2, [r3, #0]
  402912:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402914:	4a0b      	ldr	r2, [pc, #44]	; (402944 <system_init_flash+0x6c>)
  402916:	4b09      	ldr	r3, [pc, #36]	; (40293c <system_init_flash+0x64>)
  402918:	601a      	str	r2, [r3, #0]
  40291a:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40291c:	4a0a      	ldr	r2, [pc, #40]	; (402948 <system_init_flash+0x70>)
  40291e:	4b07      	ldr	r3, [pc, #28]	; (40293c <system_init_flash+0x64>)
  402920:	601a      	str	r2, [r3, #0]
  402922:	4770      	bx	lr
  402924:	01312cff 	.word	0x01312cff
  402928:	026259ff 	.word	0x026259ff
  40292c:	039386ff 	.word	0x039386ff
  402930:	04c4b3ff 	.word	0x04c4b3ff
  402934:	05f5e0ff 	.word	0x05f5e0ff
  402938:	04000500 	.word	0x04000500
  40293c:	400e0a00 	.word	0x400e0a00
  402940:	04000100 	.word	0x04000100
  402944:	04000200 	.word	0x04000200
  402948:	04000300 	.word	0x04000300

0040294c <main>:
/************************************************************
	main: LED Control Application	

*************************************************************/
int main (void)
{
  40294c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402950:	b0c8      	sub	sp, #288	; 0x120
}

static void prvMiscInitialisation( void )
{
       /* Initialize the SAM system */
       sysclk_init();
  402952:	4b70      	ldr	r3, [pc, #448]	; (402b14 <main+0x1c8>)
  402954:	4798      	blx	r3
       board_init();
  402956:	4b70      	ldr	r3, [pc, #448]	; (402b18 <main+0x1cc>)
  402958:	4798      	blx	r3
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  40295a:	4a70      	ldr	r2, [pc, #448]	; (402b1c <main+0x1d0>)
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  40295c:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
  402960:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  402964:	f023 0307 	bic.w	r3, r3, #7
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  402968:	3207      	adds	r2, #7
  40296a:	f022 0207 	bic.w	r2, r2, #7
       HeapRegion_t xHeapRegions[] = {
  40296e:	9202      	str	r2, [sp, #8]
       ulHeapSize -= 1024;
  402970:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  402974:	9303      	str	r3, [sp, #12]
  402976:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40297a:	9304      	str	r3, [sp, #16]
  40297c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402980:	9305      	str	r3, [sp, #20]
  402982:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  402986:	9206      	str	r2, [sp, #24]
  402988:	9307      	str	r3, [sp, #28]
  40298a:	2500      	movs	r5, #0
  40298c:	9508      	str	r5, [sp, #32]
  40298e:	9509      	str	r5, [sp, #36]	; 0x24
       vPortDefineHeapRegions( xHeapRegions );
  402990:	a802      	add	r0, sp, #8
  402992:	4b63      	ldr	r3, [pc, #396]	; (402b20 <main+0x1d4>)
  402994:	4798      	blx	r3
       prvInitialiseHeap();
       pmc_enable_periph_clk(ID_PIOA);
  402996:	2009      	movs	r0, #9
  402998:	4c62      	ldr	r4, [pc, #392]	; (402b24 <main+0x1d8>)
  40299a:	47a0      	blx	r4
       pmc_enable_periph_clk(ID_PIOB);
  40299c:	200a      	movs	r0, #10
  40299e:	47a0      	blx	r4
	   OITExpansionBoardInit();
  4029a0:	4b61      	ldr	r3, [pc, #388]	; (402b28 <main+0x1dc>)
  4029a2:	4798      	blx	r3
	   initUART(EDBG_UART);
  4029a4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 402b70 <main+0x224>
  4029a8:	4640      	mov	r0, r8
  4029aa:	4b60      	ldr	r3, [pc, #384]	; (402b2c <main+0x1e0>)
  4029ac:	4798      	blx	r3
	uint8_t onboard_LED = 0;
  4029ae:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
	TaskHandle_t thLED1SystemControl = NULL;	// System Control tasks poll all buttons
  4029b2:	9546      	str	r5, [sp, #280]	; 0x118
	TaskHandle_t thLED2SystemControl = NULL;	// and ensure only that only one LED is
  4029b4:	9545      	str	r5, [sp, #276]	; 0x114
	TaskHandle_t thLED3SystemControl = NULL;	// in control at a time
  4029b6:	9544      	str	r5, [sp, #272]	; 0x110
	struct DataSystemControl led1_control_data = {NULL, NULL, NULL, "LED 2 IS NOW ACTIVE\n"};
  4029b8:	4c5d      	ldr	r4, [pc, #372]	; (402b30 <main+0x1e4>)
  4029ba:	ae34      	add	r6, sp, #208	; 0xd0
  4029bc:	4627      	mov	r7, r4
  4029be:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4029c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4029c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4029c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4029c6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4029c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4029ca:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  4029ce:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	struct DataSystemControl led2_control_data = {NULL, NULL, NULL, "LED 3 IS NOW ACTIVE\n"};
  4029d2:	ae24      	add	r6, sp, #144	; 0x90
  4029d4:	f104 0740 	add.w	r7, r4, #64	; 0x40
  4029d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4029da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4029dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4029de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4029e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4029e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4029e4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  4029e8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	struct DataSystemControl led3_control_data = {NULL, NULL, NULL, "LED 1 IS NOW ACTIVE\n"};
  4029ec:	ae14      	add	r6, sp, #80	; 0x50
  4029ee:	3480      	adds	r4, #128	; 0x80
  4029f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4029f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4029f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4029f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4029f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4029fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4029fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  402a00:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	struct DataBlinkLED led1_blink_data = {1, NULL, NULL};
  402a04:	2401      	movs	r4, #1
  402a06:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
  402a0a:	9512      	str	r5, [sp, #72]	; 0x48
  402a0c:	9513      	str	r5, [sp, #76]	; 0x4c
	struct DataBlinkLED led2_blink_data = {2, NULL, NULL};
  402a0e:	2302      	movs	r3, #2
  402a10:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  402a14:	950f      	str	r5, [sp, #60]	; 0x3c
  402a16:	9510      	str	r5, [sp, #64]	; 0x40
	struct DataBlinkLED led3_blink_data = {3, NULL, NULL};
  402a18:	2303      	movs	r3, #3
  402a1a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  402a1e:	950c      	str	r5, [sp, #48]	; 0x30
  402a20:	950d      	str	r5, [sp, #52]	; 0x34
	struct UARTData uart_data = {NULL};
  402a22:	950a      	str	r5, [sp, #40]	; 0x28
	xTaskCreate(taskHeartbeat,
  402a24:	9501      	str	r5, [sp, #4]
  402a26:	9400      	str	r4, [sp, #0]
  402a28:	f20d 131f 	addw	r3, sp, #287	; 0x11f
  402a2c:	2282      	movs	r2, #130	; 0x82
  402a2e:	4941      	ldr	r1, [pc, #260]	; (402b34 <main+0x1e8>)
  402a30:	4841      	ldr	r0, [pc, #260]	; (402b38 <main+0x1ec>)
  402a32:	4e42      	ldr	r6, [pc, #264]	; (402b3c <main+0x1f0>)
  402a34:	47b0      	blx	r6
	xTaskCreate(taskBlinkLED,
  402a36:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402b74 <main+0x228>
  402a3a:	4f41      	ldr	r7, [pc, #260]	; (402b40 <main+0x1f4>)
  402a3c:	9501      	str	r5, [sp, #4]
  402a3e:	9400      	str	r4, [sp, #0]
  402a40:	ab11      	add	r3, sp, #68	; 0x44
  402a42:	2282      	movs	r2, #130	; 0x82
  402a44:	4649      	mov	r1, r9
  402a46:	4638      	mov	r0, r7
  402a48:	47b0      	blx	r6
	xTaskCreate(taskBlinkLED,
  402a4a:	9501      	str	r5, [sp, #4]
  402a4c:	9400      	str	r4, [sp, #0]
  402a4e:	ab0e      	add	r3, sp, #56	; 0x38
  402a50:	2282      	movs	r2, #130	; 0x82
  402a52:	493c      	ldr	r1, [pc, #240]	; (402b44 <main+0x1f8>)
  402a54:	4638      	mov	r0, r7
  402a56:	47b0      	blx	r6
	xTaskCreate(taskBlinkLED,
  402a58:	9501      	str	r5, [sp, #4]
  402a5a:	9400      	str	r4, [sp, #0]
  402a5c:	ab0b      	add	r3, sp, #44	; 0x2c
  402a5e:	2282      	movs	r2, #130	; 0x82
  402a60:	4649      	mov	r1, r9
  402a62:	4638      	mov	r0, r7
  402a64:	47b0      	blx	r6
	qhLED1 = xQueueCreate(5, sizeof(enum ledQueueMessage));
  402a66:	462a      	mov	r2, r5
  402a68:	4621      	mov	r1, r4
  402a6a:	2005      	movs	r0, #5
  402a6c:	4f36      	ldr	r7, [pc, #216]	; (402b48 <main+0x1fc>)
  402a6e:	47b8      	blx	r7
  402a70:	4682      	mov	sl, r0
	qhLED2 = xQueueCreate(5, sizeof(enum ledQueueMessage));
  402a72:	462a      	mov	r2, r5
  402a74:	4621      	mov	r1, r4
  402a76:	2005      	movs	r0, #5
  402a78:	47b8      	blx	r7
  402a7a:	4681      	mov	r9, r0
	qhLED3 = xQueueCreate(5, sizeof(enum ledQueueMessage));
  402a7c:	462a      	mov	r2, r5
  402a7e:	4621      	mov	r1, r4
  402a80:	2005      	movs	r0, #5
  402a82:	47b8      	blx	r7
	led1_blink_data.led_queue_handle = qhLED1;
  402a84:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
	led2_blink_data.led_queue_handle = qhLED2;
  402a88:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	led3_blink_data.led_queue_handle = qhLED3;
  402a8c:	900c      	str	r0, [sp, #48]	; 0x30
	led1_control_data.led_queue_handle = qhLED1;
  402a8e:	f8cd a0d4 	str.w	sl, [sp, #212]	; 0xd4
	led2_control_data.led_queue_handle = qhLED2;
  402a92:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
	led3_control_data.led_queue_handle = qhLED3;
  402a96:	9015      	str	r0, [sp, #84]	; 0x54
	qhUART = xQueueCreate(5, sizeof(char) * 50);
  402a98:	462a      	mov	r2, r5
  402a9a:	2132      	movs	r1, #50	; 0x32
  402a9c:	2005      	movs	r0, #5
  402a9e:	47b8      	blx	r7
	uart_data.uart_queue_handle = qhUART;
  402aa0:	900a      	str	r0, [sp, #40]	; 0x28
	led1_blink_data.uart_queue_handle = qhUART;
  402aa2:	9013      	str	r0, [sp, #76]	; 0x4c
	led2_blink_data.uart_queue_handle = qhUART;
  402aa4:	9010      	str	r0, [sp, #64]	; 0x40
	led3_blink_data.uart_queue_handle = qhUART;
  402aa6:	900d      	str	r0, [sp, #52]	; 0x34
	led1_control_data.uart_queue_handle = qhUART;
  402aa8:	9036      	str	r0, [sp, #216]	; 0xd8
	led2_control_data.uart_queue_handle = qhUART;
  402aaa:	9026      	str	r0, [sp, #152]	; 0x98
	led3_control_data.uart_queue_handle = qhUART;
  402aac:	9016      	str	r0, [sp, #88]	; 0x58
	xTaskCreate(taskUART,
  402aae:	9501      	str	r5, [sp, #4]
  402ab0:	9400      	str	r4, [sp, #0]
  402ab2:	ab0a      	add	r3, sp, #40	; 0x28
  402ab4:	2282      	movs	r2, #130	; 0x82
  402ab6:	4925      	ldr	r1, [pc, #148]	; (402b4c <main+0x200>)
  402ab8:	4825      	ldr	r0, [pc, #148]	; (402b50 <main+0x204>)
  402aba:	47b0      	blx	r6
	xTaskCreate(taskSystemControl,
  402abc:	4d25      	ldr	r5, [pc, #148]	; (402b54 <main+0x208>)
  402abe:	ab45      	add	r3, sp, #276	; 0x114
  402ac0:	9301      	str	r3, [sp, #4]
  402ac2:	9400      	str	r4, [sp, #0]
  402ac4:	ab24      	add	r3, sp, #144	; 0x90
  402ac6:	2282      	movs	r2, #130	; 0x82
  402ac8:	4923      	ldr	r1, [pc, #140]	; (402b58 <main+0x20c>)
  402aca:	4628      	mov	r0, r5
  402acc:	47b0      	blx	r6
	vTaskSuspend(thLED2SystemControl);	// suspend immediately, only ONE to run
  402ace:	9845      	ldr	r0, [sp, #276]	; 0x114
  402ad0:	4f22      	ldr	r7, [pc, #136]	; (402b5c <main+0x210>)
  402ad2:	47b8      	blx	r7
	xTaskCreate(taskSystemControl,
  402ad4:	ab44      	add	r3, sp, #272	; 0x110
  402ad6:	9301      	str	r3, [sp, #4]
  402ad8:	9400      	str	r4, [sp, #0]
  402ada:	ab14      	add	r3, sp, #80	; 0x50
  402adc:	2282      	movs	r2, #130	; 0x82
  402ade:	4920      	ldr	r1, [pc, #128]	; (402b60 <main+0x214>)
  402ae0:	4628      	mov	r0, r5
  402ae2:	47b0      	blx	r6
	vTaskSuspend(thLED3SystemControl); // suspend immediately, only ONE to run
  402ae4:	9844      	ldr	r0, [sp, #272]	; 0x110
  402ae6:	47b8      	blx	r7
	xTaskCreate(taskSystemControl,		// LED1 control task created last
  402ae8:	ab46      	add	r3, sp, #280	; 0x118
  402aea:	9301      	str	r3, [sp, #4]
  402aec:	9400      	str	r4, [sp, #0]
  402aee:	ab34      	add	r3, sp, #208	; 0xd0
  402af0:	2282      	movs	r2, #130	; 0x82
  402af2:	491c      	ldr	r1, [pc, #112]	; (402b64 <main+0x218>)
  402af4:	4628      	mov	r0, r5
  402af6:	47b0      	blx	r6
	led1_control_data.next_task_handle = thLED2SystemControl;
  402af8:	9b45      	ldr	r3, [sp, #276]	; 0x114
  402afa:	9334      	str	r3, [sp, #208]	; 0xd0
	led2_control_data.next_task_handle = thLED3SystemControl;
  402afc:	9b44      	ldr	r3, [sp, #272]	; 0x110
  402afe:	9324      	str	r3, [sp, #144]	; 0x90
	led3_control_data.next_task_handle = thLED1SystemControl;
  402b00:	9b46      	ldr	r3, [sp, #280]	; 0x118
  402b02:	9314      	str	r3, [sp, #80]	; 0x50
	UARTPutStr(EDBG_UART, led3_control_data.uart_next_led_message, 50);
  402b04:	2232      	movs	r2, #50	; 0x32
  402b06:	a917      	add	r1, sp, #92	; 0x5c
  402b08:	4640      	mov	r0, r8
  402b0a:	4b17      	ldr	r3, [pc, #92]	; (402b68 <main+0x21c>)
  402b0c:	4798      	blx	r3
	vTaskStartScheduler();
  402b0e:	4b17      	ldr	r3, [pc, #92]	; (402b6c <main+0x220>)
  402b10:	4798      	blx	r3
  402b12:	e7fe      	b.n	402b12 <main+0x1c6>
  402b14:	004024e9 	.word	0x004024e9
  402b18:	00402551 	.word	0x00402551
  402b1c:	20003670 	.word	0x20003670
  402b20:	00400759 	.word	0x00400759
  402b24:	004026ad 	.word	0x004026ad
  402b28:	00402345 	.word	0x00402345
  402b2c:	00402461 	.word	0x00402461
  402b30:	0040317c 	.word	0x0040317c
  402b34:	0040323c 	.word	0x0040323c
  402b38:	004021b9 	.word	0x004021b9
  402b3c:	00401185 	.word	0x00401185
  402b40:	004021d9 	.word	0x004021d9
  402b44:	0040325c 	.word	0x0040325c
  402b48:	00400b09 	.word	0x00400b09
  402b4c:	0040326c 	.word	0x0040326c
  402b50:	00402309 	.word	0x00402309
  402b54:	00402241 	.word	0x00402241
  402b58:	00403278 	.word	0x00403278
  402b5c:	004019a9 	.word	0x004019a9
  402b60:	00403290 	.word	0x00403290
  402b64:	004032a8 	.word	0x004032a8
  402b68:	004024c5 	.word	0x004024c5
  402b6c:	00401471 	.word	0x00401471
  402b70:	400e0600 	.word	0x400e0600
  402b74:	0040324c 	.word	0x0040324c

00402b78 <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  402b78:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  402b7a:	2300      	movs	r3, #0
  402b7c:	9301      	str	r3, [sp, #4]
        __asm volatile
  402b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
  402b82:	f383 8811 	msr	BASEPRI, r3
  402b86:	f3bf 8f6f 	isb	sy
  402b8a:	f3bf 8f4f 	dsb	sy

       /* Setting ulBlockVariable to a non-zero value in the debugger will allow
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
  402b8e:	9b01      	ldr	r3, [sp, #4]
  402b90:	b91b      	cbnz	r3, 402b9a <vAssertCalled+0x22>
              {
                     __asm volatile( "NOP" );
  402b92:	bf00      	nop
              while( ulBlockVariable == 0UL )
  402b94:	9b01      	ldr	r3, [sp, #4]
  402b96:	2b00      	cmp	r3, #0
  402b98:	d0fb      	beq.n	402b92 <vAssertCalled+0x1a>
        __asm volatile
  402b9a:	2300      	movs	r3, #0
  402b9c:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  402ba0:	b002      	add	sp, #8
  402ba2:	4770      	bx	lr

00402ba4 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  402ba4:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  402ba6:	f44f 7181 	mov.w	r1, #258	; 0x102
  402baa:	4802      	ldr	r0, [pc, #8]	; (402bb4 <vApplicationMallocFailedHook+0x10>)
  402bac:	4b02      	ldr	r3, [pc, #8]	; (402bb8 <vApplicationMallocFailedHook+0x14>)
  402bae:	4798      	blx	r3
  402bb0:	bd08      	pop	{r3, pc}
  402bb2:	bf00      	nop
  402bb4:	004032c0 	.word	0x004032c0
  402bb8:	00402b79 	.word	0x00402b79

00402bbc <vApplicationStackOverflowHook>:
        __asm volatile
  402bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
  402bc0:	f383 8811 	msr	BASEPRI, r3
  402bc4:	f3bf 8f6f 	isb	sy
  402bc8:	f3bf 8f4f 	dsb	sy
  402bcc:	e7fe      	b.n	402bcc <vApplicationStackOverflowHook+0x10>
	...

00402bd0 <__libc_init_array>:
  402bd0:	b570      	push	{r4, r5, r6, lr}
  402bd2:	4e0f      	ldr	r6, [pc, #60]	; (402c10 <__libc_init_array+0x40>)
  402bd4:	4d0f      	ldr	r5, [pc, #60]	; (402c14 <__libc_init_array+0x44>)
  402bd6:	1b76      	subs	r6, r6, r5
  402bd8:	10b6      	asrs	r6, r6, #2
  402bda:	bf18      	it	ne
  402bdc:	2400      	movne	r4, #0
  402bde:	d005      	beq.n	402bec <__libc_init_array+0x1c>
  402be0:	3401      	adds	r4, #1
  402be2:	f855 3b04 	ldr.w	r3, [r5], #4
  402be6:	4798      	blx	r3
  402be8:	42a6      	cmp	r6, r4
  402bea:	d1f9      	bne.n	402be0 <__libc_init_array+0x10>
  402bec:	4e0a      	ldr	r6, [pc, #40]	; (402c18 <__libc_init_array+0x48>)
  402bee:	4d0b      	ldr	r5, [pc, #44]	; (402c1c <__libc_init_array+0x4c>)
  402bf0:	1b76      	subs	r6, r6, r5
  402bf2:	f000 fb6f 	bl	4032d4 <_init>
  402bf6:	10b6      	asrs	r6, r6, #2
  402bf8:	bf18      	it	ne
  402bfa:	2400      	movne	r4, #0
  402bfc:	d006      	beq.n	402c0c <__libc_init_array+0x3c>
  402bfe:	3401      	adds	r4, #1
  402c00:	f855 3b04 	ldr.w	r3, [r5], #4
  402c04:	4798      	blx	r3
  402c06:	42a6      	cmp	r6, r4
  402c08:	d1f9      	bne.n	402bfe <__libc_init_array+0x2e>
  402c0a:	bd70      	pop	{r4, r5, r6, pc}
  402c0c:	bd70      	pop	{r4, r5, r6, pc}
  402c0e:	bf00      	nop
  402c10:	004032e0 	.word	0x004032e0
  402c14:	004032e0 	.word	0x004032e0
  402c18:	004032e8 	.word	0x004032e8
  402c1c:	004032e0 	.word	0x004032e0

00402c20 <memcpy>:
  402c20:	4684      	mov	ip, r0
  402c22:	ea41 0300 	orr.w	r3, r1, r0
  402c26:	f013 0303 	ands.w	r3, r3, #3
  402c2a:	d16d      	bne.n	402d08 <memcpy+0xe8>
  402c2c:	3a40      	subs	r2, #64	; 0x40
  402c2e:	d341      	bcc.n	402cb4 <memcpy+0x94>
  402c30:	f851 3b04 	ldr.w	r3, [r1], #4
  402c34:	f840 3b04 	str.w	r3, [r0], #4
  402c38:	f851 3b04 	ldr.w	r3, [r1], #4
  402c3c:	f840 3b04 	str.w	r3, [r0], #4
  402c40:	f851 3b04 	ldr.w	r3, [r1], #4
  402c44:	f840 3b04 	str.w	r3, [r0], #4
  402c48:	f851 3b04 	ldr.w	r3, [r1], #4
  402c4c:	f840 3b04 	str.w	r3, [r0], #4
  402c50:	f851 3b04 	ldr.w	r3, [r1], #4
  402c54:	f840 3b04 	str.w	r3, [r0], #4
  402c58:	f851 3b04 	ldr.w	r3, [r1], #4
  402c5c:	f840 3b04 	str.w	r3, [r0], #4
  402c60:	f851 3b04 	ldr.w	r3, [r1], #4
  402c64:	f840 3b04 	str.w	r3, [r0], #4
  402c68:	f851 3b04 	ldr.w	r3, [r1], #4
  402c6c:	f840 3b04 	str.w	r3, [r0], #4
  402c70:	f851 3b04 	ldr.w	r3, [r1], #4
  402c74:	f840 3b04 	str.w	r3, [r0], #4
  402c78:	f851 3b04 	ldr.w	r3, [r1], #4
  402c7c:	f840 3b04 	str.w	r3, [r0], #4
  402c80:	f851 3b04 	ldr.w	r3, [r1], #4
  402c84:	f840 3b04 	str.w	r3, [r0], #4
  402c88:	f851 3b04 	ldr.w	r3, [r1], #4
  402c8c:	f840 3b04 	str.w	r3, [r0], #4
  402c90:	f851 3b04 	ldr.w	r3, [r1], #4
  402c94:	f840 3b04 	str.w	r3, [r0], #4
  402c98:	f851 3b04 	ldr.w	r3, [r1], #4
  402c9c:	f840 3b04 	str.w	r3, [r0], #4
  402ca0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ca4:	f840 3b04 	str.w	r3, [r0], #4
  402ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  402cac:	f840 3b04 	str.w	r3, [r0], #4
  402cb0:	3a40      	subs	r2, #64	; 0x40
  402cb2:	d2bd      	bcs.n	402c30 <memcpy+0x10>
  402cb4:	3230      	adds	r2, #48	; 0x30
  402cb6:	d311      	bcc.n	402cdc <memcpy+0xbc>
  402cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  402cbc:	f840 3b04 	str.w	r3, [r0], #4
  402cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  402cc4:	f840 3b04 	str.w	r3, [r0], #4
  402cc8:	f851 3b04 	ldr.w	r3, [r1], #4
  402ccc:	f840 3b04 	str.w	r3, [r0], #4
  402cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  402cd4:	f840 3b04 	str.w	r3, [r0], #4
  402cd8:	3a10      	subs	r2, #16
  402cda:	d2ed      	bcs.n	402cb8 <memcpy+0x98>
  402cdc:	320c      	adds	r2, #12
  402cde:	d305      	bcc.n	402cec <memcpy+0xcc>
  402ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ce4:	f840 3b04 	str.w	r3, [r0], #4
  402ce8:	3a04      	subs	r2, #4
  402cea:	d2f9      	bcs.n	402ce0 <memcpy+0xc0>
  402cec:	3204      	adds	r2, #4
  402cee:	d008      	beq.n	402d02 <memcpy+0xe2>
  402cf0:	07d2      	lsls	r2, r2, #31
  402cf2:	bf1c      	itt	ne
  402cf4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402cf8:	f800 3b01 	strbne.w	r3, [r0], #1
  402cfc:	d301      	bcc.n	402d02 <memcpy+0xe2>
  402cfe:	880b      	ldrh	r3, [r1, #0]
  402d00:	8003      	strh	r3, [r0, #0]
  402d02:	4660      	mov	r0, ip
  402d04:	4770      	bx	lr
  402d06:	bf00      	nop
  402d08:	2a08      	cmp	r2, #8
  402d0a:	d313      	bcc.n	402d34 <memcpy+0x114>
  402d0c:	078b      	lsls	r3, r1, #30
  402d0e:	d08d      	beq.n	402c2c <memcpy+0xc>
  402d10:	f010 0303 	ands.w	r3, r0, #3
  402d14:	d08a      	beq.n	402c2c <memcpy+0xc>
  402d16:	f1c3 0304 	rsb	r3, r3, #4
  402d1a:	1ad2      	subs	r2, r2, r3
  402d1c:	07db      	lsls	r3, r3, #31
  402d1e:	bf1c      	itt	ne
  402d20:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402d24:	f800 3b01 	strbne.w	r3, [r0], #1
  402d28:	d380      	bcc.n	402c2c <memcpy+0xc>
  402d2a:	f831 3b02 	ldrh.w	r3, [r1], #2
  402d2e:	f820 3b02 	strh.w	r3, [r0], #2
  402d32:	e77b      	b.n	402c2c <memcpy+0xc>
  402d34:	3a04      	subs	r2, #4
  402d36:	d3d9      	bcc.n	402cec <memcpy+0xcc>
  402d38:	3a01      	subs	r2, #1
  402d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
  402d3e:	f800 3b01 	strb.w	r3, [r0], #1
  402d42:	d2f9      	bcs.n	402d38 <memcpy+0x118>
  402d44:	780b      	ldrb	r3, [r1, #0]
  402d46:	7003      	strb	r3, [r0, #0]
  402d48:	784b      	ldrb	r3, [r1, #1]
  402d4a:	7043      	strb	r3, [r0, #1]
  402d4c:	788b      	ldrb	r3, [r1, #2]
  402d4e:	7083      	strb	r3, [r0, #2]
  402d50:	4660      	mov	r0, ip
  402d52:	4770      	bx	lr

00402d54 <memset>:
  402d54:	b470      	push	{r4, r5, r6}
  402d56:	0786      	lsls	r6, r0, #30
  402d58:	d046      	beq.n	402de8 <memset+0x94>
  402d5a:	1e54      	subs	r4, r2, #1
  402d5c:	2a00      	cmp	r2, #0
  402d5e:	d041      	beq.n	402de4 <memset+0x90>
  402d60:	b2ca      	uxtb	r2, r1
  402d62:	4603      	mov	r3, r0
  402d64:	e002      	b.n	402d6c <memset+0x18>
  402d66:	f114 34ff 	adds.w	r4, r4, #4294967295
  402d6a:	d33b      	bcc.n	402de4 <memset+0x90>
  402d6c:	f803 2b01 	strb.w	r2, [r3], #1
  402d70:	079d      	lsls	r5, r3, #30
  402d72:	d1f8      	bne.n	402d66 <memset+0x12>
  402d74:	2c03      	cmp	r4, #3
  402d76:	d92e      	bls.n	402dd6 <memset+0x82>
  402d78:	b2cd      	uxtb	r5, r1
  402d7a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402d7e:	2c0f      	cmp	r4, #15
  402d80:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402d84:	d919      	bls.n	402dba <memset+0x66>
  402d86:	f103 0210 	add.w	r2, r3, #16
  402d8a:	4626      	mov	r6, r4
  402d8c:	3e10      	subs	r6, #16
  402d8e:	2e0f      	cmp	r6, #15
  402d90:	f842 5c10 	str.w	r5, [r2, #-16]
  402d94:	f842 5c0c 	str.w	r5, [r2, #-12]
  402d98:	f842 5c08 	str.w	r5, [r2, #-8]
  402d9c:	f842 5c04 	str.w	r5, [r2, #-4]
  402da0:	f102 0210 	add.w	r2, r2, #16
  402da4:	d8f2      	bhi.n	402d8c <memset+0x38>
  402da6:	f1a4 0210 	sub.w	r2, r4, #16
  402daa:	f022 020f 	bic.w	r2, r2, #15
  402dae:	f004 040f 	and.w	r4, r4, #15
  402db2:	3210      	adds	r2, #16
  402db4:	2c03      	cmp	r4, #3
  402db6:	4413      	add	r3, r2
  402db8:	d90d      	bls.n	402dd6 <memset+0x82>
  402dba:	461e      	mov	r6, r3
  402dbc:	4622      	mov	r2, r4
  402dbe:	3a04      	subs	r2, #4
  402dc0:	2a03      	cmp	r2, #3
  402dc2:	f846 5b04 	str.w	r5, [r6], #4
  402dc6:	d8fa      	bhi.n	402dbe <memset+0x6a>
  402dc8:	1f22      	subs	r2, r4, #4
  402dca:	f022 0203 	bic.w	r2, r2, #3
  402dce:	3204      	adds	r2, #4
  402dd0:	4413      	add	r3, r2
  402dd2:	f004 0403 	and.w	r4, r4, #3
  402dd6:	b12c      	cbz	r4, 402de4 <memset+0x90>
  402dd8:	b2c9      	uxtb	r1, r1
  402dda:	441c      	add	r4, r3
  402ddc:	f803 1b01 	strb.w	r1, [r3], #1
  402de0:	429c      	cmp	r4, r3
  402de2:	d1fb      	bne.n	402ddc <memset+0x88>
  402de4:	bc70      	pop	{r4, r5, r6}
  402de6:	4770      	bx	lr
  402de8:	4614      	mov	r4, r2
  402dea:	4603      	mov	r3, r0
  402dec:	e7c2      	b.n	402d74 <memset+0x20>
  402dee:	bf00      	nop

00402df0 <strcpy>:
  402df0:	ea80 0201 	eor.w	r2, r0, r1
  402df4:	4684      	mov	ip, r0
  402df6:	f012 0f03 	tst.w	r2, #3
  402dfa:	d14f      	bne.n	402e9c <strcpy+0xac>
  402dfc:	f011 0f03 	tst.w	r1, #3
  402e00:	d132      	bne.n	402e68 <strcpy+0x78>
  402e02:	f84d 4d04 	str.w	r4, [sp, #-4]!
  402e06:	f011 0f04 	tst.w	r1, #4
  402e0a:	f851 3b04 	ldr.w	r3, [r1], #4
  402e0e:	d00b      	beq.n	402e28 <strcpy+0x38>
  402e10:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402e14:	439a      	bics	r2, r3
  402e16:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e1a:	bf04      	itt	eq
  402e1c:	f84c 3b04 	streq.w	r3, [ip], #4
  402e20:	f851 3b04 	ldreq.w	r3, [r1], #4
  402e24:	d116      	bne.n	402e54 <strcpy+0x64>
  402e26:	bf00      	nop
  402e28:	f851 4b04 	ldr.w	r4, [r1], #4
  402e2c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402e30:	439a      	bics	r2, r3
  402e32:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e36:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  402e3a:	d10b      	bne.n	402e54 <strcpy+0x64>
  402e3c:	f84c 3b04 	str.w	r3, [ip], #4
  402e40:	43a2      	bics	r2, r4
  402e42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e46:	bf04      	itt	eq
  402e48:	f851 3b04 	ldreq.w	r3, [r1], #4
  402e4c:	f84c 4b04 	streq.w	r4, [ip], #4
  402e50:	d0ea      	beq.n	402e28 <strcpy+0x38>
  402e52:	4623      	mov	r3, r4
  402e54:	f80c 3b01 	strb.w	r3, [ip], #1
  402e58:	f013 0fff 	tst.w	r3, #255	; 0xff
  402e5c:	ea4f 2333 	mov.w	r3, r3, ror #8
  402e60:	d1f8      	bne.n	402e54 <strcpy+0x64>
  402e62:	f85d 4b04 	ldr.w	r4, [sp], #4
  402e66:	4770      	bx	lr
  402e68:	f011 0f01 	tst.w	r1, #1
  402e6c:	d006      	beq.n	402e7c <strcpy+0x8c>
  402e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
  402e72:	f80c 2b01 	strb.w	r2, [ip], #1
  402e76:	2a00      	cmp	r2, #0
  402e78:	bf08      	it	eq
  402e7a:	4770      	bxeq	lr
  402e7c:	f011 0f02 	tst.w	r1, #2
  402e80:	d0bf      	beq.n	402e02 <strcpy+0x12>
  402e82:	f831 2b02 	ldrh.w	r2, [r1], #2
  402e86:	f012 0fff 	tst.w	r2, #255	; 0xff
  402e8a:	bf16      	itet	ne
  402e8c:	f82c 2b02 	strhne.w	r2, [ip], #2
  402e90:	f88c 2000 	strbeq.w	r2, [ip]
  402e94:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  402e98:	d1b3      	bne.n	402e02 <strcpy+0x12>
  402e9a:	4770      	bx	lr
  402e9c:	f811 2b01 	ldrb.w	r2, [r1], #1
  402ea0:	f80c 2b01 	strb.w	r2, [ip], #1
  402ea4:	2a00      	cmp	r2, #0
  402ea6:	d1f9      	bne.n	402e9c <strcpy+0xac>
  402ea8:	4770      	bx	lr
  402eaa:	bf00      	nop
	...

00402ec0 <strlen>:
  402ec0:	f890 f000 	pld	[r0]
  402ec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402ec8:	f020 0107 	bic.w	r1, r0, #7
  402ecc:	f06f 0c00 	mvn.w	ip, #0
  402ed0:	f010 0407 	ands.w	r4, r0, #7
  402ed4:	f891 f020 	pld	[r1, #32]
  402ed8:	f040 8049 	bne.w	402f6e <strlen+0xae>
  402edc:	f04f 0400 	mov.w	r4, #0
  402ee0:	f06f 0007 	mvn.w	r0, #7
  402ee4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402ee8:	f891 f040 	pld	[r1, #64]	; 0x40
  402eec:	f100 0008 	add.w	r0, r0, #8
  402ef0:	fa82 f24c 	uadd8	r2, r2, ip
  402ef4:	faa4 f28c 	sel	r2, r4, ip
  402ef8:	fa83 f34c 	uadd8	r3, r3, ip
  402efc:	faa2 f38c 	sel	r3, r2, ip
  402f00:	bb4b      	cbnz	r3, 402f56 <strlen+0x96>
  402f02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402f06:	fa82 f24c 	uadd8	r2, r2, ip
  402f0a:	f100 0008 	add.w	r0, r0, #8
  402f0e:	faa4 f28c 	sel	r2, r4, ip
  402f12:	fa83 f34c 	uadd8	r3, r3, ip
  402f16:	faa2 f38c 	sel	r3, r2, ip
  402f1a:	b9e3      	cbnz	r3, 402f56 <strlen+0x96>
  402f1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402f20:	fa82 f24c 	uadd8	r2, r2, ip
  402f24:	f100 0008 	add.w	r0, r0, #8
  402f28:	faa4 f28c 	sel	r2, r4, ip
  402f2c:	fa83 f34c 	uadd8	r3, r3, ip
  402f30:	faa2 f38c 	sel	r3, r2, ip
  402f34:	b97b      	cbnz	r3, 402f56 <strlen+0x96>
  402f36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402f3a:	f101 0120 	add.w	r1, r1, #32
  402f3e:	fa82 f24c 	uadd8	r2, r2, ip
  402f42:	f100 0008 	add.w	r0, r0, #8
  402f46:	faa4 f28c 	sel	r2, r4, ip
  402f4a:	fa83 f34c 	uadd8	r3, r3, ip
  402f4e:	faa2 f38c 	sel	r3, r2, ip
  402f52:	2b00      	cmp	r3, #0
  402f54:	d0c6      	beq.n	402ee4 <strlen+0x24>
  402f56:	2a00      	cmp	r2, #0
  402f58:	bf04      	itt	eq
  402f5a:	3004      	addeq	r0, #4
  402f5c:	461a      	moveq	r2, r3
  402f5e:	ba12      	rev	r2, r2
  402f60:	fab2 f282 	clz	r2, r2
  402f64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402f68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402f6c:	4770      	bx	lr
  402f6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402f72:	f004 0503 	and.w	r5, r4, #3
  402f76:	f1c4 0000 	rsb	r0, r4, #0
  402f7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402f7e:	f014 0f04 	tst.w	r4, #4
  402f82:	f891 f040 	pld	[r1, #64]	; 0x40
  402f86:	fa0c f505 	lsl.w	r5, ip, r5
  402f8a:	ea62 0205 	orn	r2, r2, r5
  402f8e:	bf1c      	itt	ne
  402f90:	ea63 0305 	ornne	r3, r3, r5
  402f94:	4662      	movne	r2, ip
  402f96:	f04f 0400 	mov.w	r4, #0
  402f9a:	e7a9      	b.n	402ef0 <strlen+0x30>

00402f9c <register_fini>:
  402f9c:	4b02      	ldr	r3, [pc, #8]	; (402fa8 <register_fini+0xc>)
  402f9e:	b113      	cbz	r3, 402fa6 <register_fini+0xa>
  402fa0:	4802      	ldr	r0, [pc, #8]	; (402fac <register_fini+0x10>)
  402fa2:	f000 b805 	b.w	402fb0 <atexit>
  402fa6:	4770      	bx	lr
  402fa8:	00000000 	.word	0x00000000
  402fac:	00402fbd 	.word	0x00402fbd

00402fb0 <atexit>:
  402fb0:	2300      	movs	r3, #0
  402fb2:	4601      	mov	r1, r0
  402fb4:	461a      	mov	r2, r3
  402fb6:	4618      	mov	r0, r3
  402fb8:	f000 b81e 	b.w	402ff8 <__register_exitproc>

00402fbc <__libc_fini_array>:
  402fbc:	b538      	push	{r3, r4, r5, lr}
  402fbe:	4c0a      	ldr	r4, [pc, #40]	; (402fe8 <__libc_fini_array+0x2c>)
  402fc0:	4d0a      	ldr	r5, [pc, #40]	; (402fec <__libc_fini_array+0x30>)
  402fc2:	1b64      	subs	r4, r4, r5
  402fc4:	10a4      	asrs	r4, r4, #2
  402fc6:	d00a      	beq.n	402fde <__libc_fini_array+0x22>
  402fc8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402fcc:	3b01      	subs	r3, #1
  402fce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402fd2:	3c01      	subs	r4, #1
  402fd4:	f855 3904 	ldr.w	r3, [r5], #-4
  402fd8:	4798      	blx	r3
  402fda:	2c00      	cmp	r4, #0
  402fdc:	d1f9      	bne.n	402fd2 <__libc_fini_array+0x16>
  402fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402fe2:	f000 b981 	b.w	4032e8 <_fini>
  402fe6:	bf00      	nop
  402fe8:	004032f8 	.word	0x004032f8
  402fec:	004032f4 	.word	0x004032f4

00402ff0 <__retarget_lock_acquire_recursive>:
  402ff0:	4770      	bx	lr
  402ff2:	bf00      	nop

00402ff4 <__retarget_lock_release_recursive>:
  402ff4:	4770      	bx	lr
  402ff6:	bf00      	nop

00402ff8 <__register_exitproc>:
  402ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402ffc:	4d2c      	ldr	r5, [pc, #176]	; (4030b0 <__register_exitproc+0xb8>)
  402ffe:	4606      	mov	r6, r0
  403000:	6828      	ldr	r0, [r5, #0]
  403002:	4698      	mov	r8, r3
  403004:	460f      	mov	r7, r1
  403006:	4691      	mov	r9, r2
  403008:	f7ff fff2 	bl	402ff0 <__retarget_lock_acquire_recursive>
  40300c:	4b29      	ldr	r3, [pc, #164]	; (4030b4 <__register_exitproc+0xbc>)
  40300e:	681c      	ldr	r4, [r3, #0]
  403010:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403014:	2b00      	cmp	r3, #0
  403016:	d03e      	beq.n	403096 <__register_exitproc+0x9e>
  403018:	685a      	ldr	r2, [r3, #4]
  40301a:	2a1f      	cmp	r2, #31
  40301c:	dc1c      	bgt.n	403058 <__register_exitproc+0x60>
  40301e:	f102 0e01 	add.w	lr, r2, #1
  403022:	b176      	cbz	r6, 403042 <__register_exitproc+0x4a>
  403024:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403028:	2401      	movs	r4, #1
  40302a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40302e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403032:	4094      	lsls	r4, r2
  403034:	4320      	orrs	r0, r4
  403036:	2e02      	cmp	r6, #2
  403038:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40303c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403040:	d023      	beq.n	40308a <__register_exitproc+0x92>
  403042:	3202      	adds	r2, #2
  403044:	f8c3 e004 	str.w	lr, [r3, #4]
  403048:	6828      	ldr	r0, [r5, #0]
  40304a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40304e:	f7ff ffd1 	bl	402ff4 <__retarget_lock_release_recursive>
  403052:	2000      	movs	r0, #0
  403054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403058:	4b17      	ldr	r3, [pc, #92]	; (4030b8 <__register_exitproc+0xc0>)
  40305a:	b30b      	cbz	r3, 4030a0 <__register_exitproc+0xa8>
  40305c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403060:	f3af 8000 	nop.w
  403064:	4603      	mov	r3, r0
  403066:	b1d8      	cbz	r0, 4030a0 <__register_exitproc+0xa8>
  403068:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40306c:	6002      	str	r2, [r0, #0]
  40306e:	2100      	movs	r1, #0
  403070:	6041      	str	r1, [r0, #4]
  403072:	460a      	mov	r2, r1
  403074:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403078:	f04f 0e01 	mov.w	lr, #1
  40307c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403080:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403084:	2e00      	cmp	r6, #0
  403086:	d0dc      	beq.n	403042 <__register_exitproc+0x4a>
  403088:	e7cc      	b.n	403024 <__register_exitproc+0x2c>
  40308a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40308e:	430c      	orrs	r4, r1
  403090:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403094:	e7d5      	b.n	403042 <__register_exitproc+0x4a>
  403096:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40309a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40309e:	e7bb      	b.n	403018 <__register_exitproc+0x20>
  4030a0:	6828      	ldr	r0, [r5, #0]
  4030a2:	f7ff ffa7 	bl	402ff4 <__retarget_lock_release_recursive>
  4030a6:	f04f 30ff 	mov.w	r0, #4294967295
  4030aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4030ae:	bf00      	nop
  4030b0:	20000448 	.word	0x20000448
  4030b4:	004032d0 	.word	0x004032d0
  4030b8:	00000000 	.word	0x00000000
  4030bc:	732f2e2e 	.word	0x732f2e2e
  4030c0:	462f6372 	.word	0x462f6372
  4030c4:	52656572 	.word	0x52656572
  4030c8:	2f534f54 	.word	0x2f534f54
  4030cc:	74726f70 	.word	0x74726f70
  4030d0:	656c6261 	.word	0x656c6261
  4030d4:	4343472f 	.word	0x4343472f
  4030d8:	4d52412f 	.word	0x4d52412f
  4030dc:	344d435f 	.word	0x344d435f
  4030e0:	6f702f46 	.word	0x6f702f46
  4030e4:	632e7472 	.word	0x632e7472
  4030e8:	00000000 	.word	0x00000000
  4030ec:	732f2e2e 	.word	0x732f2e2e
  4030f0:	462f6372 	.word	0x462f6372
  4030f4:	52656572 	.word	0x52656572
  4030f8:	2f534f54 	.word	0x2f534f54
  4030fc:	74726f70 	.word	0x74726f70
  403100:	656c6261 	.word	0x656c6261
  403104:	6d654d2f 	.word	0x6d654d2f
  403108:	676e614d 	.word	0x676e614d
  40310c:	6165682f 	.word	0x6165682f
  403110:	2e355f70 	.word	0x2e355f70
  403114:	00000063 	.word	0x00000063
  403118:	732f2e2e 	.word	0x732f2e2e
  40311c:	462f6372 	.word	0x462f6372
  403120:	52656572 	.word	0x52656572
  403124:	2f534f54 	.word	0x2f534f54
  403128:	75657571 	.word	0x75657571
  40312c:	00632e65 	.word	0x00632e65
  403130:	732f2e2e 	.word	0x732f2e2e
  403134:	462f6372 	.word	0x462f6372
  403138:	52656572 	.word	0x52656572
  40313c:	2f534f54 	.word	0x2f534f54
  403140:	6b736174 	.word	0x6b736174
  403144:	00632e73 	.word	0x00632e73
  403148:	454c4449 	.word	0x454c4449
  40314c:	00000000 	.word	0x00000000
  403150:	51726d54 	.word	0x51726d54
  403154:	00000000 	.word	0x00000000
  403158:	732f2e2e 	.word	0x732f2e2e
  40315c:	462f6372 	.word	0x462f6372
  403160:	52656572 	.word	0x52656572
  403164:	2f534f54 	.word	0x2f534f54
  403168:	656d6974 	.word	0x656d6974
  40316c:	632e7372 	.word	0x632e7372
  403170:	00000000 	.word	0x00000000
  403174:	20726d54 	.word	0x20726d54
  403178:	00637653 	.word	0x00637653
	...
  403188:	2044454c 	.word	0x2044454c
  40318c:	53492032 	.word	0x53492032
  403190:	574f4e20 	.word	0x574f4e20
  403194:	54434120 	.word	0x54434120
  403198:	0a455649 	.word	0x0a455649
	...
  4031c8:	2044454c 	.word	0x2044454c
  4031cc:	53492033 	.word	0x53492033
  4031d0:	574f4e20 	.word	0x574f4e20
  4031d4:	54434120 	.word	0x54434120
  4031d8:	0a455649 	.word	0x0a455649
	...
  403208:	2044454c 	.word	0x2044454c
  40320c:	53492031 	.word	0x53492031
  403210:	574f4e20 	.word	0x574f4e20
  403214:	54434120 	.word	0x54434120
  403218:	0a455649 	.word	0x0a455649
	...
  40323c:	6b736154 	.word	0x6b736154
  403240:	72616548 	.word	0x72616548
  403244:	61656274 	.word	0x61656274
  403248:	00000074 	.word	0x00000074
  40324c:	6b736154 	.word	0x6b736154
  403250:	6e696c42 	.word	0x6e696c42
  403254:	44454c6b 	.word	0x44454c6b
  403258:	00000031 	.word	0x00000031
  40325c:	6b736154 	.word	0x6b736154
  403260:	6e696c42 	.word	0x6e696c42
  403264:	44454c6b 	.word	0x44454c6b
  403268:	00000032 	.word	0x00000032
  40326c:	6b736154 	.word	0x6b736154
  403270:	54524155 	.word	0x54524155
  403274:	00000000 	.word	0x00000000
  403278:	6b736154 	.word	0x6b736154
  40327c:	74737953 	.word	0x74737953
  403280:	6f436d65 	.word	0x6f436d65
  403284:	6f72746e 	.word	0x6f72746e
  403288:	44454c6c 	.word	0x44454c6c
  40328c:	00000032 	.word	0x00000032
  403290:	6b736154 	.word	0x6b736154
  403294:	74737953 	.word	0x74737953
  403298:	6f436d65 	.word	0x6f436d65
  40329c:	6f72746e 	.word	0x6f72746e
  4032a0:	44454c6c 	.word	0x44454c6c
  4032a4:	00000033 	.word	0x00000033
  4032a8:	6b736154 	.word	0x6b736154
  4032ac:	74737953 	.word	0x74737953
  4032b0:	6f436d65 	.word	0x6f436d65
  4032b4:	6f72746e 	.word	0x6f72746e
  4032b8:	44454c6c 	.word	0x44454c6c
  4032bc:	00000031 	.word	0x00000031
  4032c0:	732f2e2e 	.word	0x732f2e2e
  4032c4:	6d2f6372 	.word	0x6d2f6372
  4032c8:	2e6e6961 	.word	0x2e6e6961
  4032cc:	00000063 	.word	0x00000063

004032d0 <_global_impure_ptr>:
  4032d0:	20000020                                 .. 

004032d4 <_init>:
  4032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4032d6:	bf00      	nop
  4032d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4032da:	bc08      	pop	{r3}
  4032dc:	469e      	mov	lr, r3
  4032de:	4770      	bx	lr

004032e0 <__init_array_start>:
  4032e0:	00402f9d 	.word	0x00402f9d

004032e4 <__frame_dummy_init_array_entry>:
  4032e4:	0040011d                                ..@.

004032e8 <_fini>:
  4032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4032ea:	bf00      	nop
  4032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4032ee:	bc08      	pop	{r3}
  4032f0:	469e      	mov	lr, r3
  4032f2:	4770      	bx	lr

004032f4 <__fini_array_start>:
  4032f4:	004000f9 	.word	0x004000f9
