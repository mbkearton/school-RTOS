
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e00  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20000000  00402e00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000238  2000044c  0040324c  0002044c  2**2
                  ALLOC
  3 .stack        00003004  20000684  00403484  0002044c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015a15  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fbb  00000000  00000000  00035ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000727b  00000000  00000000  00038ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000840  00000000  00000000  0004011e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a58  00000000  00000000  0004095e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018859  00000000  00000000  000413b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000addf  00000000  00000000  00059c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006b83c  00000000  00000000  000649ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001654  00000000  00000000  000d022c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 36 00 20 19 26 40 00 15 26 40 00 15 26 40 00     .6. .&@..&@..&@.
  400010:	15 26 40 00 15 26 40 00 15 26 40 00 00 00 00 00     .&@..&@..&@.....
	...
  40002c:	d1 02 40 00 15 26 40 00 00 00 00 00 71 03 40 00     ..@..&@.....q.@.
  40003c:	d5 03 40 00 15 26 40 00 15 26 40 00 15 26 40 00     ..@..&@..&@..&@.
  40004c:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  40005c:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  40006c:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  40007c:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  40008c:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  40009c:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  4000ac:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  4000bc:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  4000cc:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  4000dc:	15 26 40 00 15 26 40 00 15 26 40 00 15 26 40 00     .&@..&@..&@..&@.
  4000ec:	15 26 40 00 15 26 40 00 15 26 40 00                 .&@..&@..&@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000044c 	.word	0x2000044c
  400114:	00000000 	.word	0x00000000
  400118:	00402e00 	.word	0x00402e00

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00402e00 	.word	0x00402e00
  400158:	20000450 	.word	0x20000450
  40015c:	00402e00 	.word	0x00402e00
  400160:	00000000 	.word	0x00000000

00400164 <initializeButtonDriver>:
	EXT1_PUSH_BUTTON_7,
	EXT1_PUSH_BUTTON_8
};

void initializeButtonDriver(void)
{
  400164:	4770      	bx	lr
	...

00400168 <readButton>:
	// 0 == button NOT pressed
	// 1 == button pressed
	uint8_t butState;
	
	// capturing the inverted pin level (buttons are pulled-up)
	butState = !ioport_get_pin_level(decSW[uiButNum]);
  400168:	4b09      	ldr	r3, [pc, #36]	; (400190 <readButton+0x28>)
  40016a:	5c1a      	ldrb	r2, [r3, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40016c:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40016e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400172:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400176:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400178:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  40017a:	f002 021f 	and.w	r2, r2, #31
  40017e:	2301      	movs	r3, #1
  400180:	fa03 f202 	lsl.w	r2, r3, r2
  400184:	420a      	tst	r2, r1

	return butState;
}
  400186:	bf0c      	ite	eq
  400188:	4618      	moveq	r0, r3
  40018a:	2000      	movne	r0, #0
  40018c:	4770      	bx	lr
  40018e:	bf00      	nop
  400190:	20000000 	.word	0x20000000

00400194 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400194:	f100 0308 	add.w	r3, r0, #8
  400198:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
  40019a:	f04f 32ff 	mov.w	r2, #4294967295
  40019e:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001a0:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001a2:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4001a4:	2300      	movs	r3, #0
  4001a6:	6003      	str	r3, [r0, #0]
  4001a8:	4770      	bx	lr

004001aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
  4001aa:	2300      	movs	r3, #0
  4001ac:	6103      	str	r3, [r0, #16]
  4001ae:	4770      	bx	lr

004001b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
  4001b0:	6843      	ldr	r3, [r0, #4]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
  4001b2:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4001b4:	689a      	ldr	r2, [r3, #8]
  4001b6:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
  4001b8:	689a      	ldr	r2, [r3, #8]
  4001ba:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
  4001bc:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
  4001be:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  4001c0:	6803      	ldr	r3, [r0, #0]
  4001c2:	3301      	adds	r3, #1
  4001c4:	6003      	str	r3, [r0, #0]
  4001c6:	4770      	bx	lr

004001c8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
  4001c8:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4001ca:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
  4001cc:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001d0:	d002      	beq.n	4001d8 <vListInsert+0x10>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001d2:	f100 0208 	add.w	r2, r0, #8
  4001d6:	e002      	b.n	4001de <vListInsert+0x16>
        pxIterator = pxList->xListEnd.pxPrevious;
  4001d8:	6902      	ldr	r2, [r0, #16]
  4001da:	e004      	b.n	4001e6 <vListInsert+0x1e>
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001dc:	461a      	mov	r2, r3
  4001de:	6853      	ldr	r3, [r2, #4]
  4001e0:	681c      	ldr	r4, [r3, #0]
  4001e2:	42a5      	cmp	r5, r4
  4001e4:	d2fa      	bcs.n	4001dc <vListInsert+0x14>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
  4001e6:	6853      	ldr	r3, [r2, #4]
  4001e8:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4001ea:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
  4001ec:	608a      	str	r2, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
  4001ee:	6051      	str	r1, [r2, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
  4001f0:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
  4001f2:	6803      	ldr	r3, [r0, #0]
  4001f4:	3301      	adds	r3, #1
  4001f6:	6003      	str	r3, [r0, #0]
}
  4001f8:	bc30      	pop	{r4, r5}
  4001fa:	4770      	bx	lr

004001fc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
  4001fc:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4001fe:	6842      	ldr	r2, [r0, #4]
  400200:	6881      	ldr	r1, [r0, #8]
  400202:	6091      	str	r1, [r2, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400204:	6882      	ldr	r2, [r0, #8]
  400206:	6841      	ldr	r1, [r0, #4]
  400208:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
  40020a:	685a      	ldr	r2, [r3, #4]
  40020c:	4290      	cmp	r0, r2
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
  40020e:	bf04      	itt	eq
  400210:	6882      	ldreq	r2, [r0, #8]
  400212:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
  400214:	2200      	movs	r2, #0
  400216:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
  400218:	681a      	ldr	r2, [r3, #0]
  40021a:	3a01      	subs	r2, #1
  40021c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
  40021e:	6818      	ldr	r0, [r3, #0]
}
  400220:	4770      	bx	lr
	...

00400224 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
  400224:	4808      	ldr	r0, [pc, #32]	; (400248 <prvPortStartFirstTask+0x24>)
  400226:	6800      	ldr	r0, [r0, #0]
  400228:	6800      	ldr	r0, [r0, #0]
  40022a:	f380 8808 	msr	MSP, r0
  40022e:	f04f 0000 	mov.w	r0, #0
  400232:	f380 8814 	msr	CONTROL, r0
  400236:	b662      	cpsie	i
  400238:	b661      	cpsie	f
  40023a:	f3bf 8f4f 	dsb	sy
  40023e:	f3bf 8f6f 	isb	sy
  400242:	df00      	svc	0
  400244:	bf00      	nop
  400246:	0000      	.short	0x0000
  400248:	e000ed08 	.word	0xe000ed08

0040024c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
  40024c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40025c <vPortEnableVFP+0x10>
  400250:	6801      	ldr	r1, [r0, #0]
  400252:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400256:	6001      	str	r1, [r0, #0]
  400258:	4770      	bx	lr
  40025a:	0000      	.short	0x0000
  40025c:	e000ed88 	.word	0xe000ed88

00400260 <prvTaskExitError>:
{
  400260:	b500      	push	{lr}
  400262:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0;
  400264:	2300      	movs	r3, #0
  400266:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
  400268:	4b0b      	ldr	r3, [pc, #44]	; (400298 <prvTaskExitError+0x38>)
  40026a:	681b      	ldr	r3, [r3, #0]
  40026c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400270:	d003      	beq.n	40027a <prvTaskExitError+0x1a>
  400272:	21e7      	movs	r1, #231	; 0xe7
  400274:	4809      	ldr	r0, [pc, #36]	; (40029c <prvTaskExitError+0x3c>)
  400276:	4b0a      	ldr	r3, [pc, #40]	; (4002a0 <prvTaskExitError+0x40>)
  400278:	4798      	blx	r3

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
  40027a:	f04f 0350 	mov.w	r3, #80	; 0x50
  40027e:	f383 8811 	msr	BASEPRI, r3
  400282:	f3bf 8f6f 	isb	sy
  400286:	f3bf 8f4f 	dsb	sy
    while( ulDummy == 0 )
  40028a:	9b01      	ldr	r3, [sp, #4]
  40028c:	2b00      	cmp	r3, #0
  40028e:	d0fc      	beq.n	40028a <prvTaskExitError+0x2a>
}
  400290:	b003      	add	sp, #12
  400292:	f85d fb04 	ldr.w	pc, [sp], #4
  400296:	bf00      	nop
  400298:	20000004 	.word	0x20000004
  40029c:	00402cb4 	.word	0x00402cb4
  4002a0:	00402921 	.word	0x00402921

004002a4 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
  4002a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4002a8:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
  4002ac:	f021 0101 	bic.w	r1, r1, #1
  4002b0:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
  4002b4:	4b05      	ldr	r3, [pc, #20]	; (4002cc <pxPortInitialiseStack+0x28>)
  4002b6:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
  4002ba:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
  4002be:	f06f 0302 	mvn.w	r3, #2
  4002c2:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4002c6:	3844      	subs	r0, #68	; 0x44
  4002c8:	4770      	bx	lr
  4002ca:	bf00      	nop
  4002cc:	00400261 	.word	0x00400261

004002d0 <SVC_Handler>:
    __asm volatile (
  4002d0:	4b07      	ldr	r3, [pc, #28]	; (4002f0 <pxCurrentTCBConst2>)
  4002d2:	6819      	ldr	r1, [r3, #0]
  4002d4:	6808      	ldr	r0, [r1, #0]
  4002d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002da:	f380 8809 	msr	PSP, r0
  4002de:	f3bf 8f6f 	isb	sy
  4002e2:	f04f 0000 	mov.w	r0, #0
  4002e6:	f380 8811 	msr	BASEPRI, r0
  4002ea:	4770      	bx	lr
  4002ec:	f3af 8000 	nop.w

004002f0 <pxCurrentTCBConst2>:
  4002f0:	20000490 	.word	0x20000490

004002f4 <vPortEnterCritical>:
{
  4002f4:	b508      	push	{r3, lr}
  4002f6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4002fa:	f383 8811 	msr	BASEPRI, r3
  4002fe:	f3bf 8f6f 	isb	sy
  400302:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
  400306:	4a09      	ldr	r2, [pc, #36]	; (40032c <vPortEnterCritical+0x38>)
  400308:	6813      	ldr	r3, [r2, #0]
  40030a:	3301      	adds	r3, #1
  40030c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
  40030e:	2b01      	cmp	r3, #1
  400310:	d000      	beq.n	400314 <vPortEnterCritical+0x20>
  400312:	bd08      	pop	{r3, pc}
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400314:	4b06      	ldr	r3, [pc, #24]	; (400330 <vPortEnterCritical+0x3c>)
  400316:	681b      	ldr	r3, [r3, #0]
  400318:	f013 0fff 	tst.w	r3, #255	; 0xff
  40031c:	d0f9      	beq.n	400312 <vPortEnterCritical+0x1e>
  40031e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  400322:	4804      	ldr	r0, [pc, #16]	; (400334 <vPortEnterCritical+0x40>)
  400324:	4b04      	ldr	r3, [pc, #16]	; (400338 <vPortEnterCritical+0x44>)
  400326:	4798      	blx	r3
}
  400328:	e7f3      	b.n	400312 <vPortEnterCritical+0x1e>
  40032a:	bf00      	nop
  40032c:	20000004 	.word	0x20000004
  400330:	e000ed04 	.word	0xe000ed04
  400334:	00402cb4 	.word	0x00402cb4
  400338:	00402921 	.word	0x00402921

0040033c <vPortExitCritical>:
{
  40033c:	b508      	push	{r3, lr}
    configASSERT( uxCriticalNesting );
  40033e:	4b08      	ldr	r3, [pc, #32]	; (400360 <vPortExitCritical+0x24>)
  400340:	681b      	ldr	r3, [r3, #0]
  400342:	b13b      	cbz	r3, 400354 <vPortExitCritical+0x18>
    uxCriticalNesting--;
  400344:	4a06      	ldr	r2, [pc, #24]	; (400360 <vPortExitCritical+0x24>)
  400346:	6813      	ldr	r3, [r2, #0]
  400348:	3b01      	subs	r3, #1
  40034a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
  40034c:	b90b      	cbnz	r3, 400352 <vPortExitCritical+0x16>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
  40034e:	f383 8811 	msr	BASEPRI, r3
  400352:	bd08      	pop	{r3, pc}
    configASSERT( uxCriticalNesting );
  400354:	f240 11ad 	movw	r1, #429	; 0x1ad
  400358:	4802      	ldr	r0, [pc, #8]	; (400364 <vPortExitCritical+0x28>)
  40035a:	4b03      	ldr	r3, [pc, #12]	; (400368 <vPortExitCritical+0x2c>)
  40035c:	4798      	blx	r3
  40035e:	e7f1      	b.n	400344 <vPortExitCritical+0x8>
  400360:	20000004 	.word	0x20000004
  400364:	00402cb4 	.word	0x00402cb4
  400368:	00402921 	.word	0x00402921
  40036c:	00000000 	.word	0x00000000

00400370 <PendSV_Handler>:
    __asm volatile
  400370:	f3ef 8009 	mrs	r0, PSP
  400374:	f3bf 8f6f 	isb	sy
  400378:	4b15      	ldr	r3, [pc, #84]	; (4003d0 <pxCurrentTCBConst>)
  40037a:	681a      	ldr	r2, [r3, #0]
  40037c:	f01e 0f10 	tst.w	lr, #16
  400380:	bf08      	it	eq
  400382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40038a:	6010      	str	r0, [r2, #0]
  40038c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400390:	f04f 0050 	mov.w	r0, #80	; 0x50
  400394:	f380 8811 	msr	BASEPRI, r0
  400398:	f3bf 8f4f 	dsb	sy
  40039c:	f3bf 8f6f 	isb	sy
  4003a0:	f001 fa0c 	bl	4017bc <vTaskSwitchContext>
  4003a4:	f04f 0000 	mov.w	r0, #0
  4003a8:	f380 8811 	msr	BASEPRI, r0
  4003ac:	bc09      	pop	{r0, r3}
  4003ae:	6819      	ldr	r1, [r3, #0]
  4003b0:	6808      	ldr	r0, [r1, #0]
  4003b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003b6:	f01e 0f10 	tst.w	lr, #16
  4003ba:	bf08      	it	eq
  4003bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4003c0:	f380 8809 	msr	PSP, r0
  4003c4:	f3bf 8f6f 	isb	sy
  4003c8:	4770      	bx	lr
  4003ca:	bf00      	nop
  4003cc:	f3af 8000 	nop.w

004003d0 <pxCurrentTCBConst>:
  4003d0:	20000490 	.word	0x20000490

004003d4 <SysTick_Handler>:
{
  4003d4:	b508      	push	{r3, lr}
        __asm volatile
  4003d6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4003da:	f383 8811 	msr	BASEPRI, r3
  4003de:	f3bf 8f6f 	isb	sy
  4003e2:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <SysTick_Handler+0x28>)
  4003e8:	4798      	blx	r3
  4003ea:	b118      	cbz	r0, 4003f4 <SysTick_Handler+0x20>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4003ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003f0:	4b03      	ldr	r3, [pc, #12]	; (400400 <SysTick_Handler+0x2c>)
  4003f2:	601a      	str	r2, [r3, #0]
        __asm volatile
  4003f4:	2300      	movs	r3, #0
  4003f6:	f383 8811 	msr	BASEPRI, r3
  4003fa:	bd08      	pop	{r3, pc}
  4003fc:	00401409 	.word	0x00401409
  400400:	e000ed04 	.word	0xe000ed04

00400404 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
  400404:	4a08      	ldr	r2, [pc, #32]	; (400428 <vPortSetupTimerInterrupt+0x24>)
  400406:	2300      	movs	r3, #0
  400408:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  40040a:	4908      	ldr	r1, [pc, #32]	; (40042c <vPortSetupTimerInterrupt+0x28>)
  40040c:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  40040e:	4b08      	ldr	r3, [pc, #32]	; (400430 <vPortSetupTimerInterrupt+0x2c>)
  400410:	681b      	ldr	r3, [r3, #0]
  400412:	4908      	ldr	r1, [pc, #32]	; (400434 <vPortSetupTimerInterrupt+0x30>)
  400414:	fba1 1303 	umull	r1, r3, r1, r3
  400418:	099b      	lsrs	r3, r3, #6
  40041a:	3b01      	subs	r3, #1
  40041c:	4906      	ldr	r1, [pc, #24]	; (400438 <vPortSetupTimerInterrupt+0x34>)
  40041e:	600b      	str	r3, [r1, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400420:	2307      	movs	r3, #7
  400422:	6013      	str	r3, [r2, #0]
  400424:	4770      	bx	lr
  400426:	bf00      	nop
  400428:	e000e010 	.word	0xe000e010
  40042c:	e000e018 	.word	0xe000e018
  400430:	20000018 	.word	0x20000018
  400434:	10624dd3 	.word	0x10624dd3
  400438:	e000e014 	.word	0xe000e014

0040043c <xPortStartScheduler>:
{
  40043c:	b510      	push	{r4, lr}
  40043e:	b082      	sub	sp, #8
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400440:	4b36      	ldr	r3, [pc, #216]	; (40051c <xPortStartScheduler+0xe0>)
  400442:	681a      	ldr	r2, [r3, #0]
  400444:	4b36      	ldr	r3, [pc, #216]	; (400520 <xPortStartScheduler+0xe4>)
  400446:	429a      	cmp	r2, r3
  400448:	d01e      	beq.n	400488 <xPortStartScheduler+0x4c>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  40044a:	4b34      	ldr	r3, [pc, #208]	; (40051c <xPortStartScheduler+0xe0>)
  40044c:	681a      	ldr	r2, [r3, #0]
  40044e:	4b35      	ldr	r3, [pc, #212]	; (400524 <xPortStartScheduler+0xe8>)
  400450:	429a      	cmp	r2, r3
  400452:	d01f      	beq.n	400494 <xPortStartScheduler+0x58>
            ulOriginalPriority = *pucFirstUserPriorityRegister;
  400454:	4b34      	ldr	r3, [pc, #208]	; (400528 <xPortStartScheduler+0xec>)
  400456:	781a      	ldrb	r2, [r3, #0]
  400458:	b2d2      	uxtb	r2, r2
  40045a:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40045c:	22ff      	movs	r2, #255	; 0xff
  40045e:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400460:	781b      	ldrb	r3, [r3, #0]
  400462:	b2db      	uxtb	r3, r3
  400464:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400468:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40046c:	f003 0350 	and.w	r3, r3, #80	; 0x50
  400470:	4a2e      	ldr	r2, [pc, #184]	; (40052c <xPortStartScheduler+0xf0>)
  400472:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400474:	2207      	movs	r2, #7
  400476:	4b2e      	ldr	r3, [pc, #184]	; (400530 <xPortStartScheduler+0xf4>)
  400478:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40047a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40047e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400482:	d01e      	beq.n	4004c2 <xPortStartScheduler+0x86>
  400484:	2206      	movs	r2, #6
  400486:	e00c      	b.n	4004a2 <xPortStartScheduler+0x66>
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400488:	f44f 7197 	mov.w	r1, #302	; 0x12e
  40048c:	4829      	ldr	r0, [pc, #164]	; (400534 <xPortStartScheduler+0xf8>)
  40048e:	4b2a      	ldr	r3, [pc, #168]	; (400538 <xPortStartScheduler+0xfc>)
  400490:	4798      	blx	r3
  400492:	e7da      	b.n	40044a <xPortStartScheduler+0xe>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400494:	f240 112f 	movw	r1, #303	; 0x12f
  400498:	4826      	ldr	r0, [pc, #152]	; (400534 <xPortStartScheduler+0xf8>)
  40049a:	4b27      	ldr	r3, [pc, #156]	; (400538 <xPortStartScheduler+0xfc>)
  40049c:	4798      	blx	r3
  40049e:	e7d9      	b.n	400454 <xPortStartScheduler+0x18>
  4004a0:	460a      	mov	r2, r1
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4004a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4004a6:	005b      	lsls	r3, r3, #1
  4004a8:	b2db      	uxtb	r3, r3
  4004aa:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4004ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4004b2:	1e51      	subs	r1, r2, #1
  4004b4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4004b8:	d1f2      	bne.n	4004a0 <xPortStartScheduler+0x64>
  4004ba:	4b1d      	ldr	r3, [pc, #116]	; (400530 <xPortStartScheduler+0xf4>)
  4004bc:	601a      	str	r2, [r3, #0]
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  4004be:	2a03      	cmp	r2, #3
  4004c0:	d004      	beq.n	4004cc <xPortStartScheduler+0x90>
  4004c2:	f240 1161 	movw	r1, #353	; 0x161
  4004c6:	481b      	ldr	r0, [pc, #108]	; (400534 <xPortStartScheduler+0xf8>)
  4004c8:	4b1b      	ldr	r3, [pc, #108]	; (400538 <xPortStartScheduler+0xfc>)
  4004ca:	4798      	blx	r3
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4004cc:	4a18      	ldr	r2, [pc, #96]	; (400530 <xPortStartScheduler+0xf4>)
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4004ce:	6813      	ldr	r3, [r2, #0]
  4004d0:	021b      	lsls	r3, r3, #8
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4004d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4004d6:	6013      	str	r3, [r2, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
  4004d8:	9b01      	ldr	r3, [sp, #4]
  4004da:	b2db      	uxtb	r3, r3
  4004dc:	4a12      	ldr	r2, [pc, #72]	; (400528 <xPortStartScheduler+0xec>)
  4004de:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
  4004e0:	4b16      	ldr	r3, [pc, #88]	; (40053c <xPortStartScheduler+0x100>)
  4004e2:	681a      	ldr	r2, [r3, #0]
  4004e4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4004e8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
  4004ea:	681a      	ldr	r2, [r3, #0]
  4004ec:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4004f0:	601a      	str	r2, [r3, #0]
    vPortSetupTimerInterrupt();
  4004f2:	4b13      	ldr	r3, [pc, #76]	; (400540 <xPortStartScheduler+0x104>)
  4004f4:	4798      	blx	r3
    uxCriticalNesting = 0;
  4004f6:	2400      	movs	r4, #0
  4004f8:	4b12      	ldr	r3, [pc, #72]	; (400544 <xPortStartScheduler+0x108>)
  4004fa:	601c      	str	r4, [r3, #0]
    vPortEnableVFP();
  4004fc:	4b12      	ldr	r3, [pc, #72]	; (400548 <xPortStartScheduler+0x10c>)
  4004fe:	4798      	blx	r3
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400500:	4a12      	ldr	r2, [pc, #72]	; (40054c <xPortStartScheduler+0x110>)
  400502:	6813      	ldr	r3, [r2, #0]
  400504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400508:	6013      	str	r3, [r2, #0]
    prvPortStartFirstTask();
  40050a:	4b11      	ldr	r3, [pc, #68]	; (400550 <xPortStartScheduler+0x114>)
  40050c:	4798      	blx	r3
    vTaskSwitchContext();
  40050e:	4b11      	ldr	r3, [pc, #68]	; (400554 <xPortStartScheduler+0x118>)
  400510:	4798      	blx	r3
    prvTaskExitError();
  400512:	4b11      	ldr	r3, [pc, #68]	; (400558 <xPortStartScheduler+0x11c>)
  400514:	4798      	blx	r3
}
  400516:	4620      	mov	r0, r4
  400518:	b002      	add	sp, #8
  40051a:	bd10      	pop	{r4, pc}
  40051c:	e000ed00 	.word	0xe000ed00
  400520:	410fc271 	.word	0x410fc271
  400524:	410fc270 	.word	0x410fc270
  400528:	e000e400 	.word	0xe000e400
  40052c:	20000468 	.word	0x20000468
  400530:	2000046c 	.word	0x2000046c
  400534:	00402cb4 	.word	0x00402cb4
  400538:	00402921 	.word	0x00402921
  40053c:	e000ed20 	.word	0xe000ed20
  400540:	00400405 	.word	0x00400405
  400544:	20000004 	.word	0x20000004
  400548:	0040024d 	.word	0x0040024d
  40054c:	e000ef34 	.word	0xe000ef34
  400550:	00400225 	.word	0x00400225
  400554:	004017bd 	.word	0x004017bd
  400558:	00400261 	.word	0x00400261

0040055c <prvInsertBlockIntoFreeList>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert )
{
  40055c:	b410      	push	{r4}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40055e:	4a13      	ldr	r2, [pc, #76]	; (4005ac <prvInsertBlockIntoFreeList+0x50>)
  400560:	e000      	b.n	400564 <prvInsertBlockIntoFreeList+0x8>
  400562:	461a      	mov	r2, r3
  400564:	6813      	ldr	r3, [r2, #0]
  400566:	4283      	cmp	r3, r0
  400568:	d3fb      	bcc.n	400562 <prvInsertBlockIntoFreeList+0x6>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40056a:	6851      	ldr	r1, [r2, #4]
  40056c:	1854      	adds	r4, r2, r1
  40056e:	42a0      	cmp	r0, r4
  400570:	d00a      	beq.n	400588 <prvInsertBlockIntoFreeList+0x2c>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  400572:	6841      	ldr	r1, [r0, #4]
  400574:	1844      	adds	r4, r0, r1
  400576:	42a3      	cmp	r3, r4
  400578:	d00b      	beq.n	400592 <prvInsertBlockIntoFreeList+0x36>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  40057a:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
  40057c:	4290      	cmp	r0, r2
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40057e:	bf18      	it	ne
  400580:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
  400582:	f85d 4b04 	ldr.w	r4, [sp], #4
  400586:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400588:	6840      	ldr	r0, [r0, #4]
  40058a:	4401      	add	r1, r0
  40058c:	6051      	str	r1, [r2, #4]
  40058e:	4610      	mov	r0, r2
  400590:	e7ef      	b.n	400572 <prvInsertBlockIntoFreeList+0x16>
        if( pxIterator->pxNextFreeBlock != pxEnd )
  400592:	4c07      	ldr	r4, [pc, #28]	; (4005b0 <prvInsertBlockIntoFreeList+0x54>)
  400594:	6824      	ldr	r4, [r4, #0]
  400596:	42a3      	cmp	r3, r4
  400598:	d006      	beq.n	4005a8 <prvInsertBlockIntoFreeList+0x4c>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  40059a:	685b      	ldr	r3, [r3, #4]
  40059c:	4419      	add	r1, r3
  40059e:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4005a0:	6813      	ldr	r3, [r2, #0]
  4005a2:	681b      	ldr	r3, [r3, #0]
  4005a4:	6003      	str	r3, [r0, #0]
  4005a6:	e7e9      	b.n	40057c <prvInsertBlockIntoFreeList+0x20>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4005a8:	6003      	str	r3, [r0, #0]
  4005aa:	e7e7      	b.n	40057c <prvInsertBlockIntoFreeList+0x20>
  4005ac:	20000488 	.word	0x20000488
  4005b0:	20000470 	.word	0x20000470

004005b4 <pvPortMalloc>:
{
  4005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005b6:	4604      	mov	r4, r0
    configASSERT( pxEnd );
  4005b8:	4b2f      	ldr	r3, [pc, #188]	; (400678 <pvPortMalloc+0xc4>)
  4005ba:	681b      	ldr	r3, [r3, #0]
  4005bc:	b1eb      	cbz	r3, 4005fa <pvPortMalloc+0x46>
    vTaskSuspendAll();
  4005be:	4b2f      	ldr	r3, [pc, #188]	; (40067c <pvPortMalloc+0xc8>)
  4005c0:	4798      	blx	r3
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4005c2:	4b2f      	ldr	r3, [pc, #188]	; (400680 <pvPortMalloc+0xcc>)
  4005c4:	681d      	ldr	r5, [r3, #0]
  4005c6:	4225      	tst	r5, r4
  4005c8:	d14d      	bne.n	400666 <pvPortMalloc+0xb2>
            if( ( xWantedSize > 0 ) &&
  4005ca:	2c00      	cmp	r4, #0
  4005cc:	d04e      	beq.n	40066c <pvPortMalloc+0xb8>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
  4005ce:	f104 0108 	add.w	r1, r4, #8
            if( ( xWantedSize > 0 ) &&
  4005d2:	428c      	cmp	r4, r1
  4005d4:	d24a      	bcs.n	40066c <pvPortMalloc+0xb8>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4005d6:	f011 0f07 	tst.w	r1, #7
  4005da:	d005      	beq.n	4005e8 <pvPortMalloc+0x34>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) >
  4005dc:	f021 0307 	bic.w	r3, r1, #7
  4005e0:	3308      	adds	r3, #8
  4005e2:	4299      	cmp	r1, r3
  4005e4:	d242      	bcs.n	40066c <pvPortMalloc+0xb8>
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4005e6:	4619      	mov	r1, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  4005e8:	2900      	cmp	r1, #0
  4005ea:	d03c      	beq.n	400666 <pvPortMalloc+0xb2>
  4005ec:	4b25      	ldr	r3, [pc, #148]	; (400684 <pvPortMalloc+0xd0>)
  4005ee:	681e      	ldr	r6, [r3, #0]
  4005f0:	42b1      	cmp	r1, r6
  4005f2:	d838      	bhi.n	400666 <pvPortMalloc+0xb2>
                pxBlock = xStart.pxNextFreeBlock;
  4005f4:	4a24      	ldr	r2, [pc, #144]	; (400688 <pvPortMalloc+0xd4>)
  4005f6:	6814      	ldr	r4, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4005f8:	e006      	b.n	400608 <pvPortMalloc+0x54>
    configASSERT( pxEnd );
  4005fa:	218e      	movs	r1, #142	; 0x8e
  4005fc:	4823      	ldr	r0, [pc, #140]	; (40068c <pvPortMalloc+0xd8>)
  4005fe:	4b24      	ldr	r3, [pc, #144]	; (400690 <pvPortMalloc+0xdc>)
  400600:	4798      	blx	r3
  400602:	e7dc      	b.n	4005be <pvPortMalloc+0xa>
  400604:	4622      	mov	r2, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
  400606:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400608:	6863      	ldr	r3, [r4, #4]
  40060a:	4299      	cmp	r1, r3
  40060c:	d902      	bls.n	400614 <pvPortMalloc+0x60>
  40060e:	6823      	ldr	r3, [r4, #0]
  400610:	2b00      	cmp	r3, #0
  400612:	d1f7      	bne.n	400604 <pvPortMalloc+0x50>
                if( pxBlock != pxEnd )
  400614:	4b18      	ldr	r3, [pc, #96]	; (400678 <pvPortMalloc+0xc4>)
  400616:	681b      	ldr	r3, [r3, #0]
  400618:	429c      	cmp	r4, r3
  40061a:	d024      	beq.n	400666 <pvPortMalloc+0xb2>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  40061c:	6817      	ldr	r7, [r2, #0]
  40061e:	3708      	adds	r7, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400620:	6823      	ldr	r3, [r4, #0]
  400622:	6013      	str	r3, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400624:	6863      	ldr	r3, [r4, #4]
  400626:	1a5b      	subs	r3, r3, r1
  400628:	2b10      	cmp	r3, #16
  40062a:	d816      	bhi.n	40065a <pvPortMalloc+0xa6>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  40062c:	6862      	ldr	r2, [r4, #4]
  40062e:	1ab6      	subs	r6, r6, r2
  400630:	4914      	ldr	r1, [pc, #80]	; (400684 <pvPortMalloc+0xd0>)
  400632:	600e      	str	r6, [r1, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  400634:	4917      	ldr	r1, [pc, #92]	; (400694 <pvPortMalloc+0xe0>)
  400636:	6809      	ldr	r1, [r1, #0]
  400638:	428e      	cmp	r6, r1
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  40063a:	bf3c      	itt	cc
  40063c:	4915      	ldrcc	r1, [pc, #84]	; (400694 <pvPortMalloc+0xe0>)
  40063e:	600e      	strcc	r6, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
  400640:	4315      	orrs	r5, r2
  400642:	6065      	str	r5, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
  400644:	2300      	movs	r3, #0
  400646:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
  400648:	4a13      	ldr	r2, [pc, #76]	; (400698 <pvPortMalloc+0xe4>)
  40064a:	6813      	ldr	r3, [r2, #0]
  40064c:	3301      	adds	r3, #1
  40064e:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
  400650:	4b12      	ldr	r3, [pc, #72]	; (40069c <pvPortMalloc+0xe8>)
  400652:	4798      	blx	r3
            if( pvReturn == NULL )
  400654:	b167      	cbz	r7, 400670 <pvPortMalloc+0xbc>
}
  400656:	4638      	mov	r0, r7
  400658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  40065a:	1860      	adds	r0, r4, r1
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40065c:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
  40065e:	6061      	str	r1, [r4, #4]
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400660:	4b0f      	ldr	r3, [pc, #60]	; (4006a0 <pvPortMalloc+0xec>)
  400662:	4798      	blx	r3
  400664:	e7e2      	b.n	40062c <pvPortMalloc+0x78>
    ( void ) xTaskResumeAll();
  400666:	4b0d      	ldr	r3, [pc, #52]	; (40069c <pvPortMalloc+0xe8>)
  400668:	4798      	blx	r3
  40066a:	e001      	b.n	400670 <pvPortMalloc+0xbc>
  40066c:	4b0b      	ldr	r3, [pc, #44]	; (40069c <pvPortMalloc+0xe8>)
  40066e:	4798      	blx	r3
                vApplicationMallocFailedHook();
  400670:	4b0c      	ldr	r3, [pc, #48]	; (4006a4 <pvPortMalloc+0xf0>)
  400672:	4798      	blx	r3
  400674:	2700      	movs	r7, #0
    return pvReturn;
  400676:	e7ee      	b.n	400656 <pvPortMalloc+0xa2>
  400678:	20000470 	.word	0x20000470
  40067c:	004013ed 	.word	0x004013ed
  400680:	20000474 	.word	0x20000474
  400684:	20000478 	.word	0x20000478
  400688:	20000488 	.word	0x20000488
  40068c:	00402ce4 	.word	0x00402ce4
  400690:	00402921 	.word	0x00402921
  400694:	2000047c 	.word	0x2000047c
  400698:	20000480 	.word	0x20000480
  40069c:	004015c5 	.word	0x004015c5
  4006a0:	0040055d 	.word	0x0040055d
  4006a4:	0040294d 	.word	0x0040294d

004006a8 <vPortFree>:
    if( pv != NULL )
  4006a8:	2800      	cmp	r0, #0
  4006aa:	d044      	beq.n	400736 <vPortFree+0x8e>
{
  4006ac:	b510      	push	{r4, lr}
  4006ae:	4604      	mov	r4, r0
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006b0:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4006b4:	4b20      	ldr	r3, [pc, #128]	; (400738 <vPortFree+0x90>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	421a      	tst	r2, r3
  4006ba:	d011      	beq.n	4006e0 <vPortFree+0x38>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006bc:	f850 3c08 	ldr.w	r3, [r0, #-8]
  4006c0:	b1f3      	cbz	r3, 400700 <vPortFree+0x58>
  4006c2:	f240 112d 	movw	r1, #301	; 0x12d
  4006c6:	481d      	ldr	r0, [pc, #116]	; (40073c <vPortFree+0x94>)
  4006c8:	4b1d      	ldr	r3, [pc, #116]	; (400740 <vPortFree+0x98>)
  4006ca:	4798      	blx	r3
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006d0:	4a19      	ldr	r2, [pc, #100]	; (400738 <vPortFree+0x90>)
  4006d2:	6812      	ldr	r2, [r2, #0]
  4006d4:	4213      	tst	r3, r2
  4006d6:	d002      	beq.n	4006de <vPortFree+0x36>
            if( pxLink->pxNextFreeBlock == NULL )
  4006d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4006dc:	b1a1      	cbz	r1, 400708 <vPortFree+0x60>
  4006de:	bd10      	pop	{r4, pc}
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
  4006e4:	4815      	ldr	r0, [pc, #84]	; (40073c <vPortFree+0x94>)
  4006e6:	4b16      	ldr	r3, [pc, #88]	; (400740 <vPortFree+0x98>)
  4006e8:	4798      	blx	r3
        configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006ea:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4006ee:	2b00      	cmp	r3, #0
  4006f0:	d1e7      	bne.n	4006c2 <vPortFree+0x1a>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006f6:	4a10      	ldr	r2, [pc, #64]	; (400738 <vPortFree+0x90>)
  4006f8:	6812      	ldr	r2, [r2, #0]
  4006fa:	4213      	tst	r3, r2
  4006fc:	d0ef      	beq.n	4006de <vPortFree+0x36>
  4006fe:	e003      	b.n	400708 <vPortFree+0x60>
  400700:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400704:	4a0c      	ldr	r2, [pc, #48]	; (400738 <vPortFree+0x90>)
  400706:	6812      	ldr	r2, [r2, #0]
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
  400708:	ea23 0302 	bic.w	r3, r3, r2
  40070c:	f844 3c04 	str.w	r3, [r4, #-4]
                vTaskSuspendAll();
  400710:	4b0c      	ldr	r3, [pc, #48]	; (400744 <vPortFree+0x9c>)
  400712:	4798      	blx	r3
                    xFreeBytesRemaining += pxLink->xBlockSize;
  400714:	4a0c      	ldr	r2, [pc, #48]	; (400748 <vPortFree+0xa0>)
  400716:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40071a:	6811      	ldr	r1, [r2, #0]
  40071c:	440b      	add	r3, r1
  40071e:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  400720:	f1a4 0008 	sub.w	r0, r4, #8
  400724:	4b09      	ldr	r3, [pc, #36]	; (40074c <vPortFree+0xa4>)
  400726:	4798      	blx	r3
                    xNumberOfSuccessfulFrees++;
  400728:	4a09      	ldr	r2, [pc, #36]	; (400750 <vPortFree+0xa8>)
  40072a:	6813      	ldr	r3, [r2, #0]
  40072c:	3301      	adds	r3, #1
  40072e:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
  400730:	4b08      	ldr	r3, [pc, #32]	; (400754 <vPortFree+0xac>)
  400732:	4798      	blx	r3
}
  400734:	bd10      	pop	{r4, pc}
  400736:	4770      	bx	lr
  400738:	20000474 	.word	0x20000474
  40073c:	00402ce4 	.word	0x00402ce4
  400740:	00402921 	.word	0x00402921
  400744:	004013ed 	.word	0x004013ed
  400748:	20000478 	.word	0x20000478
  40074c:	0040055d 	.word	0x0040055d
  400750:	20000484 	.word	0x20000484
  400754:	004015c5 	.word	0x004015c5

00400758 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40075c:	4605      	mov	r5, r0
    BaseType_t xDefinedRegions = 0;
    size_t xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
  40075e:	4b35      	ldr	r3, [pc, #212]	; (400834 <vPortDefineHeapRegions+0xdc>)
  400760:	681b      	ldr	r3, [r3, #0]
  400762:	b123      	cbz	r3, 40076e <vPortDefineHeapRegions+0x16>
  400764:	f240 11a3 	movw	r1, #419	; 0x1a3
  400768:	4833      	ldr	r0, [pc, #204]	; (400838 <vPortDefineHeapRegions+0xe0>)
  40076a:	4b34      	ldr	r3, [pc, #208]	; (40083c <vPortDefineHeapRegions+0xe4>)
  40076c:	4798      	blx	r3

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

    while( pxHeapRegion->xSizeInBytes > 0 )
  40076e:	f8d5 b004 	ldr.w	fp, [r5, #4]
  400772:	f1bb 0f00 	cmp.w	fp, #0
  400776:	d052      	beq.n	40081e <vPortDefineHeapRegions+0xc6>
  400778:	3508      	adds	r5, #8
  40077a:	2600      	movs	r6, #0
  40077c:	46b0      	mov	r8, r6
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != NULL );
  40077e:	4f2d      	ldr	r7, [pc, #180]	; (400834 <vPortDefineHeapRegions+0xdc>)

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( xAddress > ( size_t ) pxEnd );
  400780:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400838 <vPortDefineHeapRegions+0xe0>
  400784:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 40083c <vPortDefineHeapRegions+0xe4>
  400788:	e01d      	b.n	4007c6 <vPortDefineHeapRegions+0x6e>
            configASSERT( pxEnd != NULL );
  40078a:	683b      	ldr	r3, [r7, #0]
  40078c:	b373      	cbz	r3, 4007ec <vPortDefineHeapRegions+0x94>
            configASSERT( xAddress > ( size_t ) pxEnd );
  40078e:	683b      	ldr	r3, [r7, #0]
  400790:	42a3      	cmp	r3, r4
  400792:	d230      	bcs.n	4007f6 <vPortDefineHeapRegions+0x9e>
        }

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
  400794:	6839      	ldr	r1, [r7, #0]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + xTotalRegionSize;
  400796:	eb0b 0304 	add.w	r3, fp, r4
        xAddress -= xHeapStructSize;
  40079a:	3b08      	subs	r3, #8
        xAddress &= ~portBYTE_ALIGNMENT_MASK;
  40079c:	f023 0307 	bic.w	r3, r3, #7
        pxEnd = ( BlockLink_t * ) xAddress;
  4007a0:	603b      	str	r3, [r7, #0]
        pxEnd->xBlockSize = 0;
  4007a2:	2200      	movs	r2, #0
  4007a4:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = NULL;
  4007a6:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  4007a8:	4622      	mov	r2, r4
        pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  4007aa:	1b18      	subs	r0, r3, r4
  4007ac:	6060      	str	r0, [r4, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  4007ae:	6023      	str	r3, [r4, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
  4007b0:	b101      	cbz	r1, 4007b4 <vPortDefineHeapRegions+0x5c>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  4007b2:	600c      	str	r4, [r1, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  4007b4:	6853      	ldr	r3, [r2, #4]
  4007b6:	4498      	add	r8, r3

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
  4007b8:	3601      	adds	r6, #1
  4007ba:	3508      	adds	r5, #8
    while( pxHeapRegion->xSizeInBytes > 0 )
  4007bc:	f855 bc04 	ldr.w	fp, [r5, #-4]
  4007c0:	f1bb 0f00 	cmp.w	fp, #0
  4007c4:	d01c      	beq.n	400800 <vPortDefineHeapRegions+0xa8>
        xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  4007c6:	f855 4c08 	ldr.w	r4, [r5, #-8]
        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4007ca:	f014 0f07 	tst.w	r4, #7
  4007ce:	d006      	beq.n	4007de <vPortDefineHeapRegions+0x86>
            xAddress += ( portBYTE_ALIGNMENT - 1 );
  4007d0:	1de2      	adds	r2, r4, #7
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007d2:	f022 0207 	bic.w	r2, r2, #7
            xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  4007d6:	44a3      	add	fp, r4
  4007d8:	ebab 0b02 	sub.w	fp, fp, r2
            xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007dc:	4614      	mov	r4, r2
        if( xDefinedRegions == 0 )
  4007de:	2e00      	cmp	r6, #0
  4007e0:	d1d3      	bne.n	40078a <vPortDefineHeapRegions+0x32>
            xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  4007e2:	4b17      	ldr	r3, [pc, #92]	; (400840 <vPortDefineHeapRegions+0xe8>)
  4007e4:	601c      	str	r4, [r3, #0]
            xStart.xBlockSize = ( size_t ) 0;
  4007e6:	2200      	movs	r2, #0
  4007e8:	605a      	str	r2, [r3, #4]
  4007ea:	e7d3      	b.n	400794 <vPortDefineHeapRegions+0x3c>
            configASSERT( pxEnd != NULL );
  4007ec:	f240 11c5 	movw	r1, #453	; 0x1c5
  4007f0:	4650      	mov	r0, sl
  4007f2:	47c8      	blx	r9
  4007f4:	e7cb      	b.n	40078e <vPortDefineHeapRegions+0x36>
            configASSERT( xAddress > ( size_t ) pxEnd );
  4007f6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  4007fa:	4650      	mov	r0, sl
  4007fc:	47c8      	blx	r9
  4007fe:	e7c9      	b.n	400794 <vPortDefineHeapRegions+0x3c>
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  400800:	4b10      	ldr	r3, [pc, #64]	; (400844 <vPortDefineHeapRegions+0xec>)
  400802:	f8c3 8000 	str.w	r8, [r3]
    xFreeBytesRemaining = xTotalHeapSize;
  400806:	4b10      	ldr	r3, [pc, #64]	; (400848 <vPortDefineHeapRegions+0xf0>)
  400808:	f8c3 8000 	str.w	r8, [r3]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
  40080c:	f1b8 0f00 	cmp.w	r8, #0
  400810:	d00a      	beq.n	400828 <vPortDefineHeapRegions+0xd0>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  400812:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400816:	4b0d      	ldr	r3, [pc, #52]	; (40084c <vPortDefineHeapRegions+0xf4>)
  400818:	601a      	str	r2, [r3, #0]
}
  40081a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  40081e:	2300      	movs	r3, #0
  400820:	4a08      	ldr	r2, [pc, #32]	; (400844 <vPortDefineHeapRegions+0xec>)
  400822:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
  400824:	4a08      	ldr	r2, [pc, #32]	; (400848 <vPortDefineHeapRegions+0xf0>)
  400826:	6013      	str	r3, [r2, #0]
    configASSERT( xTotalHeapSize );
  400828:	f240 11f1 	movw	r1, #497	; 0x1f1
  40082c:	4802      	ldr	r0, [pc, #8]	; (400838 <vPortDefineHeapRegions+0xe0>)
  40082e:	4b03      	ldr	r3, [pc, #12]	; (40083c <vPortDefineHeapRegions+0xe4>)
  400830:	4798      	blx	r3
  400832:	e7ee      	b.n	400812 <vPortDefineHeapRegions+0xba>
  400834:	20000470 	.word	0x20000470
  400838:	00402ce4 	.word	0x00402ce4
  40083c:	00402921 	.word	0x00402921
  400840:	20000488 	.word	0x20000488
  400844:	2000047c 	.word	0x2000047c
  400848:	20000478 	.word	0x20000478
  40084c:	20000474 	.word	0x20000474

00400850 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
  400850:	b510      	push	{r4, lr}
  400852:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
  400854:	4b04      	ldr	r3, [pc, #16]	; (400868 <prvIsQueueEmpty+0x18>)
  400856:	4798      	blx	r3
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
  400858:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
  40085a:	4b04      	ldr	r3, [pc, #16]	; (40086c <prvIsQueueEmpty+0x1c>)
  40085c:	4798      	blx	r3

    return xReturn;
}
  40085e:	fab4 f084 	clz	r0, r4
  400862:	0940      	lsrs	r0, r0, #5
  400864:	bd10      	pop	{r4, pc}
  400866:	bf00      	nop
  400868:	004002f5 	.word	0x004002f5
  40086c:	0040033d 	.word	0x0040033d

00400870 <prvCopyDataToQueue>:
{
  400870:	b570      	push	{r4, r5, r6, lr}
  400872:	4604      	mov	r4, r0
  400874:	4616      	mov	r6, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400876:	6b85      	ldr	r5, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400878:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40087a:	b95a      	cbnz	r2, 400894 <prvCopyDataToQueue+0x24>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40087c:	6803      	ldr	r3, [r0, #0]
    BaseType_t xReturn = pdFALSE;
  40087e:	2000      	movs	r0, #0
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400880:	b113      	cbz	r3, 400888 <prvCopyDataToQueue+0x18>
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  400882:	3501      	adds	r5, #1
  400884:	63a5      	str	r5, [r4, #56]	; 0x38
}
  400886:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400888:	68a0      	ldr	r0, [r4, #8]
  40088a:	4b17      	ldr	r3, [pc, #92]	; (4008e8 <prvCopyDataToQueue+0x78>)
  40088c:	4798      	blx	r3
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
  40088e:	2300      	movs	r3, #0
  400890:	60a3      	str	r3, [r4, #8]
  400892:	e7f6      	b.n	400882 <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
  400894:	b96e      	cbnz	r6, 4008b2 <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400896:	6840      	ldr	r0, [r0, #4]
  400898:	4b14      	ldr	r3, [pc, #80]	; (4008ec <prvCopyDataToQueue+0x7c>)
  40089a:	4798      	blx	r3
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  40089c:	6863      	ldr	r3, [r4, #4]
  40089e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008a0:	4413      	add	r3, r2
  4008a2:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008a4:	68a2      	ldr	r2, [r4, #8]
  4008a6:	4293      	cmp	r3, r2
  4008a8:	d319      	bcc.n	4008de <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
  4008aa:	6823      	ldr	r3, [r4, #0]
  4008ac:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
  4008ae:	2000      	movs	r0, #0
  4008b0:	e7e7      	b.n	400882 <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  4008b2:	68c0      	ldr	r0, [r0, #12]
  4008b4:	4b0d      	ldr	r3, [pc, #52]	; (4008ec <prvCopyDataToQueue+0x7c>)
  4008b6:	4798      	blx	r3
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  4008b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008ba:	4252      	negs	r2, r2
  4008bc:	68e3      	ldr	r3, [r4, #12]
  4008be:	4413      	add	r3, r2
  4008c0:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008c2:	6821      	ldr	r1, [r4, #0]
  4008c4:	428b      	cmp	r3, r1
  4008c6:	d202      	bcs.n	4008ce <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  4008c8:	68a3      	ldr	r3, [r4, #8]
  4008ca:	441a      	add	r2, r3
  4008cc:	60e2      	str	r2, [r4, #12]
        if( xPosition == queueOVERWRITE )
  4008ce:	2e02      	cmp	r6, #2
  4008d0:	d001      	beq.n	4008d6 <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
  4008d2:	2000      	movs	r0, #0
  4008d4:	e7d5      	b.n	400882 <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4008d6:	b125      	cbz	r5, 4008e2 <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
  4008d8:	3d01      	subs	r5, #1
    BaseType_t xReturn = pdFALSE;
  4008da:	2000      	movs	r0, #0
  4008dc:	e7d1      	b.n	400882 <prvCopyDataToQueue+0x12>
  4008de:	2000      	movs	r0, #0
  4008e0:	e7cf      	b.n	400882 <prvCopyDataToQueue+0x12>
  4008e2:	2000      	movs	r0, #0
  4008e4:	e7cd      	b.n	400882 <prvCopyDataToQueue+0x12>
  4008e6:	bf00      	nop
  4008e8:	00401bf5 	.word	0x00401bf5
  4008ec:	004029c5 	.word	0x004029c5

004008f0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
  4008f0:	b570      	push	{r4, r5, r6, lr}
  4008f2:	b082      	sub	sp, #8
  4008f4:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4008f6:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  4008f8:	b15c      	cbz	r4, 400912 <prvNotifyQueueSetContainer+0x22>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4008fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4008fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4008fe:	429a      	cmp	r2, r3
  400900:	d20d      	bcs.n	40091e <prvNotifyQueueSetContainer+0x2e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400902:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400906:	429a      	cmp	r2, r3
  400908:	d30f      	bcc.n	40092a <prvNotifyQueueSetContainer+0x3a>
        BaseType_t xReturn = pdFALSE;
  40090a:	2600      	movs	r6, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
  40090c:	4630      	mov	r0, r6
  40090e:	b002      	add	sp, #8
  400910:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
  400912:	f640 31d5 	movw	r1, #3029	; 0xbd5
  400916:	4817      	ldr	r0, [pc, #92]	; (400974 <prvNotifyQueueSetContainer+0x84>)
  400918:	4b17      	ldr	r3, [pc, #92]	; (400978 <prvNotifyQueueSetContainer+0x88>)
  40091a:	4798      	blx	r3
  40091c:	e7ed      	b.n	4008fa <prvNotifyQueueSetContainer+0xa>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40091e:	f640 31d6 	movw	r1, #3030	; 0xbd6
  400922:	4814      	ldr	r0, [pc, #80]	; (400974 <prvNotifyQueueSetContainer+0x84>)
  400924:	4b14      	ldr	r3, [pc, #80]	; (400978 <prvNotifyQueueSetContainer+0x88>)
  400926:	4798      	blx	r3
  400928:	e7eb      	b.n	400902 <prvNotifyQueueSetContainer+0x12>
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40092a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  40092e:	b26d      	sxtb	r5, r5
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
  400930:	2200      	movs	r2, #0
  400932:	a901      	add	r1, sp, #4
  400934:	4620      	mov	r0, r4
  400936:	4b11      	ldr	r3, [pc, #68]	; (40097c <prvNotifyQueueSetContainer+0x8c>)
  400938:	4798      	blx	r3
  40093a:	4606      	mov	r6, r0
            if( cTxLock == queueUNLOCKED )
  40093c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400940:	d006      	beq.n	400950 <prvNotifyQueueSetContainer+0x60>
                configASSERT( cTxLock != queueINT8_MAX );
  400942:	2d7f      	cmp	r5, #127	; 0x7f
  400944:	d00f      	beq.n	400966 <prvNotifyQueueSetContainer+0x76>
                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400946:	3501      	adds	r5, #1
  400948:	b26d      	sxtb	r5, r5
  40094a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  40094e:	e7dd      	b.n	40090c <prvNotifyQueueSetContainer+0x1c>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400950:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400952:	2b00      	cmp	r3, #0
  400954:	d0da      	beq.n	40090c <prvNotifyQueueSetContainer+0x1c>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400956:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40095a:	4b09      	ldr	r3, [pc, #36]	; (400980 <prvNotifyQueueSetContainer+0x90>)
  40095c:	4798      	blx	r3
  40095e:	2800      	cmp	r0, #0
                        xReturn = pdTRUE;
  400960:	bf18      	it	ne
  400962:	2601      	movne	r6, #1
  400964:	e7d2      	b.n	40090c <prvNotifyQueueSetContainer+0x1c>
                configASSERT( cTxLock != queueINT8_MAX );
  400966:	f640 31f6 	movw	r1, #3062	; 0xbf6
  40096a:	4802      	ldr	r0, [pc, #8]	; (400974 <prvNotifyQueueSetContainer+0x84>)
  40096c:	4b02      	ldr	r3, [pc, #8]	; (400978 <prvNotifyQueueSetContainer+0x88>)
  40096e:	4798      	blx	r3
  400970:	e7e9      	b.n	400946 <prvNotifyQueueSetContainer+0x56>
  400972:	bf00      	nop
  400974:	00402d10 	.word	0x00402d10
  400978:	00402921 	.word	0x00402921
  40097c:	00400871 	.word	0x00400871
  400980:	00401a31 	.word	0x00401a31

00400984 <prvCopyDataFromQueue>:
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400984:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400986:	b172      	cbz	r2, 4009a6 <prvCopyDataFromQueue+0x22>
{
  400988:	b510      	push	{r4, lr}
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  40098a:	68c3      	ldr	r3, [r0, #12]
  40098c:	4413      	add	r3, r2
  40098e:	60c3      	str	r3, [r0, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400990:	6884      	ldr	r4, [r0, #8]
  400992:	42a3      	cmp	r3, r4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  400994:	bf24      	itt	cs
  400996:	6803      	ldrcs	r3, [r0, #0]
  400998:	60c3      	strcs	r3, [r0, #12]
  40099a:	460c      	mov	r4, r1
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  40099c:	68c1      	ldr	r1, [r0, #12]
  40099e:	4620      	mov	r0, r4
  4009a0:	4b01      	ldr	r3, [pc, #4]	; (4009a8 <prvCopyDataFromQueue+0x24>)
  4009a2:	4798      	blx	r3
  4009a4:	bd10      	pop	{r4, pc}
  4009a6:	4770      	bx	lr
  4009a8:	004029c5 	.word	0x004029c5

004009ac <prvUnlockQueue>:
{
  4009ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009b0:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
  4009b2:	4b23      	ldr	r3, [pc, #140]	; (400a40 <prvUnlockQueue+0x94>)
  4009b4:	4798      	blx	r3
        int8_t cTxLock = pxQueue->cTxLock;
  4009b6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4009ba:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  4009bc:	2c00      	cmp	r4, #0
  4009be:	dd18      	ble.n	4009f2 <prvUnlockQueue+0x46>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4009c0:	4e20      	ldr	r6, [pc, #128]	; (400a44 <prvUnlockQueue+0x98>)
                            vTaskMissedYield();
  4009c2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400a50 <prvUnlockQueue+0xa4>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009c6:	4f20      	ldr	r7, [pc, #128]	; (400a48 <prvUnlockQueue+0x9c>)
  4009c8:	e008      	b.n	4009dc <prvUnlockQueue+0x30>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4009cc:	b18b      	cbz	r3, 4009f2 <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4009d2:	47b8      	blx	r7
  4009d4:	b958      	cbnz	r0, 4009ee <prvUnlockQueue+0x42>
  4009d6:	3c01      	subs	r4, #1
  4009d8:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
  4009da:	b154      	cbz	r4, 4009f2 <prvUnlockQueue+0x46>
                    if( pxQueue->pxQueueSetContainer != NULL )
  4009dc:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4009de:	2b00      	cmp	r3, #0
  4009e0:	d0f3      	beq.n	4009ca <prvUnlockQueue+0x1e>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
  4009e2:	4628      	mov	r0, r5
  4009e4:	47b0      	blx	r6
  4009e6:	2800      	cmp	r0, #0
  4009e8:	d0f5      	beq.n	4009d6 <prvUnlockQueue+0x2a>
                            vTaskMissedYield();
  4009ea:	47c0      	blx	r8
  4009ec:	e7f3      	b.n	4009d6 <prvUnlockQueue+0x2a>
                                vTaskMissedYield();
  4009ee:	47c0      	blx	r8
  4009f0:	e7f1      	b.n	4009d6 <prvUnlockQueue+0x2a>
        pxQueue->cTxLock = queueUNLOCKED;
  4009f2:	23ff      	movs	r3, #255	; 0xff
  4009f4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
  4009f8:	4b14      	ldr	r3, [pc, #80]	; (400a4c <prvUnlockQueue+0xa0>)
  4009fa:	4798      	blx	r3
    taskENTER_CRITICAL();
  4009fc:	4b10      	ldr	r3, [pc, #64]	; (400a40 <prvUnlockQueue+0x94>)
  4009fe:	4798      	blx	r3
        int8_t cRxLock = pxQueue->cRxLock;
  400a00:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400a04:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400a06:	2c00      	cmp	r4, #0
  400a08:	dd12      	ble.n	400a30 <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a0a:	692b      	ldr	r3, [r5, #16]
  400a0c:	b183      	cbz	r3, 400a30 <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a0e:	f105 0710 	add.w	r7, r5, #16
  400a12:	4e0d      	ldr	r6, [pc, #52]	; (400a48 <prvUnlockQueue+0x9c>)
                    vTaskMissedYield();
  400a14:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400a50 <prvUnlockQueue+0xa4>
  400a18:	e004      	b.n	400a24 <prvUnlockQueue+0x78>
  400a1a:	3c01      	subs	r4, #1
  400a1c:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
  400a1e:	b13c      	cbz	r4, 400a30 <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a20:	692b      	ldr	r3, [r5, #16]
  400a22:	b12b      	cbz	r3, 400a30 <prvUnlockQueue+0x84>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a24:	4638      	mov	r0, r7
  400a26:	47b0      	blx	r6
  400a28:	2800      	cmp	r0, #0
  400a2a:	d0f6      	beq.n	400a1a <prvUnlockQueue+0x6e>
                    vTaskMissedYield();
  400a2c:	47c0      	blx	r8
  400a2e:	e7f4      	b.n	400a1a <prvUnlockQueue+0x6e>
        pxQueue->cRxLock = queueUNLOCKED;
  400a30:	23ff      	movs	r3, #255	; 0xff
  400a32:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
  400a36:	4b05      	ldr	r3, [pc, #20]	; (400a4c <prvUnlockQueue+0xa0>)
  400a38:	4798      	blx	r3
  400a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a3e:	bf00      	nop
  400a40:	004002f5 	.word	0x004002f5
  400a44:	004008f1 	.word	0x004008f1
  400a48:	00401a31 	.word	0x00401a31
  400a4c:	0040033d 	.word	0x0040033d
  400a50:	00401bc9 	.word	0x00401bc9

00400a54 <xQueueGenericReset>:
{
  400a54:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
  400a56:	b150      	cbz	r0, 400a6e <xQueueGenericReset+0x1a>
  400a58:	460d      	mov	r5, r1
  400a5a:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
  400a5c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
  400a5e:	b963      	cbnz	r3, 400a7a <xQueueGenericReset+0x26>
    configASSERT( xReturn != pdFAIL );
  400a60:	f240 1145 	movw	r1, #325	; 0x145
  400a64:	4821      	ldr	r0, [pc, #132]	; (400aec <xQueueGenericReset+0x98>)
  400a66:	4b22      	ldr	r3, [pc, #136]	; (400af0 <xQueueGenericReset+0x9c>)
  400a68:	4798      	blx	r3
  400a6a:	2000      	movs	r0, #0
    return xReturn;
  400a6c:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxQueue );
  400a6e:	f44f 7188 	mov.w	r1, #272	; 0x110
  400a72:	481e      	ldr	r0, [pc, #120]	; (400aec <xQueueGenericReset+0x98>)
  400a74:	4b1e      	ldr	r3, [pc, #120]	; (400af0 <xQueueGenericReset+0x9c>)
  400a76:	4798      	blx	r3
  400a78:	e7f2      	b.n	400a60 <xQueueGenericReset+0xc>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
  400a7a:	f04f 32ff 	mov.w	r2, #4294967295
  400a7e:	fbb2 f3f3 	udiv	r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
  400a82:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400a84:	4293      	cmp	r3, r2
  400a86:	d3eb      	bcc.n	400a60 <xQueueGenericReset+0xc>
        taskENTER_CRITICAL();
  400a88:	4b1a      	ldr	r3, [pc, #104]	; (400af4 <xQueueGenericReset+0xa0>)
  400a8a:	4798      	blx	r3
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a8c:	6822      	ldr	r2, [r4, #0]
  400a8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a92:	fb03 f301 	mul.w	r3, r3, r1
  400a96:	18d0      	adds	r0, r2, r3
  400a98:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a9a:	2000      	movs	r0, #0
  400a9c:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
  400a9e:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400aa0:	1a5b      	subs	r3, r3, r1
  400aa2:	4413      	add	r3, r2
  400aa4:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
  400aa6:	23ff      	movs	r3, #255	; 0xff
  400aa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
  400aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
  400ab0:	b9a5      	cbnz	r5, 400adc <xQueueGenericReset+0x88>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ab2:	6923      	ldr	r3, [r4, #16]
  400ab4:	b91b      	cbnz	r3, 400abe <xQueueGenericReset+0x6a>
        taskEXIT_CRITICAL();
  400ab6:	4b10      	ldr	r3, [pc, #64]	; (400af8 <xQueueGenericReset+0xa4>)
  400ab8:	4798      	blx	r3
    BaseType_t xReturn = pdPASS;
  400aba:	2001      	movs	r0, #1
  400abc:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400abe:	f104 0010 	add.w	r0, r4, #16
  400ac2:	4b0e      	ldr	r3, [pc, #56]	; (400afc <xQueueGenericReset+0xa8>)
  400ac4:	4798      	blx	r3
  400ac6:	2800      	cmp	r0, #0
  400ac8:	d0f5      	beq.n	400ab6 <xQueueGenericReset+0x62>
                        queueYIELD_IF_USING_PREEMPTION();
  400aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ace:	4b0c      	ldr	r3, [pc, #48]	; (400b00 <xQueueGenericReset+0xac>)
  400ad0:	601a      	str	r2, [r3, #0]
  400ad2:	f3bf 8f4f 	dsb	sy
  400ad6:	f3bf 8f6f 	isb	sy
  400ada:	e7ec      	b.n	400ab6 <xQueueGenericReset+0x62>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400adc:	f104 0010 	add.w	r0, r4, #16
  400ae0:	4d08      	ldr	r5, [pc, #32]	; (400b04 <xQueueGenericReset+0xb0>)
  400ae2:	47a8      	blx	r5
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400ae4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ae8:	47a8      	blx	r5
  400aea:	e7e4      	b.n	400ab6 <xQueueGenericReset+0x62>
  400aec:	00402d10 	.word	0x00402d10
  400af0:	00402921 	.word	0x00402921
  400af4:	004002f5 	.word	0x004002f5
  400af8:	0040033d 	.word	0x0040033d
  400afc:	00401a31 	.word	0x00401a31
  400b00:	e000ed04 	.word	0xe000ed04
  400b04:	00400195 	.word	0x00400195

00400b08 <xQueueGenericCreate>:
    {
  400b08:	b570      	push	{r4, r5, r6, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400b0a:	b308      	cbz	r0, 400b50 <xQueueGenericCreate+0x48>
  400b0c:	460d      	mov	r5, r1
  400b0e:	4606      	mov	r6, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400b10:	f04f 33ff 	mov.w	r3, #4294967295
  400b14:	fbb3 f3f0 	udiv	r3, r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
  400b18:	428b      	cmp	r3, r1
  400b1a:	d319      	bcc.n	400b50 <xQueueGenericCreate+0x48>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
  400b1c:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
  400b20:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
  400b24:	d814      	bhi.n	400b50 <xQueueGenericCreate+0x48>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400b26:	304c      	adds	r0, #76	; 0x4c
  400b28:	4b0d      	ldr	r3, [pc, #52]	; (400b60 <xQueueGenericCreate+0x58>)
  400b2a:	4798      	blx	r3
            if( pxNewQueue != NULL )
  400b2c:	4604      	mov	r4, r0
  400b2e:	b158      	cbz	r0, 400b48 <xQueueGenericCreate+0x40>
    if( uxItemSize == ( UBaseType_t ) 0 )
  400b30:	b165      	cbz	r5, 400b4c <xQueueGenericCreate+0x44>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400b32:	f100 034c 	add.w	r3, r0, #76	; 0x4c
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400b36:	6003      	str	r3, [r0, #0]
    pxNewQueue->uxLength = uxQueueLength;
  400b38:	63e6      	str	r6, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
  400b3a:	6425      	str	r5, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400b3c:	2101      	movs	r1, #1
  400b3e:	4620      	mov	r0, r4
  400b40:	4b08      	ldr	r3, [pc, #32]	; (400b64 <xQueueGenericCreate+0x5c>)
  400b42:	4798      	blx	r3
            pxNewQueue->pxQueueSetContainer = NULL;
  400b44:	2300      	movs	r3, #0
  400b46:	64a3      	str	r3, [r4, #72]	; 0x48
    }
  400b48:	4620      	mov	r0, r4
  400b4a:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400b4c:	6020      	str	r0, [r4, #0]
  400b4e:	e7f3      	b.n	400b38 <xQueueGenericCreate+0x30>
            configASSERT( pxNewQueue );
  400b50:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
  400b54:	4804      	ldr	r0, [pc, #16]	; (400b68 <xQueueGenericCreate+0x60>)
  400b56:	4b05      	ldr	r3, [pc, #20]	; (400b6c <xQueueGenericCreate+0x64>)
  400b58:	4798      	blx	r3
        Queue_t * pxNewQueue = NULL;
  400b5a:	2400      	movs	r4, #0
        return pxNewQueue;
  400b5c:	e7f4      	b.n	400b48 <xQueueGenericCreate+0x40>
  400b5e:	bf00      	nop
  400b60:	004005b5 	.word	0x004005b5
  400b64:	00400a55 	.word	0x00400a55
  400b68:	00402d10 	.word	0x00402d10
  400b6c:	00402921 	.word	0x00402921

00400b70 <xQueueReceive>:
{
  400b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400b74:	b084      	sub	sp, #16
  400b76:	4688      	mov	r8, r1
  400b78:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
  400b7a:	4604      	mov	r4, r0
  400b7c:	b198      	cbz	r0, 400ba6 <xQueueReceive+0x36>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b7e:	f1b8 0f00 	cmp.w	r8, #0
  400b82:	d016      	beq.n	400bb2 <xQueueReceive+0x42>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400b84:	4b4d      	ldr	r3, [pc, #308]	; (400cbc <xQueueReceive+0x14c>)
  400b86:	4798      	blx	r3
  400b88:	b930      	cbnz	r0, 400b98 <xQueueReceive+0x28>
  400b8a:	9b01      	ldr	r3, [sp, #4]
  400b8c:	b123      	cbz	r3, 400b98 <xQueueReceive+0x28>
  400b8e:	f240 515a 	movw	r1, #1370	; 0x55a
  400b92:	484b      	ldr	r0, [pc, #300]	; (400cc0 <xQueueReceive+0x150>)
  400b94:	4b4b      	ldr	r3, [pc, #300]	; (400cc4 <xQueueReceive+0x154>)
  400b96:	4798      	blx	r3
{
  400b98:	f04f 0a00 	mov.w	sl, #0
        taskENTER_CRITICAL();
  400b9c:	4d4a      	ldr	r5, [pc, #296]	; (400cc8 <xQueueReceive+0x158>)
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400b9e:	4e4b      	ldr	r6, [pc, #300]	; (400ccc <xQueueReceive+0x15c>)
                    portYIELD_WITHIN_API();
  400ba0:	f8df 9138 	ldr.w	r9, [pc, #312]	; 400cdc <xQueueReceive+0x16c>
  400ba4:	e044      	b.n	400c30 <xQueueReceive+0xc0>
    configASSERT( ( pxQueue ) );
  400ba6:	f240 5151 	movw	r1, #1361	; 0x551
  400baa:	4845      	ldr	r0, [pc, #276]	; (400cc0 <xQueueReceive+0x150>)
  400bac:	4b45      	ldr	r3, [pc, #276]	; (400cc4 <xQueueReceive+0x154>)
  400bae:	4798      	blx	r3
  400bb0:	e7e5      	b.n	400b7e <xQueueReceive+0xe>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400bb4:	2b00      	cmp	r3, #0
  400bb6:	d0e5      	beq.n	400b84 <xQueueReceive+0x14>
  400bb8:	f240 5155 	movw	r1, #1365	; 0x555
  400bbc:	4840      	ldr	r0, [pc, #256]	; (400cc0 <xQueueReceive+0x150>)
  400bbe:	4b41      	ldr	r3, [pc, #260]	; (400cc4 <xQueueReceive+0x154>)
  400bc0:	4798      	blx	r3
  400bc2:	e7df      	b.n	400b84 <xQueueReceive+0x14>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
  400bc4:	4641      	mov	r1, r8
  400bc6:	4620      	mov	r0, r4
  400bc8:	4b41      	ldr	r3, [pc, #260]	; (400cd0 <xQueueReceive+0x160>)
  400bca:	4798      	blx	r3
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  400bcc:	1e7b      	subs	r3, r7, #1
  400bce:	63a3      	str	r3, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400bd0:	6923      	ldr	r3, [r4, #16]
  400bd2:	b92b      	cbnz	r3, 400be0 <xQueueReceive+0x70>
                taskEXIT_CRITICAL();
  400bd4:	4b3f      	ldr	r3, [pc, #252]	; (400cd4 <xQueueReceive+0x164>)
  400bd6:	4798      	blx	r3
                return pdPASS;
  400bd8:	2001      	movs	r0, #1
}
  400bda:	b004      	add	sp, #16
  400bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400be0:	f104 0010 	add.w	r0, r4, #16
  400be4:	4b3c      	ldr	r3, [pc, #240]	; (400cd8 <xQueueReceive+0x168>)
  400be6:	4798      	blx	r3
  400be8:	2800      	cmp	r0, #0
  400bea:	d0f3      	beq.n	400bd4 <xQueueReceive+0x64>
                        queueYIELD_IF_USING_PREEMPTION();
  400bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bf0:	4b3a      	ldr	r3, [pc, #232]	; (400cdc <xQueueReceive+0x16c>)
  400bf2:	601a      	str	r2, [r3, #0]
  400bf4:	f3bf 8f4f 	dsb	sy
  400bf8:	f3bf 8f6f 	isb	sy
  400bfc:	e7ea      	b.n	400bd4 <xQueueReceive+0x64>
                    taskEXIT_CRITICAL();
  400bfe:	4b35      	ldr	r3, [pc, #212]	; (400cd4 <xQueueReceive+0x164>)
  400c00:	4798      	blx	r3
                    return errQUEUE_EMPTY;
  400c02:	2000      	movs	r0, #0
  400c04:	e7e9      	b.n	400bda <xQueueReceive+0x6a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
  400c06:	a802      	add	r0, sp, #8
  400c08:	47b0      	blx	r6
  400c0a:	e01b      	b.n	400c44 <xQueueReceive+0xd4>
                prvUnlockQueue( pxQueue );
  400c0c:	4620      	mov	r0, r4
  400c0e:	4b34      	ldr	r3, [pc, #208]	; (400ce0 <xQueueReceive+0x170>)
  400c10:	4798      	blx	r3
                ( void ) xTaskResumeAll();
  400c12:	4b34      	ldr	r3, [pc, #208]	; (400ce4 <xQueueReceive+0x174>)
  400c14:	4798      	blx	r3
  400c16:	e009      	b.n	400c2c <xQueueReceive+0xbc>
            prvUnlockQueue( pxQueue );
  400c18:	4620      	mov	r0, r4
  400c1a:	4b31      	ldr	r3, [pc, #196]	; (400ce0 <xQueueReceive+0x170>)
  400c1c:	4798      	blx	r3
            ( void ) xTaskResumeAll();
  400c1e:	4b31      	ldr	r3, [pc, #196]	; (400ce4 <xQueueReceive+0x174>)
  400c20:	4798      	blx	r3
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400c22:	4620      	mov	r0, r4
  400c24:	4b30      	ldr	r3, [pc, #192]	; (400ce8 <xQueueReceive+0x178>)
  400c26:	4798      	blx	r3
  400c28:	2800      	cmp	r0, #0
  400c2a:	d144      	bne.n	400cb6 <xQueueReceive+0x146>
  400c2c:	f04f 0a01 	mov.w	sl, #1
        taskENTER_CRITICAL();
  400c30:	47a8      	blx	r5
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400c32:	6ba7      	ldr	r7, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400c34:	2f00      	cmp	r7, #0
  400c36:	d1c5      	bne.n	400bc4 <xQueueReceive+0x54>
                if( xTicksToWait == ( TickType_t ) 0 )
  400c38:	9b01      	ldr	r3, [sp, #4]
  400c3a:	2b00      	cmp	r3, #0
  400c3c:	d0df      	beq.n	400bfe <xQueueReceive+0x8e>
                else if( xEntryTimeSet == pdFALSE )
  400c3e:	f1ba 0f00 	cmp.w	sl, #0
  400c42:	d0e0      	beq.n	400c06 <xQueueReceive+0x96>
        taskEXIT_CRITICAL();
  400c44:	4b23      	ldr	r3, [pc, #140]	; (400cd4 <xQueueReceive+0x164>)
  400c46:	4798      	blx	r3
        vTaskSuspendAll();
  400c48:	4b28      	ldr	r3, [pc, #160]	; (400cec <xQueueReceive+0x17c>)
  400c4a:	4798      	blx	r3
        prvLockQueue( pxQueue );
  400c4c:	47a8      	blx	r5
  400c4e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400c52:	b25b      	sxtb	r3, r3
  400c54:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c58:	bf04      	itt	eq
  400c5a:	2300      	moveq	r3, #0
  400c5c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400c60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400c64:	b25b      	sxtb	r3, r3
  400c66:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c6a:	bf04      	itt	eq
  400c6c:	2300      	moveq	r3, #0
  400c6e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400c72:	4b18      	ldr	r3, [pc, #96]	; (400cd4 <xQueueReceive+0x164>)
  400c74:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400c76:	a901      	add	r1, sp, #4
  400c78:	a802      	add	r0, sp, #8
  400c7a:	4b1d      	ldr	r3, [pc, #116]	; (400cf0 <xQueueReceive+0x180>)
  400c7c:	4798      	blx	r3
  400c7e:	2800      	cmp	r0, #0
  400c80:	d1ca      	bne.n	400c18 <xQueueReceive+0xa8>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400c82:	4620      	mov	r0, r4
  400c84:	4b18      	ldr	r3, [pc, #96]	; (400ce8 <xQueueReceive+0x178>)
  400c86:	4798      	blx	r3
  400c88:	2800      	cmp	r0, #0
  400c8a:	d0bf      	beq.n	400c0c <xQueueReceive+0x9c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400c8c:	9901      	ldr	r1, [sp, #4]
  400c8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c92:	4b18      	ldr	r3, [pc, #96]	; (400cf4 <xQueueReceive+0x184>)
  400c94:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
  400c96:	4620      	mov	r0, r4
  400c98:	4b11      	ldr	r3, [pc, #68]	; (400ce0 <xQueueReceive+0x170>)
  400c9a:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
  400c9c:	4b11      	ldr	r3, [pc, #68]	; (400ce4 <xQueueReceive+0x174>)
  400c9e:	4798      	blx	r3
  400ca0:	2800      	cmp	r0, #0
  400ca2:	d1c3      	bne.n	400c2c <xQueueReceive+0xbc>
                    portYIELD_WITHIN_API();
  400ca4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400ca8:	f8c9 3000 	str.w	r3, [r9]
  400cac:	f3bf 8f4f 	dsb	sy
  400cb0:	f3bf 8f6f 	isb	sy
  400cb4:	e7ba      	b.n	400c2c <xQueueReceive+0xbc>
                return errQUEUE_EMPTY;
  400cb6:	2000      	movs	r0, #0
  400cb8:	e78f      	b.n	400bda <xQueueReceive+0x6a>
  400cba:	bf00      	nop
  400cbc:	00401bd5 	.word	0x00401bd5
  400cc0:	00402d10 	.word	0x00402d10
  400cc4:	00402921 	.word	0x00402921
  400cc8:	004002f5 	.word	0x004002f5
  400ccc:	00401b25 	.word	0x00401b25
  400cd0:	00400985 	.word	0x00400985
  400cd4:	0040033d 	.word	0x0040033d
  400cd8:	00401a31 	.word	0x00401a31
  400cdc:	e000ed04 	.word	0xe000ed04
  400ce0:	004009ad 	.word	0x004009ad
  400ce4:	004015c5 	.word	0x004015c5
  400ce8:	00400851 	.word	0x00400851
  400cec:	004013ed 	.word	0x004013ed
  400cf0:	00401b3d 	.word	0x00401b3d
  400cf4:	00401991 	.word	0x00401991

00400cf8 <vQueueAddToRegistry>:
    {
  400cf8:	b570      	push	{r4, r5, r6, lr}
  400cfa:	460d      	mov	r5, r1
        configASSERT( xQueue );
  400cfc:	4604      	mov	r4, r0
  400cfe:	b1b8      	cbz	r0, 400d30 <vQueueAddToRegistry+0x38>
        if( pcQueueName != NULL )
  400d00:	b1ad      	cbz	r5, 400d2e <vQueueAddToRegistry+0x36>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  400d02:	4b12      	ldr	r3, [pc, #72]	; (400d4c <vQueueAddToRegistry+0x54>)
  400d04:	685b      	ldr	r3, [r3, #4]
  400d06:	429c      	cmp	r4, r3
  400d08:	d018      	beq.n	400d3c <vQueueAddToRegistry+0x44>
  400d0a:	4a10      	ldr	r2, [pc, #64]	; (400d4c <vQueueAddToRegistry+0x54>)
  400d0c:	2100      	movs	r1, #0
  400d0e:	460b      	mov	r3, r1
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  400d10:	4616      	mov	r6, r2
  400d12:	b1a9      	cbz	r1, 400d40 <vQueueAddToRegistry+0x48>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400d14:	3301      	adds	r3, #1
  400d16:	2b08      	cmp	r3, #8
  400d18:	d006      	beq.n	400d28 <vQueueAddToRegistry+0x30>
  400d1a:	3208      	adds	r2, #8
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  400d1c:	6850      	ldr	r0, [r2, #4]
  400d1e:	4284      	cmp	r4, r0
  400d20:	d1f7      	bne.n	400d12 <vQueueAddToRegistry+0x1a>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  400d22:	490a      	ldr	r1, [pc, #40]	; (400d4c <vQueueAddToRegistry+0x54>)
  400d24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
        if( pxEntryToWrite != NULL )
  400d28:	b109      	cbz	r1, 400d2e <vQueueAddToRegistry+0x36>
            pxEntryToWrite->pcQueueName = pcQueueName;
  400d2a:	600d      	str	r5, [r1, #0]
            pxEntryToWrite->xHandle = xQueue;
  400d2c:	604c      	str	r4, [r1, #4]
  400d2e:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( xQueue );
  400d30:	f640 21c8 	movw	r1, #2760	; 0xac8
  400d34:	4806      	ldr	r0, [pc, #24]	; (400d50 <vQueueAddToRegistry+0x58>)
  400d36:	4b07      	ldr	r3, [pc, #28]	; (400d54 <vQueueAddToRegistry+0x5c>)
  400d38:	4798      	blx	r3
  400d3a:	e7e1      	b.n	400d00 <vQueueAddToRegistry+0x8>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
  400d3c:	2300      	movs	r3, #0
  400d3e:	e7f0      	b.n	400d22 <vQueueAddToRegistry+0x2a>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
  400d40:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
  400d44:	2800      	cmp	r0, #0
  400d46:	bf08      	it	eq
  400d48:	4611      	moveq	r1, r2
  400d4a:	e7e3      	b.n	400d14 <vQueueAddToRegistry+0x1c>
  400d4c:	20000620 	.word	0x20000620
  400d50:	00402d10 	.word	0x00402d10
  400d54:	00402921 	.word	0x00402921

00400d58 <vQueueWaitForMessageRestricted>:
    {
  400d58:	b570      	push	{r4, r5, r6, lr}
  400d5a:	4604      	mov	r4, r0
  400d5c:	460d      	mov	r5, r1
  400d5e:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
  400d60:	4b11      	ldr	r3, [pc, #68]	; (400da8 <vQueueWaitForMessageRestricted+0x50>)
  400d62:	4798      	blx	r3
  400d64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400d68:	b25b      	sxtb	r3, r3
  400d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d6e:	bf04      	itt	eq
  400d70:	2300      	moveq	r3, #0
  400d72:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400d76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400d7a:	b25b      	sxtb	r3, r3
  400d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d80:	bf04      	itt	eq
  400d82:	2300      	moveq	r3, #0
  400d84:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400d88:	4b08      	ldr	r3, [pc, #32]	; (400dac <vQueueWaitForMessageRestricted+0x54>)
  400d8a:	4798      	blx	r3
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  400d8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400d8e:	b11b      	cbz	r3, 400d98 <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
  400d90:	4620      	mov	r0, r4
  400d92:	4b07      	ldr	r3, [pc, #28]	; (400db0 <vQueueWaitForMessageRestricted+0x58>)
  400d94:	4798      	blx	r3
  400d96:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  400d98:	4632      	mov	r2, r6
  400d9a:	4629      	mov	r1, r5
  400d9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400da0:	4b04      	ldr	r3, [pc, #16]	; (400db4 <vQueueWaitForMessageRestricted+0x5c>)
  400da2:	4798      	blx	r3
  400da4:	e7f4      	b.n	400d90 <vQueueWaitForMessageRestricted+0x38>
  400da6:	bf00      	nop
  400da8:	004002f5 	.word	0x004002f5
  400dac:	0040033d 	.word	0x0040033d
  400db0:	004009ad 	.word	0x004009ad
  400db4:	004019d1 	.word	0x004019d1

00400db8 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400db8:	4b07      	ldr	r3, [pc, #28]	; (400dd8 <prvResetNextTaskUnblockTime+0x20>)
  400dba:	681b      	ldr	r3, [r3, #0]
  400dbc:	681b      	ldr	r3, [r3, #0]
  400dbe:	b133      	cbz	r3, 400dce <prvResetNextTaskUnblockTime+0x16>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  400dc0:	4b05      	ldr	r3, [pc, #20]	; (400dd8 <prvResetNextTaskUnblockTime+0x20>)
  400dc2:	681b      	ldr	r3, [r3, #0]
  400dc4:	68db      	ldr	r3, [r3, #12]
  400dc6:	681a      	ldr	r2, [r3, #0]
  400dc8:	4b04      	ldr	r3, [pc, #16]	; (400ddc <prvResetNextTaskUnblockTime+0x24>)
  400dca:	601a      	str	r2, [r3, #0]
  400dcc:	4770      	bx	lr
        xNextTaskUnblockTime = portMAX_DELAY;
  400dce:	f04f 32ff 	mov.w	r2, #4294967295
  400dd2:	4b02      	ldr	r3, [pc, #8]	; (400ddc <prvResetNextTaskUnblockTime+0x24>)
  400dd4:	601a      	str	r2, [r3, #0]
  400dd6:	4770      	bx	lr
  400dd8:	20000494 	.word	0x20000494
  400ddc:	2000057c 	.word	0x2000057c

00400de0 <prvTaskIsTaskSuspended>:
    {
  400de0:	b510      	push	{r4, lr}
        configASSERT( xTask );
  400de2:	4604      	mov	r4, r0
  400de4:	b128      	cbz	r0, 400df2 <prvTaskIsTaskSuspended+0x12>
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  400de6:	6962      	ldr	r2, [r4, #20]
  400de8:	4b0a      	ldr	r3, [pc, #40]	; (400e14 <prvTaskIsTaskSuspended+0x34>)
  400dea:	429a      	cmp	r2, r3
  400dec:	d007      	beq.n	400dfe <prvTaskIsTaskSuspended+0x1e>
        BaseType_t xReturn = pdFALSE;
  400dee:	2000      	movs	r0, #0
  400df0:	bd10      	pop	{r4, pc}
        configASSERT( xTask );
  400df2:	f240 7127 	movw	r1, #1831	; 0x727
  400df6:	4808      	ldr	r0, [pc, #32]	; (400e18 <prvTaskIsTaskSuspended+0x38>)
  400df8:	4b08      	ldr	r3, [pc, #32]	; (400e1c <prvTaskIsTaskSuspended+0x3c>)
  400dfa:	4798      	blx	r3
  400dfc:	e7f3      	b.n	400de6 <prvTaskIsTaskSuspended+0x6>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  400dfe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  400e00:	4b07      	ldr	r3, [pc, #28]	; (400e20 <prvTaskIsTaskSuspended+0x40>)
  400e02:	4298      	cmp	r0, r3
  400e04:	d003      	beq.n	400e0e <prvTaskIsTaskSuspended+0x2e>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
  400e06:	fab0 f080 	clz	r0, r0
  400e0a:	0940      	lsrs	r0, r0, #5
  400e0c:	bd10      	pop	{r4, pc}
        BaseType_t xReturn = pdFALSE;
  400e0e:	2000      	movs	r0, #0
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  400e10:	bd10      	pop	{r4, pc}
  400e12:	bf00      	nop
  400e14:	200005a0 	.word	0x200005a0
  400e18:	00402d28 	.word	0x00402d28
  400e1c:	00402921 	.word	0x00402921
  400e20:	20000588 	.word	0x20000588

00400e24 <prvIdleTask>:
{
  400e24:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  400e26:	4d16      	ldr	r5, [pc, #88]	; (400e80 <prvIdleTask+0x5c>)
                taskENTER_CRITICAL();
  400e28:	f8df 806c 	ldr.w	r8, [pc, #108]	; 400e98 <prvIdleTask+0x74>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  400e2c:	4f15      	ldr	r7, [pc, #84]	; (400e84 <prvIdleTask+0x60>)
                    taskYIELD();
  400e2e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 400e9c <prvIdleTask+0x78>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  400e32:	682b      	ldr	r3, [r5, #0]
  400e34:	b1bb      	cbz	r3, 400e66 <prvIdleTask+0x42>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  400e36:	4e14      	ldr	r6, [pc, #80]	; (400e88 <prvIdleTask+0x64>)
                taskENTER_CRITICAL();
  400e38:	47c0      	blx	r8
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  400e3a:	68fb      	ldr	r3, [r7, #12]
  400e3c:	68dc      	ldr	r4, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  400e3e:	1d20      	adds	r0, r4, #4
  400e40:	47b0      	blx	r6
                    --uxCurrentNumberOfTasks;
  400e42:	4a12      	ldr	r2, [pc, #72]	; (400e8c <prvIdleTask+0x68>)
  400e44:	6813      	ldr	r3, [r2, #0]
  400e46:	3b01      	subs	r3, #1
  400e48:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
  400e4a:	682b      	ldr	r3, [r5, #0]
  400e4c:	3b01      	subs	r3, #1
  400e4e:	602b      	str	r3, [r5, #0]
                taskEXIT_CRITICAL();
  400e50:	4b0f      	ldr	r3, [pc, #60]	; (400e90 <prvIdleTask+0x6c>)
  400e52:	4798      	blx	r3
                vPortFreeStack( pxTCB->pxStack );
  400e54:	6b20      	ldr	r0, [r4, #48]	; 0x30
  400e56:	f8df a048 	ldr.w	sl, [pc, #72]	; 400ea0 <prvIdleTask+0x7c>
  400e5a:	47d0      	blx	sl
                vPortFree( pxTCB );
  400e5c:	4620      	mov	r0, r4
  400e5e:	47d0      	blx	sl
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  400e60:	682b      	ldr	r3, [r5, #0]
  400e62:	2b00      	cmp	r3, #0
  400e64:	d1e8      	bne.n	400e38 <prvIdleTask+0x14>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  400e66:	4b0b      	ldr	r3, [pc, #44]	; (400e94 <prvIdleTask+0x70>)
  400e68:	681b      	ldr	r3, [r3, #0]
  400e6a:	2b01      	cmp	r3, #1
  400e6c:	d9e1      	bls.n	400e32 <prvIdleTask+0xe>
                    taskYIELD();
  400e6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400e72:	f8c9 3000 	str.w	r3, [r9]
  400e76:	f3bf 8f4f 	dsb	sy
  400e7a:	f3bf 8f6f 	isb	sy
  400e7e:	e7d8      	b.n	400e32 <prvIdleTask+0xe>
  400e80:	20000540 	.word	0x20000540
  400e84:	200005b4 	.word	0x200005b4
  400e88:	004001fd 	.word	0x004001fd
  400e8c:	2000053c 	.word	0x2000053c
  400e90:	0040033d 	.word	0x0040033d
  400e94:	2000049c 	.word	0x2000049c
  400e98:	004002f5 	.word	0x004002f5
  400e9c:	e000ed04 	.word	0xe000ed04
  400ea0:	004006a9 	.word	0x004006a9

00400ea4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
  400ea4:	b570      	push	{r4, r5, r6, lr}
  400ea6:	4604      	mov	r4, r0
  400ea8:	460e      	mov	r6, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
  400eaa:	4b24      	ldr	r3, [pc, #144]	; (400f3c <prvAddCurrentTaskToDelayedList+0x98>)
  400eac:	681d      	ldr	r5, [r3, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  400eae:	4b24      	ldr	r3, [pc, #144]	; (400f40 <prvAddCurrentTaskToDelayedList+0x9c>)
  400eb0:	6818      	ldr	r0, [r3, #0]
  400eb2:	3004      	adds	r0, #4
  400eb4:	4b23      	ldr	r3, [pc, #140]	; (400f44 <prvAddCurrentTaskToDelayedList+0xa0>)
  400eb6:	4798      	blx	r3
  400eb8:	b948      	cbnz	r0, 400ece <prvAddCurrentTaskToDelayedList+0x2a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  400eba:	4b21      	ldr	r3, [pc, #132]	; (400f40 <prvAddCurrentTaskToDelayedList+0x9c>)
  400ebc:	681a      	ldr	r2, [r3, #0]
  400ebe:	4922      	ldr	r1, [pc, #136]	; (400f48 <prvAddCurrentTaskToDelayedList+0xa4>)
  400ec0:	680b      	ldr	r3, [r1, #0]
  400ec2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  400ec4:	2201      	movs	r2, #1
  400ec6:	4082      	lsls	r2, r0
  400ec8:	ea23 0302 	bic.w	r3, r3, r2
  400ecc:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  400ece:	f1b4 3fff 	cmp.w	r4, #4294967295
  400ed2:	d013      	beq.n	400efc <prvAddCurrentTaskToDelayedList+0x58>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
  400ed4:	442c      	add	r4, r5

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  400ed6:	4b1a      	ldr	r3, [pc, #104]	; (400f40 <prvAddCurrentTaskToDelayedList+0x9c>)
  400ed8:	681b      	ldr	r3, [r3, #0]
  400eda:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
  400edc:	42a5      	cmp	r5, r4
  400ede:	d824      	bhi.n	400f2a <prvAddCurrentTaskToDelayedList+0x86>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  400ee0:	4b1a      	ldr	r3, [pc, #104]	; (400f4c <prvAddCurrentTaskToDelayedList+0xa8>)
  400ee2:	6818      	ldr	r0, [r3, #0]
  400ee4:	4b16      	ldr	r3, [pc, #88]	; (400f40 <prvAddCurrentTaskToDelayedList+0x9c>)
  400ee6:	6819      	ldr	r1, [r3, #0]
  400ee8:	3104      	adds	r1, #4
  400eea:	4b19      	ldr	r3, [pc, #100]	; (400f50 <prvAddCurrentTaskToDelayedList+0xac>)
  400eec:	4798      	blx	r3

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
  400eee:	4b19      	ldr	r3, [pc, #100]	; (400f54 <prvAddCurrentTaskToDelayedList+0xb0>)
  400ef0:	681b      	ldr	r3, [r3, #0]
  400ef2:	429c      	cmp	r4, r3
                    {
                        xNextTaskUnblockTime = xTimeToWake;
  400ef4:	bf3c      	itt	cc
  400ef6:	4b17      	ldrcc	r3, [pc, #92]	; (400f54 <prvAddCurrentTaskToDelayedList+0xb0>)
  400ef8:	601c      	strcc	r4, [r3, #0]
  400efa:	bd70      	pop	{r4, r5, r6, pc}
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  400efc:	2e00      	cmp	r6, #0
  400efe:	d0e9      	beq.n	400ed4 <prvAddCurrentTaskToDelayedList+0x30>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  400f00:	4a15      	ldr	r2, [pc, #84]	; (400f58 <prvAddCurrentTaskToDelayedList+0xb4>)
  400f02:	6851      	ldr	r1, [r2, #4]
  400f04:	4b0e      	ldr	r3, [pc, #56]	; (400f40 <prvAddCurrentTaskToDelayedList+0x9c>)
  400f06:	6818      	ldr	r0, [r3, #0]
  400f08:	6081      	str	r1, [r0, #8]
  400f0a:	6818      	ldr	r0, [r3, #0]
  400f0c:	688c      	ldr	r4, [r1, #8]
  400f0e:	60c4      	str	r4, [r0, #12]
  400f10:	688c      	ldr	r4, [r1, #8]
  400f12:	6818      	ldr	r0, [r3, #0]
  400f14:	3004      	adds	r0, #4
  400f16:	6060      	str	r0, [r4, #4]
  400f18:	6818      	ldr	r0, [r3, #0]
  400f1a:	3004      	adds	r0, #4
  400f1c:	6088      	str	r0, [r1, #8]
  400f1e:	681b      	ldr	r3, [r3, #0]
  400f20:	615a      	str	r2, [r3, #20]
  400f22:	6813      	ldr	r3, [r2, #0]
  400f24:	3301      	adds	r3, #1
  400f26:	6013      	str	r3, [r2, #0]
  400f28:	bd70      	pop	{r4, r5, r6, pc}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  400f2a:	4b0c      	ldr	r3, [pc, #48]	; (400f5c <prvAddCurrentTaskToDelayedList+0xb8>)
  400f2c:	6818      	ldr	r0, [r3, #0]
  400f2e:	4b04      	ldr	r3, [pc, #16]	; (400f40 <prvAddCurrentTaskToDelayedList+0x9c>)
  400f30:	6819      	ldr	r1, [r3, #0]
  400f32:	3104      	adds	r1, #4
  400f34:	4b06      	ldr	r3, [pc, #24]	; (400f50 <prvAddCurrentTaskToDelayedList+0xac>)
  400f36:	4798      	blx	r3
  400f38:	bd70      	pop	{r4, r5, r6, pc}
  400f3a:	bf00      	nop
  400f3c:	200005c8 	.word	0x200005c8
  400f40:	20000490 	.word	0x20000490
  400f44:	004001fd 	.word	0x004001fd
  400f48:	2000054c 	.word	0x2000054c
  400f4c:	20000494 	.word	0x20000494
  400f50:	004001c9 	.word	0x004001c9
  400f54:	2000057c 	.word	0x2000057c
  400f58:	200005a0 	.word	0x200005a0
  400f5c:	20000498 	.word	0x20000498

00400f60 <xTaskCreate>:
    {
  400f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f64:	b083      	sub	sp, #12
  400f66:	4683      	mov	fp, r0
  400f68:	460e      	mov	r6, r1
  400f6a:	9301      	str	r3, [sp, #4]
  400f6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  400f6e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  400f72:	0097      	lsls	r7, r2, #2
  400f74:	4638      	mov	r0, r7
  400f76:	4b6e      	ldr	r3, [pc, #440]	; (401130 <xTaskCreate+0x1d0>)
  400f78:	4798      	blx	r3
                if( pxStack != NULL )
  400f7a:	2800      	cmp	r0, #0
  400f7c:	f000 80a5 	beq.w	4010ca <xTaskCreate+0x16a>
  400f80:	4680      	mov	r8, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  400f82:	2064      	movs	r0, #100	; 0x64
  400f84:	4b6a      	ldr	r3, [pc, #424]	; (401130 <xTaskCreate+0x1d0>)
  400f86:	4798      	blx	r3
                    if( pxNewTCB != NULL )
  400f88:	4604      	mov	r4, r0
  400f8a:	2800      	cmp	r0, #0
  400f8c:	f000 809a 	beq.w	4010c4 <xTaskCreate+0x164>
                        pxNewTCB->pxStack = pxStack;
  400f90:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  400f94:	463a      	mov	r2, r7
  400f96:	21a5      	movs	r1, #165	; 0xa5
  400f98:	4640      	mov	r0, r8
  400f9a:	4b66      	ldr	r3, [pc, #408]	; (401134 <xTaskCreate+0x1d4>)
  400f9c:	4798      	blx	r3
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  400f9e:	3f04      	subs	r7, #4
  400fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400fa2:	441f      	add	r7, r3
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  400fa4:	f027 0707 	bic.w	r7, r7, #7
    if( pcName != NULL )
  400fa8:	2e00      	cmp	r6, #0
  400faa:	f000 8091 	beq.w	4010d0 <xTaskCreate+0x170>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  400fae:	7833      	ldrb	r3, [r6, #0]
  400fb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            if( pcName[ x ] == ( char ) 0x00 )
  400fb4:	7833      	ldrb	r3, [r6, #0]
  400fb6:	b15b      	cbz	r3, 400fd0 <xTaskCreate+0x70>
  400fb8:	4633      	mov	r3, r6
  400fba:	f104 0234 	add.w	r2, r4, #52	; 0x34
  400fbe:	3613      	adds	r6, #19
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  400fc0:	7859      	ldrb	r1, [r3, #1]
  400fc2:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
  400fc6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  400fca:	b109      	cbz	r1, 400fd0 <xTaskCreate+0x70>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  400fcc:	42b3      	cmp	r3, r6
  400fce:	d1f7      	bne.n	400fc0 <xTaskCreate+0x60>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  400fd0:	2300      	movs	r3, #0
  400fd2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    configASSERT( uxPriority < configMAX_PRIORITIES );
  400fd6:	2d07      	cmp	r5, #7
  400fd8:	d87e      	bhi.n	4010d8 <xTaskCreate+0x178>
  400fda:	2d07      	cmp	r5, #7
  400fdc:	bf28      	it	cs
  400fde:	2507      	movcs	r5, #7
    pxNewTCB->uxPriority = uxPriority;
  400fe0:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
  400fe2:	64a5      	str	r5, [r4, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
  400fe4:	2600      	movs	r6, #0
  400fe6:	64e6      	str	r6, [r4, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  400fe8:	f104 0804 	add.w	r8, r4, #4
  400fec:	4640      	mov	r0, r8
  400fee:	f8df 919c 	ldr.w	r9, [pc, #412]	; 40118c <xTaskCreate+0x22c>
  400ff2:	47c8      	blx	r9
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  400ff4:	f104 0018 	add.w	r0, r4, #24
  400ff8:	47c8      	blx	r9
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  400ffa:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400ffc:	f1c5 0508 	rsb	r5, r5, #8
  401000:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401002:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
  401004:	6526      	str	r6, [r4, #80]	; 0x50
  401006:	6566      	str	r6, [r4, #84]	; 0x54
  401008:	65a6      	str	r6, [r4, #88]	; 0x58
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
  40100a:	65e6      	str	r6, [r4, #92]	; 0x5c
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
  40100c:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401010:	9a01      	ldr	r2, [sp, #4]
  401012:	4659      	mov	r1, fp
  401014:	4638      	mov	r0, r7
  401016:	4b48      	ldr	r3, [pc, #288]	; (401138 <xTaskCreate+0x1d8>)
  401018:	4798      	blx	r3
  40101a:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
  40101c:	f1ba 0f00 	cmp.w	sl, #0
  401020:	d001      	beq.n	401026 <xTaskCreate+0xc6>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401022:	f8ca 4000 	str.w	r4, [sl]
    taskENTER_CRITICAL();
  401026:	4b45      	ldr	r3, [pc, #276]	; (40113c <xTaskCreate+0x1dc>)
  401028:	4798      	blx	r3
        uxCurrentNumberOfTasks++;
  40102a:	4a45      	ldr	r2, [pc, #276]	; (401140 <xTaskCreate+0x1e0>)
  40102c:	6813      	ldr	r3, [r2, #0]
  40102e:	3301      	adds	r3, #1
  401030:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
  401032:	4b44      	ldr	r3, [pc, #272]	; (401144 <xTaskCreate+0x1e4>)
  401034:	681b      	ldr	r3, [r3, #0]
  401036:	2b00      	cmp	r3, #0
  401038:	d054      	beq.n	4010e4 <xTaskCreate+0x184>
            if( xSchedulerRunning == pdFALSE )
  40103a:	4b43      	ldr	r3, [pc, #268]	; (401148 <xTaskCreate+0x1e8>)
  40103c:	681b      	ldr	r3, [r3, #0]
  40103e:	b93b      	cbnz	r3, 401050 <xTaskCreate+0xf0>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401040:	4b40      	ldr	r3, [pc, #256]	; (401144 <xTaskCreate+0x1e4>)
  401042:	681b      	ldr	r3, [r3, #0]
  401044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401046:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401048:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
  40104a:	bf9c      	itt	ls
  40104c:	4b3d      	ldrls	r3, [pc, #244]	; (401144 <xTaskCreate+0x1e4>)
  40104e:	601c      	strls	r4, [r3, #0]
        uxTaskNumber++;
  401050:	4a3e      	ldr	r2, [pc, #248]	; (40114c <xTaskCreate+0x1ec>)
  401052:	6813      	ldr	r3, [r2, #0]
  401054:	3301      	adds	r3, #1
  401056:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
  401058:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40105a:	493d      	ldr	r1, [pc, #244]	; (401150 <xTaskCreate+0x1f0>)
  40105c:	6808      	ldr	r0, [r1, #0]
  40105e:	2201      	movs	r2, #1
  401060:	409a      	lsls	r2, r3
  401062:	4302      	orrs	r2, r0
  401064:	600a      	str	r2, [r1, #0]
  401066:	4a3b      	ldr	r2, [pc, #236]	; (401154 <xTaskCreate+0x1f4>)
  401068:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40106c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401070:	685b      	ldr	r3, [r3, #4]
  401072:	60a3      	str	r3, [r4, #8]
  401074:	6899      	ldr	r1, [r3, #8]
  401076:	60e1      	str	r1, [r4, #12]
  401078:	6899      	ldr	r1, [r3, #8]
  40107a:	f8c1 8004 	str.w	r8, [r1, #4]
  40107e:	f8c3 8008 	str.w	r8, [r3, #8]
  401082:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401084:	0083      	lsls	r3, r0, #2
  401086:	1819      	adds	r1, r3, r0
  401088:	0089      	lsls	r1, r1, #2
  40108a:	1855      	adds	r5, r2, r1
  40108c:	6165      	str	r5, [r4, #20]
  40108e:	5851      	ldr	r1, [r2, r1]
  401090:	3101      	adds	r1, #1
  401092:	4403      	add	r3, r0
  401094:	009b      	lsls	r3, r3, #2
  401096:	50d1      	str	r1, [r2, r3]
    taskEXIT_CRITICAL();
  401098:	4b2f      	ldr	r3, [pc, #188]	; (401158 <xTaskCreate+0x1f8>)
  40109a:	4798      	blx	r3
    if( xSchedulerRunning != pdFALSE )
  40109c:	4b2a      	ldr	r3, [pc, #168]	; (401148 <xTaskCreate+0x1e8>)
  40109e:	681b      	ldr	r3, [r3, #0]
  4010a0:	2b00      	cmp	r3, #0
  4010a2:	d03f      	beq.n	401124 <xTaskCreate+0x1c4>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4010a4:	4b27      	ldr	r3, [pc, #156]	; (401144 <xTaskCreate+0x1e4>)
  4010a6:	681b      	ldr	r3, [r3, #0]
  4010a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4010aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4010ac:	429a      	cmp	r2, r3
  4010ae:	d23d      	bcs.n	40112c <xTaskCreate+0x1cc>
            taskYIELD_IF_USING_PREEMPTION();
  4010b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010b4:	4b29      	ldr	r3, [pc, #164]	; (40115c <xTaskCreate+0x1fc>)
  4010b6:	601a      	str	r2, [r3, #0]
  4010b8:	f3bf 8f4f 	dsb	sy
  4010bc:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
  4010c0:	2001      	movs	r0, #1
  4010c2:	e030      	b.n	401126 <xTaskCreate+0x1c6>
                        vPortFreeStack( pxStack );
  4010c4:	4640      	mov	r0, r8
  4010c6:	4b26      	ldr	r3, [pc, #152]	; (401160 <xTaskCreate+0x200>)
  4010c8:	4798      	blx	r3
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4010ca:	f04f 30ff 	mov.w	r0, #4294967295
  4010ce:	e02a      	b.n	401126 <xTaskCreate+0x1c6>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
  4010d0:	2300      	movs	r3, #0
  4010d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  4010d6:	e77e      	b.n	400fd6 <xTaskCreate+0x76>
    configASSERT( uxPriority < configMAX_PRIORITIES );
  4010d8:	f240 3197 	movw	r1, #919	; 0x397
  4010dc:	4821      	ldr	r0, [pc, #132]	; (401164 <xTaskCreate+0x204>)
  4010de:	4b22      	ldr	r3, [pc, #136]	; (401168 <xTaskCreate+0x208>)
  4010e0:	4798      	blx	r3
  4010e2:	e77a      	b.n	400fda <xTaskCreate+0x7a>
            pxCurrentTCB = pxNewTCB;
  4010e4:	4b17      	ldr	r3, [pc, #92]	; (401144 <xTaskCreate+0x1e4>)
  4010e6:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4010e8:	6813      	ldr	r3, [r2, #0]
  4010ea:	2b01      	cmp	r3, #1
  4010ec:	d1b0      	bne.n	401050 <xTaskCreate+0xf0>
  4010ee:	4d19      	ldr	r5, [pc, #100]	; (401154 <xTaskCreate+0x1f4>)
  4010f0:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4010f4:	4e1d      	ldr	r6, [pc, #116]	; (40116c <xTaskCreate+0x20c>)
  4010f6:	4628      	mov	r0, r5
  4010f8:	47b0      	blx	r6
  4010fa:	3514      	adds	r5, #20
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4010fc:	42af      	cmp	r7, r5
  4010fe:	d1fa      	bne.n	4010f6 <xTaskCreate+0x196>
    vListInitialise( &xDelayedTaskList1 );
  401100:	4f1b      	ldr	r7, [pc, #108]	; (401170 <xTaskCreate+0x210>)
  401102:	4638      	mov	r0, r7
  401104:	4d19      	ldr	r5, [pc, #100]	; (40116c <xTaskCreate+0x20c>)
  401106:	47a8      	blx	r5
    vListInitialise( &xDelayedTaskList2 );
  401108:	4e1a      	ldr	r6, [pc, #104]	; (401174 <xTaskCreate+0x214>)
  40110a:	4630      	mov	r0, r6
  40110c:	47a8      	blx	r5
    vListInitialise( &xPendingReadyList );
  40110e:	481a      	ldr	r0, [pc, #104]	; (401178 <xTaskCreate+0x218>)
  401110:	47a8      	blx	r5
            vListInitialise( &xTasksWaitingTermination );
  401112:	481a      	ldr	r0, [pc, #104]	; (40117c <xTaskCreate+0x21c>)
  401114:	47a8      	blx	r5
            vListInitialise( &xSuspendedTaskList );
  401116:	481a      	ldr	r0, [pc, #104]	; (401180 <xTaskCreate+0x220>)
  401118:	47a8      	blx	r5
    pxDelayedTaskList = &xDelayedTaskList1;
  40111a:	4b1a      	ldr	r3, [pc, #104]	; (401184 <xTaskCreate+0x224>)
  40111c:	601f      	str	r7, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40111e:	4b1a      	ldr	r3, [pc, #104]	; (401188 <xTaskCreate+0x228>)
  401120:	601e      	str	r6, [r3, #0]
  401122:	e795      	b.n	401050 <xTaskCreate+0xf0>
            xReturn = pdPASS;
  401124:	2001      	movs	r0, #1
    }
  401126:	b003      	add	sp, #12
  401128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            xReturn = pdPASS;
  40112c:	2001      	movs	r0, #1
        return xReturn;
  40112e:	e7fa      	b.n	401126 <xTaskCreate+0x1c6>
  401130:	004005b5 	.word	0x004005b5
  401134:	00402af9 	.word	0x00402af9
  401138:	004002a5 	.word	0x004002a5
  40113c:	004002f5 	.word	0x004002f5
  401140:	2000053c 	.word	0x2000053c
  401144:	20000490 	.word	0x20000490
  401148:	2000059c 	.word	0x2000059c
  40114c:	20000548 	.word	0x20000548
  401150:	2000054c 	.word	0x2000054c
  401154:	2000049c 	.word	0x2000049c
  401158:	0040033d 	.word	0x0040033d
  40115c:	e000ed04 	.word	0xe000ed04
  401160:	004006a9 	.word	0x004006a9
  401164:	00402d28 	.word	0x00402d28
  401168:	00402921 	.word	0x00402921
  40116c:	00400195 	.word	0x00400195
  401170:	20000550 	.word	0x20000550
  401174:	20000564 	.word	0x20000564
  401178:	20000588 	.word	0x20000588
  40117c:	200005b4 	.word	0x200005b4
  401180:	200005a0 	.word	0x200005a0
  401184:	20000494 	.word	0x20000494
  401188:	20000498 	.word	0x20000498
  40118c:	004001ab 	.word	0x004001ab

00401190 <vTaskDelete>:
    {
  401190:	b538      	push	{r3, r4, r5, lr}
  401192:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
  401194:	4b2e      	ldr	r3, [pc, #184]	; (401250 <vTaskDelete+0xc0>)
  401196:	4798      	blx	r3
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
  401198:	2c00      	cmp	r4, #0
  40119a:	d03a      	beq.n	401212 <vTaskDelete+0x82>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40119c:	1d25      	adds	r5, r4, #4
  40119e:	4628      	mov	r0, r5
  4011a0:	4b2c      	ldr	r3, [pc, #176]	; (401254 <vTaskDelete+0xc4>)
  4011a2:	4798      	blx	r3
  4011a4:	b970      	cbnz	r0, 4011c4 <vTaskDelete+0x34>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4011a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4011a8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4011ac:	009b      	lsls	r3, r3, #2
  4011ae:	492a      	ldr	r1, [pc, #168]	; (401258 <vTaskDelete+0xc8>)
  4011b0:	58cb      	ldr	r3, [r1, r3]
  4011b2:	b93b      	cbnz	r3, 4011c4 <vTaskDelete+0x34>
  4011b4:	4829      	ldr	r0, [pc, #164]	; (40125c <vTaskDelete+0xcc>)
  4011b6:	6803      	ldr	r3, [r0, #0]
  4011b8:	2101      	movs	r1, #1
  4011ba:	fa01 f202 	lsl.w	r2, r1, r2
  4011be:	ea23 0202 	bic.w	r2, r3, r2
  4011c2:	6002      	str	r2, [r0, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4011c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4011c6:	b11b      	cbz	r3, 4011d0 <vTaskDelete+0x40>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4011c8:	f104 0018 	add.w	r0, r4, #24
  4011cc:	4b21      	ldr	r3, [pc, #132]	; (401254 <vTaskDelete+0xc4>)
  4011ce:	4798      	blx	r3
            uxTaskNumber++;
  4011d0:	4a23      	ldr	r2, [pc, #140]	; (401260 <vTaskDelete+0xd0>)
  4011d2:	6813      	ldr	r3, [r2, #0]
  4011d4:	3301      	adds	r3, #1
  4011d6:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
  4011d8:	4b22      	ldr	r3, [pc, #136]	; (401264 <vTaskDelete+0xd4>)
  4011da:	681b      	ldr	r3, [r3, #0]
  4011dc:	429c      	cmp	r4, r3
  4011de:	d01b      	beq.n	401218 <vTaskDelete+0x88>
                --uxCurrentNumberOfTasks;
  4011e0:	4a21      	ldr	r2, [pc, #132]	; (401268 <vTaskDelete+0xd8>)
  4011e2:	6813      	ldr	r3, [r2, #0]
  4011e4:	3b01      	subs	r3, #1
  4011e6:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
  4011e8:	4b20      	ldr	r3, [pc, #128]	; (40126c <vTaskDelete+0xdc>)
  4011ea:	4798      	blx	r3
        taskEXIT_CRITICAL();
  4011ec:	4b20      	ldr	r3, [pc, #128]	; (401270 <vTaskDelete+0xe0>)
  4011ee:	4798      	blx	r3
        if( pxTCB != pxCurrentTCB )
  4011f0:	4b1c      	ldr	r3, [pc, #112]	; (401264 <vTaskDelete+0xd4>)
  4011f2:	681b      	ldr	r3, [r3, #0]
  4011f4:	429c      	cmp	r4, r3
  4011f6:	d004      	beq.n	401202 <vTaskDelete+0x72>
                vPortFreeStack( pxTCB->pxStack );
  4011f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4011fa:	4d1e      	ldr	r5, [pc, #120]	; (401274 <vTaskDelete+0xe4>)
  4011fc:	47a8      	blx	r5
                vPortFree( pxTCB );
  4011fe:	4620      	mov	r0, r4
  401200:	47a8      	blx	r5
        if( xSchedulerRunning != pdFALSE )
  401202:	4b1d      	ldr	r3, [pc, #116]	; (401278 <vTaskDelete+0xe8>)
  401204:	681b      	ldr	r3, [r3, #0]
  401206:	b11b      	cbz	r3, 401210 <vTaskDelete+0x80>
            if( pxTCB == pxCurrentTCB )
  401208:	4b16      	ldr	r3, [pc, #88]	; (401264 <vTaskDelete+0xd4>)
  40120a:	681b      	ldr	r3, [r3, #0]
  40120c:	429c      	cmp	r4, r3
  40120e:	d00c      	beq.n	40122a <vTaskDelete+0x9a>
  401210:	bd38      	pop	{r3, r4, r5, pc}
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
  401212:	4b14      	ldr	r3, [pc, #80]	; (401264 <vTaskDelete+0xd4>)
  401214:	681c      	ldr	r4, [r3, #0]
  401216:	e7c1      	b.n	40119c <vTaskDelete+0xc>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
  401218:	4629      	mov	r1, r5
  40121a:	4818      	ldr	r0, [pc, #96]	; (40127c <vTaskDelete+0xec>)
  40121c:	4b18      	ldr	r3, [pc, #96]	; (401280 <vTaskDelete+0xf0>)
  40121e:	4798      	blx	r3
                ++uxDeletedTasksWaitingCleanUp;
  401220:	4a18      	ldr	r2, [pc, #96]	; (401284 <vTaskDelete+0xf4>)
  401222:	6813      	ldr	r3, [r2, #0]
  401224:	3301      	adds	r3, #1
  401226:	6013      	str	r3, [r2, #0]
  401228:	e7e0      	b.n	4011ec <vTaskDelete+0x5c>
                configASSERT( uxSchedulerSuspended == 0 );
  40122a:	4b17      	ldr	r3, [pc, #92]	; (401288 <vTaskDelete+0xf8>)
  40122c:	681b      	ldr	r3, [r3, #0]
  40122e:	b943      	cbnz	r3, 401242 <vTaskDelete+0xb2>
                portYIELD_WITHIN_API();
  401230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401234:	4b15      	ldr	r3, [pc, #84]	; (40128c <vTaskDelete+0xfc>)
  401236:	601a      	str	r2, [r3, #0]
  401238:	f3bf 8f4f 	dsb	sy
  40123c:	f3bf 8f6f 	isb	sy
    }
  401240:	e7e6      	b.n	401210 <vTaskDelete+0x80>
                configASSERT( uxSchedulerSuspended == 0 );
  401242:	f240 41dc 	movw	r1, #1244	; 0x4dc
  401246:	4812      	ldr	r0, [pc, #72]	; (401290 <vTaskDelete+0x100>)
  401248:	4b12      	ldr	r3, [pc, #72]	; (401294 <vTaskDelete+0x104>)
  40124a:	4798      	blx	r3
  40124c:	e7f0      	b.n	401230 <vTaskDelete+0xa0>
  40124e:	bf00      	nop
  401250:	004002f5 	.word	0x004002f5
  401254:	004001fd 	.word	0x004001fd
  401258:	2000049c 	.word	0x2000049c
  40125c:	2000054c 	.word	0x2000054c
  401260:	20000548 	.word	0x20000548
  401264:	20000490 	.word	0x20000490
  401268:	2000053c 	.word	0x2000053c
  40126c:	00400db9 	.word	0x00400db9
  401270:	0040033d 	.word	0x0040033d
  401274:	004006a9 	.word	0x004006a9
  401278:	2000059c 	.word	0x2000059c
  40127c:	200005b4 	.word	0x200005b4
  401280:	004001b1 	.word	0x004001b1
  401284:	20000540 	.word	0x20000540
  401288:	20000544 	.word	0x20000544
  40128c:	e000ed04 	.word	0xe000ed04
  401290:	00402d28 	.word	0x00402d28
  401294:	00402921 	.word	0x00402921

00401298 <vTaskResume>:
    {
  401298:	b538      	push	{r3, r4, r5, lr}
        configASSERT( xTaskToResume );
  40129a:	b168      	cbz	r0, 4012b8 <vTaskResume+0x20>
  40129c:	4604      	mov	r4, r0
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
  40129e:	4b23      	ldr	r3, [pc, #140]	; (40132c <vTaskResume+0x94>)
  4012a0:	681b      	ldr	r3, [r3, #0]
  4012a2:	4298      	cmp	r0, r3
  4012a4:	d041      	beq.n	40132a <vTaskResume+0x92>
            taskENTER_CRITICAL();
  4012a6:	4b22      	ldr	r3, [pc, #136]	; (401330 <vTaskResume+0x98>)
  4012a8:	4798      	blx	r3
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
  4012aa:	4620      	mov	r0, r4
  4012ac:	4b21      	ldr	r3, [pc, #132]	; (401334 <vTaskResume+0x9c>)
  4012ae:	4798      	blx	r3
  4012b0:	b950      	cbnz	r0, 4012c8 <vTaskResume+0x30>
            taskEXIT_CRITICAL();
  4012b2:	4b21      	ldr	r3, [pc, #132]	; (401338 <vTaskResume+0xa0>)
  4012b4:	4798      	blx	r3
    }
  4012b6:	bd38      	pop	{r3, r4, r5, pc}
        configASSERT( xTaskToResume );
  4012b8:	f240 7151 	movw	r1, #1873	; 0x751
  4012bc:	481f      	ldr	r0, [pc, #124]	; (40133c <vTaskResume+0xa4>)
  4012be:	4b20      	ldr	r3, [pc, #128]	; (401340 <vTaskResume+0xa8>)
  4012c0:	4798      	blx	r3
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
  4012c2:	4b1a      	ldr	r3, [pc, #104]	; (40132c <vTaskResume+0x94>)
  4012c4:	681b      	ldr	r3, [r3, #0]
  4012c6:	bd38      	pop	{r3, r4, r5, pc}
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4012c8:	1d25      	adds	r5, r4, #4
  4012ca:	4628      	mov	r0, r5
  4012cc:	4b1d      	ldr	r3, [pc, #116]	; (401344 <vTaskResume+0xac>)
  4012ce:	4798      	blx	r3
                    prvAddTaskToReadyList( pxTCB );
  4012d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4012d2:	491d      	ldr	r1, [pc, #116]	; (401348 <vTaskResume+0xb0>)
  4012d4:	6808      	ldr	r0, [r1, #0]
  4012d6:	2201      	movs	r2, #1
  4012d8:	409a      	lsls	r2, r3
  4012da:	4302      	orrs	r2, r0
  4012dc:	600a      	str	r2, [r1, #0]
  4012de:	4a1b      	ldr	r2, [pc, #108]	; (40134c <vTaskResume+0xb4>)
  4012e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4012e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4012e8:	685b      	ldr	r3, [r3, #4]
  4012ea:	60a3      	str	r3, [r4, #8]
  4012ec:	6899      	ldr	r1, [r3, #8]
  4012ee:	60e1      	str	r1, [r4, #12]
  4012f0:	6899      	ldr	r1, [r3, #8]
  4012f2:	604d      	str	r5, [r1, #4]
  4012f4:	609d      	str	r5, [r3, #8]
  4012f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4012f8:	0083      	lsls	r3, r0, #2
  4012fa:	1819      	adds	r1, r3, r0
  4012fc:	0089      	lsls	r1, r1, #2
  4012fe:	1855      	adds	r5, r2, r1
  401300:	6165      	str	r5, [r4, #20]
  401302:	5851      	ldr	r1, [r2, r1]
  401304:	3101      	adds	r1, #1
  401306:	4403      	add	r3, r0
  401308:	009b      	lsls	r3, r3, #2
  40130a:	50d1      	str	r1, [r2, r3]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40130c:	4b07      	ldr	r3, [pc, #28]	; (40132c <vTaskResume+0x94>)
  40130e:	681b      	ldr	r3, [r3, #0]
  401310:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401314:	429a      	cmp	r2, r3
  401316:	d3cc      	bcc.n	4012b2 <vTaskResume+0x1a>
                        taskYIELD_IF_USING_PREEMPTION();
  401318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40131c:	4b0c      	ldr	r3, [pc, #48]	; (401350 <vTaskResume+0xb8>)
  40131e:	601a      	str	r2, [r3, #0]
  401320:	f3bf 8f4f 	dsb	sy
  401324:	f3bf 8f6f 	isb	sy
  401328:	e7c3      	b.n	4012b2 <vTaskResume+0x1a>
  40132a:	bd38      	pop	{r3, r4, r5, pc}
  40132c:	20000490 	.word	0x20000490
  401330:	004002f5 	.word	0x004002f5
  401334:	00400de1 	.word	0x00400de1
  401338:	0040033d 	.word	0x0040033d
  40133c:	00402d28 	.word	0x00402d28
  401340:	00402921 	.word	0x00402921
  401344:	004001fd 	.word	0x004001fd
  401348:	2000054c 	.word	0x2000054c
  40134c:	2000049c 	.word	0x2000049c
  401350:	e000ed04 	.word	0xe000ed04

00401354 <vTaskStartScheduler>:
{
  401354:	b510      	push	{r4, lr}
  401356:	b082      	sub	sp, #8
            xReturn = xTaskCreate( prvIdleTask,
  401358:	4b18      	ldr	r3, [pc, #96]	; (4013bc <vTaskStartScheduler+0x68>)
  40135a:	9301      	str	r3, [sp, #4]
  40135c:	2300      	movs	r3, #0
  40135e:	9300      	str	r3, [sp, #0]
  401360:	2282      	movs	r2, #130	; 0x82
  401362:	4917      	ldr	r1, [pc, #92]	; (4013c0 <vTaskStartScheduler+0x6c>)
  401364:	4817      	ldr	r0, [pc, #92]	; (4013c4 <vTaskStartScheduler+0x70>)
  401366:	4c18      	ldr	r4, [pc, #96]	; (4013c8 <vTaskStartScheduler+0x74>)
  401368:	47a0      	blx	r4
            if( xReturn == pdPASS )
  40136a:	2801      	cmp	r0, #1
  40136c:	d006      	beq.n	40137c <vTaskStartScheduler+0x28>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  40136e:	f1b0 3fff 	cmp.w	r0, #4294967295
  401372:	d01c      	beq.n	4013ae <vTaskStartScheduler+0x5a>
    ( void ) uxTopUsedPriority;
  401374:	4b15      	ldr	r3, [pc, #84]	; (4013cc <vTaskStartScheduler+0x78>)
  401376:	681b      	ldr	r3, [r3, #0]
}
  401378:	b002      	add	sp, #8
  40137a:	bd10      	pop	{r4, pc}
                xReturn = xTimerCreateTimerTask();
  40137c:	4b14      	ldr	r3, [pc, #80]	; (4013d0 <vTaskStartScheduler+0x7c>)
  40137e:	4798      	blx	r3
    if( xReturn == pdPASS )
  401380:	2801      	cmp	r0, #1
  401382:	d1f4      	bne.n	40136e <vTaskStartScheduler+0x1a>
        __asm volatile
  401384:	f04f 0350 	mov.w	r3, #80	; 0x50
  401388:	f383 8811 	msr	BASEPRI, r3
  40138c:	f3bf 8f6f 	isb	sy
  401390:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
  401394:	f04f 32ff 	mov.w	r2, #4294967295
  401398:	4b0e      	ldr	r3, [pc, #56]	; (4013d4 <vTaskStartScheduler+0x80>)
  40139a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
  40139c:	2201      	movs	r2, #1
  40139e:	4b0e      	ldr	r3, [pc, #56]	; (4013d8 <vTaskStartScheduler+0x84>)
  4013a0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  4013a2:	2200      	movs	r2, #0
  4013a4:	4b0d      	ldr	r3, [pc, #52]	; (4013dc <vTaskStartScheduler+0x88>)
  4013a6:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
  4013a8:	4b0d      	ldr	r3, [pc, #52]	; (4013e0 <vTaskStartScheduler+0x8c>)
  4013aa:	4798      	blx	r3
  4013ac:	e7e2      	b.n	401374 <vTaskStartScheduler+0x20>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4013ae:	f44f 6104 	mov.w	r1, #2112	; 0x840
  4013b2:	480c      	ldr	r0, [pc, #48]	; (4013e4 <vTaskStartScheduler+0x90>)
  4013b4:	4b0c      	ldr	r3, [pc, #48]	; (4013e8 <vTaskStartScheduler+0x94>)
  4013b6:	4798      	blx	r3
  4013b8:	e7dc      	b.n	401374 <vTaskStartScheduler+0x20>
  4013ba:	bf00      	nop
  4013bc:	20000578 	.word	0x20000578
  4013c0:	00402d40 	.word	0x00402d40
  4013c4:	00400e25 	.word	0x00400e25
  4013c8:	00400f61 	.word	0x00400f61
  4013cc:	20000008 	.word	0x20000008
  4013d0:	00402011 	.word	0x00402011
  4013d4:	2000057c 	.word	0x2000057c
  4013d8:	2000059c 	.word	0x2000059c
  4013dc:	200005c8 	.word	0x200005c8
  4013e0:	0040043d 	.word	0x0040043d
  4013e4:	00402d28 	.word	0x00402d28
  4013e8:	00402921 	.word	0x00402921

004013ec <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
  4013ec:	4a02      	ldr	r2, [pc, #8]	; (4013f8 <vTaskSuspendAll+0xc>)
  4013ee:	6813      	ldr	r3, [r2, #0]
  4013f0:	3301      	adds	r3, #1
  4013f2:	6013      	str	r3, [r2, #0]
    portMEMORY_BARRIER();
  4013f4:	4770      	bx	lr
  4013f6:	bf00      	nop
  4013f8:	20000544 	.word	0x20000544

004013fc <xTaskGetTickCount>:
        xTicks = xTickCount;
  4013fc:	4b01      	ldr	r3, [pc, #4]	; (401404 <xTaskGetTickCount+0x8>)
  4013fe:	6818      	ldr	r0, [r3, #0]
}
  401400:	4770      	bx	lr
  401402:	bf00      	nop
  401404:	200005c8 	.word	0x200005c8

00401408 <xTaskIncrementTick>:
{
  401408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40140c:	4b5f      	ldr	r3, [pc, #380]	; (40158c <xTaskIncrementTick+0x184>)
  40140e:	681b      	ldr	r3, [r3, #0]
  401410:	2b00      	cmp	r3, #0
  401412:	f040 80b3 	bne.w	40157c <xTaskIncrementTick+0x174>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  401416:	4b5e      	ldr	r3, [pc, #376]	; (401590 <xTaskIncrementTick+0x188>)
  401418:	681c      	ldr	r4, [r3, #0]
  40141a:	f104 0b01 	add.w	fp, r4, #1
        xTickCount = xConstTickCount;
  40141e:	f8c3 b000 	str.w	fp, [r3]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401422:	f1bb 0f00 	cmp.w	fp, #0
  401426:	d10f      	bne.n	401448 <xTaskIncrementTick+0x40>
            taskSWITCH_DELAYED_LISTS();
  401428:	4b5a      	ldr	r3, [pc, #360]	; (401594 <xTaskIncrementTick+0x18c>)
  40142a:	681b      	ldr	r3, [r3, #0]
  40142c:	681b      	ldr	r3, [r3, #0]
  40142e:	bb13      	cbnz	r3, 401476 <xTaskIncrementTick+0x6e>
  401430:	4a58      	ldr	r2, [pc, #352]	; (401594 <xTaskIncrementTick+0x18c>)
  401432:	6811      	ldr	r1, [r2, #0]
  401434:	4b58      	ldr	r3, [pc, #352]	; (401598 <xTaskIncrementTick+0x190>)
  401436:	6818      	ldr	r0, [r3, #0]
  401438:	6010      	str	r0, [r2, #0]
  40143a:	6019      	str	r1, [r3, #0]
  40143c:	4a57      	ldr	r2, [pc, #348]	; (40159c <xTaskIncrementTick+0x194>)
  40143e:	6813      	ldr	r3, [r2, #0]
  401440:	3301      	adds	r3, #1
  401442:	6013      	str	r3, [r2, #0]
  401444:	4b56      	ldr	r3, [pc, #344]	; (4015a0 <xTaskIncrementTick+0x198>)
  401446:	4798      	blx	r3
        if( xConstTickCount >= xNextTaskUnblockTime )
  401448:	4b56      	ldr	r3, [pc, #344]	; (4015a4 <xTaskIncrementTick+0x19c>)
  40144a:	681b      	ldr	r3, [r3, #0]
  40144c:	459b      	cmp	fp, r3
  40144e:	d218      	bcs.n	401482 <xTaskIncrementTick+0x7a>
    BaseType_t xSwitchRequired = pdFALSE;
  401450:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401452:	4b55      	ldr	r3, [pc, #340]	; (4015a8 <xTaskIncrementTick+0x1a0>)
  401454:	681b      	ldr	r3, [r3, #0]
  401456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401458:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40145c:	009b      	lsls	r3, r3, #2
  40145e:	4a53      	ldr	r2, [pc, #332]	; (4015ac <xTaskIncrementTick+0x1a4>)
  401460:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
  401462:	2b02      	cmp	r3, #2
  401464:	bf28      	it	cs
  401466:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
  401468:	4b51      	ldr	r3, [pc, #324]	; (4015b0 <xTaskIncrementTick+0x1a8>)
  40146a:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
  40146c:	2b00      	cmp	r3, #0
  40146e:	bf18      	it	ne
  401470:	2001      	movne	r0, #1
  401472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
  401476:	f640 21c7 	movw	r1, #2759	; 0xac7
  40147a:	484e      	ldr	r0, [pc, #312]	; (4015b4 <xTaskIncrementTick+0x1ac>)
  40147c:	4b4e      	ldr	r3, [pc, #312]	; (4015b8 <xTaskIncrementTick+0x1b0>)
  40147e:	4798      	blx	r3
  401480:	e7d6      	b.n	401430 <xTaskIncrementTick+0x28>
  401482:	2000      	movs	r0, #0
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401484:	4943      	ldr	r1, [pc, #268]	; (401594 <xTaskIncrementTick+0x18c>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401486:	4607      	mov	r7, r0
                    prvAddTaskToReadyList( pxTCB );
  401488:	4d4c      	ldr	r5, [pc, #304]	; (4015bc <xTaskIncrementTick+0x1b4>)
  40148a:	f04f 0e01 	mov.w	lr, #1
  40148e:	4a47      	ldr	r2, [pc, #284]	; (4015ac <xTaskIncrementTick+0x1a4>)
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401490:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4015a8 <xTaskIncrementTick+0x1a0>
  401494:	e036      	b.n	401504 <xTaskIncrementTick+0xfc>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401496:	f04f 32ff 	mov.w	r2, #4294967295
  40149a:	4b42      	ldr	r3, [pc, #264]	; (4015a4 <xTaskIncrementTick+0x19c>)
  40149c:	601a      	str	r2, [r3, #0]
                    break;
  40149e:	e7d8      	b.n	401452 <xTaskIncrementTick+0x4a>
                        xNextTaskUnblockTime = xItemValue;
  4014a0:	4b40      	ldr	r3, [pc, #256]	; (4015a4 <xTaskIncrementTick+0x19c>)
  4014a2:	601e      	str	r6, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
  4014a4:	e7d5      	b.n	401452 <xTaskIncrementTick+0x4a>
                    prvAddTaskToReadyList( pxTCB );
  4014a6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  4014a8:	f8d5 a000 	ldr.w	sl, [r5]
  4014ac:	fa0e f906 	lsl.w	r9, lr, r6
  4014b0:	ea49 090a 	orr.w	r9, r9, sl
  4014b4:	f8c5 9000 	str.w	r9, [r5]
  4014b8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4014bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  4014c0:	6876      	ldr	r6, [r6, #4]
  4014c2:	609e      	str	r6, [r3, #8]
  4014c4:	68b4      	ldr	r4, [r6, #8]
  4014c6:	60dc      	str	r4, [r3, #12]
  4014c8:	68b4      	ldr	r4, [r6, #8]
  4014ca:	f8c4 c004 	str.w	ip, [r4, #4]
  4014ce:	f8c6 c008 	str.w	ip, [r6, #8]
  4014d2:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
  4014d6:	ea4f 0689 	mov.w	r6, r9, lsl #2
  4014da:	eb06 0c09 	add.w	ip, r6, r9
  4014de:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
  4014e2:	f8c3 a014 	str.w	sl, [r3, #20]
  4014e6:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
  4014ea:	f10c 0c01 	add.w	ip, ip, #1
  4014ee:	444e      	add	r6, r9
  4014f0:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4014f4:	f8d8 c000 	ldr.w	ip, [r8]
  4014f8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  4014fa:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
  4014fe:	429e      	cmp	r6, r3
  401500:	bf28      	it	cs
  401502:	2001      	movcs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401504:	680b      	ldr	r3, [r1, #0]
  401506:	681b      	ldr	r3, [r3, #0]
  401508:	2b00      	cmp	r3, #0
  40150a:	d0c4      	beq.n	401496 <xTaskIncrementTick+0x8e>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40150c:	680b      	ldr	r3, [r1, #0]
  40150e:	68db      	ldr	r3, [r3, #12]
  401510:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401512:	685e      	ldr	r6, [r3, #4]
                    if( xConstTickCount < xItemValue )
  401514:	45b3      	cmp	fp, r6
  401516:	d3c3      	bcc.n	4014a0 <xTaskIncrementTick+0x98>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401518:	f8d3 9014 	ldr.w	r9, [r3, #20]
  40151c:	689e      	ldr	r6, [r3, #8]
  40151e:	68dc      	ldr	r4, [r3, #12]
  401520:	60b4      	str	r4, [r6, #8]
  401522:	68de      	ldr	r6, [r3, #12]
  401524:	689c      	ldr	r4, [r3, #8]
  401526:	6074      	str	r4, [r6, #4]
  401528:	f103 0c04 	add.w	ip, r3, #4
  40152c:	f8d9 6004 	ldr.w	r6, [r9, #4]
  401530:	4566      	cmp	r6, ip
  401532:	bf04      	itt	eq
  401534:	68de      	ldreq	r6, [r3, #12]
  401536:	f8c9 6004 	streq.w	r6, [r9, #4]
  40153a:	615f      	str	r7, [r3, #20]
  40153c:	f8d9 6000 	ldr.w	r6, [r9]
  401540:	3e01      	subs	r6, #1
  401542:	f8c9 6000 	str.w	r6, [r9]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401546:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
  40154a:	f1b9 0f00 	cmp.w	r9, #0
  40154e:	d0aa      	beq.n	4014a6 <xTaskIncrementTick+0x9e>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  401550:	69de      	ldr	r6, [r3, #28]
  401552:	6a1c      	ldr	r4, [r3, #32]
  401554:	60b4      	str	r4, [r6, #8]
  401556:	6a1e      	ldr	r6, [r3, #32]
  401558:	69dc      	ldr	r4, [r3, #28]
  40155a:	6074      	str	r4, [r6, #4]
  40155c:	f103 0a18 	add.w	sl, r3, #24
  401560:	f8d9 6004 	ldr.w	r6, [r9, #4]
  401564:	4556      	cmp	r6, sl
  401566:	bf04      	itt	eq
  401568:	6a1e      	ldreq	r6, [r3, #32]
  40156a:	f8c9 6004 	streq.w	r6, [r9, #4]
  40156e:	629f      	str	r7, [r3, #40]	; 0x28
  401570:	f8d9 6000 	ldr.w	r6, [r9]
  401574:	3e01      	subs	r6, #1
  401576:	f8c9 6000 	str.w	r6, [r9]
  40157a:	e794      	b.n	4014a6 <xTaskIncrementTick+0x9e>
        ++xPendedTicks;
  40157c:	4a10      	ldr	r2, [pc, #64]	; (4015c0 <xTaskIncrementTick+0x1b8>)
  40157e:	6813      	ldr	r3, [r2, #0]
  401580:	3301      	adds	r3, #1
  401582:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
  401584:	2000      	movs	r0, #0
}
  401586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40158a:	bf00      	nop
  40158c:	20000544 	.word	0x20000544
  401590:	200005c8 	.word	0x200005c8
  401594:	20000494 	.word	0x20000494
  401598:	20000498 	.word	0x20000498
  40159c:	20000580 	.word	0x20000580
  4015a0:	00400db9 	.word	0x00400db9
  4015a4:	2000057c 	.word	0x2000057c
  4015a8:	20000490 	.word	0x20000490
  4015ac:	2000049c 	.word	0x2000049c
  4015b0:	200005cc 	.word	0x200005cc
  4015b4:	00402d28 	.word	0x00402d28
  4015b8:	00402921 	.word	0x00402921
  4015bc:	2000054c 	.word	0x2000054c
  4015c0:	20000584 	.word	0x20000584

004015c4 <xTaskResumeAll>:
{
  4015c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    configASSERT( uxSchedulerSuspended );
  4015c8:	4b57      	ldr	r3, [pc, #348]	; (401728 <xTaskResumeAll+0x164>)
  4015ca:	681b      	ldr	r3, [r3, #0]
  4015cc:	2b00      	cmp	r3, #0
  4015ce:	d07a      	beq.n	4016c6 <xTaskResumeAll+0x102>
    taskENTER_CRITICAL();
  4015d0:	4b56      	ldr	r3, [pc, #344]	; (40172c <xTaskResumeAll+0x168>)
  4015d2:	4798      	blx	r3
        --uxSchedulerSuspended;
  4015d4:	4b54      	ldr	r3, [pc, #336]	; (401728 <xTaskResumeAll+0x164>)
  4015d6:	681a      	ldr	r2, [r3, #0]
  4015d8:	3a01      	subs	r2, #1
  4015da:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4015dc:	681b      	ldr	r3, [r3, #0]
  4015de:	2b00      	cmp	r3, #0
  4015e0:	f040 809a 	bne.w	401718 <xTaskResumeAll+0x154>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4015e4:	4b52      	ldr	r3, [pc, #328]	; (401730 <xTaskResumeAll+0x16c>)
  4015e6:	681b      	ldr	r3, [r3, #0]
  4015e8:	2b00      	cmp	r3, #0
  4015ea:	d072      	beq.n	4016d2 <xTaskResumeAll+0x10e>
  4015ec:	2300      	movs	r3, #0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4015ee:	4951      	ldr	r1, [pc, #324]	; (401734 <xTaskResumeAll+0x170>)
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  4015f0:	461c      	mov	r4, r3
                    prvAddTaskToReadyList( pxTCB );
  4015f2:	4851      	ldr	r0, [pc, #324]	; (401738 <xTaskResumeAll+0x174>)
  4015f4:	2601      	movs	r6, #1
  4015f6:	4a51      	ldr	r2, [pc, #324]	; (40173c <xTaskResumeAll+0x178>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4015f8:	f8df a164 	ldr.w	sl, [pc, #356]	; 401760 <xTaskResumeAll+0x19c>
                        xYieldPending = pdTRUE;
  4015fc:	f8df e154 	ldr.w	lr, [pc, #340]	; 401754 <xTaskResumeAll+0x190>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401600:	680d      	ldr	r5, [r1, #0]
  401602:	2d00      	cmp	r5, #0
  401604:	d067      	beq.n	4016d6 <xTaskResumeAll+0x112>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401606:	68cb      	ldr	r3, [r1, #12]
  401608:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  40160a:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
  40160e:	69dd      	ldr	r5, [r3, #28]
  401610:	6a1f      	ldr	r7, [r3, #32]
  401612:	60af      	str	r7, [r5, #8]
  401614:	6a1d      	ldr	r5, [r3, #32]
  401616:	69df      	ldr	r7, [r3, #28]
  401618:	606f      	str	r7, [r5, #4]
  40161a:	f103 0818 	add.w	r8, r3, #24
  40161e:	f8dc 5004 	ldr.w	r5, [ip, #4]
  401622:	4545      	cmp	r5, r8
  401624:	bf04      	itt	eq
  401626:	6a1d      	ldreq	r5, [r3, #32]
  401628:	f8cc 5004 	streq.w	r5, [ip, #4]
  40162c:	629c      	str	r4, [r3, #40]	; 0x28
  40162e:	f8dc 5000 	ldr.w	r5, [ip]
  401632:	3d01      	subs	r5, #1
  401634:	f8cc 5000 	str.w	r5, [ip]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  401638:	f8d3 c014 	ldr.w	ip, [r3, #20]
  40163c:	689d      	ldr	r5, [r3, #8]
  40163e:	68df      	ldr	r7, [r3, #12]
  401640:	60af      	str	r7, [r5, #8]
  401642:	68dd      	ldr	r5, [r3, #12]
  401644:	689f      	ldr	r7, [r3, #8]
  401646:	606f      	str	r7, [r5, #4]
  401648:	f103 0804 	add.w	r8, r3, #4
  40164c:	f8dc 5004 	ldr.w	r5, [ip, #4]
  401650:	4545      	cmp	r5, r8
  401652:	bf04      	itt	eq
  401654:	68dd      	ldreq	r5, [r3, #12]
  401656:	f8cc 5004 	streq.w	r5, [ip, #4]
  40165a:	615c      	str	r4, [r3, #20]
  40165c:	f8dc 5000 	ldr.w	r5, [ip]
  401660:	3d01      	subs	r5, #1
  401662:	f8cc 5000 	str.w	r5, [ip]
                    prvAddTaskToReadyList( pxTCB );
  401666:	6add      	ldr	r5, [r3, #44]	; 0x2c
  401668:	f8d0 9000 	ldr.w	r9, [r0]
  40166c:	fa06 fc05 	lsl.w	ip, r6, r5
  401670:	ea4c 0c09 	orr.w	ip, ip, r9
  401674:	f8c0 c000 	str.w	ip, [r0]
  401678:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40167c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
  401680:	686d      	ldr	r5, [r5, #4]
  401682:	609d      	str	r5, [r3, #8]
  401684:	68af      	ldr	r7, [r5, #8]
  401686:	60df      	str	r7, [r3, #12]
  401688:	68af      	ldr	r7, [r5, #8]
  40168a:	f8c7 8004 	str.w	r8, [r7, #4]
  40168e:	f8c5 8008 	str.w	r8, [r5, #8]
  401692:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
  401696:	ea4f 0588 	mov.w	r5, r8, lsl #2
  40169a:	eb05 0c08 	add.w	ip, r5, r8
  40169e:	eb02 098c 	add.w	r9, r2, ip, lsl #2
  4016a2:	f8c3 9014 	str.w	r9, [r3, #20]
  4016a6:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
  4016aa:	f10c 0c01 	add.w	ip, ip, #1
  4016ae:	4445      	add	r5, r8
  4016b0:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4016b4:	f8da 5000 	ldr.w	r5, [sl]
  4016b8:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  4016ba:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  4016bc:	42af      	cmp	r7, r5
  4016be:	d39f      	bcc.n	401600 <xTaskResumeAll+0x3c>
                        xYieldPending = pdTRUE;
  4016c0:	f8ce 6000 	str.w	r6, [lr]
  4016c4:	e79c      	b.n	401600 <xTaskResumeAll+0x3c>
    configASSERT( uxSchedulerSuspended );
  4016c6:	f640 01b3 	movw	r1, #2227	; 0x8b3
  4016ca:	481d      	ldr	r0, [pc, #116]	; (401740 <xTaskResumeAll+0x17c>)
  4016cc:	4b1d      	ldr	r3, [pc, #116]	; (401744 <xTaskResumeAll+0x180>)
  4016ce:	4798      	blx	r3
  4016d0:	e77e      	b.n	4015d0 <xTaskResumeAll+0xc>
    BaseType_t xAlreadyYielded = pdFALSE;
  4016d2:	2400      	movs	r4, #0
  4016d4:	e021      	b.n	40171a <xTaskResumeAll+0x156>
                if( pxTCB != NULL )
  4016d6:	b10b      	cbz	r3, 4016dc <xTaskResumeAll+0x118>
                    prvResetNextTaskUnblockTime();
  4016d8:	4b1b      	ldr	r3, [pc, #108]	; (401748 <xTaskResumeAll+0x184>)
  4016da:	4798      	blx	r3
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
  4016dc:	4b1b      	ldr	r3, [pc, #108]	; (40174c <xTaskResumeAll+0x188>)
  4016de:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
  4016e0:	b16c      	cbz	r4, 4016fe <xTaskResumeAll+0x13a>
                            if( xTaskIncrementTick() != pdFALSE )
  4016e2:	4d1b      	ldr	r5, [pc, #108]	; (401750 <xTaskResumeAll+0x18c>)
                                xYieldPending = pdTRUE;
  4016e4:	4f1b      	ldr	r7, [pc, #108]	; (401754 <xTaskResumeAll+0x190>)
  4016e6:	2601      	movs	r6, #1
  4016e8:	e001      	b.n	4016ee <xTaskResumeAll+0x12a>
                        } while( xPendedCounts > ( TickType_t ) 0U );
  4016ea:	3c01      	subs	r4, #1
  4016ec:	d004      	beq.n	4016f8 <xTaskResumeAll+0x134>
                            if( xTaskIncrementTick() != pdFALSE )
  4016ee:	47a8      	blx	r5
  4016f0:	2800      	cmp	r0, #0
  4016f2:	d0fa      	beq.n	4016ea <xTaskResumeAll+0x126>
                                xYieldPending = pdTRUE;
  4016f4:	603e      	str	r6, [r7, #0]
  4016f6:	e7f8      	b.n	4016ea <xTaskResumeAll+0x126>
                        xPendedTicks = 0;
  4016f8:	2200      	movs	r2, #0
  4016fa:	4b14      	ldr	r3, [pc, #80]	; (40174c <xTaskResumeAll+0x188>)
  4016fc:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
  4016fe:	4b15      	ldr	r3, [pc, #84]	; (401754 <xTaskResumeAll+0x190>)
  401700:	681b      	ldr	r3, [r3, #0]
  401702:	b17b      	cbz	r3, 401724 <xTaskResumeAll+0x160>
                    taskYIELD_IF_USING_PREEMPTION();
  401704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401708:	4b13      	ldr	r3, [pc, #76]	; (401758 <xTaskResumeAll+0x194>)
  40170a:	601a      	str	r2, [r3, #0]
  40170c:	f3bf 8f4f 	dsb	sy
  401710:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
  401714:	2401      	movs	r4, #1
  401716:	e000      	b.n	40171a <xTaskResumeAll+0x156>
    BaseType_t xAlreadyYielded = pdFALSE;
  401718:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
  40171a:	4b10      	ldr	r3, [pc, #64]	; (40175c <xTaskResumeAll+0x198>)
  40171c:	4798      	blx	r3
}
  40171e:	4620      	mov	r0, r4
  401720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
  401724:	2400      	movs	r4, #0
  401726:	e7f8      	b.n	40171a <xTaskResumeAll+0x156>
  401728:	20000544 	.word	0x20000544
  40172c:	004002f5 	.word	0x004002f5
  401730:	2000053c 	.word	0x2000053c
  401734:	20000588 	.word	0x20000588
  401738:	2000054c 	.word	0x2000054c
  40173c:	2000049c 	.word	0x2000049c
  401740:	00402d28 	.word	0x00402d28
  401744:	00402921 	.word	0x00402921
  401748:	00400db9 	.word	0x00400db9
  40174c:	20000584 	.word	0x20000584
  401750:	00401409 	.word	0x00401409
  401754:	200005cc 	.word	0x200005cc
  401758:	e000ed04 	.word	0xe000ed04
  40175c:	0040033d 	.word	0x0040033d
  401760:	20000490 	.word	0x20000490

00401764 <vTaskDelay>:
    {
  401764:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
  401766:	b160      	cbz	r0, 401782 <vTaskDelay+0x1e>
  401768:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
  40176a:	4b0d      	ldr	r3, [pc, #52]	; (4017a0 <vTaskDelay+0x3c>)
  40176c:	681b      	ldr	r3, [r3, #0]
  40176e:	b98b      	cbnz	r3, 401794 <vTaskDelay+0x30>
            vTaskSuspendAll();
  401770:	4b0c      	ldr	r3, [pc, #48]	; (4017a4 <vTaskDelay+0x40>)
  401772:	4798      	blx	r3
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401774:	2100      	movs	r1, #0
  401776:	4620      	mov	r0, r4
  401778:	4b0b      	ldr	r3, [pc, #44]	; (4017a8 <vTaskDelay+0x44>)
  40177a:	4798      	blx	r3
            xAlreadyYielded = xTaskResumeAll();
  40177c:	4b0b      	ldr	r3, [pc, #44]	; (4017ac <vTaskDelay+0x48>)
  40177e:	4798      	blx	r3
        if( xAlreadyYielded == pdFALSE )
  401780:	b938      	cbnz	r0, 401792 <vTaskDelay+0x2e>
            portYIELD_WITHIN_API();
  401782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401786:	4b0a      	ldr	r3, [pc, #40]	; (4017b0 <vTaskDelay+0x4c>)
  401788:	601a      	str	r2, [r3, #0]
  40178a:	f3bf 8f4f 	dsb	sy
  40178e:	f3bf 8f6f 	isb	sy
  401792:	bd10      	pop	{r4, pc}
            configASSERT( uxSchedulerSuspended == 0 );
  401794:	f240 5149 	movw	r1, #1353	; 0x549
  401798:	4806      	ldr	r0, [pc, #24]	; (4017b4 <vTaskDelay+0x50>)
  40179a:	4b07      	ldr	r3, [pc, #28]	; (4017b8 <vTaskDelay+0x54>)
  40179c:	4798      	blx	r3
  40179e:	e7e7      	b.n	401770 <vTaskDelay+0xc>
  4017a0:	20000544 	.word	0x20000544
  4017a4:	004013ed 	.word	0x004013ed
  4017a8:	00400ea5 	.word	0x00400ea5
  4017ac:	004015c5 	.word	0x004015c5
  4017b0:	e000ed04 	.word	0xe000ed04
  4017b4:	00402d28 	.word	0x00402d28
  4017b8:	00402921 	.word	0x00402921

004017bc <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4017bc:	4b2b      	ldr	r3, [pc, #172]	; (40186c <vTaskSwitchContext+0xb0>)
  4017be:	681b      	ldr	r3, [r3, #0]
  4017c0:	2b00      	cmp	r3, #0
  4017c2:	d134      	bne.n	40182e <vTaskSwitchContext+0x72>
{
  4017c4:	b510      	push	{r4, lr}
        xYieldPending = pdFALSE;
  4017c6:	2200      	movs	r2, #0
  4017c8:	4b29      	ldr	r3, [pc, #164]	; (401870 <vTaskSwitchContext+0xb4>)
  4017ca:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
  4017cc:	4b29      	ldr	r3, [pc, #164]	; (401874 <vTaskSwitchContext+0xb8>)
  4017ce:	681b      	ldr	r3, [r3, #0]
  4017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017d2:	681a      	ldr	r2, [r3, #0]
  4017d4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4017d8:	d02d      	beq.n	401836 <vTaskSwitchContext+0x7a>
  4017da:	4b26      	ldr	r3, [pc, #152]	; (401874 <vTaskSwitchContext+0xb8>)
  4017dc:	6818      	ldr	r0, [r3, #0]
  4017de:	6819      	ldr	r1, [r3, #0]
  4017e0:	3134      	adds	r1, #52	; 0x34
  4017e2:	4b25      	ldr	r3, [pc, #148]	; (401878 <vTaskSwitchContext+0xbc>)
  4017e4:	4798      	blx	r3
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4017e6:	4b25      	ldr	r3, [pc, #148]	; (40187c <vTaskSwitchContext+0xc0>)
  4017e8:	681c      	ldr	r4, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  4017ea:	fab4 f484 	clz	r4, r4
  4017ee:	b2e4      	uxtb	r4, r4
  4017f0:	f1c4 041f 	rsb	r4, r4, #31
  4017f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4017f8:	009b      	lsls	r3, r3, #2
  4017fa:	4a21      	ldr	r2, [pc, #132]	; (401880 <vTaskSwitchContext+0xc4>)
  4017fc:	58d3      	ldr	r3, [r2, r3]
  4017fe:	b33b      	cbz	r3, 401850 <vTaskSwitchContext+0x94>
  401800:	4b1f      	ldr	r3, [pc, #124]	; (401880 <vTaskSwitchContext+0xc4>)
  401802:	00a2      	lsls	r2, r4, #2
  401804:	1911      	adds	r1, r2, r4
  401806:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40180a:	6848      	ldr	r0, [r1, #4]
  40180c:	6840      	ldr	r0, [r0, #4]
  40180e:	6048      	str	r0, [r1, #4]
  401810:	4422      	add	r2, r4
  401812:	460b      	mov	r3, r1
  401814:	3308      	adds	r3, #8
  401816:	4298      	cmp	r0, r3
  401818:	d020      	beq.n	40185c <vTaskSwitchContext+0xa0>
  40181a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40181e:	4b18      	ldr	r3, [pc, #96]	; (401880 <vTaskSwitchContext+0xc4>)
  401820:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401824:	6863      	ldr	r3, [r4, #4]
  401826:	68da      	ldr	r2, [r3, #12]
  401828:	4b12      	ldr	r3, [pc, #72]	; (401874 <vTaskSwitchContext+0xb8>)
  40182a:	601a      	str	r2, [r3, #0]
  40182c:	bd10      	pop	{r4, pc}
        xYieldPending = pdTRUE;
  40182e:	2201      	movs	r2, #1
  401830:	4b0f      	ldr	r3, [pc, #60]	; (401870 <vTaskSwitchContext+0xb4>)
  401832:	601a      	str	r2, [r3, #0]
  401834:	4770      	bx	lr
        taskCHECK_FOR_STACK_OVERFLOW();
  401836:	685a      	ldr	r2, [r3, #4]
  401838:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40183c:	d1cd      	bne.n	4017da <vTaskSwitchContext+0x1e>
  40183e:	689a      	ldr	r2, [r3, #8]
  401840:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401844:	d1c9      	bne.n	4017da <vTaskSwitchContext+0x1e>
  401846:	68db      	ldr	r3, [r3, #12]
  401848:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40184c:	d1c5      	bne.n	4017da <vTaskSwitchContext+0x1e>
  40184e:	e7ca      	b.n	4017e6 <vTaskSwitchContext+0x2a>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401850:	f640 4102 	movw	r1, #3074	; 0xc02
  401854:	480b      	ldr	r0, [pc, #44]	; (401884 <vTaskSwitchContext+0xc8>)
  401856:	4b0c      	ldr	r3, [pc, #48]	; (401888 <vTaskSwitchContext+0xcc>)
  401858:	4798      	blx	r3
  40185a:	e7d1      	b.n	401800 <vTaskSwitchContext+0x44>
  40185c:	6841      	ldr	r1, [r0, #4]
  40185e:	4613      	mov	r3, r2
  401860:	4a07      	ldr	r2, [pc, #28]	; (401880 <vTaskSwitchContext+0xc4>)
  401862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401866:	6059      	str	r1, [r3, #4]
  401868:	e7d7      	b.n	40181a <vTaskSwitchContext+0x5e>
  40186a:	bf00      	nop
  40186c:	20000544 	.word	0x20000544
  401870:	200005cc 	.word	0x200005cc
  401874:	20000490 	.word	0x20000490
  401878:	00402961 	.word	0x00402961
  40187c:	2000054c 	.word	0x2000054c
  401880:	2000049c 	.word	0x2000049c
  401884:	00402d28 	.word	0x00402d28
  401888:	00402921 	.word	0x00402921

0040188c <vTaskSuspend>:
    {
  40188c:	b538      	push	{r3, r4, r5, lr}
  40188e:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
  401890:	4b2f      	ldr	r3, [pc, #188]	; (401950 <vTaskSuspend+0xc4>)
  401892:	4798      	blx	r3
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  401894:	2c00      	cmp	r4, #0
  401896:	d02f      	beq.n	4018f8 <vTaskSuspend+0x6c>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401898:	1d25      	adds	r5, r4, #4
  40189a:	4628      	mov	r0, r5
  40189c:	4b2d      	ldr	r3, [pc, #180]	; (401954 <vTaskSuspend+0xc8>)
  40189e:	4798      	blx	r3
  4018a0:	b970      	cbnz	r0, 4018c0 <vTaskSuspend+0x34>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4018a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4018a4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4018a8:	009b      	lsls	r3, r3, #2
  4018aa:	492b      	ldr	r1, [pc, #172]	; (401958 <vTaskSuspend+0xcc>)
  4018ac:	58cb      	ldr	r3, [r1, r3]
  4018ae:	b93b      	cbnz	r3, 4018c0 <vTaskSuspend+0x34>
  4018b0:	482a      	ldr	r0, [pc, #168]	; (40195c <vTaskSuspend+0xd0>)
  4018b2:	6803      	ldr	r3, [r0, #0]
  4018b4:	2101      	movs	r1, #1
  4018b6:	fa01 f202 	lsl.w	r2, r1, r2
  4018ba:	ea23 0202 	bic.w	r2, r3, r2
  4018be:	6002      	str	r2, [r0, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4018c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4018c2:	b11b      	cbz	r3, 4018cc <vTaskSuspend+0x40>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4018c4:	f104 0018 	add.w	r0, r4, #24
  4018c8:	4b22      	ldr	r3, [pc, #136]	; (401954 <vTaskSuspend+0xc8>)
  4018ca:	4798      	blx	r3
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
  4018cc:	4629      	mov	r1, r5
  4018ce:	4824      	ldr	r0, [pc, #144]	; (401960 <vTaskSuspend+0xd4>)
  4018d0:	4b24      	ldr	r3, [pc, #144]	; (401964 <vTaskSuspend+0xd8>)
  4018d2:	4798      	blx	r3
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
  4018d4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  4018d8:	b2db      	uxtb	r3, r3
  4018da:	2b01      	cmp	r3, #1
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
  4018dc:	bf04      	itt	eq
  4018de:	2300      	moveq	r3, #0
  4018e0:	f884 3060 	strbeq.w	r3, [r4, #96]	; 0x60
        taskEXIT_CRITICAL();
  4018e4:	4b20      	ldr	r3, [pc, #128]	; (401968 <vTaskSuspend+0xdc>)
  4018e6:	4798      	blx	r3
        if( xSchedulerRunning != pdFALSE )
  4018e8:	4b20      	ldr	r3, [pc, #128]	; (40196c <vTaskSuspend+0xe0>)
  4018ea:	681b      	ldr	r3, [r3, #0]
  4018ec:	b93b      	cbnz	r3, 4018fe <vTaskSuspend+0x72>
        if( pxTCB == pxCurrentTCB )
  4018ee:	4b20      	ldr	r3, [pc, #128]	; (401970 <vTaskSuspend+0xe4>)
  4018f0:	681b      	ldr	r3, [r3, #0]
  4018f2:	429c      	cmp	r4, r3
  4018f4:	d00a      	beq.n	40190c <vTaskSuspend+0x80>
  4018f6:	bd38      	pop	{r3, r4, r5, pc}
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  4018f8:	4b1d      	ldr	r3, [pc, #116]	; (401970 <vTaskSuspend+0xe4>)
  4018fa:	681c      	ldr	r4, [r3, #0]
  4018fc:	e7cc      	b.n	401898 <vTaskSuspend+0xc>
            taskENTER_CRITICAL();
  4018fe:	4b14      	ldr	r3, [pc, #80]	; (401950 <vTaskSuspend+0xc4>)
  401900:	4798      	blx	r3
                prvResetNextTaskUnblockTime();
  401902:	4b1c      	ldr	r3, [pc, #112]	; (401974 <vTaskSuspend+0xe8>)
  401904:	4798      	blx	r3
            taskEXIT_CRITICAL();
  401906:	4b18      	ldr	r3, [pc, #96]	; (401968 <vTaskSuspend+0xdc>)
  401908:	4798      	blx	r3
  40190a:	e7f0      	b.n	4018ee <vTaskSuspend+0x62>
            if( xSchedulerRunning != pdFALSE )
  40190c:	4b17      	ldr	r3, [pc, #92]	; (40196c <vTaskSuspend+0xe0>)
  40190e:	681b      	ldr	r3, [r3, #0]
  401910:	b18b      	cbz	r3, 401936 <vTaskSuspend+0xaa>
                configASSERT( uxSchedulerSuspended == 0 );
  401912:	4b19      	ldr	r3, [pc, #100]	; (401978 <vTaskSuspend+0xec>)
  401914:	681b      	ldr	r3, [r3, #0]
  401916:	b943      	cbnz	r3, 40192a <vTaskSuspend+0x9e>
                portYIELD_WITHIN_API();
  401918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40191c:	4b17      	ldr	r3, [pc, #92]	; (40197c <vTaskSuspend+0xf0>)
  40191e:	601a      	str	r2, [r3, #0]
  401920:	f3bf 8f4f 	dsb	sy
  401924:	f3bf 8f6f 	isb	sy
  401928:	bd38      	pop	{r3, r4, r5, pc}
                configASSERT( uxSchedulerSuspended == 0 );
  40192a:	f240 61fd 	movw	r1, #1789	; 0x6fd
  40192e:	4814      	ldr	r0, [pc, #80]	; (401980 <vTaskSuspend+0xf4>)
  401930:	4b14      	ldr	r3, [pc, #80]	; (401984 <vTaskSuspend+0xf8>)
  401932:	4798      	blx	r3
  401934:	e7f0      	b.n	401918 <vTaskSuspend+0x8c>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
  401936:	4b0a      	ldr	r3, [pc, #40]	; (401960 <vTaskSuspend+0xd4>)
  401938:	681a      	ldr	r2, [r3, #0]
  40193a:	4b13      	ldr	r3, [pc, #76]	; (401988 <vTaskSuspend+0xfc>)
  40193c:	681b      	ldr	r3, [r3, #0]
  40193e:	429a      	cmp	r2, r3
  401940:	d002      	beq.n	401948 <vTaskSuspend+0xbc>
                    vTaskSwitchContext();
  401942:	4b12      	ldr	r3, [pc, #72]	; (40198c <vTaskSuspend+0x100>)
  401944:	4798      	blx	r3
    }
  401946:	e7d6      	b.n	4018f6 <vTaskSuspend+0x6a>
                    pxCurrentTCB = NULL;
  401948:	2200      	movs	r2, #0
  40194a:	4b09      	ldr	r3, [pc, #36]	; (401970 <vTaskSuspend+0xe4>)
  40194c:	601a      	str	r2, [r3, #0]
  40194e:	bd38      	pop	{r3, r4, r5, pc}
  401950:	004002f5 	.word	0x004002f5
  401954:	004001fd 	.word	0x004001fd
  401958:	2000049c 	.word	0x2000049c
  40195c:	2000054c 	.word	0x2000054c
  401960:	200005a0 	.word	0x200005a0
  401964:	004001b1 	.word	0x004001b1
  401968:	0040033d 	.word	0x0040033d
  40196c:	2000059c 	.word	0x2000059c
  401970:	20000490 	.word	0x20000490
  401974:	00400db9 	.word	0x00400db9
  401978:	20000544 	.word	0x20000544
  40197c:	e000ed04 	.word	0xe000ed04
  401980:	00402d28 	.word	0x00402d28
  401984:	00402921 	.word	0x00402921
  401988:	2000053c 	.word	0x2000053c
  40198c:	004017bd 	.word	0x004017bd

00401990 <vTaskPlaceOnEventList>:
{
  401990:	b538      	push	{r3, r4, r5, lr}
  401992:	460c      	mov	r4, r1
    configASSERT( pxEventList );
  401994:	4605      	mov	r5, r0
  401996:	b150      	cbz	r0, 4019ae <vTaskPlaceOnEventList+0x1e>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401998:	4b08      	ldr	r3, [pc, #32]	; (4019bc <vTaskPlaceOnEventList+0x2c>)
  40199a:	6819      	ldr	r1, [r3, #0]
  40199c:	3118      	adds	r1, #24
  40199e:	4628      	mov	r0, r5
  4019a0:	4b07      	ldr	r3, [pc, #28]	; (4019c0 <vTaskPlaceOnEventList+0x30>)
  4019a2:	4798      	blx	r3
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  4019a4:	2101      	movs	r1, #1
  4019a6:	4620      	mov	r0, r4
  4019a8:	4b06      	ldr	r3, [pc, #24]	; (4019c4 <vTaskPlaceOnEventList+0x34>)
  4019aa:	4798      	blx	r3
  4019ac:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxEventList );
  4019ae:	f640 411c 	movw	r1, #3100	; 0xc1c
  4019b2:	4805      	ldr	r0, [pc, #20]	; (4019c8 <vTaskPlaceOnEventList+0x38>)
  4019b4:	4b05      	ldr	r3, [pc, #20]	; (4019cc <vTaskPlaceOnEventList+0x3c>)
  4019b6:	4798      	blx	r3
  4019b8:	e7ee      	b.n	401998 <vTaskPlaceOnEventList+0x8>
  4019ba:	bf00      	nop
  4019bc:	20000490 	.word	0x20000490
  4019c0:	004001c9 	.word	0x004001c9
  4019c4:	00400ea5 	.word	0x00400ea5
  4019c8:	00402d28 	.word	0x00402d28
  4019cc:	00402921 	.word	0x00402921

004019d0 <vTaskPlaceOnEventListRestricted>:
    {
  4019d0:	b570      	push	{r4, r5, r6, lr}
  4019d2:	460e      	mov	r6, r1
  4019d4:	4615      	mov	r5, r2
        configASSERT( pxEventList );
  4019d6:	4604      	mov	r4, r0
  4019d8:	b1d8      	cbz	r0, 401a12 <vTaskPlaceOnEventListRestricted+0x42>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4019da:	6862      	ldr	r2, [r4, #4]
  4019dc:	4b10      	ldr	r3, [pc, #64]	; (401a20 <vTaskPlaceOnEventListRestricted+0x50>)
  4019de:	6819      	ldr	r1, [r3, #0]
  4019e0:	61ca      	str	r2, [r1, #28]
  4019e2:	6819      	ldr	r1, [r3, #0]
  4019e4:	6890      	ldr	r0, [r2, #8]
  4019e6:	6208      	str	r0, [r1, #32]
  4019e8:	6890      	ldr	r0, [r2, #8]
  4019ea:	6819      	ldr	r1, [r3, #0]
  4019ec:	3118      	adds	r1, #24
  4019ee:	6041      	str	r1, [r0, #4]
  4019f0:	6819      	ldr	r1, [r3, #0]
  4019f2:	3118      	adds	r1, #24
  4019f4:	6091      	str	r1, [r2, #8]
  4019f6:	681b      	ldr	r3, [r3, #0]
  4019f8:	629c      	str	r4, [r3, #40]	; 0x28
  4019fa:	6823      	ldr	r3, [r4, #0]
  4019fc:	3301      	adds	r3, #1
  4019fe:	6023      	str	r3, [r4, #0]
            xTicksToWait = portMAX_DELAY;
  401a00:	2d00      	cmp	r5, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401a02:	4629      	mov	r1, r5
  401a04:	bf0c      	ite	eq
  401a06:	4630      	moveq	r0, r6
  401a08:	f04f 30ff 	movne.w	r0, #4294967295
  401a0c:	4b05      	ldr	r3, [pc, #20]	; (401a24 <vTaskPlaceOnEventListRestricted+0x54>)
  401a0e:	4798      	blx	r3
  401a10:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxEventList );
  401a12:	f640 4152 	movw	r1, #3154	; 0xc52
  401a16:	4804      	ldr	r0, [pc, #16]	; (401a28 <vTaskPlaceOnEventListRestricted+0x58>)
  401a18:	4b04      	ldr	r3, [pc, #16]	; (401a2c <vTaskPlaceOnEventListRestricted+0x5c>)
  401a1a:	4798      	blx	r3
  401a1c:	e7dd      	b.n	4019da <vTaskPlaceOnEventListRestricted+0xa>
  401a1e:	bf00      	nop
  401a20:	20000490 	.word	0x20000490
  401a24:	00400ea5 	.word	0x00400ea5
  401a28:	00402d28 	.word	0x00402d28
  401a2c:	00402921 	.word	0x00402921

00401a30 <xTaskRemoveFromEventList>:
{
  401a30:	b538      	push	{r3, r4, r5, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401a32:	68c3      	ldr	r3, [r0, #12]
  401a34:	68dc      	ldr	r4, [r3, #12]
    configASSERT( pxUnblockedTCB );
  401a36:	2c00      	cmp	r4, #0
  401a38:	d051      	beq.n	401ade <xTaskRemoveFromEventList+0xae>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
  401a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401a3c:	69e2      	ldr	r2, [r4, #28]
  401a3e:	6a21      	ldr	r1, [r4, #32]
  401a40:	6091      	str	r1, [r2, #8]
  401a42:	6a22      	ldr	r2, [r4, #32]
  401a44:	69e1      	ldr	r1, [r4, #28]
  401a46:	6051      	str	r1, [r2, #4]
  401a48:	f104 0118 	add.w	r1, r4, #24
  401a4c:	685a      	ldr	r2, [r3, #4]
  401a4e:	428a      	cmp	r2, r1
  401a50:	bf04      	itt	eq
  401a52:	6a22      	ldreq	r2, [r4, #32]
  401a54:	605a      	streq	r2, [r3, #4]
  401a56:	2200      	movs	r2, #0
  401a58:	62a2      	str	r2, [r4, #40]	; 0x28
  401a5a:	681a      	ldr	r2, [r3, #0]
  401a5c:	3a01      	subs	r2, #1
  401a5e:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401a60:	4b28      	ldr	r3, [pc, #160]	; (401b04 <xTaskRemoveFromEventList+0xd4>)
  401a62:	681b      	ldr	r3, [r3, #0]
  401a64:	2b00      	cmp	r3, #0
  401a66:	d140      	bne.n	401aea <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
  401a68:	6963      	ldr	r3, [r4, #20]
  401a6a:	68a2      	ldr	r2, [r4, #8]
  401a6c:	68e1      	ldr	r1, [r4, #12]
  401a6e:	6091      	str	r1, [r2, #8]
  401a70:	68e2      	ldr	r2, [r4, #12]
  401a72:	68a1      	ldr	r1, [r4, #8]
  401a74:	6051      	str	r1, [r2, #4]
  401a76:	1d21      	adds	r1, r4, #4
  401a78:	685a      	ldr	r2, [r3, #4]
  401a7a:	428a      	cmp	r2, r1
  401a7c:	bf04      	itt	eq
  401a7e:	68e2      	ldreq	r2, [r4, #12]
  401a80:	605a      	streq	r2, [r3, #4]
  401a82:	2200      	movs	r2, #0
  401a84:	6162      	str	r2, [r4, #20]
  401a86:	681a      	ldr	r2, [r3, #0]
  401a88:	3a01      	subs	r2, #1
  401a8a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
  401a8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401a8e:	481e      	ldr	r0, [pc, #120]	; (401b08 <xTaskRemoveFromEventList+0xd8>)
  401a90:	6805      	ldr	r5, [r0, #0]
  401a92:	2201      	movs	r2, #1
  401a94:	409a      	lsls	r2, r3
  401a96:	432a      	orrs	r2, r5
  401a98:	6002      	str	r2, [r0, #0]
  401a9a:	4a1c      	ldr	r2, [pc, #112]	; (401b0c <xTaskRemoveFromEventList+0xdc>)
  401a9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401aa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401aa4:	685b      	ldr	r3, [r3, #4]
  401aa6:	60a3      	str	r3, [r4, #8]
  401aa8:	6898      	ldr	r0, [r3, #8]
  401aaa:	60e0      	str	r0, [r4, #12]
  401aac:	6898      	ldr	r0, [r3, #8]
  401aae:	6041      	str	r1, [r0, #4]
  401ab0:	6099      	str	r1, [r3, #8]
  401ab2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ab4:	0083      	lsls	r3, r0, #2
  401ab6:	1819      	adds	r1, r3, r0
  401ab8:	0089      	lsls	r1, r1, #2
  401aba:	1855      	adds	r5, r2, r1
  401abc:	6165      	str	r5, [r4, #20]
  401abe:	5851      	ldr	r1, [r2, r1]
  401ac0:	3101      	adds	r1, #1
  401ac2:	4403      	add	r3, r0
  401ac4:	009b      	lsls	r3, r3, #2
  401ac6:	50d1      	str	r1, [r2, r3]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401ac8:	4b11      	ldr	r3, [pc, #68]	; (401b10 <xTaskRemoveFromEventList+0xe0>)
  401aca:	681b      	ldr	r3, [r3, #0]
  401acc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401ad0:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
  401ad2:	bf83      	ittte	hi
  401ad4:	2001      	movhi	r0, #1
  401ad6:	4b0f      	ldrhi	r3, [pc, #60]	; (401b14 <xTaskRemoveFromEventList+0xe4>)
  401ad8:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
  401ada:	2000      	movls	r0, #0
}
  401adc:	bd38      	pop	{r3, r4, r5, pc}
    configASSERT( pxUnblockedTCB );
  401ade:	f640 4182 	movw	r1, #3202	; 0xc82
  401ae2:	480d      	ldr	r0, [pc, #52]	; (401b18 <xTaskRemoveFromEventList+0xe8>)
  401ae4:	4b0d      	ldr	r3, [pc, #52]	; (401b1c <xTaskRemoveFromEventList+0xec>)
  401ae6:	4798      	blx	r3
  401ae8:	e7a7      	b.n	401a3a <xTaskRemoveFromEventList+0xa>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401aea:	4b0d      	ldr	r3, [pc, #52]	; (401b20 <xTaskRemoveFromEventList+0xf0>)
  401aec:	685a      	ldr	r2, [r3, #4]
  401aee:	61e2      	str	r2, [r4, #28]
  401af0:	6890      	ldr	r0, [r2, #8]
  401af2:	6220      	str	r0, [r4, #32]
  401af4:	6890      	ldr	r0, [r2, #8]
  401af6:	6041      	str	r1, [r0, #4]
  401af8:	6091      	str	r1, [r2, #8]
  401afa:	62a3      	str	r3, [r4, #40]	; 0x28
  401afc:	681a      	ldr	r2, [r3, #0]
  401afe:	3201      	adds	r2, #1
  401b00:	601a      	str	r2, [r3, #0]
  401b02:	e7e1      	b.n	401ac8 <xTaskRemoveFromEventList+0x98>
  401b04:	20000544 	.word	0x20000544
  401b08:	2000054c 	.word	0x2000054c
  401b0c:	2000049c 	.word	0x2000049c
  401b10:	20000490 	.word	0x20000490
  401b14:	200005cc 	.word	0x200005cc
  401b18:	00402d28 	.word	0x00402d28
  401b1c:	00402921 	.word	0x00402921
  401b20:	20000588 	.word	0x20000588

00401b24 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
  401b24:	4b03      	ldr	r3, [pc, #12]	; (401b34 <vTaskInternalSetTimeOutState+0x10>)
  401b26:	681b      	ldr	r3, [r3, #0]
  401b28:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
  401b2a:	4b03      	ldr	r3, [pc, #12]	; (401b38 <vTaskInternalSetTimeOutState+0x14>)
  401b2c:	681b      	ldr	r3, [r3, #0]
  401b2e:	6043      	str	r3, [r0, #4]
  401b30:	4770      	bx	lr
  401b32:	bf00      	nop
  401b34:	20000580 	.word	0x20000580
  401b38:	200005c8 	.word	0x200005c8

00401b3c <xTaskCheckForTimeOut>:
{
  401b3c:	b570      	push	{r4, r5, r6, lr}
  401b3e:	460c      	mov	r4, r1
    configASSERT( pxTimeOut );
  401b40:	4605      	mov	r5, r0
  401b42:	b1d0      	cbz	r0, 401b7a <xTaskCheckForTimeOut+0x3e>
    configASSERT( pxTicksToWait );
  401b44:	b1fc      	cbz	r4, 401b86 <xTaskCheckForTimeOut+0x4a>
    taskENTER_CRITICAL();
  401b46:	4b19      	ldr	r3, [pc, #100]	; (401bac <xTaskCheckForTimeOut+0x70>)
  401b48:	4798      	blx	r3
        const TickType_t xConstTickCount = xTickCount;
  401b4a:	4b19      	ldr	r3, [pc, #100]	; (401bb0 <xTaskCheckForTimeOut+0x74>)
  401b4c:	681b      	ldr	r3, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
  401b4e:	6822      	ldr	r2, [r4, #0]
  401b50:	f1b2 3fff 	cmp.w	r2, #4294967295
  401b54:	d028      	beq.n	401ba8 <xTaskCheckForTimeOut+0x6c>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401b56:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401b58:	4816      	ldr	r0, [pc, #88]	; (401bb4 <xTaskCheckForTimeOut+0x78>)
  401b5a:	6800      	ldr	r0, [r0, #0]
  401b5c:	682e      	ldr	r6, [r5, #0]
  401b5e:	4286      	cmp	r6, r0
  401b60:	d001      	beq.n	401b66 <xTaskCheckForTimeOut+0x2a>
  401b62:	428b      	cmp	r3, r1
  401b64:	d215      	bcs.n	401b92 <xTaskCheckForTimeOut+0x56>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401b66:	1a5b      	subs	r3, r3, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401b68:	4293      	cmp	r3, r2
  401b6a:	d316      	bcc.n	401b9a <xTaskCheckForTimeOut+0x5e>
            *pxTicksToWait = ( TickType_t ) 0;
  401b6c:	2300      	movs	r3, #0
  401b6e:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401b70:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
  401b72:	4b11      	ldr	r3, [pc, #68]	; (401bb8 <xTaskCheckForTimeOut+0x7c>)
  401b74:	4798      	blx	r3
}
  401b76:	4620      	mov	r0, r4
  401b78:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( pxTimeOut );
  401b7a:	f640 41fd 	movw	r1, #3325	; 0xcfd
  401b7e:	480f      	ldr	r0, [pc, #60]	; (401bbc <xTaskCheckForTimeOut+0x80>)
  401b80:	4b0f      	ldr	r3, [pc, #60]	; (401bc0 <xTaskCheckForTimeOut+0x84>)
  401b82:	4798      	blx	r3
  401b84:	e7de      	b.n	401b44 <xTaskCheckForTimeOut+0x8>
    configASSERT( pxTicksToWait );
  401b86:	f640 41fe 	movw	r1, #3326	; 0xcfe
  401b8a:	480c      	ldr	r0, [pc, #48]	; (401bbc <xTaskCheckForTimeOut+0x80>)
  401b8c:	4b0c      	ldr	r3, [pc, #48]	; (401bc0 <xTaskCheckForTimeOut+0x84>)
  401b8e:	4798      	blx	r3
  401b90:	e7d9      	b.n	401b46 <xTaskCheckForTimeOut+0xa>
            *pxTicksToWait = ( TickType_t ) 0;
  401b92:	2300      	movs	r3, #0
  401b94:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
  401b96:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
  401b98:	e7eb      	b.n	401b72 <xTaskCheckForTimeOut+0x36>
            *pxTicksToWait -= xElapsedTime;
  401b9a:	1ad3      	subs	r3, r2, r3
  401b9c:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
  401b9e:	4628      	mov	r0, r5
  401ba0:	4b08      	ldr	r3, [pc, #32]	; (401bc4 <xTaskCheckForTimeOut+0x88>)
  401ba2:	4798      	blx	r3
            xReturn = pdFALSE;
  401ba4:	2400      	movs	r4, #0
  401ba6:	e7e4      	b.n	401b72 <xTaskCheckForTimeOut+0x36>
                xReturn = pdFALSE;
  401ba8:	2400      	movs	r4, #0
  401baa:	e7e2      	b.n	401b72 <xTaskCheckForTimeOut+0x36>
  401bac:	004002f5 	.word	0x004002f5
  401bb0:	200005c8 	.word	0x200005c8
  401bb4:	20000580 	.word	0x20000580
  401bb8:	0040033d 	.word	0x0040033d
  401bbc:	00402d28 	.word	0x00402d28
  401bc0:	00402921 	.word	0x00402921
  401bc4:	00401b25 	.word	0x00401b25

00401bc8 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
  401bc8:	2201      	movs	r2, #1
  401bca:	4b01      	ldr	r3, [pc, #4]	; (401bd0 <vTaskMissedYield+0x8>)
  401bcc:	601a      	str	r2, [r3, #0]
  401bce:	4770      	bx	lr
  401bd0:	200005cc 	.word	0x200005cc

00401bd4 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
  401bd4:	4b05      	ldr	r3, [pc, #20]	; (401bec <xTaskGetSchedulerState+0x18>)
  401bd6:	681b      	ldr	r3, [r3, #0]
  401bd8:	b133      	cbz	r3, 401be8 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401bda:	4b05      	ldr	r3, [pc, #20]	; (401bf0 <xTaskGetSchedulerState+0x1c>)
  401bdc:	681b      	ldr	r3, [r3, #0]
                xReturn = taskSCHEDULER_SUSPENDED;
  401bde:	2b00      	cmp	r3, #0
  401be0:	bf0c      	ite	eq
  401be2:	2002      	moveq	r0, #2
  401be4:	2000      	movne	r0, #0
  401be6:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
  401be8:	2001      	movs	r0, #1
    }
  401bea:	4770      	bx	lr
  401bec:	2000059c 	.word	0x2000059c
  401bf0:	20000544 	.word	0x20000544

00401bf4 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
  401bf4:	2800      	cmp	r0, #0
  401bf6:	d04d      	beq.n	401c94 <xTaskPriorityDisinherit+0xa0>
    {
  401bf8:	b570      	push	{r4, r5, r6, lr}
  401bfa:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
  401bfc:	4b27      	ldr	r3, [pc, #156]	; (401c9c <xTaskPriorityDisinherit+0xa8>)
  401bfe:	681b      	ldr	r3, [r3, #0]
  401c00:	4298      	cmp	r0, r3
  401c02:	d004      	beq.n	401c0e <xTaskPriorityDisinherit+0x1a>
  401c04:	f241 014f 	movw	r1, #4175	; 0x104f
  401c08:	4825      	ldr	r0, [pc, #148]	; (401ca0 <xTaskPriorityDisinherit+0xac>)
  401c0a:	4b26      	ldr	r3, [pc, #152]	; (401ca4 <xTaskPriorityDisinherit+0xb0>)
  401c0c:	4798      	blx	r3
            configASSERT( pxTCB->uxMutexesHeld );
  401c0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401c10:	b14b      	cbz	r3, 401c26 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
  401c12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401c14:	3b01      	subs	r3, #1
  401c16:	64e3      	str	r3, [r4, #76]	; 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401c18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401c1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  401c1c:	4291      	cmp	r1, r2
  401c1e:	d03b      	beq.n	401c98 <xTaskPriorityDisinherit+0xa4>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401c20:	b13b      	cbz	r3, 401c32 <xTaskPriorityDisinherit+0x3e>
        BaseType_t xReturn = pdFALSE;
  401c22:	2000      	movs	r0, #0
    }
  401c24:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB->uxMutexesHeld );
  401c26:	f241 0150 	movw	r1, #4176	; 0x1050
  401c2a:	481d      	ldr	r0, [pc, #116]	; (401ca0 <xTaskPriorityDisinherit+0xac>)
  401c2c:	4b1d      	ldr	r3, [pc, #116]	; (401ca4 <xTaskPriorityDisinherit+0xb0>)
  401c2e:	4798      	blx	r3
  401c30:	e7ef      	b.n	401c12 <xTaskPriorityDisinherit+0x1e>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401c32:	1d25      	adds	r5, r4, #4
  401c34:	4628      	mov	r0, r5
  401c36:	4b1c      	ldr	r3, [pc, #112]	; (401ca8 <xTaskPriorityDisinherit+0xb4>)
  401c38:	4798      	blx	r3
  401c3a:	b938      	cbnz	r0, 401c4c <xTaskPriorityDisinherit+0x58>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
  401c3c:	491b      	ldr	r1, [pc, #108]	; (401cac <xTaskPriorityDisinherit+0xb8>)
  401c3e:	680b      	ldr	r3, [r1, #0]
  401c40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c42:	2201      	movs	r2, #1
  401c44:	4082      	lsls	r2, r0
  401c46:	ea23 0302 	bic.w	r3, r3, r2
  401c4a:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
  401c4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c50:	f1c3 0208 	rsb	r2, r3, #8
  401c54:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
  401c56:	4915      	ldr	r1, [pc, #84]	; (401cac <xTaskPriorityDisinherit+0xb8>)
  401c58:	680e      	ldr	r6, [r1, #0]
  401c5a:	2001      	movs	r0, #1
  401c5c:	fa00 f203 	lsl.w	r2, r0, r3
  401c60:	4332      	orrs	r2, r6
  401c62:	600a      	str	r2, [r1, #0]
  401c64:	4a12      	ldr	r2, [pc, #72]	; (401cb0 <xTaskPriorityDisinherit+0xbc>)
  401c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401c6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401c6e:	685b      	ldr	r3, [r3, #4]
  401c70:	60a3      	str	r3, [r4, #8]
  401c72:	6899      	ldr	r1, [r3, #8]
  401c74:	60e1      	str	r1, [r4, #12]
  401c76:	6899      	ldr	r1, [r3, #8]
  401c78:	604d      	str	r5, [r1, #4]
  401c7a:	609d      	str	r5, [r3, #8]
  401c7c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  401c7e:	00ab      	lsls	r3, r5, #2
  401c80:	1959      	adds	r1, r3, r5
  401c82:	0089      	lsls	r1, r1, #2
  401c84:	1856      	adds	r6, r2, r1
  401c86:	6166      	str	r6, [r4, #20]
  401c88:	5851      	ldr	r1, [r2, r1]
  401c8a:	4401      	add	r1, r0
  401c8c:	442b      	add	r3, r5
  401c8e:	009b      	lsls	r3, r3, #2
  401c90:	50d1      	str	r1, [r2, r3]
  401c92:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xReturn = pdFALSE;
  401c94:	2000      	movs	r0, #0
  401c96:	4770      	bx	lr
  401c98:	2000      	movs	r0, #0
  401c9a:	bd70      	pop	{r4, r5, r6, pc}
  401c9c:	20000490 	.word	0x20000490
  401ca0:	00402d28 	.word	0x00402d28
  401ca4:	00402921 	.word	0x00402921
  401ca8:	004001fd 	.word	0x004001fd
  401cac:	2000054c 	.word	0x2000054c
  401cb0:	2000049c 	.word	0x2000049c

00401cb4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
  401cb4:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401cb6:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401cb8:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
  401cba:	4291      	cmp	r1, r2
  401cbc:	d80c      	bhi.n	401cd8 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401cbe:	1ad2      	subs	r2, r2, r3
  401cc0:	6983      	ldr	r3, [r0, #24]
  401cc2:	429a      	cmp	r2, r3
  401cc4:	d301      	bcc.n	401cca <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
  401cc6:	2001      	movs	r0, #1
  401cc8:	bd08      	pop	{r3, pc}
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401cca:	1d01      	adds	r1, r0, #4
  401ccc:	4b09      	ldr	r3, [pc, #36]	; (401cf4 <prvInsertTimerInActiveList+0x40>)
  401cce:	6818      	ldr	r0, [r3, #0]
  401cd0:	4b09      	ldr	r3, [pc, #36]	; (401cf8 <prvInsertTimerInActiveList+0x44>)
  401cd2:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  401cd4:	2000      	movs	r0, #0
  401cd6:	bd08      	pop	{r3, pc}
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401cd8:	429a      	cmp	r2, r3
  401cda:	d201      	bcs.n	401ce0 <prvInsertTimerInActiveList+0x2c>
  401cdc:	4299      	cmp	r1, r3
  401cde:	d206      	bcs.n	401cee <prvInsertTimerInActiveList+0x3a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401ce0:	1d01      	adds	r1, r0, #4
  401ce2:	4b06      	ldr	r3, [pc, #24]	; (401cfc <prvInsertTimerInActiveList+0x48>)
  401ce4:	6818      	ldr	r0, [r3, #0]
  401ce6:	4b04      	ldr	r3, [pc, #16]	; (401cf8 <prvInsertTimerInActiveList+0x44>)
  401ce8:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
  401cea:	2000      	movs	r0, #0
  401cec:	bd08      	pop	{r3, pc}
                xProcessTimerNow = pdTRUE;
  401cee:	2001      	movs	r0, #1
            }
        }

        return xProcessTimerNow;
    }
  401cf0:	bd08      	pop	{r3, pc}
  401cf2:	bf00      	nop
  401cf4:	200005d4 	.word	0x200005d4
  401cf8:	004001c9 	.word	0x004001c9
  401cfc:	200005d0 	.word	0x200005d0

00401d00 <prvReloadTimer>:
    {
  401d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d02:	4604      	mov	r4, r0
  401d04:	460d      	mov	r5, r1
  401d06:	4617      	mov	r7, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401d08:	4e07      	ldr	r6, [pc, #28]	; (401d28 <prvReloadTimer+0x28>)
  401d0a:	e004      	b.n	401d16 <prvReloadTimer+0x16>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
  401d0c:	69a3      	ldr	r3, [r4, #24]
  401d0e:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d10:	6a23      	ldr	r3, [r4, #32]
  401d12:	4620      	mov	r0, r4
  401d14:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
  401d16:	69a1      	ldr	r1, [r4, #24]
  401d18:	462b      	mov	r3, r5
  401d1a:	463a      	mov	r2, r7
  401d1c:	4429      	add	r1, r5
  401d1e:	4620      	mov	r0, r4
  401d20:	47b0      	blx	r6
  401d22:	2800      	cmp	r0, #0
  401d24:	d1f2      	bne.n	401d0c <prvReloadTimer+0xc>
    }
  401d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d28:	00401cb5 	.word	0x00401cb5

00401d2c <prvProcessExpiredTimer>:
    {
  401d2c:	b570      	push	{r4, r5, r6, lr}
  401d2e:	4605      	mov	r5, r0
  401d30:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401d32:	4b0d      	ldr	r3, [pc, #52]	; (401d68 <prvProcessExpiredTimer+0x3c>)
  401d34:	681b      	ldr	r3, [r3, #0]
  401d36:	68db      	ldr	r3, [r3, #12]
  401d38:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d3a:	1d20      	adds	r0, r4, #4
  401d3c:	4b0b      	ldr	r3, [pc, #44]	; (401d6c <prvProcessExpiredTimer+0x40>)
  401d3e:	4798      	blx	r3
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401d40:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401d44:	f013 0f04 	tst.w	r3, #4
  401d48:	d107      	bne.n	401d5a <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401d4a:	f023 0301 	bic.w	r3, r3, #1
  401d4e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d52:	6a23      	ldr	r3, [r4, #32]
  401d54:	4620      	mov	r0, r4
  401d56:	4798      	blx	r3
  401d58:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
  401d5a:	4632      	mov	r2, r6
  401d5c:	4629      	mov	r1, r5
  401d5e:	4620      	mov	r0, r4
  401d60:	4b03      	ldr	r3, [pc, #12]	; (401d70 <prvProcessExpiredTimer+0x44>)
  401d62:	4798      	blx	r3
  401d64:	e7f5      	b.n	401d52 <prvProcessExpiredTimer+0x26>
  401d66:	bf00      	nop
  401d68:	200005d0 	.word	0x200005d0
  401d6c:	004001fd 	.word	0x004001fd
  401d70:	00401d01 	.word	0x00401d01

00401d74 <prvSampleTimeNow>:
    {
  401d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d78:	4680      	mov	r8, r0
        xTimeNow = xTaskGetTickCount();
  401d7a:	4b14      	ldr	r3, [pc, #80]	; (401dcc <prvSampleTimeNow+0x58>)
  401d7c:	4798      	blx	r3
  401d7e:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
  401d80:	4b13      	ldr	r3, [pc, #76]	; (401dd0 <prvSampleTimeNow+0x5c>)
  401d82:	681b      	ldr	r3, [r3, #0]
  401d84:	4298      	cmp	r0, r3
  401d86:	d307      	bcc.n	401d98 <prvSampleTimeNow+0x24>
            *pxTimerListsWereSwitched = pdFALSE;
  401d88:	2300      	movs	r3, #0
  401d8a:	f8c8 3000 	str.w	r3, [r8]
        xLastTime = xTimeNow;
  401d8e:	4b10      	ldr	r3, [pc, #64]	; (401dd0 <prvSampleTimeNow+0x5c>)
  401d90:	601c      	str	r4, [r3, #0]
    }
  401d92:	4620      	mov	r0, r4
  401d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401d98:	4b0e      	ldr	r3, [pc, #56]	; (401dd4 <prvSampleTimeNow+0x60>)
  401d9a:	681b      	ldr	r3, [r3, #0]
  401d9c:	681a      	ldr	r2, [r3, #0]
  401d9e:	b15a      	cbz	r2, 401db8 <prvSampleTimeNow+0x44>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401da0:	f04f 37ff 	mov.w	r7, #4294967295
  401da4:	4e0c      	ldr	r6, [pc, #48]	; (401dd8 <prvSampleTimeNow+0x64>)
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401da6:	4d0b      	ldr	r5, [pc, #44]	; (401dd4 <prvSampleTimeNow+0x60>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401da8:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
  401daa:	4639      	mov	r1, r7
  401dac:	6818      	ldr	r0, [r3, #0]
  401dae:	47b0      	blx	r6
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401db0:	682b      	ldr	r3, [r5, #0]
  401db2:	681a      	ldr	r2, [r3, #0]
  401db4:	2a00      	cmp	r2, #0
  401db6:	d1f7      	bne.n	401da8 <prvSampleTimeNow+0x34>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
  401db8:	4a08      	ldr	r2, [pc, #32]	; (401ddc <prvSampleTimeNow+0x68>)
  401dba:	6810      	ldr	r0, [r2, #0]
  401dbc:	4905      	ldr	r1, [pc, #20]	; (401dd4 <prvSampleTimeNow+0x60>)
  401dbe:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
  401dc0:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
  401dc2:	2301      	movs	r3, #1
  401dc4:	f8c8 3000 	str.w	r3, [r8]
  401dc8:	e7e1      	b.n	401d8e <prvSampleTimeNow+0x1a>
  401dca:	bf00      	nop
  401dcc:	004013fd 	.word	0x004013fd
  401dd0:	20000600 	.word	0x20000600
  401dd4:	200005d0 	.word	0x200005d0
  401dd8:	00401d2d 	.word	0x00401d2d
  401ddc:	200005d4 	.word	0x200005d4

00401de0 <prvTimerTask>:
    {
  401de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401de4:	b087      	sub	sp, #28
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401de6:	4e5e      	ldr	r6, [pc, #376]	; (401f60 <prvTimerTask+0x180>)
                ( void ) xTaskResumeAll();
  401de8:	4f5e      	ldr	r7, [pc, #376]	; (401f64 <prvTimerTask+0x184>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401dea:	4d5f      	ldr	r5, [pc, #380]	; (401f68 <prvTimerTask+0x188>)
                        portYIELD_WITHIN_API();
  401dec:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 401f98 <prvTimerTask+0x1b8>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401df0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 401f9c <prvTimerTask+0x1bc>
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401df4:	6833      	ldr	r3, [r6, #0]
  401df6:	681a      	ldr	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
  401df8:	b192      	cbz	r2, 401e20 <prvTimerTask+0x40>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401dfa:	68db      	ldr	r3, [r3, #12]
  401dfc:	f8d3 a000 	ldr.w	sl, [r3]
        vTaskSuspendAll();
  401e00:	4b5a      	ldr	r3, [pc, #360]	; (401f6c <prvTimerTask+0x18c>)
  401e02:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e04:	a802      	add	r0, sp, #8
  401e06:	4b5a      	ldr	r3, [pc, #360]	; (401f70 <prvTimerTask+0x190>)
  401e08:	4798      	blx	r3
  401e0a:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401e0c:	9a02      	ldr	r2, [sp, #8]
  401e0e:	bb42      	cbnz	r2, 401e62 <prvTimerTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401e10:	4550      	cmp	r0, sl
  401e12:	d315      	bcc.n	401e40 <prvTimerTask+0x60>
                    ( void ) xTaskResumeAll();
  401e14:	47b8      	blx	r7
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401e16:	4621      	mov	r1, r4
  401e18:	4650      	mov	r0, sl
  401e1a:	4b56      	ldr	r3, [pc, #344]	; (401f74 <prvTimerTask+0x194>)
  401e1c:	4798      	blx	r3
  401e1e:	e01e      	b.n	401e5e <prvTimerTask+0x7e>
        vTaskSuspendAll();
  401e20:	4b52      	ldr	r3, [pc, #328]	; (401f6c <prvTimerTask+0x18c>)
  401e22:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e24:	a802      	add	r0, sp, #8
  401e26:	4b52      	ldr	r3, [pc, #328]	; (401f70 <prvTimerTask+0x190>)
  401e28:	4798      	blx	r3
  401e2a:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
  401e2c:	9b02      	ldr	r3, [sp, #8]
  401e2e:	b9c3      	cbnz	r3, 401e62 <prvTimerTask+0x82>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401e30:	4b51      	ldr	r3, [pc, #324]	; (401f78 <prvTimerTask+0x198>)
  401e32:	681b      	ldr	r3, [r3, #0]
  401e34:	681a      	ldr	r2, [r3, #0]
  401e36:	fab2 f282 	clz	r2, r2
  401e3a:	0952      	lsrs	r2, r2, #5
            xNextExpireTime = ( TickType_t ) 0U;
  401e3c:	f04f 0a00 	mov.w	sl, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401e40:	ebaa 0104 	sub.w	r1, sl, r4
  401e44:	6828      	ldr	r0, [r5, #0]
  401e46:	4b4d      	ldr	r3, [pc, #308]	; (401f7c <prvTimerTask+0x19c>)
  401e48:	4798      	blx	r3
                    if( xTaskResumeAll() == pdFALSE )
  401e4a:	47b8      	blx	r7
  401e4c:	b938      	cbnz	r0, 401e5e <prvTimerTask+0x7e>
                        portYIELD_WITHIN_API();
  401e4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401e52:	f8c9 3000 	str.w	r3, [r9]
  401e56:	f3bf 8f4f 	dsb	sy
  401e5a:	f3bf 8f6f 	isb	sy
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401e5e:	4c48      	ldr	r4, [pc, #288]	; (401f80 <prvTimerTask+0x1a0>)
  401e60:	e008      	b.n	401e74 <prvTimerTask+0x94>
                ( void ) xTaskResumeAll();
  401e62:	47b8      	blx	r7
  401e64:	e7fb      	b.n	401e5e <prvTimerTask+0x7e>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401e66:	9905      	ldr	r1, [sp, #20]
  401e68:	9804      	ldr	r0, [sp, #16]
  401e6a:	9b03      	ldr	r3, [sp, #12]
  401e6c:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401e6e:	9b02      	ldr	r3, [sp, #8]
  401e70:	2b00      	cmp	r3, #0
  401e72:	da08      	bge.n	401e86 <prvTimerTask+0xa6>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401e74:	2200      	movs	r2, #0
  401e76:	a902      	add	r1, sp, #8
  401e78:	6828      	ldr	r0, [r5, #0]
  401e7a:	47a0      	blx	r4
  401e7c:	2800      	cmp	r0, #0
  401e7e:	d0b9      	beq.n	401df4 <prvTimerTask+0x14>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401e80:	9b02      	ldr	r3, [sp, #8]
  401e82:	2b00      	cmp	r3, #0
  401e84:	dbef      	blt.n	401e66 <prvTimerTask+0x86>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401e86:	f8dd a010 	ldr.w	sl, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  401e8a:	f8da 3014 	ldr.w	r3, [sl, #20]
  401e8e:	b113      	cbz	r3, 401e96 <prvTimerTask+0xb6>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401e90:	f10a 0004 	add.w	r0, sl, #4
  401e94:	47c0      	blx	r8
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e96:	a801      	add	r0, sp, #4
  401e98:	4b35      	ldr	r3, [pc, #212]	; (401f70 <prvTimerTask+0x190>)
  401e9a:	4798      	blx	r3
  401e9c:	4683      	mov	fp, r0
                switch( xMessage.xMessageID )
  401e9e:	9b02      	ldr	r3, [sp, #8]
  401ea0:	3b01      	subs	r3, #1
  401ea2:	2b08      	cmp	r3, #8
  401ea4:	d8e6      	bhi.n	401e74 <prvTimerTask+0x94>
  401ea6:	e8df f003 	tbb	[pc, r3]
  401eaa:	0505      	.short	0x0505
  401eac:	054d342d 	.word	0x054d342d
  401eb0:	2d05      	.short	0x2d05
  401eb2:	34          	.byte	0x34
  401eb3:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401eb4:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401eb8:	f043 0301 	orr.w	r3, r3, #1
  401ebc:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  401ec0:	9903      	ldr	r1, [sp, #12]
  401ec2:	f8da 0018 	ldr.w	r0, [sl, #24]
  401ec6:	460b      	mov	r3, r1
  401ec8:	465a      	mov	r2, fp
  401eca:	4401      	add	r1, r0
  401ecc:	4650      	mov	r0, sl
  401ece:	4c2d      	ldr	r4, [pc, #180]	; (401f84 <prvTimerTask+0x1a4>)
  401ed0:	47a0      	blx	r4
  401ed2:	2800      	cmp	r0, #0
  401ed4:	d0c3      	beq.n	401e5e <prvTimerTask+0x7e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401ed6:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401eda:	f013 0f04 	tst.w	r3, #4
  401ede:	d108      	bne.n	401ef2 <prvTimerTask+0x112>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401ee0:	f023 0301 	bic.w	r3, r3, #1
  401ee4:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401ee8:	f8da 3020 	ldr.w	r3, [sl, #32]
  401eec:	4650      	mov	r0, sl
  401eee:	4798      	blx	r3
  401ef0:	e7b5      	b.n	401e5e <prvTimerTask+0x7e>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
  401ef2:	f8da 3018 	ldr.w	r3, [sl, #24]
  401ef6:	465a      	mov	r2, fp
  401ef8:	9903      	ldr	r1, [sp, #12]
  401efa:	4419      	add	r1, r3
  401efc:	4650      	mov	r0, sl
  401efe:	4b22      	ldr	r3, [pc, #136]	; (401f88 <prvTimerTask+0x1a8>)
  401f00:	4798      	blx	r3
  401f02:	e7f1      	b.n	401ee8 <prvTimerTask+0x108>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401f04:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401f08:	f023 0301 	bic.w	r3, r3, #1
  401f0c:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  401f10:	e7a5      	b.n	401e5e <prvTimerTask+0x7e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401f12:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401f16:	f043 0301 	orr.w	r3, r3, #1
  401f1a:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401f1e:	9b03      	ldr	r3, [sp, #12]
  401f20:	f8ca 3018 	str.w	r3, [sl, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401f24:	b143      	cbz	r3, 401f38 <prvTimerTask+0x158>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401f26:	f8da 1018 	ldr.w	r1, [sl, #24]
  401f2a:	465b      	mov	r3, fp
  401f2c:	465a      	mov	r2, fp
  401f2e:	4459      	add	r1, fp
  401f30:	4650      	mov	r0, sl
  401f32:	4c14      	ldr	r4, [pc, #80]	; (401f84 <prvTimerTask+0x1a4>)
  401f34:	47a0      	blx	r4
  401f36:	e792      	b.n	401e5e <prvTimerTask+0x7e>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401f38:	f240 3159 	movw	r1, #857	; 0x359
  401f3c:	4813      	ldr	r0, [pc, #76]	; (401f8c <prvTimerTask+0x1ac>)
  401f3e:	4b14      	ldr	r3, [pc, #80]	; (401f90 <prvTimerTask+0x1b0>)
  401f40:	4798      	blx	r3
  401f42:	e7f0      	b.n	401f26 <prvTimerTask+0x146>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  401f44:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401f48:	f013 0f02 	tst.w	r3, #2
  401f4c:	d004      	beq.n	401f58 <prvTimerTask+0x178>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
  401f4e:	f023 0301 	bic.w	r3, r3, #1
  401f52:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  401f56:	e782      	b.n	401e5e <prvTimerTask+0x7e>
                                    vPortFree( pxTimer );
  401f58:	4650      	mov	r0, sl
  401f5a:	4b0e      	ldr	r3, [pc, #56]	; (401f94 <prvTimerTask+0x1b4>)
  401f5c:	4798      	blx	r3
  401f5e:	e77e      	b.n	401e5e <prvTimerTask+0x7e>
  401f60:	200005d0 	.word	0x200005d0
  401f64:	004015c5 	.word	0x004015c5
  401f68:	20000604 	.word	0x20000604
  401f6c:	004013ed 	.word	0x004013ed
  401f70:	00401d75 	.word	0x00401d75
  401f74:	00401d2d 	.word	0x00401d2d
  401f78:	200005d4 	.word	0x200005d4
  401f7c:	00400d59 	.word	0x00400d59
  401f80:	00400b71 	.word	0x00400b71
  401f84:	00401cb5 	.word	0x00401cb5
  401f88:	00401d01 	.word	0x00401d01
  401f8c:	00402d50 	.word	0x00402d50
  401f90:	00402921 	.word	0x00402921
  401f94:	004006a9 	.word	0x004006a9
  401f98:	e000ed04 	.word	0xe000ed04
  401f9c:	004001fd 	.word	0x004001fd

00401fa0 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
  401fa0:	b570      	push	{r4, r5, r6, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
  401fa2:	4b10      	ldr	r3, [pc, #64]	; (401fe4 <prvCheckForValidListAndQueue+0x44>)
  401fa4:	4798      	blx	r3
        {
            if( xTimerQueue == NULL )
  401fa6:	4b10      	ldr	r3, [pc, #64]	; (401fe8 <prvCheckForValidListAndQueue+0x48>)
  401fa8:	681b      	ldr	r3, [r3, #0]
  401faa:	b113      	cbz	r3, 401fb2 <prvCheckForValidListAndQueue+0x12>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
  401fac:	4b0f      	ldr	r3, [pc, #60]	; (401fec <prvCheckForValidListAndQueue+0x4c>)
  401fae:	4798      	blx	r3
  401fb0:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &xActiveTimerList1 );
  401fb2:	4d0f      	ldr	r5, [pc, #60]	; (401ff0 <prvCheckForValidListAndQueue+0x50>)
  401fb4:	4628      	mov	r0, r5
  401fb6:	4e0f      	ldr	r6, [pc, #60]	; (401ff4 <prvCheckForValidListAndQueue+0x54>)
  401fb8:	47b0      	blx	r6
                vListInitialise( &xActiveTimerList2 );
  401fba:	4c0f      	ldr	r4, [pc, #60]	; (401ff8 <prvCheckForValidListAndQueue+0x58>)
  401fbc:	4620      	mov	r0, r4
  401fbe:	47b0      	blx	r6
                pxCurrentTimerList = &xActiveTimerList1;
  401fc0:	4b0e      	ldr	r3, [pc, #56]	; (401ffc <prvCheckForValidListAndQueue+0x5c>)
  401fc2:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
  401fc4:	4b0e      	ldr	r3, [pc, #56]	; (402000 <prvCheckForValidListAndQueue+0x60>)
  401fc6:	601c      	str	r4, [r3, #0]
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401fc8:	2200      	movs	r2, #0
  401fca:	2110      	movs	r1, #16
  401fcc:	2005      	movs	r0, #5
  401fce:	4b0d      	ldr	r3, [pc, #52]	; (402004 <prvCheckForValidListAndQueue+0x64>)
  401fd0:	4798      	blx	r3
  401fd2:	4b05      	ldr	r3, [pc, #20]	; (401fe8 <prvCheckForValidListAndQueue+0x48>)
  401fd4:	6018      	str	r0, [r3, #0]
                        if( xTimerQueue != NULL )
  401fd6:	2800      	cmp	r0, #0
  401fd8:	d0e8      	beq.n	401fac <prvCheckForValidListAndQueue+0xc>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401fda:	490b      	ldr	r1, [pc, #44]	; (402008 <prvCheckForValidListAndQueue+0x68>)
  401fdc:	4b0b      	ldr	r3, [pc, #44]	; (40200c <prvCheckForValidListAndQueue+0x6c>)
  401fde:	4798      	blx	r3
  401fe0:	e7e4      	b.n	401fac <prvCheckForValidListAndQueue+0xc>
  401fe2:	bf00      	nop
  401fe4:	004002f5 	.word	0x004002f5
  401fe8:	20000604 	.word	0x20000604
  401fec:	0040033d 	.word	0x0040033d
  401ff0:	200005d8 	.word	0x200005d8
  401ff4:	00400195 	.word	0x00400195
  401ff8:	200005ec 	.word	0x200005ec
  401ffc:	200005d0 	.word	0x200005d0
  402000:	200005d4 	.word	0x200005d4
  402004:	00400b09 	.word	0x00400b09
  402008:	00402d48 	.word	0x00402d48
  40200c:	00400cf9 	.word	0x00400cf9

00402010 <xTimerCreateTimerTask>:
    {
  402010:	b510      	push	{r4, lr}
  402012:	b082      	sub	sp, #8
        prvCheckForValidListAndQueue();
  402014:	4b0d      	ldr	r3, [pc, #52]	; (40204c <xTimerCreateTimerTask+0x3c>)
  402016:	4798      	blx	r3
        if( xTimerQueue != NULL )
  402018:	4b0d      	ldr	r3, [pc, #52]	; (402050 <xTimerCreateTimerTask+0x40>)
  40201a:	681b      	ldr	r3, [r3, #0]
  40201c:	b17b      	cbz	r3, 40203e <xTimerCreateTimerTask+0x2e>
                    xReturn = xTaskCreate( prvTimerTask,
  40201e:	4b0d      	ldr	r3, [pc, #52]	; (402054 <xTimerCreateTimerTask+0x44>)
  402020:	9301      	str	r3, [sp, #4]
  402022:	2307      	movs	r3, #7
  402024:	9300      	str	r3, [sp, #0]
  402026:	2300      	movs	r3, #0
  402028:	f44f 7282 	mov.w	r2, #260	; 0x104
  40202c:	490a      	ldr	r1, [pc, #40]	; (402058 <xTimerCreateTimerTask+0x48>)
  40202e:	480b      	ldr	r0, [pc, #44]	; (40205c <xTimerCreateTimerTask+0x4c>)
  402030:	4c0b      	ldr	r4, [pc, #44]	; (402060 <xTimerCreateTimerTask+0x50>)
  402032:	47a0      	blx	r4
        configASSERT( xReturn );
  402034:	4603      	mov	r3, r0
  402036:	b110      	cbz	r0, 40203e <xTimerCreateTimerTask+0x2e>
    }
  402038:	4618      	mov	r0, r3
  40203a:	b002      	add	sp, #8
  40203c:	bd10      	pop	{r4, pc}
        configASSERT( xReturn );
  40203e:	f240 1119 	movw	r1, #281	; 0x119
  402042:	4808      	ldr	r0, [pc, #32]	; (402064 <xTimerCreateTimerTask+0x54>)
  402044:	4b08      	ldr	r3, [pc, #32]	; (402068 <xTimerCreateTimerTask+0x58>)
  402046:	4798      	blx	r3
  402048:	2300      	movs	r3, #0
        return xReturn;
  40204a:	e7f5      	b.n	402038 <xTimerCreateTimerTask+0x28>
  40204c:	00401fa1 	.word	0x00401fa1
  402050:	20000604 	.word	0x20000604
  402054:	20000608 	.word	0x20000608
  402058:	00402d6c 	.word	0x00402d6c
  40205c:	00401de1 	.word	0x00401de1
  402060:	00400f61 	.word	0x00400f61
  402064:	00402d50 	.word	0x00402d50
  402068:	00402921 	.word	0x00402921

0040206c <initializeLEDDriver>:
/************************************************************
	LED Driver Functions	

*************************************************************/
void initializeLEDDriver(void)
{
  40206c:	4770      	bx	lr
	...

00402070 <setLED>:
}

// sets given LED (arg1) to given value (arg2)
uint8_t setLED(uint8_t uiLedNum, uint8_t uiLedValue)
{
	ioport_set_pin_level(decLED[uiLedNum], uiLedValue);
  402070:	4b0c      	ldr	r3, [pc, #48]	; (4020a4 <setLED+0x34>)
  402072:	5c1a      	ldrb	r2, [r3, r0]
	return pin >> 5;
  402074:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402076:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40207a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40207e:	025b      	lsls	r3, r3, #9
	if (level) {
  402080:	b941      	cbnz	r1, 402094 <setLED+0x24>
	return 1U << (pin & 0x1F);
  402082:	f002 021f 	and.w	r2, r2, #31
  402086:	2101      	movs	r1, #1
  402088:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40208c:	635a      	str	r2, [r3, #52]	; 0x34
	
	return SUCCESS; // dummy return
}
  40208e:	4b06      	ldr	r3, [pc, #24]	; (4020a8 <setLED+0x38>)
  402090:	7818      	ldrb	r0, [r3, #0]
  402092:	4770      	bx	lr
	return 1U << (pin & 0x1F);
  402094:	f002 021f 	and.w	r2, r2, #31
  402098:	2101      	movs	r1, #1
  40209a:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40209e:	631a      	str	r2, [r3, #48]	; 0x30
  4020a0:	e7f5      	b.n	40208e <setLED+0x1e>
  4020a2:	bf00      	nop
  4020a4:	20000010 	.word	0x20000010
  4020a8:	2000000c 	.word	0x2000000c

004020ac <toggleLED>:

// 
uint8_t toggleLED(uint8_t uiLedNum)
{
	ioport_set_pin_level(decLED[uiLedNum], !ioport_get_pin_level(decLED[uiLedNum]));
  4020ac:	4b09      	ldr	r3, [pc, #36]	; (4020d4 <toggleLED+0x28>)
  4020ae:	5c1a      	ldrb	r2, [r3, r0]
	return pin >> 5;
  4020b0:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4020b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4020b6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4020ba:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4020bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4020be:	f002 011f 	and.w	r1, r2, #31
  4020c2:	2201      	movs	r2, #1
  4020c4:	408a      	lsls	r2, r1
	if (level) {
  4020c6:	4210      	tst	r0, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4020c8:	bf0c      	ite	eq
  4020ca:	631a      	streq	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4020cc:	635a      	strne	r2, [r3, #52]	; 0x34

	return SUCCESS; // dummy return
}
  4020ce:	4b02      	ldr	r3, [pc, #8]	; (4020d8 <toggleLED+0x2c>)
  4020d0:	7818      	ldrb	r0, [r3, #0]
  4020d2:	4770      	bx	lr
  4020d4:	20000010 	.word	0x20000010
  4020d8:	2000000c 	.word	0x2000000c

004020dc <taskHeartbeat>:
// toggles an LED on and off every 0.5 second
// heartbeat task created up to four times: 
//     *    1 onboard LED uncontrolled
//     *	3 extension board LEDs controlled by button functions
void taskHeartbeat( void * pvParameters )
{
  4020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4020de:	4607      	mov	r7, r0
	// casting sent parameter back to what it was originally
	const uint8_t* ledNum = (uint8_t*) pvParameters;

	while(FOREVER)
	{	// actual task
		toggleLED(*ledNum);		// toggle LED state
  4020e0:	4e04      	ldr	r6, [pc, #16]	; (4020f4 <taskHeartbeat+0x18>)
		vTaskDelay( xDelay );	// then wait 0.5 
  4020e2:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  4020e6:	4c04      	ldr	r4, [pc, #16]	; (4020f8 <taskHeartbeat+0x1c>)
		toggleLED(*ledNum);		// toggle LED state
  4020e8:	7838      	ldrb	r0, [r7, #0]
  4020ea:	47b0      	blx	r6
		vTaskDelay( xDelay );	// then wait 0.5 
  4020ec:	4628      	mov	r0, r5
  4020ee:	47a0      	blx	r4
  4020f0:	e7fa      	b.n	4020e8 <taskHeartbeat+0xc>
  4020f2:	bf00      	nop
  4020f4:	004020ad 	.word	0x004020ad
  4020f8:	00401765 	.word	0x00401765

004020fc <processEXT_SW1>:

// processes SW1 button press and takes appropriate action;
// I realize that "process____" probably isn't the best
// naming convention
void processEXT_SW1 (void)
{
  4020fc:	b510      	push	{r4, lr}
  4020fe:	b082      	sub	sp, #8
	// only increase number of heart beat tasks if
	// there are FEWER than three tasks already created
	if (ledCount < 3) ledCount += 1;
  402100:	4b1e      	ldr	r3, [pc, #120]	; (40217c <processEXT_SW1+0x80>)
  402102:	781b      	ldrb	r3, [r3, #0]
  402104:	2b02      	cmp	r3, #2
  402106:	d802      	bhi.n	40210e <processEXT_SW1+0x12>
  402108:	3301      	adds	r3, #1
  40210a:	4a1c      	ldr	r2, [pc, #112]	; (40217c <processEXT_SW1+0x80>)
  40210c:	7013      	strb	r3, [r2, #0]
	
	// determine if number of tasks to be be created has changed
	switch (ledCount)
  40210e:	4b1b      	ldr	r3, [pc, #108]	; (40217c <processEXT_SW1+0x80>)
  402110:	781b      	ldrb	r3, [r3, #0]
  402112:	2b02      	cmp	r3, #2
  402114:	d014      	beq.n	402140 <processEXT_SW1+0x44>
  402116:	2b03      	cmp	r3, #3
  402118:	d021      	beq.n	40215e <processEXT_SW1+0x62>
  40211a:	2b01      	cmp	r3, #1
  40211c:	d001      	beq.n	402122 <processEXT_SW1+0x26>
					&thLED3Heartbeat);			// reference to LED3 heartbeat task handle
			break;
		default:
			break;
	}
}
  40211e:	b002      	add	sp, #8
  402120:	bd10      	pop	{r4, pc}
			if (!thLED1Heartbeat)
  402122:	4b17      	ldr	r3, [pc, #92]	; (402180 <processEXT_SW1+0x84>)
  402124:	681b      	ldr	r3, [r3, #0]
  402126:	2b00      	cmp	r3, #0
  402128:	d1f9      	bne.n	40211e <processEXT_SW1+0x22>
				xTaskCreate(taskHeartbeat,
  40212a:	4b15      	ldr	r3, [pc, #84]	; (402180 <processEXT_SW1+0x84>)
  40212c:	9301      	str	r3, [sp, #4]
  40212e:	2301      	movs	r3, #1
  402130:	9300      	str	r3, [sp, #0]
  402132:	4b14      	ldr	r3, [pc, #80]	; (402184 <processEXT_SW1+0x88>)
  402134:	2282      	movs	r2, #130	; 0x82
  402136:	4914      	ldr	r1, [pc, #80]	; (402188 <processEXT_SW1+0x8c>)
  402138:	4814      	ldr	r0, [pc, #80]	; (40218c <processEXT_SW1+0x90>)
  40213a:	4c15      	ldr	r4, [pc, #84]	; (402190 <processEXT_SW1+0x94>)
  40213c:	47a0      	blx	r4
  40213e:	e7ee      	b.n	40211e <processEXT_SW1+0x22>
			if (!thLED2Heartbeat)
  402140:	4b14      	ldr	r3, [pc, #80]	; (402194 <processEXT_SW1+0x98>)
  402142:	681b      	ldr	r3, [r3, #0]
  402144:	2b00      	cmp	r3, #0
  402146:	d1ea      	bne.n	40211e <processEXT_SW1+0x22>
				xTaskCreate(taskHeartbeat,
  402148:	4b12      	ldr	r3, [pc, #72]	; (402194 <processEXT_SW1+0x98>)
  40214a:	9301      	str	r3, [sp, #4]
  40214c:	2301      	movs	r3, #1
  40214e:	9300      	str	r3, [sp, #0]
  402150:	4b11      	ldr	r3, [pc, #68]	; (402198 <processEXT_SW1+0x9c>)
  402152:	2282      	movs	r2, #130	; 0x82
  402154:	4911      	ldr	r1, [pc, #68]	; (40219c <processEXT_SW1+0xa0>)
  402156:	480d      	ldr	r0, [pc, #52]	; (40218c <processEXT_SW1+0x90>)
  402158:	4c0d      	ldr	r4, [pc, #52]	; (402190 <processEXT_SW1+0x94>)
  40215a:	47a0      	blx	r4
  40215c:	e7df      	b.n	40211e <processEXT_SW1+0x22>
			if (!thLED3Heartbeat)
  40215e:	4b10      	ldr	r3, [pc, #64]	; (4021a0 <processEXT_SW1+0xa4>)
  402160:	681b      	ldr	r3, [r3, #0]
  402162:	2b00      	cmp	r3, #0
  402164:	d1db      	bne.n	40211e <processEXT_SW1+0x22>
				xTaskCreate(taskHeartbeat,
  402166:	4b0e      	ldr	r3, [pc, #56]	; (4021a0 <processEXT_SW1+0xa4>)
  402168:	9301      	str	r3, [sp, #4]
  40216a:	2301      	movs	r3, #1
  40216c:	9300      	str	r3, [sp, #0]
  40216e:	4b0d      	ldr	r3, [pc, #52]	; (4021a4 <processEXT_SW1+0xa8>)
  402170:	2282      	movs	r2, #130	; 0x82
  402172:	490d      	ldr	r1, [pc, #52]	; (4021a8 <processEXT_SW1+0xac>)
  402174:	4805      	ldr	r0, [pc, #20]	; (40218c <processEXT_SW1+0x90>)
  402176:	4c06      	ldr	r4, [pc, #24]	; (402190 <processEXT_SW1+0x94>)
  402178:	47a0      	blx	r4
}
  40217a:	e7d0      	b.n	40211e <processEXT_SW1+0x22>
  40217c:	2000060c 	.word	0x2000060c
  402180:	20000610 	.word	0x20000610
  402184:	20000014 	.word	0x20000014
  402188:	00402d74 	.word	0x00402d74
  40218c:	004020dd 	.word	0x004020dd
  402190:	00400f61 	.word	0x00400f61
  402194:	20000614 	.word	0x20000614
  402198:	20000015 	.word	0x20000015
  40219c:	00402d84 	.word	0x00402d84
  4021a0:	20000618 	.word	0x20000618
  4021a4:	20000016 	.word	0x20000016
  4021a8:	00402d94 	.word	0x00402d94

004021ac <processEXT_SW2>:

//
//
//
void processEXT_SW2 (void)
{
  4021ac:	b510      	push	{r4, lr}
	switch (ledCount)
  4021ae:	4b18      	ldr	r3, [pc, #96]	; (402210 <processEXT_SW2+0x64>)
  4021b0:	781b      	ldrb	r3, [r3, #0]
  4021b2:	2b02      	cmp	r3, #2
  4021b4:	d015      	beq.n	4021e2 <processEXT_SW2+0x36>
  4021b6:	2b03      	cmp	r3, #3
  4021b8:	d008      	beq.n	4021cc <processEXT_SW2+0x20>
  4021ba:	2b01      	cmp	r3, #1
  4021bc:	d01c      	beq.n	4021f8 <processEXT_SW2+0x4c>
			thLED1Heartbeat = NULL;
			break;
		default:
			break;
	}
	if (ledCount) ledCount -= 1;
  4021be:	4b14      	ldr	r3, [pc, #80]	; (402210 <processEXT_SW2+0x64>)
  4021c0:	781b      	ldrb	r3, [r3, #0]
  4021c2:	b113      	cbz	r3, 4021ca <processEXT_SW2+0x1e>
  4021c4:	3b01      	subs	r3, #1
  4021c6:	4a12      	ldr	r2, [pc, #72]	; (402210 <processEXT_SW2+0x64>)
  4021c8:	7013      	strb	r3, [r2, #0]
  4021ca:	bd10      	pop	{r4, pc}
			setLED(ledCount, 0);
  4021cc:	2100      	movs	r1, #0
  4021ce:	2003      	movs	r0, #3
  4021d0:	4b10      	ldr	r3, [pc, #64]	; (402214 <processEXT_SW2+0x68>)
  4021d2:	4798      	blx	r3
			vTaskDelete(thLED3Heartbeat);
  4021d4:	4c10      	ldr	r4, [pc, #64]	; (402218 <processEXT_SW2+0x6c>)
  4021d6:	6820      	ldr	r0, [r4, #0]
  4021d8:	4b10      	ldr	r3, [pc, #64]	; (40221c <processEXT_SW2+0x70>)
  4021da:	4798      	blx	r3
			thLED3Heartbeat = NULL;
  4021dc:	2300      	movs	r3, #0
  4021de:	6023      	str	r3, [r4, #0]
			break;
  4021e0:	e7ed      	b.n	4021be <processEXT_SW2+0x12>
			setLED(ledCount, 0);
  4021e2:	2100      	movs	r1, #0
  4021e4:	2002      	movs	r0, #2
  4021e6:	4b0b      	ldr	r3, [pc, #44]	; (402214 <processEXT_SW2+0x68>)
  4021e8:	4798      	blx	r3
			vTaskDelete(thLED2Heartbeat);
  4021ea:	4c0d      	ldr	r4, [pc, #52]	; (402220 <processEXT_SW2+0x74>)
  4021ec:	6820      	ldr	r0, [r4, #0]
  4021ee:	4b0b      	ldr	r3, [pc, #44]	; (40221c <processEXT_SW2+0x70>)
  4021f0:	4798      	blx	r3
			thLED2Heartbeat = NULL;
  4021f2:	2300      	movs	r3, #0
  4021f4:	6023      	str	r3, [r4, #0]
			break;
  4021f6:	e7e2      	b.n	4021be <processEXT_SW2+0x12>
			setLED(ledCount, 0);
  4021f8:	2100      	movs	r1, #0
  4021fa:	2001      	movs	r0, #1
  4021fc:	4b05      	ldr	r3, [pc, #20]	; (402214 <processEXT_SW2+0x68>)
  4021fe:	4798      	blx	r3
			vTaskDelete(thLED1Heartbeat);
  402200:	4c08      	ldr	r4, [pc, #32]	; (402224 <processEXT_SW2+0x78>)
  402202:	6820      	ldr	r0, [r4, #0]
  402204:	4b05      	ldr	r3, [pc, #20]	; (40221c <processEXT_SW2+0x70>)
  402206:	4798      	blx	r3
			thLED1Heartbeat = NULL;
  402208:	2300      	movs	r3, #0
  40220a:	6023      	str	r3, [r4, #0]
			break;
  40220c:	e7d7      	b.n	4021be <processEXT_SW2+0x12>
  40220e:	bf00      	nop
  402210:	2000060c 	.word	0x2000060c
  402214:	00402071 	.word	0x00402071
  402218:	20000618 	.word	0x20000618
  40221c:	00401191 	.word	0x00401191
  402220:	20000614 	.word	0x20000614
  402224:	20000610 	.word	0x20000610

00402228 <processEXT_SW3>:

//
//
//
void processEXT_SW3 (void)
{
  402228:	b508      	push	{r3, lr}
	if (suspendStatus == 0)
  40222a:	4b14      	ldr	r3, [pc, #80]	; (40227c <processEXT_SW3+0x54>)
  40222c:	781b      	ldrb	r3, [r3, #0]
  40222e:	b993      	cbnz	r3, 402256 <processEXT_SW3+0x2e>
	{
		if (thLED1Heartbeat)
  402230:	4b13      	ldr	r3, [pc, #76]	; (402280 <processEXT_SW3+0x58>)
  402232:	6818      	ldr	r0, [r3, #0]
  402234:	b108      	cbz	r0, 40223a <processEXT_SW3+0x12>
			vTaskSuspend(thLED1Heartbeat);
  402236:	4b13      	ldr	r3, [pc, #76]	; (402284 <processEXT_SW3+0x5c>)
  402238:	4798      	blx	r3
		if (thLED2Heartbeat)
  40223a:	4b13      	ldr	r3, [pc, #76]	; (402288 <processEXT_SW3+0x60>)
  40223c:	6818      	ldr	r0, [r3, #0]
  40223e:	b108      	cbz	r0, 402244 <processEXT_SW3+0x1c>
			vTaskSuspend(thLED2Heartbeat);
  402240:	4b10      	ldr	r3, [pc, #64]	; (402284 <processEXT_SW3+0x5c>)
  402242:	4798      	blx	r3
		if (thLED3Heartbeat)
  402244:	4b11      	ldr	r3, [pc, #68]	; (40228c <processEXT_SW3+0x64>)
  402246:	6818      	ldr	r0, [r3, #0]
  402248:	b108      	cbz	r0, 40224e <processEXT_SW3+0x26>
			vTaskSuspend(thLED3Heartbeat);
  40224a:	4b0e      	ldr	r3, [pc, #56]	; (402284 <processEXT_SW3+0x5c>)
  40224c:	4798      	blx	r3
		suspendStatus = 1;
  40224e:	2201      	movs	r2, #1
  402250:	4b0a      	ldr	r3, [pc, #40]	; (40227c <processEXT_SW3+0x54>)
  402252:	701a      	strb	r2, [r3, #0]
  402254:	bd08      	pop	{r3, pc}
	}
	else //  if suspendStatus == 1, then resume tasks and remove suspend state
	{
		if (thLED1Heartbeat)
  402256:	4b0a      	ldr	r3, [pc, #40]	; (402280 <processEXT_SW3+0x58>)
  402258:	6818      	ldr	r0, [r3, #0]
  40225a:	b108      	cbz	r0, 402260 <processEXT_SW3+0x38>
			vTaskResume(thLED1Heartbeat);
  40225c:	4b0c      	ldr	r3, [pc, #48]	; (402290 <processEXT_SW3+0x68>)
  40225e:	4798      	blx	r3
		if (thLED2Heartbeat)
  402260:	4b09      	ldr	r3, [pc, #36]	; (402288 <processEXT_SW3+0x60>)
  402262:	6818      	ldr	r0, [r3, #0]
  402264:	b108      	cbz	r0, 40226a <processEXT_SW3+0x42>
			vTaskResume(thLED2Heartbeat);
  402266:	4b0a      	ldr	r3, [pc, #40]	; (402290 <processEXT_SW3+0x68>)
  402268:	4798      	blx	r3
		if (thLED3Heartbeat)
  40226a:	4b08      	ldr	r3, [pc, #32]	; (40228c <processEXT_SW3+0x64>)
  40226c:	6818      	ldr	r0, [r3, #0]
  40226e:	b108      	cbz	r0, 402274 <processEXT_SW3+0x4c>
			vTaskResume(thLED3Heartbeat);
  402270:	4b07      	ldr	r3, [pc, #28]	; (402290 <processEXT_SW3+0x68>)
  402272:	4798      	blx	r3
		suspendStatus = 0;
  402274:	2200      	movs	r2, #0
  402276:	4b01      	ldr	r3, [pc, #4]	; (40227c <processEXT_SW3+0x54>)
  402278:	701a      	strb	r2, [r3, #0]
  40227a:	bd08      	pop	{r3, pc}
  40227c:	2000060d 	.word	0x2000060d
  402280:	20000610 	.word	0x20000610
  402284:	0040188d 	.word	0x0040188d
  402288:	20000614 	.word	0x20000614
  40228c:	20000618 	.word	0x20000618
  402290:	00401299 	.word	0x00401299

00402294 <taskSystemControl>:
{
  402294:	b570      	push	{r4, r5, r6, lr}
		if (readButton(FIRST))
  402296:	4c0d      	ldr	r4, [pc, #52]	; (4022cc <taskSystemControl+0x38>)
			processEXT_SW1();
  402298:	4e0d      	ldr	r6, [pc, #52]	; (4022d0 <taskSystemControl+0x3c>)
			processEXT_SW2();
  40229a:	4d0e      	ldr	r5, [pc, #56]	; (4022d4 <taskSystemControl+0x40>)
  40229c:	e006      	b.n	4022ac <taskSystemControl+0x18>
			processEXT_SW1();
  40229e:	47b0      	blx	r6
  4022a0:	e008      	b.n	4022b4 <taskSystemControl+0x20>
			processEXT_SW2();
  4022a2:	47a8      	blx	r5
  4022a4:	e00a      	b.n	4022bc <taskSystemControl+0x28>
		vTaskDelay(xDelay);
  4022a6:	2064      	movs	r0, #100	; 0x64
  4022a8:	4b0b      	ldr	r3, [pc, #44]	; (4022d8 <taskSystemControl+0x44>)
  4022aa:	4798      	blx	r3
		if (readButton(FIRST))
  4022ac:	2000      	movs	r0, #0
  4022ae:	47a0      	blx	r4
  4022b0:	2800      	cmp	r0, #0
  4022b2:	d1f4      	bne.n	40229e <taskSystemControl+0xa>
		if (readButton(SECOND))
  4022b4:	2001      	movs	r0, #1
  4022b6:	47a0      	blx	r4
  4022b8:	2800      	cmp	r0, #0
  4022ba:	d1f2      	bne.n	4022a2 <taskSystemControl+0xe>
		if (readButton(THIRD))
  4022bc:	2002      	movs	r0, #2
  4022be:	47a0      	blx	r4
  4022c0:	2800      	cmp	r0, #0
  4022c2:	d0f0      	beq.n	4022a6 <taskSystemControl+0x12>
			processEXT_SW3();
  4022c4:	4b05      	ldr	r3, [pc, #20]	; (4022dc <taskSystemControl+0x48>)
  4022c6:	4798      	blx	r3
  4022c8:	e7ed      	b.n	4022a6 <taskSystemControl+0x12>
  4022ca:	bf00      	nop
  4022cc:	00400169 	.word	0x00400169
  4022d0:	004020fd 	.word	0x004020fd
  4022d4:	004021ad 	.word	0x004021ad
  4022d8:	00401765 	.word	0x00401765
  4022dc:	00402229 	.word	0x00402229

004022e0 <OITExpansionBoardInit>:
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)


void OITExpansionBoardInit(void)
{
  4022e0:	b410      	push	{r4}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022e2:	4a44      	ldr	r2, [pc, #272]	; (4023f4 <OITExpansionBoardInit+0x114>)
  4022e4:	2304      	movs	r3, #4
  4022e6:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4022ec:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022ee:	2308      	movs	r3, #8
  4022f0:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4022f6:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022f8:	4b3f      	ldr	r3, [pc, #252]	; (4023f8 <OITExpansionBoardInit+0x118>)
  4022fa:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  4022fe:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402300:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402304:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402306:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40230a:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40230c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402310:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402312:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  402316:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402318:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40231c:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40231e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  402322:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402324:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402328:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40232a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40232e:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402330:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  402332:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402336:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  402338:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  40233c:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40233e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  402340:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  402344:	675c      	str	r4, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402346:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40234a:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40234e:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402352:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402356:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402358:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40235c:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40235e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402362:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402364:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  402366:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40236a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40236c:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  402370:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402372:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  402374:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  402378:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40237a:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40237e:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402382:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402386:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  40238a:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40238c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402390:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402392:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402396:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402398:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40239a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40239e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4023a0:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  4023a4:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4023a6:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4023a8:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
  4023ac:	6758      	str	r0, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4023ae:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4023b2:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4023b6:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4023ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4023be:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4023c0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4023c4:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4023c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4023ca:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  4023cc:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  4023ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4023d2:	6f11      	ldr	r1, [r2, #112]	; 0x70
  4023d4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  4023d8:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4023da:	6f51      	ldr	r1, [r2, #116]	; 0x74
  4023dc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  4023e0:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_ESR = mask;
  4023e2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4023e6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4023ea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	Init4Led5BtnBoardExt1();
#endif
#ifdef OIT_4LED_5BTN_BOARD_EXT3
	Init4Led5BtnBoardExt3();
#endif
}
  4023ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  4023f2:	4770      	bx	lr
  4023f4:	400e1000 	.word	0x400e1000
  4023f8:	400e0e00 	.word	0x400e0e00

004023fc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4023fc:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4023fe:	480e      	ldr	r0, [pc, #56]	; (402438 <sysclk_init+0x3c>)
  402400:	4b0e      	ldr	r3, [pc, #56]	; (40243c <sysclk_init+0x40>)
  402402:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402404:	213e      	movs	r1, #62	; 0x3e
  402406:	2000      	movs	r0, #0
  402408:	4b0d      	ldr	r3, [pc, #52]	; (402440 <sysclk_init+0x44>)
  40240a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40240c:	4c0d      	ldr	r4, [pc, #52]	; (402444 <sysclk_init+0x48>)
  40240e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402410:	2800      	cmp	r0, #0
  402412:	d0fc      	beq.n	40240e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402414:	4b0c      	ldr	r3, [pc, #48]	; (402448 <sysclk_init+0x4c>)
  402416:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402418:	4a0c      	ldr	r2, [pc, #48]	; (40244c <sysclk_init+0x50>)
  40241a:	4b0d      	ldr	r3, [pc, #52]	; (402450 <sysclk_init+0x54>)
  40241c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40241e:	4c0d      	ldr	r4, [pc, #52]	; (402454 <sysclk_init+0x58>)
  402420:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402422:	2800      	cmp	r0, #0
  402424:	d0fc      	beq.n	402420 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402426:	2010      	movs	r0, #16
  402428:	4b0b      	ldr	r3, [pc, #44]	; (402458 <sysclk_init+0x5c>)
  40242a:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40242c:	4b0b      	ldr	r3, [pc, #44]	; (40245c <sysclk_init+0x60>)
  40242e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402430:	480b      	ldr	r0, [pc, #44]	; (402460 <sysclk_init+0x64>)
  402432:	4b02      	ldr	r3, [pc, #8]	; (40243c <sysclk_init+0x40>)
  402434:	4798      	blx	r3
  402436:	bd10      	pop	{r4, pc}
  402438:	07270e00 	.word	0x07270e00
  40243c:	004027ed 	.word	0x004027ed
  402440:	0040253d 	.word	0x0040253d
  402444:	00402591 	.word	0x00402591
  402448:	004025a1 	.word	0x004025a1
  40244c:	200f3f01 	.word	0x200f3f01
  402450:	400e0400 	.word	0x400e0400
  402454:	004025b1 	.word	0x004025b1
  402458:	004024d9 	.word	0x004024d9
  40245c:	004026e1 	.word	0x004026e1
  402460:	05b8d800 	.word	0x05b8d800

00402464 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  402464:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402466:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40246a:	4b18      	ldr	r3, [pc, #96]	; (4024cc <board_init+0x68>)
  40246c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40246e:	2009      	movs	r0, #9
  402470:	4c17      	ldr	r4, [pc, #92]	; (4024d0 <board_init+0x6c>)
  402472:	47a0      	blx	r4
  402474:	200a      	movs	r0, #10
  402476:	47a0      	blx	r4
  402478:	200b      	movs	r0, #11
  40247a:	47a0      	blx	r4
  40247c:	200c      	movs	r0, #12
  40247e:	47a0      	blx	r4
  402480:	200d      	movs	r0, #13
  402482:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402484:	4b13      	ldr	r3, [pc, #76]	; (4024d4 <board_init+0x70>)
  402486:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40248a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40248c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402490:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402492:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  402496:	2204      	movs	r2, #4
  402498:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40249a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40249e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4024a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4024a4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4024a6:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4024a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4024ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4024ae:	f021 0104 	bic.w	r1, r1, #4
  4024b2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4024b4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4024b6:	f021 0104 	bic.w	r1, r1, #4
  4024ba:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4024bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4024c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4024c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4024c8:	bd10      	pop	{r4, pc}
  4024ca:	bf00      	nop
  4024cc:	400e1850 	.word	0x400e1850
  4024d0:	004025c1 	.word	0x004025c1
  4024d4:	400e1400 	.word	0x400e1400

004024d8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4024d8:	4a17      	ldr	r2, [pc, #92]	; (402538 <pmc_switch_mck_to_pllack+0x60>)
  4024da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4024e0:	4318      	orrs	r0, r3
  4024e2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4024e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4024e6:	f013 0f08 	tst.w	r3, #8
  4024ea:	d10a      	bne.n	402502 <pmc_switch_mck_to_pllack+0x2a>
  4024ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4024f0:	4911      	ldr	r1, [pc, #68]	; (402538 <pmc_switch_mck_to_pllack+0x60>)
  4024f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4024f4:	f012 0f08 	tst.w	r2, #8
  4024f8:	d103      	bne.n	402502 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4024fa:	3b01      	subs	r3, #1
  4024fc:	d1f9      	bne.n	4024f2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4024fe:	2001      	movs	r0, #1
  402500:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402502:	4a0d      	ldr	r2, [pc, #52]	; (402538 <pmc_switch_mck_to_pllack+0x60>)
  402504:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402506:	f023 0303 	bic.w	r3, r3, #3
  40250a:	f043 0302 	orr.w	r3, r3, #2
  40250e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402510:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402512:	f013 0f08 	tst.w	r3, #8
  402516:	d10a      	bne.n	40252e <pmc_switch_mck_to_pllack+0x56>
  402518:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40251c:	4906      	ldr	r1, [pc, #24]	; (402538 <pmc_switch_mck_to_pllack+0x60>)
  40251e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402520:	f012 0f08 	tst.w	r2, #8
  402524:	d105      	bne.n	402532 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402526:	3b01      	subs	r3, #1
  402528:	d1f9      	bne.n	40251e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40252a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40252c:	4770      	bx	lr
	return 0;
  40252e:	2000      	movs	r0, #0
  402530:	4770      	bx	lr
  402532:	2000      	movs	r0, #0
  402534:	4770      	bx	lr
  402536:	bf00      	nop
  402538:	400e0400 	.word	0x400e0400

0040253c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40253c:	b9c8      	cbnz	r0, 402572 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40253e:	4a11      	ldr	r2, [pc, #68]	; (402584 <pmc_switch_mainck_to_xtal+0x48>)
  402540:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402542:	0209      	lsls	r1, r1, #8
  402544:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402546:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40254a:	f023 0303 	bic.w	r3, r3, #3
  40254e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402552:	f043 0301 	orr.w	r3, r3, #1
  402556:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402558:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40255a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40255c:	f013 0f01 	tst.w	r3, #1
  402560:	d0fb      	beq.n	40255a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402562:	4a08      	ldr	r2, [pc, #32]	; (402584 <pmc_switch_mainck_to_xtal+0x48>)
  402564:	6a13      	ldr	r3, [r2, #32]
  402566:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40256a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40256e:	6213      	str	r3, [r2, #32]
  402570:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402572:	4904      	ldr	r1, [pc, #16]	; (402584 <pmc_switch_mainck_to_xtal+0x48>)
  402574:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402576:	4a04      	ldr	r2, [pc, #16]	; (402588 <pmc_switch_mainck_to_xtal+0x4c>)
  402578:	401a      	ands	r2, r3
  40257a:	4b04      	ldr	r3, [pc, #16]	; (40258c <pmc_switch_mainck_to_xtal+0x50>)
  40257c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40257e:	620b      	str	r3, [r1, #32]
  402580:	4770      	bx	lr
  402582:	bf00      	nop
  402584:	400e0400 	.word	0x400e0400
  402588:	fec8fffc 	.word	0xfec8fffc
  40258c:	01370002 	.word	0x01370002

00402590 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402590:	4b02      	ldr	r3, [pc, #8]	; (40259c <pmc_osc_is_ready_mainck+0xc>)
  402592:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402594:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402598:	4770      	bx	lr
  40259a:	bf00      	nop
  40259c:	400e0400 	.word	0x400e0400

004025a0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4025a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4025a4:	4b01      	ldr	r3, [pc, #4]	; (4025ac <pmc_disable_pllack+0xc>)
  4025a6:	629a      	str	r2, [r3, #40]	; 0x28
  4025a8:	4770      	bx	lr
  4025aa:	bf00      	nop
  4025ac:	400e0400 	.word	0x400e0400

004025b0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4025b0:	4b02      	ldr	r3, [pc, #8]	; (4025bc <pmc_is_locked_pllack+0xc>)
  4025b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4025b4:	f000 0002 	and.w	r0, r0, #2
  4025b8:	4770      	bx	lr
  4025ba:	bf00      	nop
  4025bc:	400e0400 	.word	0x400e0400

004025c0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4025c0:	282f      	cmp	r0, #47	; 0x2f
  4025c2:	d81e      	bhi.n	402602 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4025c4:	281f      	cmp	r0, #31
  4025c6:	d80c      	bhi.n	4025e2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4025c8:	4b11      	ldr	r3, [pc, #68]	; (402610 <pmc_enable_periph_clk+0x50>)
  4025ca:	699a      	ldr	r2, [r3, #24]
  4025cc:	2301      	movs	r3, #1
  4025ce:	4083      	lsls	r3, r0
  4025d0:	4393      	bics	r3, r2
  4025d2:	d018      	beq.n	402606 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4025d4:	2301      	movs	r3, #1
  4025d6:	fa03 f000 	lsl.w	r0, r3, r0
  4025da:	4b0d      	ldr	r3, [pc, #52]	; (402610 <pmc_enable_periph_clk+0x50>)
  4025dc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4025de:	2000      	movs	r0, #0
  4025e0:	4770      	bx	lr
		ul_id -= 32;
  4025e2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4025e4:	4b0a      	ldr	r3, [pc, #40]	; (402610 <pmc_enable_periph_clk+0x50>)
  4025e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4025ea:	2301      	movs	r3, #1
  4025ec:	4083      	lsls	r3, r0
  4025ee:	4393      	bics	r3, r2
  4025f0:	d00b      	beq.n	40260a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4025f2:	2301      	movs	r3, #1
  4025f4:	fa03 f000 	lsl.w	r0, r3, r0
  4025f8:	4b05      	ldr	r3, [pc, #20]	; (402610 <pmc_enable_periph_clk+0x50>)
  4025fa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4025fe:	2000      	movs	r0, #0
  402600:	4770      	bx	lr
		return 1;
  402602:	2001      	movs	r0, #1
  402604:	4770      	bx	lr
	return 0;
  402606:	2000      	movs	r0, #0
  402608:	4770      	bx	lr
  40260a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40260c:	4770      	bx	lr
  40260e:	bf00      	nop
  402610:	400e0400 	.word	0x400e0400

00402614 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402614:	e7fe      	b.n	402614 <Dummy_Handler>
	...

00402618 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402618:	b500      	push	{lr}
  40261a:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40261c:	4b25      	ldr	r3, [pc, #148]	; (4026b4 <Reset_Handler+0x9c>)
  40261e:	4a26      	ldr	r2, [pc, #152]	; (4026b8 <Reset_Handler+0xa0>)
  402620:	429a      	cmp	r2, r3
  402622:	d010      	beq.n	402646 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  402624:	4b25      	ldr	r3, [pc, #148]	; (4026bc <Reset_Handler+0xa4>)
  402626:	4a23      	ldr	r2, [pc, #140]	; (4026b4 <Reset_Handler+0x9c>)
  402628:	429a      	cmp	r2, r3
  40262a:	d20c      	bcs.n	402646 <Reset_Handler+0x2e>
  40262c:	3b01      	subs	r3, #1
  40262e:	1a9b      	subs	r3, r3, r2
  402630:	f023 0303 	bic.w	r3, r3, #3
  402634:	3304      	adds	r3, #4
  402636:	4413      	add	r3, r2
  402638:	491f      	ldr	r1, [pc, #124]	; (4026b8 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40263a:	f851 0b04 	ldr.w	r0, [r1], #4
  40263e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  402642:	429a      	cmp	r2, r3
  402644:	d1f9      	bne.n	40263a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402646:	4b1e      	ldr	r3, [pc, #120]	; (4026c0 <Reset_Handler+0xa8>)
  402648:	4a1e      	ldr	r2, [pc, #120]	; (4026c4 <Reset_Handler+0xac>)
  40264a:	429a      	cmp	r2, r3
  40264c:	d20a      	bcs.n	402664 <Reset_Handler+0x4c>
  40264e:	3b01      	subs	r3, #1
  402650:	1a9b      	subs	r3, r3, r2
  402652:	f023 0303 	bic.w	r3, r3, #3
  402656:	3304      	adds	r3, #4
  402658:	4413      	add	r3, r2
		*pDest++ = 0;
  40265a:	2100      	movs	r1, #0
  40265c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  402660:	4293      	cmp	r3, r2
  402662:	d1fb      	bne.n	40265c <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402664:	4a18      	ldr	r2, [pc, #96]	; (4026c8 <Reset_Handler+0xb0>)
  402666:	4b19      	ldr	r3, [pc, #100]	; (4026cc <Reset_Handler+0xb4>)
  402668:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40266c:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40266e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402672:	fab3 f383 	clz	r3, r3
  402676:	095b      	lsrs	r3, r3, #5
  402678:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40267a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40267c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402680:	2200      	movs	r2, #0
  402682:	4b13      	ldr	r3, [pc, #76]	; (4026d0 <Reset_Handler+0xb8>)
  402684:	701a      	strb	r2, [r3, #0]
	return flags;
  402686:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402688:	4a12      	ldr	r2, [pc, #72]	; (4026d4 <Reset_Handler+0xbc>)
  40268a:	6813      	ldr	r3, [r2, #0]
  40268c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402690:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  402692:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402696:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40269a:	b129      	cbz	r1, 4026a8 <Reset_Handler+0x90>
		cpu_irq_enable();
  40269c:	2201      	movs	r2, #1
  40269e:	4b0c      	ldr	r3, [pc, #48]	; (4026d0 <Reset_Handler+0xb8>)
  4026a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4026a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4026a6:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4026a8:	4b0b      	ldr	r3, [pc, #44]	; (4026d8 <Reset_Handler+0xc0>)
  4026aa:	4798      	blx	r3

	/* Branch to main function */
	main();
  4026ac:	4b0b      	ldr	r3, [pc, #44]	; (4026dc <Reset_Handler+0xc4>)
  4026ae:	4798      	blx	r3
  4026b0:	e7fe      	b.n	4026b0 <Reset_Handler+0x98>
  4026b2:	bf00      	nop
  4026b4:	20000000 	.word	0x20000000
  4026b8:	00402e00 	.word	0x00402e00
  4026bc:	2000044c 	.word	0x2000044c
  4026c0:	20000684 	.word	0x20000684
  4026c4:	2000044c 	.word	0x2000044c
  4026c8:	e000ed00 	.word	0xe000ed00
  4026cc:	00400000 	.word	0x00400000
  4026d0:	20000017 	.word	0x20000017
  4026d4:	e000ed88 	.word	0xe000ed88
  4026d8:	00402975 	.word	0x00402975
  4026dc:	00402861 	.word	0x00402861

004026e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4026e0:	4b3b      	ldr	r3, [pc, #236]	; (4027d0 <SystemCoreClockUpdate+0xf0>)
  4026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026e4:	f003 0303 	and.w	r3, r3, #3
  4026e8:	2b01      	cmp	r3, #1
  4026ea:	d01d      	beq.n	402728 <SystemCoreClockUpdate+0x48>
  4026ec:	b183      	cbz	r3, 402710 <SystemCoreClockUpdate+0x30>
  4026ee:	2b02      	cmp	r3, #2
  4026f0:	d036      	beq.n	402760 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4026f2:	4b37      	ldr	r3, [pc, #220]	; (4027d0 <SystemCoreClockUpdate+0xf0>)
  4026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4026fa:	2b70      	cmp	r3, #112	; 0x70
  4026fc:	d05f      	beq.n	4027be <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4026fe:	4b34      	ldr	r3, [pc, #208]	; (4027d0 <SystemCoreClockUpdate+0xf0>)
  402700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402702:	4934      	ldr	r1, [pc, #208]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  402704:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402708:	680b      	ldr	r3, [r1, #0]
  40270a:	40d3      	lsrs	r3, r2
  40270c:	600b      	str	r3, [r1, #0]
  40270e:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402710:	4b31      	ldr	r3, [pc, #196]	; (4027d8 <SystemCoreClockUpdate+0xf8>)
  402712:	695b      	ldr	r3, [r3, #20]
  402714:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402718:	bf14      	ite	ne
  40271a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40271e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402722:	4b2c      	ldr	r3, [pc, #176]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  402724:	601a      	str	r2, [r3, #0]
  402726:	e7e4      	b.n	4026f2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402728:	4b29      	ldr	r3, [pc, #164]	; (4027d0 <SystemCoreClockUpdate+0xf0>)
  40272a:	6a1b      	ldr	r3, [r3, #32]
  40272c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402730:	d003      	beq.n	40273a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402732:	4a2a      	ldr	r2, [pc, #168]	; (4027dc <SystemCoreClockUpdate+0xfc>)
  402734:	4b27      	ldr	r3, [pc, #156]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  402736:	601a      	str	r2, [r3, #0]
  402738:	e7db      	b.n	4026f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40273a:	4a29      	ldr	r2, [pc, #164]	; (4027e0 <SystemCoreClockUpdate+0x100>)
  40273c:	4b25      	ldr	r3, [pc, #148]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  40273e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402740:	4b23      	ldr	r3, [pc, #140]	; (4027d0 <SystemCoreClockUpdate+0xf0>)
  402742:	6a1b      	ldr	r3, [r3, #32]
  402744:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402748:	2b10      	cmp	r3, #16
  40274a:	d005      	beq.n	402758 <SystemCoreClockUpdate+0x78>
  40274c:	2b20      	cmp	r3, #32
  40274e:	d1d0      	bne.n	4026f2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  402750:	4a22      	ldr	r2, [pc, #136]	; (4027dc <SystemCoreClockUpdate+0xfc>)
  402752:	4b20      	ldr	r3, [pc, #128]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  402754:	601a      	str	r2, [r3, #0]
				break;
  402756:	e7cc      	b.n	4026f2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  402758:	4a22      	ldr	r2, [pc, #136]	; (4027e4 <SystemCoreClockUpdate+0x104>)
  40275a:	4b1e      	ldr	r3, [pc, #120]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  40275c:	601a      	str	r2, [r3, #0]
				break;
  40275e:	e7c8      	b.n	4026f2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402760:	4b1b      	ldr	r3, [pc, #108]	; (4027d0 <SystemCoreClockUpdate+0xf0>)
  402762:	6a1b      	ldr	r3, [r3, #32]
  402764:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402768:	d016      	beq.n	402798 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40276a:	4a1c      	ldr	r2, [pc, #112]	; (4027dc <SystemCoreClockUpdate+0xfc>)
  40276c:	4b19      	ldr	r3, [pc, #100]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  40276e:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  402770:	4b17      	ldr	r3, [pc, #92]	; (4027d0 <SystemCoreClockUpdate+0xf0>)
  402772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402774:	f003 0303 	and.w	r3, r3, #3
  402778:	2b02      	cmp	r3, #2
  40277a:	d1ba      	bne.n	4026f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40277c:	4a14      	ldr	r2, [pc, #80]	; (4027d0 <SystemCoreClockUpdate+0xf0>)
  40277e:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402780:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402782:	4814      	ldr	r0, [pc, #80]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402784:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402788:	6803      	ldr	r3, [r0, #0]
  40278a:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40278e:	b2d2      	uxtb	r2, r2
  402790:	fbb3 f3f2 	udiv	r3, r3, r2
  402794:	6003      	str	r3, [r0, #0]
  402796:	e7ac      	b.n	4026f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402798:	4a11      	ldr	r2, [pc, #68]	; (4027e0 <SystemCoreClockUpdate+0x100>)
  40279a:	4b0e      	ldr	r3, [pc, #56]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  40279c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40279e:	4b0c      	ldr	r3, [pc, #48]	; (4027d0 <SystemCoreClockUpdate+0xf0>)
  4027a0:	6a1b      	ldr	r3, [r3, #32]
  4027a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027a6:	2b10      	cmp	r3, #16
  4027a8:	d005      	beq.n	4027b6 <SystemCoreClockUpdate+0xd6>
  4027aa:	2b20      	cmp	r3, #32
  4027ac:	d1e0      	bne.n	402770 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4027ae:	4a0b      	ldr	r2, [pc, #44]	; (4027dc <SystemCoreClockUpdate+0xfc>)
  4027b0:	4b08      	ldr	r3, [pc, #32]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  4027b2:	601a      	str	r2, [r3, #0]
				break;
  4027b4:	e7dc      	b.n	402770 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4027b6:	4a0b      	ldr	r2, [pc, #44]	; (4027e4 <SystemCoreClockUpdate+0x104>)
  4027b8:	4b06      	ldr	r3, [pc, #24]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  4027ba:	601a      	str	r2, [r3, #0]
				break;
  4027bc:	e7d8      	b.n	402770 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4027be:	4a05      	ldr	r2, [pc, #20]	; (4027d4 <SystemCoreClockUpdate+0xf4>)
  4027c0:	6813      	ldr	r3, [r2, #0]
  4027c2:	4909      	ldr	r1, [pc, #36]	; (4027e8 <SystemCoreClockUpdate+0x108>)
  4027c4:	fba1 1303 	umull	r1, r3, r1, r3
  4027c8:	085b      	lsrs	r3, r3, #1
  4027ca:	6013      	str	r3, [r2, #0]
  4027cc:	4770      	bx	lr
  4027ce:	bf00      	nop
  4027d0:	400e0400 	.word	0x400e0400
  4027d4:	20000018 	.word	0x20000018
  4027d8:	400e1810 	.word	0x400e1810
  4027dc:	00b71b00 	.word	0x00b71b00
  4027e0:	003d0900 	.word	0x003d0900
  4027e4:	007a1200 	.word	0x007a1200
  4027e8:	aaaaaaab 	.word	0xaaaaaaab

004027ec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4027ec:	4b12      	ldr	r3, [pc, #72]	; (402838 <system_init_flash+0x4c>)
  4027ee:	4298      	cmp	r0, r3
  4027f0:	d911      	bls.n	402816 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4027f2:	4b12      	ldr	r3, [pc, #72]	; (40283c <system_init_flash+0x50>)
  4027f4:	4298      	cmp	r0, r3
  4027f6:	d913      	bls.n	402820 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4027f8:	4b11      	ldr	r3, [pc, #68]	; (402840 <system_init_flash+0x54>)
  4027fa:	4298      	cmp	r0, r3
  4027fc:	d914      	bls.n	402828 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4027fe:	4b11      	ldr	r3, [pc, #68]	; (402844 <system_init_flash+0x58>)
  402800:	4298      	cmp	r0, r3
  402802:	d915      	bls.n	402830 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402804:	4b10      	ldr	r3, [pc, #64]	; (402848 <system_init_flash+0x5c>)
  402806:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402808:	bf94      	ite	ls
  40280a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40280e:	4a0f      	ldrhi	r2, [pc, #60]	; (40284c <system_init_flash+0x60>)
  402810:	4b0f      	ldr	r3, [pc, #60]	; (402850 <system_init_flash+0x64>)
  402812:	601a      	str	r2, [r3, #0]
  402814:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402816:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40281a:	4b0d      	ldr	r3, [pc, #52]	; (402850 <system_init_flash+0x64>)
  40281c:	601a      	str	r2, [r3, #0]
  40281e:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402820:	4a0c      	ldr	r2, [pc, #48]	; (402854 <system_init_flash+0x68>)
  402822:	4b0b      	ldr	r3, [pc, #44]	; (402850 <system_init_flash+0x64>)
  402824:	601a      	str	r2, [r3, #0]
  402826:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402828:	4a0b      	ldr	r2, [pc, #44]	; (402858 <system_init_flash+0x6c>)
  40282a:	4b09      	ldr	r3, [pc, #36]	; (402850 <system_init_flash+0x64>)
  40282c:	601a      	str	r2, [r3, #0]
  40282e:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402830:	4a0a      	ldr	r2, [pc, #40]	; (40285c <system_init_flash+0x70>)
  402832:	4b07      	ldr	r3, [pc, #28]	; (402850 <system_init_flash+0x64>)
  402834:	601a      	str	r2, [r3, #0]
  402836:	4770      	bx	lr
  402838:	01312cff 	.word	0x01312cff
  40283c:	026259ff 	.word	0x026259ff
  402840:	039386ff 	.word	0x039386ff
  402844:	04c4b3ff 	.word	0x04c4b3ff
  402848:	05f5e0ff 	.word	0x05f5e0ff
  40284c:	04000500 	.word	0x04000500
  402850:	400e0a00 	.word	0x400e0a00
  402854:	04000100 	.word	0x04000100
  402858:	04000200 	.word	0x04000200
  40285c:	04000300 	.word	0x04000300

00402860 <main>:
/************************************************************
	main: LED Control Application	

*************************************************************/
int main (void)
{
  402860:	b500      	push	{lr}
  402862:	b08b      	sub	sp, #44	; 0x2c
}

static void prvMiscInitialisation( void )
{
       /* Initialize the SAM system */
       sysclk_init();
  402864:	4b1f      	ldr	r3, [pc, #124]	; (4028e4 <main+0x84>)
  402866:	4798      	blx	r3
       board_init();
  402868:	4b1f      	ldr	r3, [pc, #124]	; (4028e8 <main+0x88>)
  40286a:	4798      	blx	r3
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  40286c:	4a1f      	ldr	r2, [pc, #124]	; (4028ec <main+0x8c>)
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  40286e:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
  402872:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  402876:	f023 0307 	bic.w	r3, r3, #7
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  40287a:	3207      	adds	r2, #7
  40287c:	f022 0207 	bic.w	r2, r2, #7
       HeapRegion_t xHeapRegions[] = {
  402880:	9202      	str	r2, [sp, #8]
       ulHeapSize -= 1024;
  402882:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  402886:	9303      	str	r3, [sp, #12]
  402888:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40288c:	9304      	str	r3, [sp, #16]
  40288e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402892:	9305      	str	r3, [sp, #20]
  402894:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  402898:	9206      	str	r2, [sp, #24]
  40289a:	9307      	str	r3, [sp, #28]
  40289c:	2400      	movs	r4, #0
  40289e:	9408      	str	r4, [sp, #32]
  4028a0:	9409      	str	r4, [sp, #36]	; 0x24
       vPortDefineHeapRegions( xHeapRegions );
  4028a2:	a802      	add	r0, sp, #8
  4028a4:	4b12      	ldr	r3, [pc, #72]	; (4028f0 <main+0x90>)
  4028a6:	4798      	blx	r3
       prvInitialiseHeap();
       pmc_enable_periph_clk(ID_PIOA);
  4028a8:	2009      	movs	r0, #9
  4028aa:	4d12      	ldr	r5, [pc, #72]	; (4028f4 <main+0x94>)
  4028ac:	47a8      	blx	r5
       pmc_enable_periph_clk(ID_PIOB);
  4028ae:	200a      	movs	r0, #10
  4028b0:	47a8      	blx	r5
	   OITExpansionBoardInit();
  4028b2:	4b11      	ldr	r3, [pc, #68]	; (4028f8 <main+0x98>)
  4028b4:	4798      	blx	r3
	   initializeLEDDriver();		// dummy
  4028b6:	4b11      	ldr	r3, [pc, #68]	; (4028fc <main+0x9c>)
  4028b8:	4798      	blx	r3
	   initializeButtonDriver();	// dummy
  4028ba:	4b11      	ldr	r3, [pc, #68]	; (402900 <main+0xa0>)
  4028bc:	4798      	blx	r3
	xTaskCreate(taskHeartbeat,
  4028be:	9401      	str	r4, [sp, #4]
  4028c0:	2601      	movs	r6, #1
  4028c2:	9600      	str	r6, [sp, #0]
  4028c4:	4b0f      	ldr	r3, [pc, #60]	; (402904 <main+0xa4>)
  4028c6:	2282      	movs	r2, #130	; 0x82
  4028c8:	490f      	ldr	r1, [pc, #60]	; (402908 <main+0xa8>)
  4028ca:	4810      	ldr	r0, [pc, #64]	; (40290c <main+0xac>)
  4028cc:	4d10      	ldr	r5, [pc, #64]	; (402910 <main+0xb0>)
  4028ce:	47a8      	blx	r5
	xTaskCreate(taskSystemControl,
  4028d0:	9401      	str	r4, [sp, #4]
  4028d2:	9600      	str	r6, [sp, #0]
  4028d4:	4623      	mov	r3, r4
  4028d6:	2282      	movs	r2, #130	; 0x82
  4028d8:	490e      	ldr	r1, [pc, #56]	; (402914 <main+0xb4>)
  4028da:	480f      	ldr	r0, [pc, #60]	; (402918 <main+0xb8>)
  4028dc:	47a8      	blx	r5
	vTaskStartScheduler();
  4028de:	4b0f      	ldr	r3, [pc, #60]	; (40291c <main+0xbc>)
  4028e0:	4798      	blx	r3
  4028e2:	e7fe      	b.n	4028e2 <main+0x82>
  4028e4:	004023fd 	.word	0x004023fd
  4028e8:	00402465 	.word	0x00402465
  4028ec:	20003688 	.word	0x20003688
  4028f0:	00400759 	.word	0x00400759
  4028f4:	004025c1 	.word	0x004025c1
  4028f8:	004022e1 	.word	0x004022e1
  4028fc:	0040206d 	.word	0x0040206d
  402900:	00400165 	.word	0x00400165
  402904:	2000061c 	.word	0x2000061c
  402908:	00402da4 	.word	0x00402da4
  40290c:	004020dd 	.word	0x004020dd
  402910:	00400f61 	.word	0x00400f61
  402914:	00402db4 	.word	0x00402db4
  402918:	00402295 	.word	0x00402295
  40291c:	00401355 	.word	0x00401355

00402920 <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  402920:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  402922:	2300      	movs	r3, #0
  402924:	9301      	str	r3, [sp, #4]
        __asm volatile
  402926:	f04f 0350 	mov.w	r3, #80	; 0x50
  40292a:	f383 8811 	msr	BASEPRI, r3
  40292e:	f3bf 8f6f 	isb	sy
  402932:	f3bf 8f4f 	dsb	sy

       /* Setting ulBlockVariable to a non-zero value in the debugger will allow
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
  402936:	9b01      	ldr	r3, [sp, #4]
  402938:	b91b      	cbnz	r3, 402942 <vAssertCalled+0x22>
              {
                     __asm volatile( "NOP" );
  40293a:	bf00      	nop
              while( ulBlockVariable == 0UL )
  40293c:	9b01      	ldr	r3, [sp, #4]
  40293e:	2b00      	cmp	r3, #0
  402940:	d0fb      	beq.n	40293a <vAssertCalled+0x1a>
        __asm volatile
  402942:	2300      	movs	r3, #0
  402944:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  402948:	b002      	add	sp, #8
  40294a:	4770      	bx	lr

0040294c <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  40294c:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  40294e:	2184      	movs	r1, #132	; 0x84
  402950:	4801      	ldr	r0, [pc, #4]	; (402958 <vApplicationMallocFailedHook+0xc>)
  402952:	4b02      	ldr	r3, [pc, #8]	; (40295c <vApplicationMallocFailedHook+0x10>)
  402954:	4798      	blx	r3
  402956:	bd08      	pop	{r3, pc}
  402958:	00402dc8 	.word	0x00402dc8
  40295c:	00402921 	.word	0x00402921

00402960 <vApplicationStackOverflowHook>:
        __asm volatile
  402960:	f04f 0350 	mov.w	r3, #80	; 0x50
  402964:	f383 8811 	msr	BASEPRI, r3
  402968:	f3bf 8f6f 	isb	sy
  40296c:	f3bf 8f4f 	dsb	sy
  402970:	e7fe      	b.n	402970 <vApplicationStackOverflowHook+0x10>
	...

00402974 <__libc_init_array>:
  402974:	b570      	push	{r4, r5, r6, lr}
  402976:	4e0f      	ldr	r6, [pc, #60]	; (4029b4 <__libc_init_array+0x40>)
  402978:	4d0f      	ldr	r5, [pc, #60]	; (4029b8 <__libc_init_array+0x44>)
  40297a:	1b76      	subs	r6, r6, r5
  40297c:	10b6      	asrs	r6, r6, #2
  40297e:	bf18      	it	ne
  402980:	2400      	movne	r4, #0
  402982:	d005      	beq.n	402990 <__libc_init_array+0x1c>
  402984:	3401      	adds	r4, #1
  402986:	f855 3b04 	ldr.w	r3, [r5], #4
  40298a:	4798      	blx	r3
  40298c:	42a6      	cmp	r6, r4
  40298e:	d1f9      	bne.n	402984 <__libc_init_array+0x10>
  402990:	4e0a      	ldr	r6, [pc, #40]	; (4029bc <__libc_init_array+0x48>)
  402992:	4d0b      	ldr	r5, [pc, #44]	; (4029c0 <__libc_init_array+0x4c>)
  402994:	1b76      	subs	r6, r6, r5
  402996:	f000 fa21 	bl	402ddc <_init>
  40299a:	10b6      	asrs	r6, r6, #2
  40299c:	bf18      	it	ne
  40299e:	2400      	movne	r4, #0
  4029a0:	d006      	beq.n	4029b0 <__libc_init_array+0x3c>
  4029a2:	3401      	adds	r4, #1
  4029a4:	f855 3b04 	ldr.w	r3, [r5], #4
  4029a8:	4798      	blx	r3
  4029aa:	42a6      	cmp	r6, r4
  4029ac:	d1f9      	bne.n	4029a2 <__libc_init_array+0x2e>
  4029ae:	bd70      	pop	{r4, r5, r6, pc}
  4029b0:	bd70      	pop	{r4, r5, r6, pc}
  4029b2:	bf00      	nop
  4029b4:	00402de8 	.word	0x00402de8
  4029b8:	00402de8 	.word	0x00402de8
  4029bc:	00402df0 	.word	0x00402df0
  4029c0:	00402de8 	.word	0x00402de8

004029c4 <memcpy>:
  4029c4:	4684      	mov	ip, r0
  4029c6:	ea41 0300 	orr.w	r3, r1, r0
  4029ca:	f013 0303 	ands.w	r3, r3, #3
  4029ce:	d16d      	bne.n	402aac <memcpy+0xe8>
  4029d0:	3a40      	subs	r2, #64	; 0x40
  4029d2:	d341      	bcc.n	402a58 <memcpy+0x94>
  4029d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4029d8:	f840 3b04 	str.w	r3, [r0], #4
  4029dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4029e0:	f840 3b04 	str.w	r3, [r0], #4
  4029e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4029e8:	f840 3b04 	str.w	r3, [r0], #4
  4029ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4029f0:	f840 3b04 	str.w	r3, [r0], #4
  4029f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4029f8:	f840 3b04 	str.w	r3, [r0], #4
  4029fc:	f851 3b04 	ldr.w	r3, [r1], #4
  402a00:	f840 3b04 	str.w	r3, [r0], #4
  402a04:	f851 3b04 	ldr.w	r3, [r1], #4
  402a08:	f840 3b04 	str.w	r3, [r0], #4
  402a0c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a10:	f840 3b04 	str.w	r3, [r0], #4
  402a14:	f851 3b04 	ldr.w	r3, [r1], #4
  402a18:	f840 3b04 	str.w	r3, [r0], #4
  402a1c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a20:	f840 3b04 	str.w	r3, [r0], #4
  402a24:	f851 3b04 	ldr.w	r3, [r1], #4
  402a28:	f840 3b04 	str.w	r3, [r0], #4
  402a2c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a30:	f840 3b04 	str.w	r3, [r0], #4
  402a34:	f851 3b04 	ldr.w	r3, [r1], #4
  402a38:	f840 3b04 	str.w	r3, [r0], #4
  402a3c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a40:	f840 3b04 	str.w	r3, [r0], #4
  402a44:	f851 3b04 	ldr.w	r3, [r1], #4
  402a48:	f840 3b04 	str.w	r3, [r0], #4
  402a4c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a50:	f840 3b04 	str.w	r3, [r0], #4
  402a54:	3a40      	subs	r2, #64	; 0x40
  402a56:	d2bd      	bcs.n	4029d4 <memcpy+0x10>
  402a58:	3230      	adds	r2, #48	; 0x30
  402a5a:	d311      	bcc.n	402a80 <memcpy+0xbc>
  402a5c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a60:	f840 3b04 	str.w	r3, [r0], #4
  402a64:	f851 3b04 	ldr.w	r3, [r1], #4
  402a68:	f840 3b04 	str.w	r3, [r0], #4
  402a6c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a70:	f840 3b04 	str.w	r3, [r0], #4
  402a74:	f851 3b04 	ldr.w	r3, [r1], #4
  402a78:	f840 3b04 	str.w	r3, [r0], #4
  402a7c:	3a10      	subs	r2, #16
  402a7e:	d2ed      	bcs.n	402a5c <memcpy+0x98>
  402a80:	320c      	adds	r2, #12
  402a82:	d305      	bcc.n	402a90 <memcpy+0xcc>
  402a84:	f851 3b04 	ldr.w	r3, [r1], #4
  402a88:	f840 3b04 	str.w	r3, [r0], #4
  402a8c:	3a04      	subs	r2, #4
  402a8e:	d2f9      	bcs.n	402a84 <memcpy+0xc0>
  402a90:	3204      	adds	r2, #4
  402a92:	d008      	beq.n	402aa6 <memcpy+0xe2>
  402a94:	07d2      	lsls	r2, r2, #31
  402a96:	bf1c      	itt	ne
  402a98:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402a9c:	f800 3b01 	strbne.w	r3, [r0], #1
  402aa0:	d301      	bcc.n	402aa6 <memcpy+0xe2>
  402aa2:	880b      	ldrh	r3, [r1, #0]
  402aa4:	8003      	strh	r3, [r0, #0]
  402aa6:	4660      	mov	r0, ip
  402aa8:	4770      	bx	lr
  402aaa:	bf00      	nop
  402aac:	2a08      	cmp	r2, #8
  402aae:	d313      	bcc.n	402ad8 <memcpy+0x114>
  402ab0:	078b      	lsls	r3, r1, #30
  402ab2:	d08d      	beq.n	4029d0 <memcpy+0xc>
  402ab4:	f010 0303 	ands.w	r3, r0, #3
  402ab8:	d08a      	beq.n	4029d0 <memcpy+0xc>
  402aba:	f1c3 0304 	rsb	r3, r3, #4
  402abe:	1ad2      	subs	r2, r2, r3
  402ac0:	07db      	lsls	r3, r3, #31
  402ac2:	bf1c      	itt	ne
  402ac4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402ac8:	f800 3b01 	strbne.w	r3, [r0], #1
  402acc:	d380      	bcc.n	4029d0 <memcpy+0xc>
  402ace:	f831 3b02 	ldrh.w	r3, [r1], #2
  402ad2:	f820 3b02 	strh.w	r3, [r0], #2
  402ad6:	e77b      	b.n	4029d0 <memcpy+0xc>
  402ad8:	3a04      	subs	r2, #4
  402ada:	d3d9      	bcc.n	402a90 <memcpy+0xcc>
  402adc:	3a01      	subs	r2, #1
  402ade:	f811 3b01 	ldrb.w	r3, [r1], #1
  402ae2:	f800 3b01 	strb.w	r3, [r0], #1
  402ae6:	d2f9      	bcs.n	402adc <memcpy+0x118>
  402ae8:	780b      	ldrb	r3, [r1, #0]
  402aea:	7003      	strb	r3, [r0, #0]
  402aec:	784b      	ldrb	r3, [r1, #1]
  402aee:	7043      	strb	r3, [r0, #1]
  402af0:	788b      	ldrb	r3, [r1, #2]
  402af2:	7083      	strb	r3, [r0, #2]
  402af4:	4660      	mov	r0, ip
  402af6:	4770      	bx	lr

00402af8 <memset>:
  402af8:	b470      	push	{r4, r5, r6}
  402afa:	0786      	lsls	r6, r0, #30
  402afc:	d046      	beq.n	402b8c <memset+0x94>
  402afe:	1e54      	subs	r4, r2, #1
  402b00:	2a00      	cmp	r2, #0
  402b02:	d041      	beq.n	402b88 <memset+0x90>
  402b04:	b2ca      	uxtb	r2, r1
  402b06:	4603      	mov	r3, r0
  402b08:	e002      	b.n	402b10 <memset+0x18>
  402b0a:	f114 34ff 	adds.w	r4, r4, #4294967295
  402b0e:	d33b      	bcc.n	402b88 <memset+0x90>
  402b10:	f803 2b01 	strb.w	r2, [r3], #1
  402b14:	079d      	lsls	r5, r3, #30
  402b16:	d1f8      	bne.n	402b0a <memset+0x12>
  402b18:	2c03      	cmp	r4, #3
  402b1a:	d92e      	bls.n	402b7a <memset+0x82>
  402b1c:	b2cd      	uxtb	r5, r1
  402b1e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402b22:	2c0f      	cmp	r4, #15
  402b24:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402b28:	d919      	bls.n	402b5e <memset+0x66>
  402b2a:	f103 0210 	add.w	r2, r3, #16
  402b2e:	4626      	mov	r6, r4
  402b30:	3e10      	subs	r6, #16
  402b32:	2e0f      	cmp	r6, #15
  402b34:	f842 5c10 	str.w	r5, [r2, #-16]
  402b38:	f842 5c0c 	str.w	r5, [r2, #-12]
  402b3c:	f842 5c08 	str.w	r5, [r2, #-8]
  402b40:	f842 5c04 	str.w	r5, [r2, #-4]
  402b44:	f102 0210 	add.w	r2, r2, #16
  402b48:	d8f2      	bhi.n	402b30 <memset+0x38>
  402b4a:	f1a4 0210 	sub.w	r2, r4, #16
  402b4e:	f022 020f 	bic.w	r2, r2, #15
  402b52:	f004 040f 	and.w	r4, r4, #15
  402b56:	3210      	adds	r2, #16
  402b58:	2c03      	cmp	r4, #3
  402b5a:	4413      	add	r3, r2
  402b5c:	d90d      	bls.n	402b7a <memset+0x82>
  402b5e:	461e      	mov	r6, r3
  402b60:	4622      	mov	r2, r4
  402b62:	3a04      	subs	r2, #4
  402b64:	2a03      	cmp	r2, #3
  402b66:	f846 5b04 	str.w	r5, [r6], #4
  402b6a:	d8fa      	bhi.n	402b62 <memset+0x6a>
  402b6c:	1f22      	subs	r2, r4, #4
  402b6e:	f022 0203 	bic.w	r2, r2, #3
  402b72:	3204      	adds	r2, #4
  402b74:	4413      	add	r3, r2
  402b76:	f004 0403 	and.w	r4, r4, #3
  402b7a:	b12c      	cbz	r4, 402b88 <memset+0x90>
  402b7c:	b2c9      	uxtb	r1, r1
  402b7e:	441c      	add	r4, r3
  402b80:	f803 1b01 	strb.w	r1, [r3], #1
  402b84:	429c      	cmp	r4, r3
  402b86:	d1fb      	bne.n	402b80 <memset+0x88>
  402b88:	bc70      	pop	{r4, r5, r6}
  402b8a:	4770      	bx	lr
  402b8c:	4614      	mov	r4, r2
  402b8e:	4603      	mov	r3, r0
  402b90:	e7c2      	b.n	402b18 <memset+0x20>
  402b92:	bf00      	nop

00402b94 <register_fini>:
  402b94:	4b02      	ldr	r3, [pc, #8]	; (402ba0 <register_fini+0xc>)
  402b96:	b113      	cbz	r3, 402b9e <register_fini+0xa>
  402b98:	4802      	ldr	r0, [pc, #8]	; (402ba4 <register_fini+0x10>)
  402b9a:	f000 b805 	b.w	402ba8 <atexit>
  402b9e:	4770      	bx	lr
  402ba0:	00000000 	.word	0x00000000
  402ba4:	00402bb5 	.word	0x00402bb5

00402ba8 <atexit>:
  402ba8:	2300      	movs	r3, #0
  402baa:	4601      	mov	r1, r0
  402bac:	461a      	mov	r2, r3
  402bae:	4618      	mov	r0, r3
  402bb0:	f000 b81e 	b.w	402bf0 <__register_exitproc>

00402bb4 <__libc_fini_array>:
  402bb4:	b538      	push	{r3, r4, r5, lr}
  402bb6:	4c0a      	ldr	r4, [pc, #40]	; (402be0 <__libc_fini_array+0x2c>)
  402bb8:	4d0a      	ldr	r5, [pc, #40]	; (402be4 <__libc_fini_array+0x30>)
  402bba:	1b64      	subs	r4, r4, r5
  402bbc:	10a4      	asrs	r4, r4, #2
  402bbe:	d00a      	beq.n	402bd6 <__libc_fini_array+0x22>
  402bc0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402bc4:	3b01      	subs	r3, #1
  402bc6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402bca:	3c01      	subs	r4, #1
  402bcc:	f855 3904 	ldr.w	r3, [r5], #-4
  402bd0:	4798      	blx	r3
  402bd2:	2c00      	cmp	r4, #0
  402bd4:	d1f9      	bne.n	402bca <__libc_fini_array+0x16>
  402bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402bda:	f000 b909 	b.w	402df0 <_fini>
  402bde:	bf00      	nop
  402be0:	00402e00 	.word	0x00402e00
  402be4:	00402dfc 	.word	0x00402dfc

00402be8 <__retarget_lock_acquire_recursive>:
  402be8:	4770      	bx	lr
  402bea:	bf00      	nop

00402bec <__retarget_lock_release_recursive>:
  402bec:	4770      	bx	lr
  402bee:	bf00      	nop

00402bf0 <__register_exitproc>:
  402bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402bf4:	4d2c      	ldr	r5, [pc, #176]	; (402ca8 <__register_exitproc+0xb8>)
  402bf6:	4606      	mov	r6, r0
  402bf8:	6828      	ldr	r0, [r5, #0]
  402bfa:	4698      	mov	r8, r3
  402bfc:	460f      	mov	r7, r1
  402bfe:	4691      	mov	r9, r2
  402c00:	f7ff fff2 	bl	402be8 <__retarget_lock_acquire_recursive>
  402c04:	4b29      	ldr	r3, [pc, #164]	; (402cac <__register_exitproc+0xbc>)
  402c06:	681c      	ldr	r4, [r3, #0]
  402c08:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402c0c:	2b00      	cmp	r3, #0
  402c0e:	d03e      	beq.n	402c8e <__register_exitproc+0x9e>
  402c10:	685a      	ldr	r2, [r3, #4]
  402c12:	2a1f      	cmp	r2, #31
  402c14:	dc1c      	bgt.n	402c50 <__register_exitproc+0x60>
  402c16:	f102 0e01 	add.w	lr, r2, #1
  402c1a:	b176      	cbz	r6, 402c3a <__register_exitproc+0x4a>
  402c1c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402c20:	2401      	movs	r4, #1
  402c22:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402c26:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402c2a:	4094      	lsls	r4, r2
  402c2c:	4320      	orrs	r0, r4
  402c2e:	2e02      	cmp	r6, #2
  402c30:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402c34:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402c38:	d023      	beq.n	402c82 <__register_exitproc+0x92>
  402c3a:	3202      	adds	r2, #2
  402c3c:	f8c3 e004 	str.w	lr, [r3, #4]
  402c40:	6828      	ldr	r0, [r5, #0]
  402c42:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402c46:	f7ff ffd1 	bl	402bec <__retarget_lock_release_recursive>
  402c4a:	2000      	movs	r0, #0
  402c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402c50:	4b17      	ldr	r3, [pc, #92]	; (402cb0 <__register_exitproc+0xc0>)
  402c52:	b30b      	cbz	r3, 402c98 <__register_exitproc+0xa8>
  402c54:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402c58:	f3af 8000 	nop.w
  402c5c:	4603      	mov	r3, r0
  402c5e:	b1d8      	cbz	r0, 402c98 <__register_exitproc+0xa8>
  402c60:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402c64:	6002      	str	r2, [r0, #0]
  402c66:	2100      	movs	r1, #0
  402c68:	6041      	str	r1, [r0, #4]
  402c6a:	460a      	mov	r2, r1
  402c6c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402c70:	f04f 0e01 	mov.w	lr, #1
  402c74:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402c78:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402c7c:	2e00      	cmp	r6, #0
  402c7e:	d0dc      	beq.n	402c3a <__register_exitproc+0x4a>
  402c80:	e7cc      	b.n	402c1c <__register_exitproc+0x2c>
  402c82:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402c86:	430c      	orrs	r4, r1
  402c88:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402c8c:	e7d5      	b.n	402c3a <__register_exitproc+0x4a>
  402c8e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402c92:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402c96:	e7bb      	b.n	402c10 <__register_exitproc+0x20>
  402c98:	6828      	ldr	r0, [r5, #0]
  402c9a:	f7ff ffa7 	bl	402bec <__retarget_lock_release_recursive>
  402c9e:	f04f 30ff 	mov.w	r0, #4294967295
  402ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ca6:	bf00      	nop
  402ca8:	20000448 	.word	0x20000448
  402cac:	00402dd8 	.word	0x00402dd8
  402cb0:	00000000 	.word	0x00000000
  402cb4:	732f2e2e 	.word	0x732f2e2e
  402cb8:	462f6372 	.word	0x462f6372
  402cbc:	52656572 	.word	0x52656572
  402cc0:	2f534f54 	.word	0x2f534f54
  402cc4:	74726f70 	.word	0x74726f70
  402cc8:	656c6261 	.word	0x656c6261
  402ccc:	4343472f 	.word	0x4343472f
  402cd0:	4d52412f 	.word	0x4d52412f
  402cd4:	344d435f 	.word	0x344d435f
  402cd8:	6f702f46 	.word	0x6f702f46
  402cdc:	632e7472 	.word	0x632e7472
  402ce0:	00000000 	.word	0x00000000
  402ce4:	732f2e2e 	.word	0x732f2e2e
  402ce8:	462f6372 	.word	0x462f6372
  402cec:	52656572 	.word	0x52656572
  402cf0:	2f534f54 	.word	0x2f534f54
  402cf4:	74726f70 	.word	0x74726f70
  402cf8:	656c6261 	.word	0x656c6261
  402cfc:	6d654d2f 	.word	0x6d654d2f
  402d00:	676e614d 	.word	0x676e614d
  402d04:	6165682f 	.word	0x6165682f
  402d08:	2e355f70 	.word	0x2e355f70
  402d0c:	00000063 	.word	0x00000063
  402d10:	732f2e2e 	.word	0x732f2e2e
  402d14:	462f6372 	.word	0x462f6372
  402d18:	52656572 	.word	0x52656572
  402d1c:	2f534f54 	.word	0x2f534f54
  402d20:	75657571 	.word	0x75657571
  402d24:	00632e65 	.word	0x00632e65
  402d28:	732f2e2e 	.word	0x732f2e2e
  402d2c:	462f6372 	.word	0x462f6372
  402d30:	52656572 	.word	0x52656572
  402d34:	2f534f54 	.word	0x2f534f54
  402d38:	6b736174 	.word	0x6b736174
  402d3c:	00632e73 	.word	0x00632e73
  402d40:	454c4449 	.word	0x454c4449
  402d44:	00000000 	.word	0x00000000
  402d48:	51726d54 	.word	0x51726d54
  402d4c:	00000000 	.word	0x00000000
  402d50:	732f2e2e 	.word	0x732f2e2e
  402d54:	462f6372 	.word	0x462f6372
  402d58:	52656572 	.word	0x52656572
  402d5c:	2f534f54 	.word	0x2f534f54
  402d60:	656d6974 	.word	0x656d6974
  402d64:	632e7372 	.word	0x632e7372
  402d68:	00000000 	.word	0x00000000
  402d6c:	20726d54 	.word	0x20726d54
  402d70:	00637653 	.word	0x00637653
  402d74:	3144454c 	.word	0x3144454c
  402d78:	72616548 	.word	0x72616548
  402d7c:	61656274 	.word	0x61656274
  402d80:	00000074 	.word	0x00000074
  402d84:	3244454c 	.word	0x3244454c
  402d88:	72616548 	.word	0x72616548
  402d8c:	61656274 	.word	0x61656274
  402d90:	00000074 	.word	0x00000074
  402d94:	3344454c 	.word	0x3344454c
  402d98:	72616548 	.word	0x72616548
  402d9c:	61656274 	.word	0x61656274
  402da0:	00000074 	.word	0x00000074
  402da4:	6b736154 	.word	0x6b736154
  402da8:	72616548 	.word	0x72616548
  402dac:	61656274 	.word	0x61656274
  402db0:	00000074 	.word	0x00000074
  402db4:	6b736154 	.word	0x6b736154
  402db8:	74737953 	.word	0x74737953
  402dbc:	6f436d65 	.word	0x6f436d65
  402dc0:	6f72746e 	.word	0x6f72746e
  402dc4:	0000006c 	.word	0x0000006c
  402dc8:	732f2e2e 	.word	0x732f2e2e
  402dcc:	6d2f6372 	.word	0x6d2f6372
  402dd0:	2e6e6961 	.word	0x2e6e6961
  402dd4:	00000063 	.word	0x00000063

00402dd8 <_global_impure_ptr>:
  402dd8:	20000020                                 .. 

00402ddc <_init>:
  402ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402dde:	bf00      	nop
  402de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402de2:	bc08      	pop	{r3}
  402de4:	469e      	mov	lr, r3
  402de6:	4770      	bx	lr

00402de8 <__init_array_start>:
  402de8:	00402b95 	.word	0x00402b95

00402dec <__frame_dummy_init_array_entry>:
  402dec:	0040011d                                ..@.

00402df0 <_fini>:
  402df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402df2:	bf00      	nop
  402df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402df6:	bc08      	pop	{r3}
  402df8:	469e      	mov	lr, r3
  402dfa:	4770      	bx	lr

00402dfc <__fini_array_start>:
  402dfc:	004000f9 	.word	0x004000f9
